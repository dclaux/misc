(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("adaptivecards"));
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ACExtras"] = factory(require("adaptivecards"));
	else
		root["ACExtras"] = factory(root["AdaptiveCards"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_adaptivecards__) {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/adaptive-expressions/lib/browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/adaptive-expressions/lib/browser.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

!function(t){if(true)module.exports=t();else {}}((function(){return function t(e,r,n){function i(s,a){if(!r[s]){if(!e[s]){var u=undefined;if(!a&&u)return require(s,!0);if(o)return o(s,!0);var l=new Error("Cannot find module '"+s+"'");throw l.code="MODULE_NOT_FOUND",l}var c=r[s]={exports:{}};e[s][0].call(c.exports,(function(t){return i(e[s][1][t]||t)}),c,c.exports,t,e,r,n)}return r[s].exports}for(var o=undefined,s=0;s<n.length;s++)i(n[s]);return i}({1:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(181)),n(t(167)),n(t(179)),n(t(180)),n(t(192)),n(t(193)),n(t(214)),n(t(199)),n(t(166)),n(t(204)),n(t(209)),n(t(201)),n(t(212)),n(t(178)),n(t(194)),n(t(172)),n(t(186));var i=t(68);r.NumberTransformEvaluator=i.NumberTransformEvaluator,r.NumericEvaluator=i.NumericEvaluator,r.StringTransformEvaluator=i.StringTransformEvaluator,r.ComparisonEvaluator=i.ComparisonEvaluator,r.MultivariateNumericEvaluator=i.MultivariateNumericEvaluator,r.TimeTransformEvaluator=i.TimeTransformEvaluator,n(t(196)),n(t(213)),n(t(200)),n(t(216))},{166:166,167:167,172:172,178:178,179:179,180:180,181:181,186:186,192:192,193:193,194:194,196:196,199:199,200:200,201:201,204:204,209:209,212:212,213:213,214:214,216:216,68:68}],192:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{}n.Add="+",n.Subtract="-",n.Multiply="*",n.Divide="/",n.Min="min",n.Max="max",n.Power="^",n.Mod="%",n.Average="average",n.Sum="sum",n.Count="count",n.Range="range",n.Floor="floor",n.Ceiling="ceiling",n.Round="round",n.Abs="abs",n.Sqrt="sqrt",n.LessThan="<",n.LessThanOrEqual="<=",n.Equal="==",n.NotEqual="!=",n.GreaterThan=">",n.GreaterThanOrEqual=">=",n.Exists="exists",n.Contains="contains",n.Empty="empty",n.And="&&",n.Or="||",n.Not="!",n.Concat="concat",n.Length="length",n.Replace="replace",n.ReplaceIgnoreCase="replaceIgnoreCase",n.Split="split",n.Substring="substring",n.ToLower="toLower",n.ToUpper="toUpper",n.Trim="trim",n.Join="join",n.EndsWith="endsWith",n.StartsWith="startsWith",n.CountWord="countWord",n.AddOrdinal="addOrdinal",n.NewGuid="newGuid",n.IndexOf="indexOf",n.LastIndexOf="lastIndexOf",n.EOL="EOL",n.SentenceCase="sentenceCase",n.TitleCase="titleCase",n.AddDays="addDays",n.AddHours="addHours",n.AddMinutes="addMinutes",n.AddSeconds="addSeconds",n.DayOfMonth="dayOfMonth",n.DayOfWeek="dayOfWeek",n.DayOfYear="dayOfYear",n.Month="month",n.Date="date",n.Year="year",n.UtcNow="utcNow",n.FormatDateTime="formatDateTime",n.FormatEpoch="formatEpoch",n.FormatTicks="formatTicks",n.SubtractFromTime="subtractFromTime",n.DateReadBack="dateReadBack",n.GetTimeOfDay="getTimeOfDay",n.GetFutureTime="getFutureTime",n.GetPastTime="getPastTime",n.ConvertFromUTC="convertFromUTC",n.ConvertToUTC="convertToUTC",n.AddToTime="addToTime",n.StartOfDay="startOfDay",n.StartOfHour="startOfHour",n.StartOfMonth="startOfMonth",n.Ticks="ticks",n.TicksToDays="ticksToDays",n.TicksToHours="ticksToHours",n.TicksToMinutes="ticksToMinutes",n.DateTimeDiff="dateTimeDiff",n.IsDefinite="isDefinite",n.IsTime="isTime",n.IsDuration="isDuration",n.IsDate="isDate",n.IsTimeRange="isTimeRange",n.IsDateRange="isDateRange",n.IsPresent="isPresent",n.GetNextViableDate="getNextViableDate",n.GetPreviousViableDate="getPreviousViableDate",n.GetNextViableTime="getNextViableTime",n.GetPreviousViableTime="getPreviousViableTime",n.TimexResolve="resolve",n.Float="float",n.Int="int",n.String="string",n.Bool="bool",n.Binary="binary",n.Base64="base64",n.Base64ToBinary="base64ToBinary",n.Base64ToString="base64ToString",n.DataUri="dataUri",n.DataUriToBinary="dataUriToBinary",n.DataUriToString="dataUriToString",n.UriComponent="uriComponent",n.UriComponentToString="uriComponentToString",n.FormatNumber="formatNumber",n.JsonStringify="jsonStringify",n.Accessor="Accessor",n.Element="Element",n.CreateArray="createArray",n.First="first",n.Last="last",n.Foreach="foreach",n.Select="select",n.Where="where",n.Union="union",n.Intersection="intersection",n.Skip="skip",n.Take="take",n.FilterNotEqual="filterNotEqual",n.SubArray="subArray",n.SortBy="sortBy",n.SortByDescending="sortByDescending",n.IndicesAndValues="indicesAndValues",n.Flatten="flatten",n.Unique="unique",n.Reverse="reverse",n.Any="any",n.All="all",n.Constant="Constant",n.Lambda="Lambda",n.If="if",n.Rand="rand",n.Json="json",n.AddProperty="addProperty",n.RemoveProperty="removeProperty",n.SetProperty="setProperty",n.GetProperty="getProperty",n.Coalesce="coalesce",n.JPath="jPath",n.SetPathToValue="setPathToValue",n.Merge="merge",n.XML="xml",n.XPath="xPath",n.UriHost="uriHost",n.UriPath="uriPath",n.UriPathAndQuery="uriPathAndQuery",n.UriPort="uriPort",n.UriQuery="uriQuery",n.UriScheme="uriScheme",n.IsMatch="isMatch",n.IsString="isString",n.IsInteger="isInteger",n.IsArray="isArray",n.IsObject="isObject",n.IsFloat="isFloat",n.IsDateTime="isDateTime",n.IsBoolean="isBoolean",n.StringOrValue="stringOrValue",n.Ignore="ignore",n.Optional="optional",r.ExpressionType=n},{}],193:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Extensions=class{static isMemoryInterface(t){return void 0!==t&&"object"==typeof t&&"getValue"in t&&"setValue"in t&&"version"in t&&"function"==typeof t.getValue&&"function"==typeof t.setValue&&"function"==typeof t.version}static randomNext(t,e,r){const n=t.getValue("Conversation.TestOptions.randomValue");return void 0!==n?e+n%(r-e):Math.floor(e+Math.random()*(r-e))}}},{}],214:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{static ianaToWindows(t){return this.loadData(),this.ianaToWindowsMap.has(t)?this.ianaToWindowsMap.get(t):t}static windowsToIana(t){return this.loadData(),this.windowsToIanaMap.has("001|"+t)?this.windowsToIanaMap.get("001|"+t):t}static verifyTimeZoneStr(t){return this.loadData(),this.validTimezonStr.includes(t)}static loadData(){const t=this.mappingString.split(this.seperator);for(const e of t){const t=e.split(","),r=t[0],n=t[1],i=t[2].split(" ");for(const e of i)this.ianaToWindowsMap.has(e)||this.ianaToWindowsMap.set(e,r),this.validTimezonStr.includes(e)||this.validTimezonStr.push(e);this.windowsToIanaMap.has(`${n}|${r}`)||this.windowsToIanaMap.set(`${n}|${r}`,i[0]),this.validTimezonStr.includes(r)||this.validTimezonStr.push(r)}}}n.ianaToWindowsMap=new Map,n.windowsToIanaMap=new Map,n.validTimezonStr=[],n.seperator="    ",n.mappingString="AUS Central Standard Time,001,Australia/Darwin    AUS Central Standard Time,AU,Australia/Darwin    AUS Eastern Standard Time,001,Australia/Sydney    AUS Eastern Standard Time,AU,Australia/Sydney Australia/Melbourne    Afghanistan Standard Time,001,Asia/Kabul    Afghanistan Standard Time,AF,Asia/Kabul    Alaskan Standard Time,001,America/Anchorage    Alaskan Standard Time,US,America/Anchorage America/Juneau America/Metlakatla America/Nome America/Sitka America/Yakutat    Aleutian Standard Time,001,America/Adak    Aleutian Standard Time,US,America/Adak    Altai Standard Time,001,Asia/Barnaul    Altai Standard Time,RU,Asia/Barnaul    Arab Standard Time,001,Asia/Riyadh    Arab Standard Time,BH,Asia/Qatar    Arab Standard Time,KW,Asia/Riyadh    Arab Standard Time,QA,Asia/Qatar    Arab Standard Time,SA,Asia/Riyadh    Arab Standard Time,YE,Asia/Riyadh    Arabian Standard Time,001,Asia/Dubai    Arabian Standard Time,AE,Asia/Dubai    Arabian Standard Time,OM,Asia/Dubai    Arabian Standard Time,ZZ,Etc/GMT-4    Arabic Standard Time,001,Asia/Baghdad    Arabic Standard Time,IQ,Asia/Baghdad    Argentina Standard Time,001,America/Argentina/Buenos_Aires    Argentina Standard Time,AR,America/Argentina/Buenos_Aires America/Argentina/La_Rioja America/Argentina/Rio_Gallegos America/Argentina/Salta America/Argentina/San_Juan America/Argentina/San_Luis America/Argentina/Tucuman America/Argentina/Ushuaia America/Argentina/Catamarca America/Argentina/Cordoba America/Argentina/Jujuy America/Argentina/Mendoza    Astrakhan Standard Time,001,Europe/Astrakhan    Astrakhan Standard Time,RU,Europe/Astrakhan Europe/Ulyanovsk    Atlantic Standard Time,001,America/Halifax    Atlantic Standard Time,BM,Atlantic/Bermuda    Atlantic Standard Time,CA,America/Halifax America/Glace_Bay America/Goose_Bay America/Moncton    Atlantic Standard Time,GL,America/Thule    Aus Central W. Standard Time,001,Australia/Eucla    Aus Central W. Standard Time,AU,Australia/Eucla    Azerbaijan Standard Time,001,Asia/Baku    Azerbaijan Standard Time,AZ,Asia/Baku    Azores Standard Time,001,Atlantic/Azores    Azores Standard Time,GL,America/Scoresbysund    Azores Standard Time,PT,Atlantic/Azores    Bahia Standard Time,001,America/Bahia    Bahia Standard Time,BR,America/Bahia    Bangladesh Standard Time,001,Asia/Dhaka    Bangladesh Standard Time,BD,Asia/Dhaka    Bangladesh Standard Time,BT,Asia/Thimphu    Belarus Standard Time,001,Europe/Minsk    Belarus Standard Time,BY,Europe/Minsk    Bougainville Standard Time,001,Pacific/Bougainville    Bougainville Standard Time,PG,Pacific/Bougainville    Canada Central Standard Time,001,America/Regina    Canada Central Standard Time,CA,America/Regina America/Swift_Current    Cape Verde Standard Time,001,Atlantic/Cape_Verde    Cape Verde Standard Time,CV,Atlantic/Cape_Verde    Cape Verde Standard Time,ZZ,Etc/GMT+1    Caucasus Standard Time,001,Asia/Yerevan    Caucasus Standard Time,AM,Asia/Yerevan    Cen. Australia Standard Time,001,Australia/Adelaide    Cen. Australia Standard Time,AU,Australia/Adelaide Australia/Broken_Hill    Central America Standard Time,001,America/Guatemala    Central America Standard Time,BZ,America/Belize    Central America Standard Time,CR,America/Costa_Rica    Central America Standard Time,EC,Pacific/Galapagos    Central America Standard Time,GT,America/Guatemala    Central America Standard Time,HN,America/Tegucigalpa    Central America Standard Time,NI,America/Managua    Central America Standard Time,SV,America/El_Salvador    Central America Standard Time,ZZ,Etc/GMT+6    Central Asia Standard Time,001,Asia/Almaty    Central Asia Standard Time,AQ,Antarctica/Vostok    Central Asia Standard Time,CN,Asia/Urumqi    Central Asia Standard Time,DG,Indian/Chagos    Central Asia Standard Time,IO,Indian/Chagos    Central Asia Standard Time,KG,Asia/Bishkek    Central Asia Standard Time,KZ,Asia/Almaty Asia/Qyzylorda    Central Asia Standard Time,ZZ,Etc/GMT-6    Central Brazilian Standard Time,001,America/Cuiaba    Central Brazilian Standard Time,BR,America/Cuiaba America/Campo_Grande    Central Europe Standard Time,001,Europe/Budapest    Central Europe Standard Time,AL,Europe/Tirane    Central Europe Standard Time,CZ,Europe/Prague    Central Europe Standard Time,HU,Europe/Budapest    Central Europe Standard Time,ME,Europe/Belgrade    Central Europe Standard Time,RS,Europe/Belgrade    Central Europe Standard Time,SI,Europe/Belgrade    Central Europe Standard Time,SK,Europe/Prague    Central Europe Standard Time,XK,Europe/Belgrade    Central European Standard Time,001,Europe/Warsaw    Central European Standard Time,BA,Europe/Belgrade    Central European Standard Time,HR,Europe/Belgrade    Central European Standard Time,MK,Europe/Belgrade    Central European Standard Time,PL,Europe/Warsaw    Central Pacific Standard Time,001,Pacific/Guadalcanal    Central Pacific Standard Time,AU,Antarctica/Macquarie    Central Pacific Standard Time,FM,Pacific/Pohnpei Pacific/Kosrae    Central Pacific Standard Time,NC,Pacific/Noumea    Central Pacific Standard Time,SB,Pacific/Guadalcanal    Central Pacific Standard Time,VU,Pacific/Efate    Central Pacific Standard Time,ZZ,Etc/GMT-11    Central Standard Time (Mexico),001,America/Mexico_City    Central Standard Time (Mexico),MX,America/Mexico_City America/Bahia_Banderas America/Merida America/Monterrey    Central Standard Time,001,America/Chicago    Central Standard Time,CA,America/Winnipeg America/Rainy_River America/Rankin_Inlet America/Resolute    Central Standard Time,MX,America/Matamoros    Central Standard Time,US,America/Chicago America/Indiana/Knox America/Indiana/Tell_City America/Menominee America/North_Dakota/Beulah America/North_Dakota/Center America/North_Dakota/New_Salem    Central Standard Time,ZZ,CST6CDT    Chatham Islands Standard Time,001,Pacific/Chatham    Chatham Islands Standard Time,NZ,Pacific/Chatham    China Standard Time,001,Asia/Shanghai    China Standard Time,CN,Asia/Shanghai    China Standard Time,HK,Asia/Hong_Kong    China Standard Time,MO,Asia/Macau    Cuba Standard Time,001,America/Havana    Cuba Standard Time,CU,America/Havana    Dateline Standard Time,001,Etc/GMT+12    Dateline Standard Time,ZZ,Etc/GMT+12    E. Africa Standard Time,001,Africa/Nairobi    E. Africa Standard Time,AQ,Antarctica/Syowa    E. Africa Standard Time,DJ,Africa/Nairobi    E. Africa Standard Time,ER,Africa/Nairobi    E. Africa Standard Time,ET,Africa/Nairobi    E. Africa Standard Time,KE,Africa/Nairobi    E. Africa Standard Time,KM,Africa/Nairobi    E. Africa Standard Time,MG,Africa/Nairobi    E. Africa Standard Time,SO,Africa/Nairobi    E. Africa Standard Time,SS,Africa/Juba    E. Africa Standard Time,TZ,Africa/Nairobi    E. Africa Standard Time,UG,Africa/Nairobi    E. Africa Standard Time,YT,Africa/Nairobi    E. Africa Standard Time,ZZ,Etc/GMT-3    E. Australia Standard Time,001,Australia/Brisbane    E. Australia Standard Time,AU,Australia/Brisbane Australia/Lindeman    E. Europe Standard Time,001,Europe/Chisinau    E. Europe Standard Time,MD,Europe/Chisinau    E. South America Standard Time,001,America/Sao_Paulo    E. South America Standard Time,BR,America/Sao_Paulo    Easter Island Standard Time,001,Pacific/Easter    Easter Island Standard Time,CL,Pacific/Easter    Eastern Standard Time (Mexico),001,America/Cancun    Eastern Standard Time (Mexico),MX,America/Cancun    Eastern Standard Time,001,America/New_York    Eastern Standard Time,BS,America/Nassau    Eastern Standard Time,CA,America/Toronto America/Iqaluit America/Nipigon America/Pangnirtung America/Thunder_Bay    Eastern Standard Time,US,America/New_York America/Detroit America/Indiana/Petersburg America/Indiana/Vincennes America/Indiana/Winamac America/Kentucky/Monticello America/Kentucky/Louisville    Eastern Standard Time,ZZ,EST5EDT    Egypt Standard Time,001,Africa/Cairo    Egypt Standard Time,EG,Africa/Cairo    Ekaterinburg Standard Time,001,Asia/Yekaterinburg    Ekaterinburg Standard Time,RU,Asia/Yekaterinburg    FLE Standard Time,001,Europe/Kiev    FLE Standard Time,AX,Europe/Helsinki    FLE Standard Time,BG,Europe/Sofia    FLE Standard Time,EE,Europe/Tallinn    FLE Standard Time,FI,Europe/Helsinki    FLE Standard Time,LT,Europe/Vilnius    FLE Standard Time,LV,Europe/Riga    FLE Standard Time,UA,Europe/Kiev Europe/Uzhgorod Europe/Zaporozhye    Fiji Standard Time,001,Pacific/Fiji    Fiji Standard Time,FJ,Pacific/Fiji    GMT Standard Time,001,Europe/London    GMT Standard Time,ES,Atlantic/Canary    GMT Standard Time,FO,Atlantic/Faroe    GMT Standard Time,GB,Europe/London    GMT Standard Time,GG,Europe/London    GMT Standard Time,IC,Atlantic/Canary    GMT Standard Time,IE,Europe/Dublin    GMT Standard Time,IM,Europe/London    GMT Standard Time,JE,Europe/London    GMT Standard Time,PT,Europe/Lisbon Atlantic/Madeira    GTB Standard Time,001,Europe/Bucharest    GTB Standard Time,CY,Asia/Nicosia Asia/Famagusta    GTB Standard Time,GR,Europe/Athens    GTB Standard Time,RO,Europe/Bucharest    Georgian Standard Time,001,Asia/Tbilisi    Georgian Standard Time,GE,Asia/Tbilisi    Greenland Standard Time,001,America/Godthab    Greenland Standard Time,GL,America/Godthab    Greenwich Standard Time,001,Atlantic/Reykjavik    Greenwich Standard Time,AC,Atlantic/St_Helena    Greenwich Standard Time,BF,Africa/Abidjan    Greenwich Standard Time,CI,Africa/Abidjan    Greenwich Standard Time,GH,Africa/Accra    Greenwich Standard Time,GM,Africa/Abidjan    Greenwich Standard Time,GN,Africa/Abidjan    Greenwich Standard Time,GW,Africa/Bissau    Greenwich Standard Time,IS,Atlantic/Reykjavik    Greenwich Standard Time,LR,Africa/Monrovia    Greenwich Standard Time,ML,Africa/Abidjan    Greenwich Standard Time,MR,Africa/Abidjan    Greenwich Standard Time,SH,Africa/Abidjan    Greenwich Standard Time,SL,Africa/Abidjan    Greenwich Standard Time,SN,Africa/Abidjan    Greenwich Standard Time,TA,Atlantic/St_Helena    Greenwich Standard Time,TG,Africa/Abidjan    Haiti Standard Time,001,America/Port-au-Prince    Haiti Standard Time,HT,America/Port-au-Prince    Hawaiian Standard Time,001,Pacific/Honolulu    Hawaiian Standard Time,CK,Pacific/Rarotonga    Hawaiian Standard Time,PF,Pacific/Tahiti    Hawaiian Standard Time,UM,Pacific/Honolulu    Hawaiian Standard Time,US,Pacific/Honolulu    Hawaiian Standard Time,ZZ,Etc/GMT+10    India Standard Time,001,Asia/Kolkata    India Standard Time,IN,Asia/Kolkata    Iran Standard Time,001,Asia/Tehran    Iran Standard Time,IR,Asia/Tehran    Israel Standard Time,001,Asia/Jerusalem    Israel Standard Time,IL,Asia/Jerusalem    Jordan Standard Time,001,Asia/Amman    Jordan Standard Time,JO,Asia/Amman    Kaliningrad Standard Time,001,Europe/Kaliningrad    Kaliningrad Standard Time,RU,Europe/Kaliningrad    Kamchatka Standard Time,001,Asia/Kamchatka    Korea Standard Time,001,Asia/Seoul    Korea Standard Time,KR,Asia/Seoul    Libya Standard Time,001,Africa/Tripoli    Libya Standard Time,LY,Africa/Tripoli    Line Islands Standard Time,001,Pacific/Kiritimati    Line Islands Standard Time,KI,Pacific/Kiritimati    Line Islands Standard Time,ZZ,Etc/GMT-14    Lord Howe Standard Time,001,Australia/Lord_Howe    Lord Howe Standard Time,AU,Australia/Lord_Howe    Magadan Standard Time,001,Asia/Magadan    Magadan Standard Time,RU,Asia/Magadan    Magallanes Standard Time,001,America/Punta_Arenas    Magallanes Standard Time,AQ,Antarctica/Palmer    Magallanes Standard Time,CL,America/Punta_Arenas    Marquesas Standard Time,001,Pacific/Marquesas    Marquesas Standard Time,PF,Pacific/Marquesas    Mauritius Standard Time,001,Indian/Mauritius    Mauritius Standard Time,MU,Indian/Mauritius    Mauritius Standard Time,RE,Indian/Reunion    Mauritius Standard Time,SC,Indian/Mahe    Mid-Atlantic Standard Time,001,Etc/GMT+2    Middle East Standard Time,001,Asia/Beirut    Middle East Standard Time,LB,Asia/Beirut    Montevideo Standard Time,001,America/Montevideo    Montevideo Standard Time,UY,America/Montevideo    Morocco Standard Time,001,Africa/Casablanca    Morocco Standard Time,EH,Africa/El_Aaiun    Morocco Standard Time,MA,Africa/Casablanca    Mountain Standard Time (Mexico),001,America/Chihuahua    Mountain Standard Time (Mexico),MX,America/Chihuahua America/Mazatlan    Mountain Standard Time,001,America/Denver    Mountain Standard Time,CA,America/Edmonton America/Cambridge_Bay America/Inuvik America/Yellowknife    Mountain Standard Time,MX,America/Ojinaga    Mountain Standard Time,US,America/Denver America/Boise    Mountain Standard Time,ZZ,MST7MDT    Myanmar Standard Time,001,Asia/Yangon    Myanmar Standard Time,CC,Indian/Cocos    Myanmar Standard Time,MM,Asia/Yangon    N. Central Asia Standard Time,001,Asia/Novosibirsk    N. Central Asia Standard Time,RU,Asia/Novosibirsk    Namibia Standard Time,001,Africa/Windhoek    Namibia Standard Time,NA,Africa/Windhoek    Nepal Standard Time,001,Asia/Kathmandu    Nepal Standard Time,NP,Asia/Kathmandu    New Zealand Standard Time,001,Pacific/Auckland    New Zealand Standard Time,AQ,Pacific/Auckland    New Zealand Standard Time,NZ,Pacific/Auckland    Newfoundland Standard Time,001,America/St_Johns    Newfoundland Standard Time,CA,America/St_Johns    Norfolk Standard Time,001,Pacific/Norfolk    Norfolk Standard Time,NF,Pacific/Norfolk    North Asia East Standard Time,001,Asia/Irkutsk    North Asia East Standard Time,RU,Asia/Irkutsk    North Asia Standard Time,001,Asia/Krasnoyarsk    North Asia Standard Time,RU,Asia/Krasnoyarsk Asia/Novokuznetsk    North Korea Standard Time,001,Asia/Pyongyang    North Korea Standard Time,KP,Asia/Pyongyang    Omsk Standard Time,001,Asia/Omsk    Omsk Standard Time,RU,Asia/Omsk    Pacific SA Standard Time,001,America/Santiago    Pacific SA Standard Time,CL,America/Santiago    Pacific Standard Time (Mexico),001,America/Tijuana    Pacific Standard Time (Mexico),MX,America/Tijuana    Pacific Standard Time,001,America/Los_Angeles    Pacific Standard Time,CA,America/Vancouver America/Dawson America/Whitehorse    Pacific Standard Time,US,America/Los_Angeles    Pacific Standard Time,ZZ,PST8PDT    Pakistan Standard Time,001,Asia/Karachi    Pakistan Standard Time,PK,Asia/Karachi    Paraguay Standard Time,001,America/Asuncion    Paraguay Standard Time,PY,America/Asuncion    Romance Standard Time,001,Europe/Paris    Romance Standard Time,BE,Europe/Brussels    Romance Standard Time,DK,Europe/Copenhagen    Romance Standard Time,EA,Africa/Ceuta    Romance Standard Time,ES,Europe/Madrid Africa/Ceuta    Romance Standard Time,FR,Europe/Paris    Russia Time Zone 10,001,Asia/Srednekolymsk    Russia Time Zone 10,RU,Asia/Srednekolymsk    Russia Time Zone 11,001,Asia/Kamchatka    Russia Time Zone 11,RU,Asia/Kamchatka Asia/Anadyr    Russia Time Zone 3,001,Europe/Samara    Russia Time Zone 3,RU,Europe/Samara    Russian Standard Time,001,Europe/Moscow    Russian Standard Time,RU,Europe/Moscow Europe/Kirov Europe/Volgograd    Russian Standard Time,UA,Europe/Simferopol    SA Eastern Standard Time,001,America/Cayenne    SA Eastern Standard Time,AQ,Antarctica/Rothera    SA Eastern Standard Time,BR,America/Fortaleza America/Belem America/Maceio America/Recife America/Santarem    SA Eastern Standard Time,FK,Atlantic/Stanley    SA Eastern Standard Time,GF,America/Cayenne    SA Eastern Standard Time,SR,America/Paramaribo    SA Eastern Standard Time,ZZ,Etc/GMT+3    SA Pacific Standard Time,001,America/Bogota    SA Pacific Standard Time,BR,America/Rio_Branco America/Eirunepe    SA Pacific Standard Time,CA,America/Atikokan    SA Pacific Standard Time,CO,America/Bogota    SA Pacific Standard Time,EC,America/Guayaquil    SA Pacific Standard Time,JM,America/Jamaica    SA Pacific Standard Time,KY,America/Panama    SA Pacific Standard Time,PA,America/Panama    SA Pacific Standard Time,PE,America/Lima    SA Pacific Standard Time,ZZ,Etc/GMT+5    SA Western Standard Time,001,America/La_Paz    SA Western Standard Time,AG,America/Port_of_Spain    SA Western Standard Time,AI,America/Port_of_Spain    SA Western Standard Time,AW,America/Curacao    SA Western Standard Time,BB,America/Barbados    SA Western Standard Time,BL,America/Port_of_Spain    SA Western Standard Time,BO,America/La_Paz    SA Western Standard Time,BQ,America/Curacao    SA Western Standard Time,BR,America/Manaus America/Boa_Vista America/Porto_Velho    SA Western Standard Time,CA,America/Blanc-Sablon    SA Western Standard Time,CW,America/Curacao    SA Western Standard Time,DM,America/Port_of_Spain    SA Western Standard Time,DO,America/Santo_Domingo    SA Western Standard Time,GD,America/Port_of_Spain    SA Western Standard Time,GP,America/Port_of_Spain    SA Western Standard Time,GY,America/Guyana    SA Western Standard Time,KN,America/Port_of_Spain    SA Western Standard Time,LC,America/Port_of_Spain    SA Western Standard Time,MF,America/Port_of_Spain    SA Western Standard Time,MQ,America/Martinique    SA Western Standard Time,MS,America/Port_of_Spain    SA Western Standard Time,PR,America/Puerto_Rico    SA Western Standard Time,SX,America/Curacao    SA Western Standard Time,TT,America/Port_of_Spain    SA Western Standard Time,VC,America/Port_of_Spain    SA Western Standard Time,VG,America/Port_of_Spain    SA Western Standard Time,VI,America/Port_of_Spain    SA Western Standard Time,ZZ,Etc/GMT+4    SE Asia Standard Time,001,Asia/Bangkok    SE Asia Standard Time,AQ,Antarctica/Davis    SE Asia Standard Time,CX,Indian/Christmas    SE Asia Standard Time,ID,Asia/Jakarta Asia/Pontianak    SE Asia Standard Time,KH,Asia/Bangkok    SE Asia Standard Time,LA,Asia/Bangkok    SE Asia Standard Time,TH,Asia/Bangkok    SE Asia Standard Time,VN,Asia/Ho_Chi_Minh    SE Asia Standard Time,ZZ,Etc/GMT-7    Saint Pierre Standard Time,001,America/Miquelon    Saint Pierre Standard Time,PM,America/Miquelon    Sakhalin Standard Time,001,Asia/Sakhalin    Sakhalin Standard Time,RU,Asia/Sakhalin    Samoa Standard Time,001,Pacific/Apia    Samoa Standard Time,WS,Pacific/Apia    Sao Tome Standard Time,001,Africa/Sao_Tome    Sao Tome Standard Time,ST,Africa/Sao_Tome    Saratov Standard Time,001,Europe/Saratov    Saratov Standard Time,RU,Europe/Saratov    Singapore Standard Time,001,Asia/Singapore    Singapore Standard Time,BN,Asia/Brunei    Singapore Standard Time,ID,Asia/Makassar    Singapore Standard Time,MY,Asia/Kuala_Lumpur Asia/Kuching    Singapore Standard Time,PH,Asia/Manila    Singapore Standard Time,SG,Asia/Singapore    Singapore Standard Time,ZZ,Etc/GMT-8    South Africa Standard Time,001,Africa/Johannesburg    South Africa Standard Time,BI,Africa/Maputo    South Africa Standard Time,BW,Africa/Maputo    South Africa Standard Time,CD,Africa/Maputo    South Africa Standard Time,LS,Africa/Johannesburg    South Africa Standard Time,MW,Africa/Maputo    South Africa Standard Time,MZ,Africa/Maputo    South Africa Standard Time,RW,Africa/Maputo    South Africa Standard Time,SZ,Africa/Johannesburg    South Africa Standard Time,ZA,Africa/Johannesburg    South Africa Standard Time,ZM,Africa/Maputo    South Africa Standard Time,ZW,Africa/Maputo    South Africa Standard Time,ZZ,Etc/GMT-2    Sri Lanka Standard Time,001,Asia/Colombo    Sri Lanka Standard Time,LK,Asia/Colombo    Sudan Standard Time,001,Africa/Khartoum    Sudan Standard Time,SD,Africa/Khartoum    Syria Standard Time,001,Asia/Damascus    Syria Standard Time,SY,Asia/Damascus    Taipei Standard Time,001,Asia/Taipei    Taipei Standard Time,TW,Asia/Taipei    Tasmania Standard Time,001,Australia/Hobart    Tasmania Standard Time,AU,Australia/Hobart Australia/Currie    Tocantins Standard Time,001,America/Araguaina    Tocantins Standard Time,BR,America/Araguaina    Tokyo Standard Time,001,Asia/Tokyo    Tokyo Standard Time,ID,Asia/Jayapura    Tokyo Standard Time,JP,Asia/Tokyo    Tokyo Standard Time,PW,Pacific/Palau    Tokyo Standard Time,TL,Asia/Dili    Tokyo Standard Time,ZZ,Etc/GMT-9    Tomsk Standard Time,001,Asia/Tomsk    Tomsk Standard Time,RU,Asia/Tomsk    Tonga Standard Time,001,Pacific/Tongatapu    Tonga Standard Time,TO,Pacific/Tongatapu    Transbaikal Standard Time,001,Asia/Chita    Transbaikal Standard Time,RU,Asia/Chita    Turkey Standard Time,001,Europe/Istanbul    Turkey Standard Time,TR,Europe/Istanbul    Turks And Caicos Standard Time,001,America/Grand_Turk    Turks And Caicos Standard Time,TC,America/Grand_Turk    US Eastern Standard Time,001,America/Indiana/Indianapolis    US Eastern Standard Time,US,America/Indiana/Indianapolis America/Indiana/Marengo America/Indiana/Vevay    US Mountain Standard Time,001,America/Phoenix    US Mountain Standard Time,CA,America/Dawson_Creek America/Creston America/Fort_Nelson    US Mountain Standard Time,MX,America/Hermosillo    US Mountain Standard Time,US,America/Phoenix    US Mountain Standard Time,ZZ,Etc/GMT+7    UTC+12,001,Etc/GMT-12    UTC+12,KI,Pacific/Tarawa    UTC+12,MH,Pacific/Majuro Pacific/Kwajalein    UTC+12,NR,Pacific/Nauru    UTC+12,TV,Pacific/Funafuti    UTC+12,UM,Pacific/Wake    UTC+12,WF,Pacific/Wallis    UTC+12,ZZ,Etc/GMT-12    UTC+13,001,Etc/GMT-13    UTC+13,KI,Pacific/Enderbury    UTC+13,TK,Pacific/Fakaofo    UTC+13,ZZ,Etc/GMT-13    UTC,001,Etc/UTC    UTC,GL,America/Danmarkshavn    UTC,ZZ,Etc/UTC    UTC-02,001,Etc/GMT+2    UTC-02,BR,America/Noronha    UTC-02,GS,Atlantic/South_Georgia    UTC-02,ZZ,Etc/GMT+2    UTC-08,001,Etc/GMT+8    UTC-08,PN,Pacific/Pitcairn    UTC-08,ZZ,Etc/GMT+8    UTC-09,001,Etc/GMT+9    UTC-09,PF,Pacific/Gambier    UTC-09,ZZ,Etc/GMT+9    UTC-11,001,Etc/GMT+11    UTC-11,AS,Pacific/Pago_Pago    UTC-11,NU,Pacific/Niue    UTC-11,UM,Pacific/Pago_Pago    UTC-11,ZZ,Etc/GMT+11    Ulaanbaatar Standard Time,001,Asia/Ulaanbaatar    Ulaanbaatar Standard Time,MN,Asia/Ulaanbaatar Asia/Choibalsan    Venezuela Standard Time,001,America/Caracas    Venezuela Standard Time,VE,America/Caracas    Vladivostok Standard Time,001,Asia/Vladivostok    Vladivostok Standard Time,RU,Asia/Vladivostok Asia/Ust-Nera    W. Australia Standard Time,001,Australia/Perth    W. Australia Standard Time,AQ,Antarctica/Casey    W. Australia Standard Time,AU,Australia/Perth    W. Central Africa Standard Time,001,Africa/Lagos    W. Central Africa Standard Time,AO,Africa/Lagos    W. Central Africa Standard Time,BJ,Africa/Lagos    W. Central Africa Standard Time,CD,Africa/Lagos    W. Central Africa Standard Time,CF,Africa/Lagos    W. Central Africa Standard Time,CG,Africa/Lagos    W. Central Africa Standard Time,CM,Africa/Lagos    W. Central Africa Standard Time,DZ,Africa/Algiers    W. Central Africa Standard Time,GA,Africa/Lagos    W. Central Africa Standard Time,GQ,Africa/Lagos    W. Central Africa Standard Time,NE,Africa/Lagos    W. Central Africa Standard Time,NG,Africa/Lagos    W. Central Africa Standard Time,TD,Africa/Ndjamena    W. Central Africa Standard Time,TN,Africa/Tunis    W. Central Africa Standard Time,ZZ,Etc/GMT-1    W. Europe Standard Time,001,Europe/Berlin    W. Europe Standard Time,AD,Europe/Andorra    W. Europe Standard Time,AT,Europe/Vienna    W. Europe Standard Time,CH,Europe/Zurich    W. Europe Standard Time,DE,Europe/Berlin Europe/Zurich    W. Europe Standard Time,GI,Europe/Gibraltar    W. Europe Standard Time,IT,Europe/Rome    W. Europe Standard Time,LI,Europe/Zurich    W. Europe Standard Time,LU,Europe/Luxembourg    W. Europe Standard Time,MC,Europe/Monaco    W. Europe Standard Time,MT,Europe/Malta    W. Europe Standard Time,NL,Europe/Amsterdam    W. Europe Standard Time,NO,Europe/Oslo    W. Europe Standard Time,SE,Europe/Stockholm    W. Europe Standard Time,SJ,Europe/Oslo    W. Europe Standard Time,SM,Europe/Rome    W. Europe Standard Time,VA,Europe/Rome    W. Mongolia Standard Time,001,Asia/Hovd    W. Mongolia Standard Time,MN,Asia/Hovd    West Asia Standard Time,001,Asia/Tashkent    West Asia Standard Time,AQ,Antarctica/Mawson    West Asia Standard Time,KZ,Asia/Oral Asia/Aqtau Asia/Aqtobe Asia/Atyrau    West Asia Standard Time,MV,Indian/Maldives    West Asia Standard Time,TF,Indian/Kerguelen    West Asia Standard Time,TJ,Asia/Dushanbe    West Asia Standard Time,TM,Asia/Ashgabat    West Asia Standard Time,UZ,Asia/Tashkent Asia/Samarkand    West Asia Standard Time,ZZ,Etc/GMT-5    West Bank Standard Time,001,Asia/Hebron    West Bank Standard Time,PS,Asia/Hebron Asia/Gaza    West Pacific Standard Time,001,Pacific/Port_Moresby    West Pacific Standard Time,AQ,Antarctica/DumontDUrville    West Pacific Standard Time,FM,Pacific/Chuuk    West Pacific Standard Time,GU,Pacific/Guam    West Pacific Standard Time,MP,Pacific/Guam    West Pacific Standard Time,PG,Pacific/Port_Moresby    West Pacific Standard Time,ZZ,Etc/GMT-10    Yakutsk Standard Time,001,Asia/Yakutsk    Yakutsk Standard Time,RU,Asia/Yakutsk Asia/Khandyga",r.TimeZoneConverter=n},{}],204:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Options=class{constructor(t){this.nullSubstitution=t?t.nullSubstitution:void 0,this.locale=t?t.locale:void 0}}},{}],212:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{syntaxError(t,e,r,n,i,o){throw Error("Regular expression is invalid.")}}n.Instance=new n,r.RegexErrorListener=n},{}],178:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),function(t){t[t.None=0]="None",t[t.LowerD1=1]="LowerD1",t[t.LowerD2=2]="LowerD2",t[t.LowerD3=3]="LowerD3",t[t.LowerD4=4]="LowerD4",t[t.LowerF1=5]="LowerF1",t[t.LowerF2=6]="LowerF2",t[t.LowerF3=7]="LowerF3",t[t.CapitalF1=8]="CapitalF1",t[t.CapitalF2=9]="CapitalF2",t[t.CapitalF3=10]="CapitalF3",t[t.LowerG=11]="LowerG",t[t.LowerH1=12]="LowerH1",t[t.LowerH2=13]="LowerH2",t[t.CapitalH1=14]="CapitalH1",t[t.CapitalH2=15]="CapitalH2",t[t.CapitalK=16]="CapitalK",t[t.LowerM1=17]="LowerM1",t[t.LowerM2=18]="LowerM2",t[t.CapitalM1=19]="CapitalM1",t[t.CapitalM2=20]="CapitalM2",t[t.CapitalM3=21]="CapitalM3",t[t.CapitalM4=22]="CapitalM4",t[t.LowerS1=23]="LowerS1",t[t.LowerS2=24]="LowerS2",t[t.LowerT1=25]="LowerT1",t[t.LowerT2=26]="LowerT2",t[t.LowerY1=27]="LowerY1",t[t.LowerY2=28]="LowerY2",t[t.LowerY3=29]="LowerY3",t[t.LowerY4=30]="LowerY4",t[t.LowerZ1=31]="LowerZ1",t[t.LowerZ2=32]="LowerZ2",t[t.LowerZ3=33]="LowerZ3",t[t.InSingleQuoteLiteral=34]="InSingleQuoteLiteral",t[t.InDoubleQuoteLiteral=35]="InDoubleQuoteLiteral",t[t.EscapeSequence=36]="EscapeSequence"}(n||(n={})),r.convertCSharpDateTimeToDayjs=function(t){let e="",r=n.None,i="";if(0===t.length)return e;if(1===t.length)switch(t){case"R":case"r":throw Error("RFC 1123 not supported  in Day.js");case"O":case"o":t="YYYY-MM-DDTHH:mm:ss.SSS0000Z";break;case"U":throw new Error("Universal Fulll Format not supported in Day.js");case"u":throw new Error("Universal Sortable Format not supported in Day.js")}const o=t=>{switch(r){case n.LowerD1:e+="D";break;case n.LowerD2:e+="DD";break;case n.LowerD3:e+="ddd";break;case n.LowerD4:e+="dddd";break;case n.LowerF1:case n.CapitalF1:throw Error("S not supported in Day.js");case n.LowerF2:case n.CapitalF2:throw Error("SS not supported in Day.js");case n.LowerF3:case n.CapitalF3:e+="SSS";break;case n.LowerG:throw Error("Era not supported in Day.js");case n.LowerH1:e+="h";break;case n.LowerH2:e+="hh";break;case n.CapitalH1:e+="H";break;case n.CapitalH2:e+="HH";break;case n.LowerM1:e+="m";break;case n.LowerM2:e+="mm";break;case n.CapitalM1:e+="M";break;case n.CapitalM2:e+="MM";break;case n.CapitalM3:e+="MMM";break;case n.CapitalM4:e+="MMMM";break;case n.LowerS1:e+="s";break;case n.LowerS2:e+="ss";break;case n.LowerT1:case n.LowerT2:e+="A";break;case n.LowerY1:case n.LowerY2:e+="YY";break;case n.LowerY3:case n.LowerY4:e+="YYYY";break;case n.LowerZ1:case n.LowerZ2:e+="ZZ";break;case n.LowerZ3:e+="Z";break;case n.InSingleQuoteLiteral:case n.InDoubleQuoteLiteral:case n.EscapeSequence:for(const t of i)e+=t}i="",r=t};for(const s of t)if(r===n.EscapeSequence)i+=s,o(n.None);else if(r===n.InDoubleQuoteLiteral)"`"===s?o(n.None):i+=s;else if(r===n.InSingleQuoteLiteral)"'"===s?o(n.None):i+=s;else switch(s){case"d":switch(r){case n.LowerD1:r=n.LowerD2;break;case n.LowerD2:r=n.LowerD3;break;case n.LowerD3:r=n.LowerD4;break;case n.LowerD4:break;default:o(n.LowerD1)}break;case"f":switch(r){case n.LowerF1:r=n.LowerF2;break;case n.LowerF2:r=n.LowerF3;break;case n.LowerF3:break;default:o(n.LowerF1)}break;case"F":switch(r){case n.CapitalF1:r=n.CapitalF2;break;case n.CapitalF2:r=n.CapitalF3;break;case n.CapitalF3:break;default:o(n.CapitalF1)}break;case"g":switch(r){case n.LowerG:break;default:o(n.LowerG)}break;case"h":switch(r){case n.LowerH1:r=n.LowerH2;break;case n.LowerH2:break;default:o(n.LowerH1)}break;case"H":switch(r){case n.CapitalH1:r=n.CapitalH2;break;case n.CapitalH2:break;default:o(n.CapitalH1)}break;case"K":o(n.None),e+="Z";break;case"m":switch(r){case n.LowerM1:r=n.LowerM2;break;case n.LowerM2:break;default:o(n.LowerM1)}break;case"M":switch(r){case n.CapitalM1:r=n.CapitalM2;break;case n.CapitalM2:r=n.CapitalM3;break;case n.CapitalM3:r=n.CapitalM4;break;case n.CapitalM4:break;default:o(n.CapitalM1)}break;case"s":switch(r){case n.LowerS1:r=n.LowerS2;break;case n.LowerS2:break;default:o(n.LowerS1)}break;case"t":switch(r){case n.LowerT1:r=n.LowerT2;break;case n.LowerT2:break;default:o(n.LowerT1)}break;case"y":switch(r){case n.LowerY1:r=n.LowerY2;break;case n.LowerY2:r=n.LowerY3;break;case n.LowerY3:r=n.LowerY4;break;case n.LowerY4:break;default:o(n.LowerY1)}break;case"z":switch(r){case n.LowerZ1:r=n.LowerZ2;break;case n.LowerZ2:r=n.LowerZ3;break;case n.LowerZ3:break;default:o(n.LowerZ1)}break;case":":o(n.None),e+=":";break;case"/":o(n.None),e+="/";break;case"`":o(n.InDoubleQuoteLiteral);break;case"'":o(n.InSingleQuoteLiteral);break;case"%":o(n.None);break;case"\\":o(n.EscapeSequence);break;default:o(n.None),e+=s}if(r===n.EscapeSequence||r===n.InDoubleQuoteLiteral||r===n.InSingleQuoteLiteral)throw Error("Invalid Format String");return o(n.None),e}},{}],213:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.ReturnType||(r.ReturnType={}))[n.Boolean=1]="Boolean",n[n.Number=2]="Number",n[n.Object=4]="Object",n[n.String=8]="String",n[n.Array=16]="Array"},{}],200:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.localeInfo={"ar-MA":{currency:["\u062f.\u0645. ",""],decimal:",",thousands:".",grouping:[3]},"en-IN":{currency:["\u20b9",""],decimal:".",thousands:",",grouping:[3,2,2,2,2,2,2,2,2,2]},"ar-BH":{currency:[""," \u062f.\u0628."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-PS":{currency:["\u20aa ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"en-IE":{currency:["\u20ac",""],decimal:".",thousands:",",grouping:[3]},"it-IT":{currency:["\u20ac",""],decimal:",",thousands:".",grouping:[3]},"ar-EG":{currency:[""," \u062c.\u0645."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-IQ":{currency:[""," \u062f.\u0639."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-EH":{currency:["\u062f.\u0645. ",""],decimal:".",thousands:",",grouping:[3]},"ar-AE":{currency:[""," \u062f.\u0625."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-MR":{currency:[""," \u0623.\u0645."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"uk-UA":{currency:["","\xa0\u20b4."],decimal:",",thousands:"\xa0",grouping:[3]},"ca-ES":{currency:["","\xa0\u20ac"],decimal:",",thousands:".",grouping:[3]},"sv-SE":{currency:[""," kr"],decimal:",",thousands:"\xa0",grouping:[3]},"ja-JP":{currency:["","\u5186"],decimal:".",thousands:",",grouping:[3]},"es-ES":{currency:["","\xa0\u20ac"],decimal:",",thousands:".",grouping:[3]},"fi-FI":{currency:["","\xa0\u20ac"],decimal:",",thousands:"\xa0",grouping:[3]},"ar-DZ":{currency:["\u062f.\u062c. ",""],decimal:",",thousands:".",grouping:[3]},"en-GB":{currency:["\xa3",""],decimal:".",thousands:",",grouping:[3]},"cs-CZ":{currency:["","\xa0K\u010d"],decimal:",",thousands:"\xa0",grouping:[3]},"ar-TD":{currency:["\u200fFCFA ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"de-CH":{currency:["","\xa0CHF"],decimal:",",thousands:"'",grouping:[3]},"nl-NL":{currency:["\u20ac\xa0",""],decimal:",",thousands:".",grouping:[3]},"es-BO":{currency:["Bs\xa0",""],decimal:",",percent:"\u202f%",thousands:".",grouping:[3]},"ar-SY":{currency:[""," \u0644.\u0633."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-JO":{currency:[""," \u062f.\u0623."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"en-CA":{currency:["$",""],decimal:".",thousands:",",grouping:[3]},"ar-ER":{currency:["Nfk ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-LB":{currency:[""," \u0644.\u0644."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"fr-CA":{currency:["","$"],decimal:",",thousands:"\xa0",grouping:[3]},"ar-TN":{currency:["\u062f.\u062a. ",""],decimal:",",thousands:".",grouping:[3]},"ar-YE":{currency:[""," \u0631.\u0649."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ru-RU":{currency:["","\xa0\u0440\u0443\u0431."],decimal:",",thousands:"\xa0",grouping:[3]},"en-US":{currency:["$",""],decimal:".",thousands:",",grouping:[3]},"ar-SS":{currency:["\xa3 ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-SO":{currency:["\u200fS ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"hu-HU":{currency:["","\xa0Ft"],decimal:",",thousands:"\xa0",grouping:[3]},"pt-BR":{currency:["R$",""],decimal:",",thousands:".",grouping:[3]},"ar-DJ":{currency:["\u200fFdj ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-SD":{currency:[""," \u062c.\u0633."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-001":{currency:["",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-LY":{currency:["\u062f.\u0644. ",""],decimal:",",thousands:".",grouping:[3]},"ar-SA":{currency:[""," \u0631.\u0633."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"ar-KW":{currency:[""," \u062f.\u0643."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"pl-PL":{currency:["","z\u0142"],decimal:",",thousands:".",grouping:[3]},"ar-QA":{currency:[""," \u0631.\u0642."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"mk-MK":{currency:["","\xa0\u0434\u0435\u043d."],decimal:",",thousands:".",grouping:[3]},"ko-KR":{currency:["\u20a9",""],decimal:".",thousands:",",grouping:[3]},"es-MX":{currency:["$",""],decimal:".",thousands:",",grouping:[3]},"ar-IL":{currency:["\u20aa ",""],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"zh-CN":{currency:["\xa5",""],decimal:".",thousands:",",grouping:[3]},"de-DE":{currency:["","\xa0\u20ac"],decimal:",",thousands:".",grouping:[3]},"ar-OM":{currency:[""," \u0631.\u0639."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"fr-FR":{currency:["","\xa0\u20ac"],decimal:",",percent:"\u202f%",thousands:"\xa0",grouping:[3]},"ar-KM":{currency:[""," \u0641.\u062c.\u0642."],decimal:"\u066b",thousands:"\u066c",numerals:["\u0660","\u0661","\u0662","\u0663","\u0664","\u0665","\u0666","\u0667","\u0668","\u0669"],grouping:[3]},"he-IL":{currency:["\u20aa",""],decimal:".",thousands:",",grouping:[3]}}},{}],167:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179),i=t(213),o=t(180),s=t(192),a=t(196);r.Constant=class extends n.Expression{constructor(t){super(s.ExpressionType.Constant,new o.ExpressionEvaluator(s.ExpressionType.Constant,t=>({value:t.value,error:void 0}))),this.singleQuotRegex=new RegExp(/'(?!\\)/g),this.value=t}get value(){return this._value}set value(t){this.evaluator.returnType="string"==typeof t?i.ReturnType.String:"boolean"==typeof t?i.ReturnType.Boolean:a.FunctionUtils.isNumber(t)?i.ReturnType.Number:Array.isArray(t)?i.ReturnType.Array:i.ReturnType.Object,this._value=t}deepEquals(t){let e;if(t&&t.type===this.type){const r=t.value;e=this.value===r}else e=!1;return e}toString(){if(void 0===this.value)return"undefined";if(null===this.value)return"null";if("string"==typeof this.value){let t=this.value;return t=t.replace(/\\/g,"\\\\"),`'${t=this.reverseString(this.reverseString(t).replace(this.singleQuotRegex,()=>"'\\"))}'`}return a.FunctionUtils.isNumber(this.value)?this.value.toString():"object"==typeof this.value?JSON.stringify(this.value):this.value.toString()}reverseString(t){return t?t.split("").reverse().join(""):t}}},{179:179,180:180,192:192,196:196,213:213}],180:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(213);r.ExpressionEvaluator=class{constructor(t,e,r=n.ReturnType.Object,i){this.tryEvaluate=(t,e,r)=>this._evaluator(t,e,r),this.validateExpression=t=>this._validator(t),this.type=t,this._evaluator=e,this.returnType=r,this._validator=i||(t=>{})}get negation(){return this._negation}set negation(t){t._negation=this,this._negation=t}}},{213:213}],194:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(181),o=t(196);r.FunctionTable=class{constructor(){this.customFunctions=new Map}keys(){return Array.from(i.ExpressionFunctions.standardFunctions.keys()).concat(Array.from(this.customFunctions.keys()))[Symbol.iterator]()}values(){return Array.from(i.ExpressionFunctions.standardFunctions.values()).concat(Array.from(this.customFunctions.values()))[Symbol.iterator]()}get size(){return i.ExpressionFunctions.standardFunctions.size+this.customFunctions.size}get isReadOnly(){return!1}get(t){return i.ExpressionFunctions.standardFunctions.get(t)?i.ExpressionFunctions.standardFunctions.get(t):this.customFunctions.get(t)?this.customFunctions.get(t):void 0}set(t,e){if(i.ExpressionFunctions.standardFunctions.get(t))throw Error("You can't overwrite a built in function.");return this.customFunctions.set(t,e),this}add(t,e){1===arguments.length?t instanceof Object&&this.set(t.key,t.value):"string"==typeof t&&(e instanceof n.ExpressionEvaluator?this.set(t,e):this.set(t,new n.ExpressionEvaluator(t,o.FunctionUtils.apply(e))))}clear(){this.customFunctions.clear()}has(t){return i.ExpressionFunctions.standardFunctions.has(t)||this.customFunctions.has(t)}delete(t){return this.customFunctions.delete(t)}forEach(t,e){throw Error("forEach function not implemented")}entries(){throw Error("entries function not implemented")}get[Symbol.iterator](){throw Error("Symbol.iterator function not implemented")}get[Symbol.toStringTag](){throw Error("Symbol.toStringTag function not implemented")}}},{180:180,181:181,196:196}],181:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(68)),o=t(192);class s{static getStandardFunctions(){const t=[new i.Abs,new i.Accessor,new i.Add,new i.AddDays,new i.AddHours,new i.AddMinutes,new i.AddOrdinal,new i.AddProperty,new i.AddSeconds,new i.AddToTime,new i.All,new i.And,new i.Any,new i.Average,new i.Base64,new i.Base64ToBinary,new i.Base64ToString,new i.Binary,new i.Bool,new i.Ceiling,new i.Coalesce,new i.Concat,new i.Contains,new i.ConvertFromUTC,new i.ConvertToUTC,new i.Count,new i.CountWord,new i.CreateArray,new i.DataUri,new i.DataUriToBinary,new i.DataUriToString,new i.DateFunc,new i.DateReadBack,new i.DateTimeDiff,new i.DayOfMonth,new i.DayOfWeek,new i.DayOfYear,new i.Divide,new i.Element,new i.Empty,new i.EndsWith,new i.EOL,new i.Equal,new i.Exists,new i.Flatten,new i.First,new i.Float,new i.Floor,new i.Foreach,new i.FormatDateTime,new i.FormatEpoch,new i.FormatNumber,new i.FormatTicks,new i.GetFutureTime,new i.GetNextViableDate,new i.GetNextViableTime,new i.GetPastTime,new i.GetPreviousViableDate,new i.GetPreviousViableTime,new i.GetPastTime,new i.GetProperty,new i.GetTimeOfDay,new i.GreaterThan,new i.GreaterThanOrEqual,new i.If,new i.Ignore,new i.IndexOf,new i.IndicesAndValues,new i.Int,new i.Intersection,new i.IsArray,new i.IsBoolean,new i.IsDate,new i.IsDateRange,new i.IsDateTime,new i.IsDefinite,new i.IsDuration,new i.IsFloat,new i.IsInteger,new i.IsMatch,new i.IsObject,new i.IsPresent,new i.IsString,new i.IsTime,new i.IsTimeRange,new i.Join,new i.JPath,new i.Json,new i.JsonStringify,new i.Last,new i.LastIndexOf,new i.Length,new i.LessThan,new i.LessThanOrEqual,new i.Max,new i.Merge,new i.Min,new i.Mod,new i.Month,new i.Multiply,new i.NewGuid,new i.Not,new i.NotEqual,new i.Optional,new i.Or,new i.Power,new i.Rand,new i.Range,new i.RemoveProperty,new i.Replace,new i.ReplaceIgnoreCase,new i.Reverse,new i.Round,new i.Select,new i.SentenceCase,new i.SetPathToValue,new i.SetProperty,new i.Skip,new i.SortBy,new i.SortByDescending,new i.Split,new i.Sqrt,new i.StartOfDay,new i.StartOfHour,new i.StartOfMonth,new i.StartsWith,new i.String,new i.StringOrValue,new i.SubArray,new i.Substring,new i.Subtract,new i.SubtractFromTime,new i.Sum,new i.Take,new i.Ticks,new i.TicksToDays,new i.TicksToHours,new i.TicksToMinutes,new i.TimexResolve,new i.TitleCase,new i.ToLower,new i.ToUpper,new i.Trim,new i.Union,new i.Unique,new i.UriComponent,new i.UriComponentToString,new i.UriHost,new i.UriPath,new i.UriPathAndQuery,new i.UriPort,new i.UriQuery,new i.UriScheme,new i.UtcNow,new i.Where,new i.XML,new i.XPath,new i.Year],e=new Map;return t.forEach(t=>{e.set(t.type,t)}),e.get(o.ExpressionType.LessThan).negation=e.get(o.ExpressionType.GreaterThanOrEqual),e.get(o.ExpressionType.LessThanOrEqual).negation=e.get(o.ExpressionType.GreaterThan),e.get(o.ExpressionType.Equal).negation=e.get(o.ExpressionType.NotEqual),e.set("add",e.get(o.ExpressionType.Add)),e.set("mul",e.get(o.ExpressionType.Multiply)),e.set("div",e.get(o.ExpressionType.Divide)),e.set("sub",e.get(o.ExpressionType.Subtract)),e.set("exp",e.get(o.ExpressionType.Power)),e.set("mod",e.get(o.ExpressionType.Mod)),e.set("and",e.get(o.ExpressionType.And)),e.set("equals",e.get(o.ExpressionType.Equal)),e.set("greater",e.get(o.ExpressionType.GreaterThan)),e.set("greaterOrEquals",e.get(o.ExpressionType.GreaterThanOrEqual)),e.set("less",e.get(o.ExpressionType.LessThan)),e.set("lessOrEquals",e.get(o.ExpressionType.LessThanOrEqual)),e.set("not",e.get(o.ExpressionType.Not)),e.set("or",e.get(o.ExpressionType.Or)),e.set("&",e.get(o.ExpressionType.Concat)),e.set("??",e.get(o.ExpressionType.Coalesce)),e}}s.standardFunctions=s.getStandardFunctions(),r.ExpressionFunctions=s},{192:192,68:68}],179:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(167),i=t(180),o=t(192),s=t(193),a=t(194),u=t(201),l=t(204),c=t(209),h=t(213);class p{constructor(t,e,...r){if(this.validate=()=>this.evaluator.validateExpression(this),e)this.evaluator=e,this.children=r;else if(void 0!==t){if(!p.functions.get(t))throw Error(t+" does not have an evaluator, it's not a built-in function or a custom function.");this.evaluator=p.functions.get(t),this.children=r}}get returnType(){return this.evaluator.returnType}get type(){return this.evaluator.type}deepEquals(t){let e=!1;if(t&&(e=this.type===t.type))if(e=this.children.length===t.children.length,this.type===o.ExpressionType.And||this.type===o.ExpressionType.Or)for(let r=0;e&&r<this.children.length;r++){const r=this.children[0];let n=!1;for(let e=0;e<this.children.length;e++)if(r.deepEquals(t.children[e])){n=!0;break}e=n}else for(let r=0;e&&r<this.children.length;r++)e=this.children[r].deepEquals(t.children[r]);return e}references(){const{path:t,refs:e}=this.referenceWalk(this);return void 0!==t&&e.add(t),Array.from(e)}referenceWalk(t,e){let r,i=new Set;if(void 0===e||!e(t)){const s=t.children;if(t.type===o.ExpressionType.Accessor){const t=s[0].value;1===s.length&&(r=t),2===s.length&&(({path:r,refs:i}=this.referenceWalk(s[1],e)),void 0!==r&&(r=r.concat(".",t)))}else if(t.type===o.ExpressionType.Element){if(({path:r,refs:i}=this.referenceWalk(s[0],e)),void 0!==r)if(s[1]instanceof n.Constant){const t=s[1];t.returnType===h.ReturnType.String?r+="."+t.value:r+=`[${t.value}]`}else i.add(r);const t=this.referenceWalk(s[1],e),o=t.path,a=t.refs;i=new Set([...i,...a]),void 0!==o&&i.add(o)}else if(t.type===o.ExpressionType.Foreach||t.type===o.ExpressionType.Where||t.type===o.ExpressionType.Select){let t=this.referenceWalk(s[0],e);const r=t.path,n=t.refs;void 0!==r&&n.add(r);const o=(t=this.referenceWalk(s[2],e)).path,a=t.refs;void 0!==o&&a.add(o);const u=s[1].children[0].value,l=Array.from(a).filter(t=>!(t===u||t.startsWith(u+".")||t.startsWith(u+"[")));i=new Set([...i,...n,...l])}else for(const r of t.children){const t=this.referenceWalk(r,e),n=t.path,o=t.refs;i=new Set([...i,...o]),void 0!==n&&i.add(n)}}return{path:r,refs:i}}static parse(t,e){return new c.ExpressionParser(e||p.lookup).parse(t.replace(/^=/,""))}static lookup(t){const e=p.functions.get(t);if(e)return e}static makeExpression(t,e,...r){const n=new p(t,e,...r);return n.validate(),n}static lambaExpression(t){return new p(o.ExpressionType.Lambda,new i.ExpressionEvaluator(o.ExpressionType.Lambda,t))}static lambda(t){return new p(o.ExpressionType.Lambda,new i.ExpressionEvaluator(o.ExpressionType.Lambda,(e,r,n)=>{let i,o;try{i=t(r)}catch(s){o=s}return{value:i,error:o}}))}static setPathToValue(t,e){return e instanceof p?p.makeExpression(o.ExpressionType.SetPathToValue,void 0,t,e):p.makeExpression(o.ExpressionType.SetPathToValue,void 0,t,new n.Constant(e))}static equalsExpression(...t){return p.makeExpression(o.ExpressionType.Equal,void 0,...t)}static andExpression(...t){return t.length>1?p.makeExpression(o.ExpressionType.And,void 0,...t):t[0]}static orExpression(...t){return t.length>1?p.makeExpression(o.ExpressionType.Or,void 0,...t):t[0]}static notExpression(t){return p.makeExpression(o.ExpressionType.Not,void 0,t)}validateTree(){this.validate();for(const t of this.children)t.validateTree()}tryEvaluate(t,e){return s.Extensions.isMemoryInterface(t)||(t=u.SimpleObjectMemory.wrap(t)),e=e||new l.Options,this.evaluator.tryEvaluate(this,t,e)}toString(){let t="",e=!1;if(this.type===o.ExpressionType.Accessor&&this.children.length>=1){if(this.children[0]instanceof n.Constant){const r=this.children[0].value;"string"==typeof r&&(1===this.children.length?(e=!0,t=t.concat(r)):2===this.children.length&&(e=!0,t=t.concat(this.children[1].toString(),".",r)))}}else this.type===o.ExpressionType.Element&&2===this.children.length&&(e=!0,t=t.concat(this.children[0].toString(),"[",this.children[1].toString(),"]"));if(!e){const e=this.type.length>0&&!new RegExp(/[a-z]/i).test(this.type[0])&&this.children.length>=2;e||(t=t.concat(this.type)),t=t.concat("(");let r=!0;for(const n of this.children)r?r=!1:t=e?t.concat(" ",this.type," "):t.concat(", "),t=t.concat(n.toString());t=t.concat(")")}return t}}p.functions=new a.FunctionTable,r.Expression=p},{167:167,180:180,192:192,193:193,194:194,201:201,204:204,209:209,213:213}],196:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(178),o=t(192),s=t(213),a=n(t(423));class u{static validateArityAndAnyType(t,e,r,n=s.ReturnType.Object){if(t.children.length<e)throw new Error(`${t} should have at least ${e} children.`);if(t.children.length>r)throw new Error(`${t} can't have more than ${r} children.`);if(0==(n&s.ReturnType.Object))for(const i of t.children)if(0==(i.returnType&s.ReturnType.Object)&&0==(n&i.returnType))throw new Error(u.buildTypeValidatorError(n,i,t))}static validateOrder(t,e,...r){if(void 0===e&&(e=[]),t.children.length<r.length||t.children.length>r.length+e.length)throw new Error(0===e.length?`${t} should have ${r.length} children.`:`${t} should have between ${r.length} and ${r.length+e.length} children.`);for(let n=0;n<r.length;n++){const e=t.children[n],i=r[n];if(0==(i&s.ReturnType.Object)&&0==(e.returnType&s.ReturnType.Object)&&0==(i&e.returnType))throw new Error(u.buildTypeValidatorError(i,e,t))}for(let n=0;n<e.length;n++){const i=n+r.length;if(i>=t.children.length)break;const o=t.children[i],a=e[n];if(0==(a&s.ReturnType.Object)&&0==(o.returnType&s.ReturnType.Object)&&0==(a&o.returnType))throw new Error(u.buildTypeValidatorError(a,o,t))}}static validateAtLeastOne(t){u.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER)}static validateNumber(t){u.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER,s.ReturnType.Number)}static validateString(t){u.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER,s.ReturnType.String)}static validateBinary(t){u.validateArityAndAnyType(t,2,2)}static validateBinaryNumber(t){u.validateArityAndAnyType(t,2,2,s.ReturnType.Number)}static validateUnaryOrBinaryNumber(t){u.validateArityAndAnyType(t,1,2,s.ReturnType.Number)}static validateTwoOrMoreThanTwoNumbers(t){u.validateArityAndAnyType(t,2,Number.MAX_VALUE,s.ReturnType.Number)}static validateBinaryNumberOrString(t){u.validateArityAndAnyType(t,2,2,s.ReturnType.Number|s.ReturnType.String)}static validateUnary(t){u.validateArityAndAnyType(t,1,1)}static validateUnaryNumber(t){u.validateArityAndAnyType(t,1,1,s.ReturnType.Number)}static validateUnaryString(t){u.validateArityAndAnyType(t,1,1,s.ReturnType.String)}static validateUnaryOrBinaryString(t){u.validateArityAndAnyType(t,1,2,s.ReturnType.String)}static validateUnaryBoolean(t){u.validateOrder(t,void 0,s.ReturnType.Boolean)}static verifyNumber(t,e,r){let n;return u.isNumber(t)||(n=e+" is not a number."),n}static verifyNumberOrNumericList(t,e,r){let n;if(u.isNumber(t))return n;if(Array.isArray(t)){for(const i of t)if(!u.isNumber(i)){n=`${i} is not a number in ${e}.`;break}}else n=e+" is neither a list nor a number.";return n}static verifyNumericList(t,e,r){let n;if(Array.isArray(t)){for(const i of t)if(!u.isNumber(i)){n=`${i} is not a number in ${e}.`;break}}else n=e+" is not a list.";return n}static verifyContainer(t,e,r){let n;return"string"==typeof t||Array.isArray(t)||t instanceof Map||"object"==typeof t||(n=e+" must be a string, list, map or object."),n}static verifyContainerOrNull(t,e,r){let n;return null==t||"string"==typeof t||Array.isArray(t)||t instanceof Map||"object"==typeof t||(n=e+" must be a string, list, map or object."),n}static verifyNotNull(t,e,r){let n;return null==t&&(n=e+" is null."),n}static verifyInteger(t,e,r){let n;return Number.isInteger(t)||(n=e+" is not a integer."),n}static verifyList(t,e){let r;return Array.isArray(t)||(r=e+" is not a list or array."),r}static verifyString(t,e,r){let n;return"string"!=typeof t&&(n=e+" is not a string."),n}static verifyStringOrNull(t,e,r){let n;return"string"!=typeof t&&void 0!==t&&(n=e+" is neither a string nor a null object."),n}static verifyNumberOrStringOrNull(t,e,r){let n;return"string"==typeof t||void 0===t||u.isNumber(t)||(n=e+" is neither a number nor string"),n}static verifyNumberOrString(t,e,r){let n;return(void 0===t||!u.isNumber(t)&&"string"!=typeof t)&&(n=e+" is not string or number."),n}static verifyBoolean(t,e,r){let n;return"boolean"!=typeof t&&(n=e+" is not a boolean."),n}static evaluateChildren(t,e,r,n){const i=[];let o,s,a=0;for(const u of t.children){if(({value:o,error:s}=u.tryEvaluate(e,r)),s)break;if(void 0!==n&&(s=n(o,u,a)),s)break;i.push(o),++a}return{args:i,error:s}}static apply(t,e){return(r,n,i)=>{let o;const{args:s,error:a}=u.evaluateChildren(r,n,i,e);let l=a;if(!l)try{o=t(s)}catch(c){l=c.message}return{value:o,error:l}}}static applyWithError(t,e){return(r,n,i)=>{let o;const{args:s,error:a}=u.evaluateChildren(r,n,i,e);let l=a;if(!l)try{({value:o,error:l}=t(s))}catch(c){l=c.message}return{value:o,error:l}}}static applyWithOptionsAndError(t,e){return(r,n,i)=>{let o;const{args:s,error:a}=u.evaluateChildren(r,n,i,e);let l=a;if(!l)try{({value:o,error:l}=t(s,i))}catch(c){l=c.message}return{value:o,error:l}}}static applyWithOptions(t,e){return(r,n,i)=>{let o;const{args:s,error:a}=u.evaluateChildren(r,n,i,e);let l=a;if(!l)try{o=t(s,i)}catch(c){l=c.message}return{value:o,error:l}}}static applySequence(t,e){return u.apply(e=>{const r=[void 0,void 0];let n=e[0];for(let i=1;i<e.length;i++)r[0]=n,r[1]=e[i],n=t(r);return n},e)}static applySequenceWithError(t,e){return u.applyWithError(e=>{const r=[void 0,void 0];let n,i,o=e[0];for(let s=1;s<e.length;s++){if(r[0]=o,r[1]=e[s],({value:n,error:i}=t(r)),i)return{value:n,error:i};o=n}return{value:o,error:void 0}},e)}static determineLocale(t,e,r="en-us"){if(t.length===e){const n=t[e-1];"string"==typeof n&&(r=n)}return r}static determineFormatAndLocale(t,e,r,n="en-us"){if(e>=2)if(t.length===e){const i=t[e-1],o=t[e-2];"string"==typeof i&&"string"==typeof o&&(r=""!==o?u.timestampFormatter(o):u.DefaultDateTimeFormat,n=i.substr(0,2))}else if(t.length===e-1){const n=t[e-2];"string"==typeof n&&(r=u.timestampFormatter(n))}return{format:r,locale:n}}static timestampFormatter(t){if(!t)return u.DefaultDateTimeFormat;let e=t;try{e=i.convertCSharpDateTimeToDayjs(t)}catch(r){}return e}static tryAccumulatePath(t,e,r){let n="",i=t;for(;void 0!==i;)if(i.type===o.ExpressionType.Accessor)n=i.children[0].value+"."+n,i=2===i.children.length?i.children[1]:void 0;else{if(i.type!==o.ExpressionType.Element)break;{const{value:t,error:o}=i.children[1].tryEvaluate(e,r);if(void 0!==o)return{path:void 0,left:void 0,error:o};if(u.isNumber(parseInt(t)))n=`[${t}].${n}`;else{if("string"!=typeof t)return{path:void 0,left:void 0,error:i.children[1].toString()+" doesn't return an int or string"};n=`['${t}'].${n}`}i=i.children[0]}}return""===(n=n.replace(/(\.*$)/g,"").replace(/(\.\[)/g,"["))&&(n=void 0),{path:n,left:i,error:void 0}}static isNumber(t){return null!=t&&"number"==typeof t&&!Number.isNaN(t)}static commonEquals(t,e){if(null==t||null==e)return null==t&&null==e;if(Array.isArray(t)&&Array.isArray(e))return t.length===e.length&&t.every((t,r)=>u.commonEquals(t,e[r]));const r=u.getPropertyCount(t),n=u.getPropertyCount(e);if(r>=0&&n>=0){if(r!==n)return!1;const i=u.convertToObj(t),o=u.convertToObj(e);return a.default(i,o)}if(u.isNumber(t)&&u.isNumber(e)&&Math.abs(t-e)<Number.EPSILON)return!0;try{return t===e}catch(i){return!1}}static buildTypeValidatorError(t,e,r){const n=Object.keys(s.ReturnType).filter(t=>!(parseInt(t)>=0)),i=[];for(const o of n)0!=(t&s.ReturnType[o])&&i.push(o);return 1===i.length?`${e} is not a ${i[0]} expression in ${r}.`:`${e} in ${r} is not any of [${i.join(", ")}].`}static getPropertyCount(t){let e=-1;return null==t||Array.isArray(t)||(t instanceof Map?e=t.size:"object"!=typeof t||t instanceof Date||(e=Object.keys(t).length)),e}static convertToObj(t){return u.getPropertyCount(t)>=0?(t instanceof Map?Array.from(t.entries()):Object.entries(t)).reduce((t,[e,r])=>Object.assign({},t,{[e]:u.convertToObj(r)}),{}):Array.isArray(t)?t.map(t=>u.convertToObj(t)):t}}u.DefaultDateTimeFormat="YYYY-MM-DDTHH:mm:ss.SSS[Z]",r.FunctionUtils=u},{178:178,192:192,213:213,423:423}],186:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(182)),n(t(183)),n(t(184)),n(t(185)),n(t(187)),n(t(188)),n(t(189)),n(t(190)),n(t(191))},{182:182,183:183,184:184,185:185,187:187,188:188,189:189,190:190,191:191}],216:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(215)),n(t(217)),n(t(218)),n(t(219)),n(t(220)),n(t(221))},{215:215,217:217,218:218,219:219,220:220,221:221}],172:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(168)),n(t(169)),n(t(170)),n(t(171)),n(t(173)),n(t(174)),n(t(175)),n(t(176)),n(t(177))},{168:168,169:169,170:170,171:171,173:173,174:174,175:175,176:176,177:177}],209:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(210)),n(t(205)),n(t(211)),n(t(208))},{205:205,208:208,210:210,211:211}],199:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(197)),n(t(198))},{197:197,198:198}],166:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(348),o=n(t(424)),s=t(199),a=t(212);class u{static CreateRegex(t){let e;if(t&&this.regexCache.has(t))e=this.regexCache.get(t);else{if(!t||!this.isCommonRegex(t))throw new Error(`'${t}' is not a valid regex.`);e=this.getRegExpFromString(t),this.regexCache.set(t,e)}return e}static getRegExpFromString(t){let e="";return["(?i)","(?m)","(?s)"].forEach(r=>{t.includes(r)&&(e+=r.substr(2,1),t=t.replace(r,""))}),e?new RegExp(""+t,e):new RegExp(""+t)}static isCommonRegex(t){try{this.antlrParse(t)}catch(e){return!1}return!0}static antlrParse(t){const e=new i.ANTLRInputStream(t),r=new s.CommonRegexLexer(e);r.removeErrorListeners();const n=new i.CommonTokenStream(r),o=new s.CommonRegexParser(n);return o.removeErrorListeners(),o.addErrorListener(a.RegexErrorListener.Instance),o.buildParseTree=!0,o.parse()}}u.regexCache=new o.default(15),r.CommonRegex=u},{199:199,212:212,348:348,424:424}],201:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(202)),n(t(203))},{202:202,203:203}],68:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(2)),n(t(3)),n(t(4)),n(t(5)),n(t(6)),n(t(7)),n(t(8)),n(t(9)),n(t(10)),n(t(11)),n(t(12)),n(t(13)),n(t(14)),n(t(15)),n(t(16)),n(t(17)),n(t(18)),n(t(19)),n(t(20)),n(t(21)),n(t(22)),n(t(23)),n(t(24)),n(t(25)),n(t(26)),n(t(27)),n(t(28)),n(t(29)),n(t(30)),n(t(31)),n(t(32)),n(t(33)),n(t(34)),n(t(35)),n(t(36)),n(t(37)),n(t(38)),n(t(39)),n(t(40)),n(t(41)),n(t(42)),n(t(43)),n(t(44)),n(t(45)),n(t(46)),n(t(48)),n(t(47)),n(t(49)),n(t(50)),n(t(51)),n(t(52)),n(t(53)),n(t(54)),n(t(55)),n(t(56)),n(t(57)),n(t(58)),n(t(59)),n(t(60)),n(t(61)),n(t(59)),n(t(62)),n(t(63)),n(t(64)),n(t(65)),n(t(66)),n(t(67)),n(t(69)),n(t(70)),n(t(71)),n(t(72)),n(t(73)),n(t(74)),n(t(75)),n(t(76)),n(t(77)),n(t(78)),n(t(79)),n(t(80)),n(t(81)),n(t(82)),n(t(83)),n(t(84)),n(t(85)),n(t(86)),n(t(87)),n(t(89)),n(t(88)),n(t(90)),n(t(91)),n(t(92)),n(t(93)),n(t(94)),n(t(95)),n(t(96)),n(t(97)),n(t(98)),n(t(99)),n(t(100)),n(t(101)),n(t(102)),n(t(103)),n(t(104)),n(t(105)),n(t(106)),n(t(107)),n(t(108)),n(t(109)),n(t(110)),n(t(111)),n(t(112)),n(t(113)),n(t(114)),n(t(115)),n(t(116)),n(t(117)),n(t(118)),n(t(119)),n(t(120)),n(t(121)),n(t(122)),n(t(123)),n(t(124)),n(t(125)),n(t(126)),n(t(127)),n(t(128)),n(t(129)),n(t(130)),n(t(131)),n(t(132)),n(t(133)),n(t(134)),n(t(135)),n(t(136)),n(t(137)),n(t(138)),n(t(139)),n(t(140)),n(t(141)),n(t(142)),n(t(143)),n(t(144)),n(t(145)),n(t(146)),n(t(147)),n(t(148)),n(t(149)),n(t(150)),n(t(151)),n(t(152)),n(t(153)),n(t(154)),n(t(155)),n(t(156)),n(t(157)),n(t(158)),n(t(159)),n(t(160)),n(t(161)),n(t(162)),n(t(163)),n(t(164)),n(t(165))},{10:10,100:100,101:101,102:102,103:103,104:104,105:105,106:106,107:107,108:108,109:109,11:11,110:110,111:111,112:112,113:113,114:114,115:115,116:116,117:117,118:118,119:119,12:12,120:120,121:121,122:122,123:123,124:124,125:125,126:126,127:127,128:128,129:129,13:13,130:130,131:131,132:132,133:133,134:134,135:135,136:136,137:137,138:138,139:139,14:14,140:140,141:141,142:142,143:143,144:144,145:145,146:146,147:147,148:148,149:149,15:15,150:150,151:151,152:152,153:153,154:154,155:155,156:156,157:157,158:158,159:159,16:16,160:160,161:161,162:162,163:163,164:164,165:165,17:17,18:18,19:19,2:2,20:20,21:21,22:22,23:23,24:24,25:25,26:26,27:27,28:28,29:29,3:3,30:30,31:31,32:32,33:33,34:34,35:35,36:36,37:37,38:38,39:39,4:4,40:40,41:41,42:42,43:43,44:44,45:45,46:46,47:47,48:48,49:49,5:5,50:50,51:51,52:52,53:53,54:54,55:55,56:56,57:57,58:58,59:59,6:6,60:60,61:61,62:62,63:63,64:64,65:65,66:66,67:67,69:69,7:7,70:70,71:71,72:72,73:73,74:74,75:75,76:76,77:77,78:78,79:79,8:8,80:80,81:81,82:82,83:83,84:84,85:85,86:86,87:87,88:88,89:89,9:9,90:90,91:91,92:92,93:93,94:94,95:95,96:96,97:97,98:98,99:99}],2:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(107);class o extends i.NumberTransformEvaluator{constructor(){super(n.ExpressionType.Abs,o.func)}static func(t){return Math.abs(t[0])}}r.Abs=o},{107:107,192:192}],107:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(196),o=t(213);class s extends n.ExpressionEvaluator{constructor(t,e){super(t,s.evaluator(e),o.ReturnType.Number,i.FunctionUtils.validateUnaryNumber)}static evaluator(t){return i.FunctionUtils.apply(t,i.FunctionUtils.verifyNumber)}}r.NumberTransformEvaluator=s},{180:180,196:196,213:213}],3:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(202),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Accessor,l.evaluator,u.ReturnType.Object,l.validator)}static evaluator(t,e,r){const{path:n,left:i,error:u}=o.FunctionUtils.tryAccumulatePath(t,e,r);if(u)return{value:void 0,error:u};if(null==i)return{value:s.InternalFunctionUtils.wrapGetValue(e,n,r),error:void 0};{const{value:t,error:o}=i.tryEvaluate(e,r);return o?{value:void 0,error:o}:{value:s.InternalFunctionUtils.wrapGetValue(new a.SimpleObjectMemory(t),n,r),error:void 0}}}static validator(t){const e=t.children;if(0===e.length||e[0].type!==i.ExpressionType.Constant||e[0].returnType!==u.ReturnType.String)throw new Error(t+" must have a string as first argument.");if(e.length>2)throw new Error(t+" has more than 2 children.");if(2===e.length&&0==(e[1].returnType&u.ReturnType.Object))throw new Error(t+" must have an object as its second argument.")}}r.Accessor=l},{180:180,192:192,195:195,196:196,202:202,213:213}],195:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(167),o=n(t(402)),s=n(t(405));o.default.extend(s.default);const a=t(192),u=t(201),l=t(222),c=t(396);class h{static parseTimexProperty(t){let e;if(t instanceof l.TimexProperty)e=t;else if("string"==typeof t)e=new l.TimexProperty(t);else if(void 0===(e=new l.TimexProperty(t))||0===Object.keys(e).length)return{timexProperty:e,error:t+" requires a TimexProperty or a string as a argument"};return{timexProperty:e,error:void 0}}static sortBy(t){return(e,r,n)=>{let i;const{value:o,error:s}=e.children[0].tryEvaluate(r,n);let a=s;if(!a)if(Array.isArray(o)){const s=o.slice(0);if(1===e.children.length)i=t?s.sort().reverse():s.sort();else{let o;({value:o,error:a}=e.children[1].tryEvaluate(r,n)),a||(o=o||""),i=t?s.sort(h.sortByKey(o)).reverse():s.sort(h.sortByKey(o))}}else a=e.children[0]+" is not an array";return{value:i,error:a}}}static accessIndex(t,e){if(null==t)return{value:void 0,error:void 0};let r,n;return Array.isArray(t)?e>=0&&e<t.length?r=t[e]:n=`${e} is out of range for ${t}`:n=t+" is not a collection.",{value:r,error:n}}static verifyTimestamp(t){let e;try{const r=new Date(t);Number.isNaN(r.getTime())&&(e=t+" is not a valid datetime string.")}catch(r){e=t+" is not a valid datetime string."}return e}static verifyISOTimestamp(t){let e;try{const r=new Date(t);Number.isNaN(r.getTime())?e=t+" is not a valid datetime string.":r.toISOString()!==t&&(e=t+" is not a ISO format datetime string.")}catch(r){e=t+" is not a valid datetime string."}return e}static ticks(t){let e;const r=this.verifyISOTimestamp(t);if(!r){const r=o.default(t).utc().valueOf();e=this.UnixMilliSecondToTicksConstant.add(c(r).times(this.MillisecondToTickConstant))}return{value:e,error:r}}static accessProperty(t,e){if(!t)return{value:void 0,error:void 0};let r;if(t instanceof Map&&void 0!==t){const n=t;if(void 0===(r=n.get(e))){const t=Array.from(n.keys()).find(t=>t.toLowerCase()===e.toLowerCase());void 0!==t&&(r=n.get(t))}}else{const n=Object.keys(t).find(t=>t.toLowerCase()===e.toLowerCase());void 0!==n&&(r=t[n])}return{value:r,error:void 0}}static wrapGetValue(t,e,r){const n=t.getValue(e);return void 0!==n?n:void 0!==r.nullSubstitution?r.nullSubstitution(e):void 0}static parseStringOrUndefined(t){return"string"==typeof t?t:""}static isLogicTrue(t){let e=!0;return"boolean"==typeof t?e=t:null==t&&(e=!1),e}static foreach(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(i||(s=`'${t.children[0]}' evaluated to null.`),!s){const o=h.convertToList(i);o?(n=[],h.lambdaEvaluator(t,e,r,o,(t,e,r)=>r?(s=r,!0):(n.push(e),!1))):s=t.children[0]+" is not a collection or structure object to run Foreach"}return{value:n,error:s}}static lambdaEvaluator(t,e,r,n,o){const s=t.children[1].children[0];if(!(s instanceof i.Constant)||"string"!=typeof s.value)return;const a=s.value,l=u.StackedMemory.wrap(e);for(const i of n){const e=i,n=new Map([[a,i]]);l.push(u.SimpleObjectMemory.wrap(n));const{value:s,error:c}=t.children[2].tryEvaluate(l,r);if(l.pop(),o(e,s,c))break}}static convertToList(t){let e;return Array.isArray(t)?e=t:"object"==typeof t&&(e=[],Object.keys(t).forEach(r=>e.push({key:r,value:t[r]}))),e}static ValidateLambdaExpression(t){if(3!==t.children.length)throw new Error("Lambda expression expect 3 parameters, found "+t.children.length);const e=t.children[1];if(e.type!==a.ExpressionType.Accessor||1!==e.children.length)throw new Error("Second parameter is not an identifier : "+e)}static parseUri(t){let e,r;try{e=new URL(t)}catch(n){r="Invalid URI: "+t}return{value:e,error:r}}static timeUnitTransformer(t,e){switch(e){case"Day":return{duration:t,tsStr:"day"};case"Week":return{duration:7*t,tsStr:"day"};case"Second":return{duration:t,tsStr:"second"};case"Minute":return{duration:t,tsStr:"minute"};case"Hour":return{duration:t,tsStr:"hour"};case"Month":return{duration:t,tsStr:"month"};case"Year":return{duration:t,tsStr:"year"};default:return{duration:t,tsStr:void 0}}}static getTextEncoder(){return"undefined"!=typeof window||"undefined"!=typeof self?new TextEncoder:new(t(451).TextEncoder)}static getTextDecoder(e="utf-8"){return"undefined"!=typeof window||"undefined"!=typeof self?new TextDecoder(e):new(t(451).TextDecoder)(e)}static commonStringify(t){return null==t?"":"object"==typeof t?JSON.stringify(t).replace(/(^['"]*)/g,"").replace(/(['"]*$)/g,""):t.toString()}static sortByKey(t){return(e,r)=>e[t]>r[t]?1:r[t]>e[t]?-1:0}}h.UnixMilliSecondToTicksConstant=c("621355968000000000"),h.MillisecondToTickConstant=c("10000"),r.InternalFunctionUtils=h},{167:167,192:192,201:201,222:222,396:396,402:402,405:405,451:451}],202:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(193),i=t(195);class o{constructor(t){this.memory=void 0,this.memory=t}static wrap(t){return n.Extensions.isMemoryInterface(t)?t:new o(t)}getValue(t){if(void 0===this.memory||0===t.length)return;const e=t.split(/[.\[\]]+/).filter(t=>void 0!==t&&""!==t).map(t=>t.startsWith('"')&&t.endsWith('"')||t.startsWith("'")&&t.endsWith("'")?t.substr(1,t.length-2):t);let r,n=this.memory;for(const o of e){let t;const e=parseInt(o);if(!isNaN(e)&&Array.isArray(n)?({value:r,error:t}=i.InternalFunctionUtils.accessIndex(n,e)):({value:r,error:t}=i.InternalFunctionUtils.accessProperty(n,o)),t)return;n=r}return r}setValue(t,e){if(void 0===this.memory)return;const r=t.split(/[.[\]]+/).filter(t=>void 0!==t&&""!==t).map(t=>t.startsWith('"')&&t.endsWith('"')||t.startsWith("'")&&t.endsWith("'")?t.substr(1,t.length-2):t);let n=this.memory,o="",s=void 0;for(let u=0;u<r.length-1;u++){const t=parseInt(r[u]);if(!isNaN(t)&&Array.isArray(n)?(o=`[${r[u]}]`,({value:n,error:s}=i.InternalFunctionUtils.accessIndex(n,t))):(o="."+r[u],({value:n,error:s}=i.InternalFunctionUtils.accessProperty(n,r[u]))),s)return;if(void 0===n)return void(o=o.replace(/(^\.*)/g,""))}const a=parseInt(r[r.length-1]);if(isNaN(a)){if(s=this.setProperty(n,r[r.length-1],e).error)return}else if(Array.isArray(n)?a>n.length?s=a+" index out of range":a===n.length?n.push(e):n[a]=e:s="set value for an index to a non-list object",s)return}version(){return this.toString()}toString(){return JSON.stringify(this.memory,this.getCircularReplacer())}getCircularReplacer(){const t=new WeakSet;return(e,r)=>{if("object"==typeof r&&r){if(t.has(r))return;t.add(r)}return r}}setProperty(t,e,r){const n=r;return t instanceof Map?t.set(e,r):t[e]=r,{value:n,error:void 0}}}r.SimpleObjectMemory=o},{193:193,195:195}],4:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Add,a.evaluator(),s.ReturnType.String|s.ReturnType.Number,a.validator)}static evaluator(){return o.FunctionUtils.applySequenceWithError(t=>{let e,r;const n=!o.FunctionUtils.isNumber(t[0])||!o.FunctionUtils.isNumber(t[1]);return null==t[0]&&o.FunctionUtils.isNumber(t[1])||null==t[1]&&o.FunctionUtils.isNumber(t[0])?r="Operator '+' or add cannot be applied to operands of type 'number' and null object.":e=n?null==t[0]&&null==t[1]?"":null==t[0]?t[1].toString():null==t[1]?t[0].toString():t[0].toString()+t[1].toString():t[0]+t[1],{value:e,error:r}},o.FunctionUtils.verifyNumberOrStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,2,Number.MAX_SAFE_INTEGER,s.ReturnType.String|s.ReturnType.Number)}}r.Add=a},{180:180,192:192,196:196,213:213}],5:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(145);r.AddDays=class extends i.TimeTransformEvaluator{constructor(){super(n.ExpressionType.AddDays,(t,e)=>{const r=new Date(t);return r.setDate(t.getDate()+e),r})}}},{145:145,192:192}],145:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(196),u=t(195),l=t(213);class c extends s.ExpressionEvaluator{constructor(t,e){super(t,c.evaluator(e),l.ReturnType.String,c.validator)}static evaluator(t){return(e,r,n)=>{let o,s=n.locale?n.locale:Intl.DateTimeFormat().resolvedOptions().locale,l=a.FunctionUtils.DefaultDateTimeFormat;const{args:c,error:h}=a.FunctionUtils.evaluateChildren(e,r,n);let p=h;return p||(({format:l,locale:s}=a.FunctionUtils.determineFormatAndLocale(c,4,l,s)),"string"==typeof c[0]&&a.FunctionUtils.isNumber(c[1])?(p=u.InternalFunctionUtils.verifyISOTimestamp(c[0]))||(o=i.default(t(new Date(c[0]),c[1])).locale(s).utc().format(l)):p=e+" should contain an ISO format timestamp and a time interval integer."),{value:o,error:p}}}static validator(t){a.FunctionUtils.validateOrder(t,[l.ReturnType.String,l.ReturnType.String],l.ReturnType.String,l.ReturnType.Number)}}r.TimeTransformEvaluator=c},{180:180,195:195,196:196,213:213,402:402,405:405}],6:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(145);r.AddHours=class extends i.TimeTransformEvaluator{constructor(){super(n.ExpressionType.AddHours,(t,e)=>{const r=new Date(t);return r.setHours(t.getHours()+e),r})}}},{145:145,192:192}],7:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(145);r.AddMinutes=class extends i.TimeTransformEvaluator{constructor(){super(n.ExpressionType.AddMinutes,(t,e)=>{const r=new Date(t);return r.setMinutes(t.getMinutes()+e),r})}}},{145:145,192:192}],8:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.AddOrdinal,a.evaluator(),s.ReturnType.String,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>a.evalAddOrdinal(t[0]),o.FunctionUtils.verifyInteger)}static evalAddOrdinal(t){let e=!1,r=t.toString();if(t>0){switch(t%100){case 11:case 12:case 13:r+="th",e=!0}if(!e)switch(t%10){case 1:r+="st";break;case 2:r+="nd";break;case 3:r+="rd";break;default:r+="th"}}return r}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,1,s.ReturnType.Number)}}r.AddOrdinal=a},{180:180,192:192,196:196,213:213}],9:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.AddProperty,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e;const r=t[0],n=String(t[1]);return n in r?e=n+" already exists":r[String(t[1])]=t[2],{value:r,error:e}})}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.Object,s.ReturnType.String,s.ReturnType.Object)}}r.AddProperty=a},{180:180,192:192,196:196,213:213}],10:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(145);r.AddSeconds=class extends i.TimeTransformEvaluator{constructor(){super(n.ExpressionType.AddSeconds,(t,e)=>{const r=new Date(t);return r.setSeconds(t.getSeconds()+e),r})}}},{145:145,192:192}],11:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.AddToTime,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,5,o,i)),"string"==typeof s[0]&&Number.isInteger(s[1])&&"string"==typeof s[2]?({value:n,error:l}=h.evalAddToTime(s[0],s[1],s[2],o,i)):l=t+" should contain an ISO format timestamp, a time interval integer, a string unit of time and an optional output format string."),{value:n,error:l}}static evalAddToTime(t,e,r,n,o){let s;const a=l.InternalFunctionUtils.verifyISOTimestamp(t);if(!a){const{duration:a,tsStr:u}=l.InternalFunctionUtils.timeUnitTransformer(e,r);s=i.default(t).locale(o).utc().add(a,u).format(n)}return{value:s,error:a}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String,c.ReturnType.Number,c.ReturnType.String)}}r.AddToTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],405:[function(t,e,r){var n;n=function(){"use strict";return function(t,e,r){var n=e.prototype;r.utc=function(t){return new e({date:t,utc:!0,args:arguments})},n.utc=function(t){var e=r(this.toDate(),{locale:this.$L,utc:!0});return t?e.add(this.utcOffset(),"minute"):e},n.local=function(){return r(this.toDate(),{locale:this.$L,utc:!1})};var i=n.parse;n.parse=function(t){t.utc&&(this.$u=!0),this.$utils().u(t.$offset)||(this.$offset=t.$offset),i.call(this,t)};var o=n.init;n.init=function(){if(this.$u){var t=this.$d;this.$y=t.getUTCFullYear(),this.$M=t.getUTCMonth(),this.$D=t.getUTCDate(),this.$W=t.getUTCDay(),this.$H=t.getUTCHours(),this.$m=t.getUTCMinutes(),this.$s=t.getUTCSeconds(),this.$ms=t.getUTCMilliseconds()}else o.call(this)};var s=n.utcOffset;n.utcOffset=function(t,e){var r=this.$utils().u;if(r(t))return this.$u?0:r(this.$offset)?s.call(this):this.$offset;var n=Math.abs(t)<=16?60*t:t,i=this;if(e)return i.$offset=n,i.$u=0===t,i;if(0!==t){var o=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(i=this.local().add(n+o,"minute")).$offset=n,i.$x.$localOffset=o}else i=this.utc();return i};var a=n.format;n.format=function(t){var e=t||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return a.call(this,e)},n.valueOf=function(){var t=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||(new Date).getTimezoneOffset());return this.$d.valueOf()-6e4*t},n.isUTC=function(){return!!this.$u},n.toISOString=function(){return this.toDate().toISOString()},n.toString=function(){return this.toDate().toUTCString()};var u=n.toDate;n.toDate=function(t){return"s"===t&&this.$offset?r(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():u.call(this)};var l=n.diff;n.diff=function(t,e,n){if(t&&this.$u===t.$u)return l.call(this,t,e,n);var i=this.local(),o=r(t).local();return l.call(i,o,e,n)}}},"object"==typeof r&&void 0!==e?e.exports=n():this.dayjs_plugin_utc=n()},{}],402:[function(t,e,r){var n;n=function(){"use strict";var t="millisecond",e="second",r="minute",n="hour",i="day",o="week",s="month",a="quarter",u="year",l="date",c=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,h=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,p={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},d=function(t,e,r){var n=String(t);return!n||n.length>=e?t:""+Array(e+1-n.length).join(r)+t},f={s:d,z:function(t){var e=-t.utcOffset(),r=Math.abs(e),n=Math.floor(r/60),i=r%60;return(e<=0?"+":"-")+d(n,2,"0")+":"+d(i,2,"0")},m:function t(e,r){if(e.date()<r.date())return-t(r,e);var n=12*(r.year()-e.year())+(r.month()-e.month()),i=e.clone().add(n,s),o=r-i<0,a=e.clone().add(n+(o?-1:1),s);return+(-(n+(r-i)/(o?i-a:a-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(c){return{M:s,y:u,w:o,d:i,D:l,h:n,m:r,s:e,ms:t,Q:a}[c]||String(c||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},y="en",m={};m[y]=p;var g=function(t){return t instanceof E},v=function(t,e,r){var n;if(!t)return y;if("string"==typeof t)m[t]&&(n=t),e&&(m[t]=e,n=t);else{var i=t.name;m[i]=t,n=i}return!r&&n&&(y=n),n||!r&&y},T=function(t,e){if(g(t))return t.clone();var r="object"==typeof e?e:{};return r.date=t,r.args=arguments,new E(r)},_=f;_.l=v,_.i=g,_.w=function(t,e){return T(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var E=function(){function p(t){this.$L=v(t.locale,null,!0),this.parse(t)}var d=p.prototype;return d.parse=function(t){this.$d=function(t){var e=t.date,r=t.utc;if(null===e)return new Date(NaN);if(_.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var n=e.match(c);if(n){var i=n[2]-1||0,o=(n[7]||"0").substring(0,3);return r?new Date(Date.UTC(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,o)):new Date(n[1],i,n[3]||1,n[4]||0,n[5]||0,n[6]||0,o)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},d.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},d.$utils=function(){return _},d.isValid=function(){return!("Invalid Date"===this.$d.toString())},d.isSame=function(t,e){var r=T(t);return this.startOf(e)<=r&&r<=this.endOf(e)},d.isAfter=function(t,e){return T(t)<this.startOf(e)},d.isBefore=function(t,e){return this.endOf(e)<T(t)},d.$g=function(t,e,r){return _.u(t)?this[e]:this.set(r,t)},d.unix=function(){return Math.floor(this.valueOf()/1e3)},d.valueOf=function(){return this.$d.getTime()},d.startOf=function(t,a){var c=this,h=!!_.u(a)||a,p=_.p(t),d=function(t,e){var r=_.w(c.$u?Date.UTC(c.$y,e,t):new Date(c.$y,e,t),c);return h?r:r.endOf(i)},f=function(t,e){return _.w(c.toDate()[t].apply(c.toDate("s"),(h?[0,0,0,0]:[23,59,59,999]).slice(e)),c)},y=this.$W,m=this.$M,g=this.$D,v="set"+(this.$u?"UTC":"");switch(p){case u:return h?d(1,0):d(31,11);case s:return h?d(1,m):d(0,m+1);case o:var T=this.$locale().weekStart||0,E=(y<T?y+7:y)-T;return d(h?g-E:g+(6-E),m);case i:case l:return f(v+"Hours",0);case n:return f(v+"Minutes",1);case r:return f(v+"Seconds",2);case e:return f(v+"Milliseconds",3);default:return this.clone()}},d.endOf=function(t){return this.startOf(t,!1)},d.$set=function(o,a){var c,h=_.p(o),p="set"+(this.$u?"UTC":""),d=(c={},c[i]=p+"Date",c[l]=p+"Date",c[s]=p+"Month",c[u]=p+"FullYear",c[n]=p+"Hours",c[r]=p+"Minutes",c[e]=p+"Seconds",c[t]=p+"Milliseconds",c)[h],f=h===i?this.$D+(a-this.$W):a;if(h===s||h===u){var y=this.clone().set(l,1);y.$d[d](f),y.init(),this.$d=y.set(l,Math.min(this.$D,y.daysInMonth())).$d}else d&&this.$d[d](f);return this.init(),this},d.set=function(t,e){return this.clone().$set(t,e)},d.get=function(t){return this[_.p(t)]()},d.add=function(t,a){var l,c=this;t=Number(t);var h=_.p(a),p=function(e){var r=T(c);return _.w(r.date(r.date()+Math.round(e*t)),c)};if(h===s)return this.set(s,this.$M+t);if(h===u)return this.set(u,this.$y+t);if(h===i)return p(1);if(h===o)return p(7);var d=(l={},l[r]=6e4,l[n]=36e5,l[e]=1e3,l)[h]||1,f=this.$d.getTime()+t*d;return _.w(f,this)},d.subtract=function(t,e){return this.add(-1*t,e)},d.format=function(t){var e=this;if(!this.isValid())return"Invalid Date";var r=t||"YYYY-MM-DDTHH:mm:ssZ",n=_.z(this),i=this.$locale(),o=this.$H,s=this.$m,a=this.$M,u=i.weekdays,l=i.months,c=function(t,n,i,o){return t&&(t[n]||t(e,r))||i[n].substr(0,o)},p=function(t){return _.s(o%12||12,t,"0")},d=i.meridiem||function(t,e,r){var n=t<12?"AM":"PM";return r?n.toLowerCase():n},f={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:_.s(a+1,2,"0"),MMM:c(i.monthsShort,a,l,3),MMMM:c(l,a),D:this.$D,DD:_.s(this.$D,2,"0"),d:String(this.$W),dd:c(i.weekdaysMin,this.$W,u,2),ddd:c(i.weekdaysShort,this.$W,u,3),dddd:u[this.$W],H:String(o),HH:_.s(o,2,"0"),h:p(1),hh:p(2),a:d(o,s,!0),A:d(o,s,!1),m:String(s),mm:_.s(s,2,"0"),s:String(this.$s),ss:_.s(this.$s,2,"0"),SSS:_.s(this.$ms,3,"0"),Z:n};return r.replace(h,(function(t,e){return e||f[t]||n.replace(":","")}))},d.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},d.diff=function(t,l,c){var h,p=_.p(l),d=T(t),f=6e4*(d.utcOffset()-this.utcOffset()),y=this-d,m=_.m(this,d);return m=(h={},h[u]=m/12,h[s]=m,h[a]=m/3,h[o]=(y-f)/6048e5,h[i]=(y-f)/864e5,h[n]=y/36e5,h[r]=y/6e4,h[e]=y/1e3,h)[p]||y,c?m:_.a(m)},d.daysInMonth=function(){return this.endOf(s).$D},d.$locale=function(){return m[this.$L]},d.locale=function(t,e){if(!t)return this.$L;var r=this.clone(),n=v(t,e,!0);return n&&(r.$L=n),r},d.clone=function(){return _.w(this.$d,this)},d.toDate=function(){return new Date(this.valueOf())},d.toJSON=function(){return this.isValid()?this.toISOString():null},d.toISOString=function(){return this.$d.toISOString()},d.toString=function(){return this.$d.toUTCString()},p}(),b=E.prototype;return T.prototype=b,[["$ms",t],["$s",e],["$m",r],["$H",n],["$W",i],["$M",s],["$y",u],["$D",l]].forEach((function(t){b[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),T.extend=function(t,e){return t.$i||(t(e,E,T),t.$i=!0),T},T.locale=v,T.isDayjs=g,T.unix=function(t){return T(1e3*t)},T.en=m[y],T.Ls=m,T.p={},T},"object"==typeof r&&void 0!==e?e.exports=n():this.dayjs=n()},{}],12:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.All,a.evaluator,s.ReturnType.Boolean,o.InternalFunctionUtils.ValidateLambdaExpression)}static evaluator(t,e,r){let n=!0;const{value:i,error:s}=t.children[0].tryEvaluate(e,r);let a=s;if(!a){const s=o.InternalFunctionUtils.convertToList(i);s?o.InternalFunctionUtils.lambdaEvaluator(t,e,r,s,(t,e,r)=>!(!r&&o.InternalFunctionUtils.isLogicTrue(e)||(n=!1,0))):a=t.children[0]+" is not a collection or structure object to run Any"}return{value:n,error:a}}}r.All=a},{180:180,192:192,195:195,213:213}],13:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.And,l.evaluator,u.ReturnType.Boolean,o.FunctionUtils.validateAtLeastOne)}static evaluator(t,e,r){let n,i=!0;for(const o of t.children){const t=new a.Options(r);if(t.nullSubstitution=void 0,({value:i,error:n}=o.tryEvaluate(e,t)),n){i=!1,n=void 0;break}if(!s.InternalFunctionUtils.isLogicTrue(i)){i=!1;break}i=!0}return{value:i,error:n}}}r.And=l},{180:180,192:192,195:195,196:196,204:204,213:213}],14:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Any,a.evaluator,s.ReturnType.Boolean,o.InternalFunctionUtils.ValidateLambdaExpression)}static evaluator(t,e,r){let n=!1;const{value:i,error:s}=t.children[0].tryEvaluate(e,r);let a=s;if(!a){const s=o.InternalFunctionUtils.convertToList(i);s?o.InternalFunctionUtils.lambdaEvaluator(t,e,r,s,(t,e,r)=>!(r||!o.InternalFunctionUtils.isLogicTrue(e)||(n=!0,0))):a=t.children[0]+" is not a collection or structure object to run Any"}return{value:n,error:a}}}r.Any=a},{180:180,192:192,195:195,213:213}],15:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Average,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>t[0].reduce((t,e)=>t+e)/t[0].length,o.FunctionUtils.verifyNumericList)}}r.Average=a},{180:180,192:192,196:196,213:213}],16:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(399)),l=t(195);class c extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.Base64,c.evaluator(),a.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>{let e;const r=t[0];if("string"==typeof r&&(e=u.default(r)),r instanceof Uint8Array){const t=l.InternalFunctionUtils.getTextDecoder().decode(r);e=u.default(t)}return e})}}r.Base64=c},{180:180,192:192,195:195,196:196,213:213,399:399}],399:[function(t,e,r){e.exports=function(t){return btoa(t)}},{}],17:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(195),u=t(213),l=n(t(393));class c extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.Base64ToBinary,c.evaluator(),u.ReturnType.Object,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>{const e=l.default(t[0].toString());return a.InternalFunctionUtils.getTextEncoder().encode(e)},s.FunctionUtils.verifyString)}}r.Base64ToBinary=c},{180:180,192:192,195:195,196:196,213:213,393:393}],393:[function(t,e,r){e.exports=function(t){return atob(t)}},{}],18:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(393));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.Base64ToString,l.evaluator(),a.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>u.default(t[0]),s.FunctionUtils.verifyString)}}r.Base64ToString=l},{180:180,192:192,196:196,213:213,393:393}],19:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Binary,u.evaluator(),a.ReturnType.Object,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.getTextEncoder().encode(t[0]),o.FunctionUtils.verifyString)}}r.Binary=u},{180:180,192:192,195:195,196:196,213:213}],20:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(195),s=t(23);class a extends s.ComparisonEvaluator{constructor(){super(n.ExpressionType.Bool,a.func,i.FunctionUtils.validateUnary)}static func(t){return i.FunctionUtils.isNumber(t[0])?0!==t[0]:o.InternalFunctionUtils.isLogicTrue(t[0])}}r.Bool=a},{192:192,195:195,196:196,23:23}],23:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(1),i=t(180),o=t(196),s=t(213);class a extends i.ExpressionEvaluator{constructor(t,e,r,n){super(t,a.evaluator(e,n),s.ReturnType.Boolean,r)}static evaluator(t,e){return(r,i,s)=>{let a=!1;const u=new n.Options(s);u.nullSubstitution=void 0;const{args:l,error:c}=o.FunctionUtils.evaluateChildren(r,i,u,e);let h=c;if(h)h=void 0;else try{a=t(l)}catch(p){h=p.message}return{value:a,error:h}}}}r.ComparisonEvaluator=a},{1:1,180:180,196:196,213:213}],21:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(107);class o extends i.NumberTransformEvaluator{constructor(){super(n.ExpressionType.Ceiling,o.func)}static func(t){return Math.ceil(t[0])}}r.Ceiling=o},{107:107,192:192}],22:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Coalesce,a.evaluator(),s.ReturnType.Object,o.FunctionUtils.validateAtLeastOne)}static evaluator(){return o.FunctionUtils.apply(t=>a.evalCoalesce(t))}static evalCoalesce(t){for(const e of t)if(null!=e)return e}}r.Coalesce=a},{180:180,192:192,196:196,213:213}],24:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213),a=t(195);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Concat,u.evaluator(),s.ReturnType.String|s.ReturnType.Array,o.FunctionUtils.validateAtLeastOne)}static evaluator(){return o.FunctionUtils.applySequence(t=>{const e=t[0],r=t[1],n=Array.isArray(e),i=Array.isArray(r);return null==e&&null==r?void 0:null==e&&i?r:null==r&&n?e:n&&i?e.concat(r):a.InternalFunctionUtils.commonStringify(e)+a.InternalFunctionUtils.commonStringify(r)})}}r.Concat=u},{180:180,192:192,195:195,196:196,213:213}],25:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Contains,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateBinary)}static evaluator(t,e,r){let n=!1;const{args:i,error:a}=o.FunctionUtils.evaluateChildren(t,e,r);let u=a;if(!u)if("string"==typeof i[0]&&"string"==typeof i[1])n=i[0].includes(i[1]);else if(Array.isArray(i[0])){for(const s of i[0])if(o.FunctionUtils.commonEquals(s,i[1])){n=!0;break}}else if("string"==typeof i[1]){let t;({value:t,error:u}=s.InternalFunctionUtils.accessProperty(i[0],i[1])),n=!u&&void 0!==t}return{value:n,error:void 0}}}r.Contains=u},{180:180,192:192,195:195,196:196,213:213}],26:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(404));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213),h=t(214);class p extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.ConvertFromUTC,p.evaluator,c.ReturnType.String,p.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=p.NoneUtcDefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,4,o,i)),"string"==typeof s[0]&&"string"==typeof s[1]?({value:n,error:l}=p.evalConvertFromUTC(s[0],s[1],o,i)):l=t+" should contain an ISO format timestamp, an origin time zone string and an optional output format string."),{value:n,error:l}}static evalConvertFromUTC(t,e,r,n){let o,s;s=l.InternalFunctionUtils.verifyISOTimestamp(t);const a=h.TimeZoneConverter.windowsToIana(e);if(h.TimeZoneConverter.verifyTimeZoneStr(a)||(s=e+" is not a valid timezone"),!s)try{o=i.default(t).locale(n).tz(a).format(r)}catch(u){s=r+" is not a valid timestamp format"}return{value:o,error:s}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String,c.ReturnType.String)}}p.NoneUtcDefaultDateTimeFormat="YYYY-MM-DDTHH:mm:ss.SSS0000",r.ConvertFromUTC=p},{180:180,192:192,195:195,196:196,213:213,214:214,402:402,404:404}],404:[function(t,e,r){var n;n=function(){"use strict";var t={year:0,month:1,day:2,hour:3,minute:4,second:5},e={};return function(r,n,i){var o,s=i().utcOffset(),a=function(t,r,n){void 0===n&&(n={});var i=new Date(t);return function(t,r){void 0===r&&(r={});var n=r.timeZoneName||"short",i=t+"|"+n,o=e[i];return o||(o=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:t,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:n}),e[i]=o),o}(r,n).formatToParts(i)},u=function(e,r){for(var n=a(e,r),o=[],s=0;s<n.length;s+=1){var u=n[s],l=u.type,c=u.value,h=t[l];h>=0&&(o[h]=parseInt(c,10))}var p=o[3],d=24===p?0:p,f=o[0]+"-"+o[1]+"-"+o[2]+" "+d+":"+o[4]+":"+o[5]+":000",y=+e;return(i.utc(f).valueOf()-(y-=y%1e3))/6e4},l=n.prototype;l.tz=function(t,e){void 0===t&&(t=o);var r=this.utcOffset(),n=this.toDate().toLocaleString("en-US",{timeZone:t}),a=Math.round((this.toDate()-new Date(n))/1e3/60),u=i(n).$set("millisecond",this.$ms).utcOffset(s-a,!0);if(e){var l=u.utcOffset();u=u.add(r-l,"minute")}return u.$x.$timezone=t,u},l.offsetName=function(t){var e=this.$x.$timezone||i.tz.guess(),r=a(this.valueOf(),e,{timeZoneName:t}).find((function(t){return"timezonename"===t.type.toLowerCase()}));return r&&r.value};var c=l.startOf;l.startOf=function(t,e){if(!this.$x||!this.$x.$timezone)return c.call(this,t,e);var r=i(this.format("YYYY-MM-DD HH:mm:ss:SSS"));return c.call(r,t,e).tz(this.$x.$timezone,!0)},i.tz=function(t,e,r){var n=r&&e,s=r||e||o,a=u(+i(),s);if("string"!=typeof t)return i(t).tz(s);var l=function(t,e,r){var n=t-60*e*1e3,i=u(n,r);if(e===i)return[n,e];var o=u(n-=60*(i-e)*1e3,r);return i===o?[n,i]:[t-60*Math.min(i,o)*1e3,Math.max(i,o)]}(i.utc(t,n).valueOf(),a,s),c=l[0],h=l[1],p=i(c).utcOffset(h);return p.$x.$timezone=s,p},i.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},i.tz.setDefault=function(t){o=t}}},"object"==typeof r&&void 0!==e?e.exports=n():this.dayjs_plugin_timezone=n()},{}],27:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(404));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(213),c=t(214);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.ConvertToUTC,h.evaluator,l.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,4,o,i)),"string"==typeof s[0]&&"string"==typeof s[1]?({value:n,error:l}=h.evalConvertToUTC(s[0],s[1],o,i)):l=t+" should contain an ISO format timestamp, a destination time zone string and an optional output format string."),{value:n,error:l}}static verifyTimeStamp(t){if("Invalid Date"===i.default(t).toString())return t+" is a invalid datetime"}static evalConvertToUTC(t,e,r,n){let o,s,a;const u=c.TimeZoneConverter.windowsToIana(e);if(c.TimeZoneConverter.verifyTimeZoneStr(u)||(s=e+" is not a valid timezone"),!s&&!(s=this.verifyTimeStamp(t))){try{a=i.default.tz(t,u).format()}catch(l){s=`${t} with ${u} is not a valid timestamp with specified timeZone:`}if(!s)try{o=i.default(a).locale(n).tz("Etc/UTC").format(r)}catch(l){s=r+" is not a valid timestamp format"}}return{value:o,error:s}}static validator(t){u.FunctionUtils.validateOrder(t,[l.ReturnType.String,l.ReturnType.String],l.ReturnType.String,l.ReturnType.String)}}r.ConvertToUTC=h},{180:180,192:192,196:196,213:213,214:214,402:402,404:404}],28:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Count,a.evaluator(),s.ReturnType.Number,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{let e;return"string"==typeof t[0]||Array.isArray(t[0])?e=t[0].length:t[0]instanceof Map?e=t[0].size:"object"==typeof t[0]&&(e=Object.keys(t[0]).length),e},o.FunctionUtils.verifyContainer)}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.String|s.ReturnType.Array)}}r.Count=a},{180:180,192:192,196:196,213:213}],29:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.CountWord,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).trim().split(/\s+/).length,o.FunctionUtils.verifyStringOrNull)}}r.CountWord=u},{180:180,192:192,195:195,196:196,213:213}],30:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.CreateArray,a.evaluator(),s.ReturnType.Array)}static evaluator(){return o.FunctionUtils.apply(t=>Array.from(t))}}r.CreateArray=a},{180:180,192:192,196:196,213:213}],31:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(399));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.DataUri,l.evaluator(),a.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>"data:text/plain;charset=utf-8;base64,".concat(u.default(t[0])),s.FunctionUtils.verifyString)}}r.DataUri=l},{180:180,192:192,196:196,213:213,399:399}],32:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.DataUriToBinary,u.evaluator(),a.ReturnType.Object,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.getTextEncoder().encode(t[0]),o.FunctionUtils.verifyString)}}r.DataUriToBinary=u},{180:180,192:192,195:195,196:196,213:213}],33:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(393));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.DataUriToString,l.evaluator(),a.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.apply(t=>u.default(t[0].slice(t[0].indexOf(",")+1)),s.FunctionUtils.verifyString)}}r.DataUriToString=l},{180:180,192:192,196:196,213:213,393:393}],34:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.Date,h.evaluator(),c.ReturnType.String,u.FunctionUtils.validateUnaryString)}static evaluator(){return u.FunctionUtils.applyWithError(t=>{const e=l.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:i.default(t[0]).utc().format("M/DD/YYYY"),error:e}},u.FunctionUtils.verifyString)}}r.DateFunc=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],35:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(222),o=n(t(402)),s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.DateReadBack,h.evaluator(),c.ReturnType.String,h.validator)}static evaluator(){return u.FunctionUtils.applyWithError(t=>{let e=l.InternalFunctionUtils.verifyISOTimestamp(t[0]);if(!e){const r=o.default(t[0]).toDate();if(!(e=l.InternalFunctionUtils.verifyISOTimestamp(t[1]))){const n=o.default(t[1]).format("YYYY-MM-DD");return{value:new i.TimexProperty(n).toNaturalLanguage(r),error:e}}}return{value:void 0,error:e}},u.FunctionUtils.verifyString)}static validator(t){u.FunctionUtils.validateOrder(t,void 0,c.ReturnType.String,c.ReturnType.String)}}r.DateReadBack=h},{180:180,192:192,195:195,196:196,213:213,222:222,402:402}],222:[function(t,e,r){!function(t){"use strict";var e=class{constructor(t,e,r){1===arguments.length?(this.hour=Math.floor(t/36e5),this.minute=Math.floor((t-36e5*this.hour)/6e4),this.second=(t-36e5*this.hour-6e4*this.minute)/1e3):(this.hour=t,this.minute=e,this.second=r)}getTime(){return 1e3*this.second+6e4*this.minute+36e5*this.hour}};const r=function(t){return t},n=function(){return 0},i={date:[{regex:/^(\d\d\d\d)-(\d\d)-(\d\d)$/,props:{year:Number,month:Number,dayOfMonth:Number}},{regex:/^XXXX-WXX-(\d)$/,props:{dayOfWeek:Number}},{regex:/^XXXX-(\d\d)-(\d\d)$/,props:{month:Number,dayOfMonth:Number}},{regex:/^(\d\d\d\d)$/,props:{year:Number}},{regex:/^(\d\d\d\d)-(\d\d)$/,props:{year:Number,month:Number}},{regex:/^(SP|SU|FA|WI)$/,props:{season:r}},{regex:/^(\d\d\d\d)-(SP|SU|FA|WI)$/,props:{year:Number,season:r}},{regex:/^(\d\d\d\d)-W(\d\d)$/,props:{year:Number,weekOfYear:Number}},{regex:/^(\d\d\d\d)-W(\d\d)-WE$/,props:{year:Number,weekOfYear:Number,weekend:function(){return!0}}},{regex:/^XXXX-(\d\d)$/,props:{month:Number}},{regex:/^XXXX-(\d\d)-W(\d\d)$/,props:{month:Number,weekOfMonth:Number}},{regex:/^XXXX-(\d\d)-WXX-(\d)-(\d)$/,props:{month:Number,weekOfMonth:Number,dayOfWeek:Number}}],time:[{regex:/^T(\d\d)$/,props:{hour:Number,minute:n,second:n}},{regex:/^T(\d\d):(\d\d)$/,props:{hour:Number,minute:Number,second:n}},{regex:/^T(\d\d):(\d\d):(\d\d)$/,props:{hour:Number,minute:Number,second:Number}},{regex:/^T(DT|NI|MO|AF|EV)$/,props:{partOfDay:r}}],period:[{regex:/^P(\d*\.?\d+)(Y|M|W|D)$/,props:{amount:Number,dateUnit:r}},{regex:/^PT(\d*\.?\d+)(H|M|S)$/,props:{amount:Number,timeUnit:r}}]},o=function(t,e,r){const n=e.match(t.regex);if(!n)return!1;let i=1;for(const o in t.props){const e=n[i++];r[o]=t.props[o](e)}return!0};var s=function(t,e,r){for(const n of i[t])if(o(n,e,r))return!0;return!1};const a=function(t,e){const r={};s("period",t,r),r.dateUnit?e[{Y:"years",M:"months",W:"weeks",D:"days"}[r.dateUnit]]=r.amount:r.timeUnit&&(e[{H:"hours",M:"minutes",S:"seconds"}[r.timeUnit]]=r.amount)},u=function(t,e){const r=t.indexOf("T");-1===r?s("date",t,e):(s("date",t.substr(0,r),e),s("time",t.substr(r),e))};var l=function(t,e){"PRESENT_REF"===t?e.now=!0:t.startsWith("P")?a(t,e):t.startsWith("(")&&t.endsWith(")")?function(t,e){const r=t.substring(1,t.length-1).split(",");3===r.length&&(u(r[0],e),a(r[2],e))}(t,e):u(t,e)},c=function(t,e){Object.assign(e,t),"hour"in e&&("minute"in e||(e.minute=0),"second"in e||(e.second=0))},h=function(t){const e=new Set;return function(t){return!0===t.now}(t)&&e.add("present"),function(t){return"year"in t&&"month"in t&&"dayOfMonth"in t}(t)&&e.add("definite"),function(t){return"month"in t&&"dayOfMonth"in t||"dayOfWeek"in t}(t)&&e.add("date"),function(t){return"year"in t&&!("dayOfMonth"in t)||"year"in t&&"month"in t&&!("dayOfMonth"in t)||"month"in t&&!("dayOfMonth"in t)||"season"in t||"weekOfYear"in t||"weekOfMonth"in t}(t)&&e.add("daterange"),function(t){return"years"in t||"months"in t||"weeks"in t||"days"in t||"hours"in t||"minutes"in t||"seconds"in t}(t)&&e.add("duration"),function(t){return"hour"in t&&"minute"in t&&"second"in t}(t)&&e.add("time"),function(t){return"partOfDay"in t}(t)&&e.add("timerange"),e.has("present")&&(e.add("date"),e.add("time")),e.has("time")&&e.has("duration")&&e.add("timerange"),e.has("date")&&e.has("time")&&e.add("datetime"),e.has("date")&&e.has("duration")&&e.add("daterange"),e.has("datetime")&&e.has("duration")&&e.add("datetimerange"),e.has("date")&&e.has("timerange")&&e.add("datetimerange"),e};const p=function(t){const e=new Date;return e.setTime(t.getTime()),e},d=function(t){const e=p(t);return e.setDate(e.getDate()+1),e},f=function(t,e){return t.getFullYear()===e.getFullYear()&&t.getMonth()===e.getMonth()&&t.getDate()===e.getDate()},y=function(t,e){let r=p(e);for(let n=0;n<7;n++){if(f(t,r))return!0;r=d(r)}return!1};var m=d,g=function(t){const e=p(t);return e.setDate(e.getDate()-1),e},v=f,T=function(t,e){const r=p(e);return r.setDate(r.getDate()+(7-r.getDay())),y(t,r)},_=function(t,e){const r=p(e);return r.setDate(r.getDate()-(7+r.getDay())),y(t,r)},E=function(t,e){const r=t.toString();let n="";const i=e-r.length;for(let o=0;o<i;o++)n+="0";return`${n}${r}`},b=function(t,e){const r=p(e);for(r.setDate(r.getDate()-1);r.getDay()!==t;)r.setDate(r.getDate()-1);return r},S=function(t,e){const r=p(e);do{r.setDate(r.getDate()+1)}while(r.getDay()!==t);return r};const x=e,C=function(t){const e=Object.assign({},t);return delete e.year,delete e.month,delete e.dayOfMonth,delete e.dayOfWeek,delete e.weekOfYear,delete e.weekOfMonth,delete e.season,delete e.hour,delete e.minute,delete e.second,delete e.weekend,delete e.partOfDay,e},A=function(t,e){if("hours"in e){const r=Object.assign({},t);if(r.hour+=e.hours,r.hour>23){const t=Math.floor(r.hour/24),e=r.hour%24;if(r.hour=e,"year"in r&&"month"in r&&"dayOfMonth"in r){const e=new Date(r.year,r.month-1,r.dayOfMonth,0,0,0);for(let r=0;r<t;r++)e.setDate(e.getDate()+1);return r.year=e.getFullYear(),r.month=e.getMonth()+1,r.dayOfMonth=e.getDate(),r}if("dayOfWeek"in r)return r.dayOfWeek+=t,r}return r}if("minutes"in e){const r=Object.assign({},t);return r.minute+=e.minutes,r.minute>59&&(r.hour++,r.minute=0),r}return t},N=function(t,e){return A(function(t,e){if("dayOfWeek"in t){const r=Object.assign({},t);return"days"in e&&(r.dayOfWeek+=e.days),r}if("month"in t&&"dayOfMonth"in t){var r=e.days;if(void 0===r&&void 0!==e.weeks&&(r=7*e.weeks),void 0!==r){if("year"in t){const e=new Date(t.year,t.month-1,t.dayOfMonth,0,0,0);for(let t=0;t<r;t++)e.setDate(e.getDate()+1);return{year:e.getFullYear(),month:e.getMonth()+1,dayOfMonth:e.getDate()}}{const e=new Date(2001,t.month-1,t.dayOfMonth,0,0,0);for(let t=0;t<r;t++)e.setDate(e.getDate()+1);return{month:e.getMonth()+1,dayOfMonth:e.getDate()}}}if("years"in e&&"year"in t)return{year:t.year+e.years,month:t.month,dayOfMonth:t.dayOfMonth};if("months"in e&&"month"in t)return{year:t.year,month:t.month+e.months,dayOfMonth:t.dayOfMonth}}return t}(t,e),e)},O=function(t){if(("types"in t?t.types:h(t)).has("duration")){const e=function(t){const e=Object.assign({},t);return delete e.years,delete e.months,delete e.weeks,delete e.days,delete e.hours,delete e.minutes,delete e.seconds,e}(t),r=C(t);return{start:e,end:N(e,r),duration:r}}if("year"in t){const e={start:{year:t.year},end:{}};return"month"in t?(e.start.month=t.month,e.start.dayOfMonth=1,e.end.year=t.year,e.end.month=t.month+1,e.end.dayOfMonth=1):(e.start.month=1,e.start.dayOfMonth=1,e.end.year=t.year+1,e.end.month=1,e.end.dayOfMonth=1),e}return{start:{},end:{}}},w=function(t,e){const r=e.hours||0,n=e.minutes||0,i=e.seconds||0;return{hour:t.hour+r,minute:t.minute+n,second:t.second+i}},R=function(t){if(!t.types.has("timerange"))throw new exception("argument must be a timerange");if(void 0!==t.partOfDay)switch(t.partOfDay){case"DT":t={hour:8,minute:0,second:0,hours:10,minutes:0,seconds:0};break;case"MO":t={hour:8,minute:0,second:0,hours:4,minutes:0,seconds:0};break;case"AF":t={hour:12,minute:0,second:0,hours:4,minutes:0,seconds:0};break;case"EV":t={hour:16,minute:0,second:0,hours:4,minutes:0,seconds:0};break;case"NI":t={hour:20,minute:0,second:0,hours:4,minutes:0,seconds:0};break;default:throw new exception("unrecognized part of day timerange")}const e={hour:t.hour,minute:t.minute,second:t.second},r=C(t);return{start:e,end:w(e,r),duration:r}},L=function(t){const e="year"in t?t.year:2001,r="month"in t?t.month-1:0,n="dayOfMonth"in t?t.dayOfMonth:1,i="hour"in t?t.hour:0,o="minute"in t?t.minute:0,s="second"in t?t.second:0;return new Date(e,r,n,i,o,s)},P=function(t){const e=t.hour||0,r=t.minute||0,n=t.second||0;return new x(e,r,n)};var I=O,D=R,U=L,M=P,k=function(t){const e=R(t);return{start:P(e.start),end:P(e.end)}},F=A,j=N;const B=E,H=function(t){return 0===t.minute&&0===t.second?"T"+B(t.hour,2):0===t.second?`T${B(t.hour,2)}:${B(t.minute,2)}`:`T${B(t.hour,2)}:${B(t.minute,2)}:${B(t.second,2)}`},G=function(t){return"year"in t&&"month"in t&&"dayOfMonth"in t?`${B(t.year,4)}-${B(t.month,2)}-${B(t.dayOfMonth,2)}`:"month"in t&&"dayOfMonth"in t?`XXXX-${B(t.month,2)}-${B(t.dayOfMonth,2)}`:"dayOfWeek"in t?"XXXX-WXX-"+t.dayOfWeek:""},z=function(t){return"partOfDay"in t?"T"+t.partOfDay:""},W=function(t){const e="types"in t?t.types:h(t);if(e.has("present"))return"PRESENT_REF";if((e.has("datetimerange")||e.has("daterange")||e.has("timerange"))&&e.has("duration")){const e=I(t);return`(${W(e.start)},${W(e.end)},${W(e.duration)})`}return e.has("datetimerange")?`${G(t)}${z(t)}`:e.has("daterange")?""+function(t){return"year"in t&&"weekOfYear"in t&&"weekend"in t?`${B(t.year,4)}-W${B(t.weekOfYear,2)}-WE`:"year"in t&&"weekOfYear"in t?`${B(t.year,4)}-W${B(t.weekOfYear,2)}`:"year"in t&&"season"in t?`${B(t.year,4)}-${t.season}`:"season"in t?""+t.season:"year"in t&&"month"in t?`${B(t.year,4)}-${B(t.month,2)}`:"year"in t?""+B(t.year,4):"month"in t&&"weekOfMonth"in t&&"dayOfWeek"in t?`XXXX-${B(t.month,2)}-WXX-${t.weekOfMonth}-${t.dayOfWeek}`:"month"in t&&"weekOfMonth"in t?`XXXX-${B(t.month,2)}-WXX-${t.weekOfMonth}`:"month"in t?"XXXX-"+B(t.month,2):""}(t):e.has("timerange")?""+z(t):e.has("datetime")?`${G(t)}${H(t)}`:e.has("duration")?""+function(t){return"years"in t?`P${t.years}Y`:"months"in t?`P${t.months}M`:"weeks"in t?`P${t.weeks}W`:"days"in t?`P${t.days}D`:"hours"in t?`PT${t.hours}H`:"minutes"in t?`PT${t.minutes}M`:"seconds"in t?`PT${t.seconds}S`:""}(t):e.has("date")?""+G(t):e.has("time")?""+H(t):""};var V={format:W},$={days:["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],months:["January","Februrary","March","April","May","June","July","August","September","October","November","December"],dateAbbreviation:{0:"th",1:"st",2:"nd",3:"rd",4:"th",5:"th",6:"th",7:"th",8:"th",9:"th"},hours:["midnight","1AM","2AM","3AM","4AM","5AM","6AM","7AM","8AM","9AM","10AM","11AM","midday","1PM","2PM","3PM","4PM","5PM","6PM","7PM","8PM","9PM","10PM","11PM"],seasons:{SP:"spring",SU:"summer",FA:"fall",WI:"winter"},weeks:["first","second","third","forth"],dayParts:{DT:"daytime",NI:"night",MO:"morning",AF:"afternoon",EV:"evening"}};const q=function(t){if("dayOfWeek"in t)return $.days[t.dayOfWeek-1];const e=$.months[t.month-1],r=t.dayOfMonth.toString(),n=$.dateAbbreviation[r.slice(-1)];return"year"in t?`${r}${n} ${e} ${t.year}`.trim():`${r}${n} ${e}`},Y=function(t){if(0===t.hour&&0===t.minute&&0===t.second)return"midnight";if(12===t.hour&&0===t.minute&&0===t.second)return"midday";const e=function(t){return 1===t.length?"0"+t:t};return`${0===t.hour?"12":t.hour>12?(t.hour-12).toString():t.hour.toString()}${0===t.minute&&0===t.second?"":":"+e(t.minute.toString())}${0===t.second?"":":"+e(t.second.toString())}${t.hour<12?"AM":"PM"}`},K=function(t,e,r){const n=t[e+"s"];return void 0!==n&&(1===n?r?"1 "+e:e:`${n} ${e}s`)},X=function(t,e){return K(t,"year",e)||K(t,"month",e)||K(t,"week",e)||K(t,"day",e)||K(t,"hour",e)||K(t,"minute",e)||K(t,"second",e)},Q=function(t){return $.dayParts[t.partOfDay]},Z=function(t){const e="types"in t?t.types:h(t);return e.has("present")?"now":e.has("datetimerange")?function(t){return t.types.has("timerange")?`${q(t)} ${Q(t)}`:""}(t):e.has("daterange")?function(t){const e="season"in t?$.seasons[t.season]:"",r="year"in t?t.year.toString():"";if("weekOfYear"in t)return t.weekend,"";if("month"in t){const e=""+$.months[t.month-1];return"weekOfMonth"in t?`${$.weeks[t.weekOfMonth-1]} week of ${e}`:`${e} ${r}`.trim()}return`${e} ${r}`.trim()}(t):e.has("duration")?function(t){return X(t,!0)}(t):e.has("timerange")?Q(t):e.has("datetime")?function(t){return`${Y(t)} ${q(t)}`}(t):e.has("date")?q(t):e.has("time")?Y(t):""};var J={convertDate:q,convertTime:Y,convertTimexToString:Z,convertTimexSetToString:function(t){const e=t.timex;return e.types.has("duration")?"every "+X(e,!1):"every "+Z(e)}},tt={convertTimexToString:J.convertTimexToString,convertTimexSetToString:J.convertTimexSetToString};const et=function(t){return $.days[0===t?6:t-1]},rt=function(t,e){if("year"in t&&"month"in t&&"dayOfMonth"in t){const r=new Date(t.year,t.month-1,t.dayOfMonth);if(v(r,e))return"today";const n=m(e);if(v(r,n))return"tomorrow";const i=g(e);if(v(r,i))return"yesterday";if(function(t,e){const r=p(e);return r.setDate(r.getDate()-r.getDay()),y(t,r)}(r,e))return"this "+et(r.getDay());if(T(r,e))return"next "+et(r.getDay());if(_(r,e))return"last "+et(r.getDay())}return J.convertDate(t)};var nt={convertTimexToStringRelative:function(t,e){const r="types"in t?t.types:h(t);return r.has("datetimerange")?function(t,e){if("year"in t&&"month"in t&&"dayOfMonth"in t){const r=new Date(t.year,t.month-1,t.dayOfMonth);if("partOfDay"in t){if(v(r,e))return"NI"===t.partOfDay?"tonight":"this "+$.dayParts[t.partOfDay];const n=m(e);if(v(r,n))return"tomorrow "+$.dayParts[t.partOfDay];const i=g(e);if(v(r,i))return"yesterday "+$.dayParts[t.partOfDay];if(T(r,e))return`next ${et(r.getDay())} ${$.dayParts[t.partOfDay]}`;if(_(r,e))return`last ${et(r.getDay())} ${$.dayParts[t.partOfDay]}`}}return""}(t,e):r.has("daterange")?function(t,e){if("year"in t){const r=e.getFullYear();if(t.year===r){if("weekOfYear"in t){const r=function(t){const e=new Date(t.getFullYear(),0),r=new Date(t.getFullYear(),t.getMonth(),t.getDate());let n=1;for(;e.getTime()<r.getTime();){const t=e.getDay();7===(0==t?7:t)&&n++,e.setDate(e.getDate()+1)}return n}(e);if(r===t.weekOfYear)return t.weekend?"this weekend":"this week";if(r===t.weekOfYear+1)return t.weekend?"last weekend":"last week";if(r===t.weekOfYear-1)return t.weekend?"next weekend":"next week"}if("month"in t){const r=e.getMonth()+1;if(t.month===r)return"this month";if(t.month===r+1)return"next month";if(t.month===r-1)return"last month"}return"season"in t?"this "+$.seasons[t.season]:"this year"}if(t.year===r+1)return"season"in t?"next "+$.seasons[t.season]:"next year";if(t.year===r-1)return"season"in t?"last "+$.seasons[t.season]:"last year"}return""}(t,e):r.has("datetime")?function(t,e){return`${rt(t,e)} ${J.convertTime(t)}`}(t,e):r.has("date")?rt(t,e):J.convertTimexToString(t)}};class it{constructor(t){"string"==typeof t?l(t,this):c(t,this)}get timex(){return V.format(this)}get types(){return h(this)}toString(){return tt.convertTimexToString(this)}toNaturalLanguage(t){return nt.convertTimexToStringRelative(this,t)}static fromDate(t){return new it({year:t.getFullYear(),month:t.getMonth()+1,dayOfMonth:t.getDate()})}static fromDateTime(t){return new it({year:t.getFullYear(),month:t.getMonth()+1,dayOfMonth:t.getDate(),hour:t.getHours(),minute:t.getMinutes(),second:t.getSeconds()})}static fromTime(t){return new it(t)}}var ot={TimexProperty:it};const st=ot.TimexProperty,at=ot.TimexProperty;var ut={today:function(t){return at.fromDate(t||new Date).timex},tomorrow:function(t){const e=void 0===t?new Date:new Date(t.getTime());return e.setDate(e.getDate()+1),at.fromDate(e).timex},yesterday:function(t){const e=void 0===t?new Date:new Date(t.getTime());return e.setDate(e.getDate()-1),at.fromDate(e).timex},weekFromToday:function(t){const e=void 0===t?new Date:new Date(t.getTime());return new at(Object.assign(at.fromDate(e),{days:7})).timex},weekBackFromToday:function(t){const e=void 0===t?new Date:new Date(t.getTime());return e.setDate(e.getDate()-7),new at(Object.assign(at.fromDate(e),{days:7})).timex},thisWeek:function(t){const e=void 0===t?new Date:new Date(t.getTime());e.setDate(e.getDate()-7);const r=S(1,e);return new at(Object.assign(at.fromDate(r),{days:7})).timex},nextWeek:function(t){const e=void 0===t?new Date:new Date(t.getTime()),r=S(1,e);return new at(Object.assign(at.fromDate(r),{days:7})).timex},lastWeek:function(t){const e=void 0===t?new Date:new Date(t.getTime()),r=b(1,e);return r.setDate(r.getDate()-7),new at(Object.assign(at.fromDate(r),{days:7})).timex},nextWeeksFromToday:function(t,e){const r=void 0===e?new Date:new Date(e.getTime());return new at(Object.assign(at.fromDate(r),{days:7*t})).timex},monday:"XXXX-WXX-1",tuesday:"XXXX-WXX-2",wednesday:"XXXX-WXX-3",thursday:"XXXX-WXX-4",friday:"XXXX-WXX-5",saturday:"XXXX-WXX-6",sunday:"XXXX-WXX-7",morning:"(T08,T12,PT4H)",afternoon:"(T12,T16,PT4H)",evening:"(T16,T20,PT4H)",daytime:"(T08,T18,PT10H)"};const lt=function(t,e){return t.end.getTime()>e.start.getTime()&&t.start.getTime()<=e.start.getTime()||t.start.getTime()<e.end.getTime()&&t.start.getTime()>=e.start.getTime()},ct=function(t,e,r){return{start:new r(Math.max(t.start.getTime(),e.start.getTime())),end:new r(Math.min(t.end.getTime(),e.end.getTime()))}},ht=function(t,e){if(1===t.length)return!1;for(let r=0;r<t.length;r++){const n=t[r];for(let i=r+1;i<t.length;i++){const o=t[i];if(lt(n,o))return t.splice(r,1),t.splice(i-1,1),t.push(ct(n,o,e)),!0}}return!1};var pt=function(t,e){const r=t.slice(0);for(;ht(r,e););return r.sort((t,e)=>t.start.getTime()-e.start.getTime()),r},dt=lt;const ft=e,yt=ot.TimexProperty,mt=function(t,e){const r=U(t);return r.getTime()>=e.start.getTime()&&r.getTime()<e.end.getTime()?[t.timex]:[]},gt=function(t,e){if("month"in t&&"dayOfMonth"in t){const r=[];for(let n=e.start.getFullYear();n<=e.end.getFullYear();n++){const i=mt(new yt(Object.assign({},t,{year:n})),e);i.length>0&&r.push(i[0])}return r}if("dayOfWeek"in t){const r=function(t,e,r){const n=[],i=p(e);for(;!f(i,r);)i.getDay()===t&&n.push(p(i)),i.setDate(i.getDate()+1);return n}(7===t.dayOfWeek?0:t.dayOfWeek,e.start,e.end),n=[];for(const e of r){const r=Object.assign({},t);delete r.dayOfWeek;const i=new yt(Object.assign({},r,{year:e.getFullYear(),month:e.getMonth()+1,dayOfMonth:e.getDate()}));n.push(i.timex)}return n}return[]},vt=function(t,e){const r=[];for(const n of e)Array.prototype.push.apply(r,gt(t,n));return r},Tt=function(t,e){const r=new ft(t.hour,t.minute,t.second);return r.getTime()>=e.start.getTime()&&r.getTime()<e.end.getTime()?[t.timex]:[]},_t=function(t,e){const r=[];for(const n of e)Array.prototype.push.apply(r,Tt(t,n));return r},Et=function(t){var e=new Set;return t.filter(t=>!e.has(t)&&e.add(t))},bt=function(t,e){const r=k(t),n=[];for(const i of e)if(dt(r,i)){const e=Math.max(r.start.getTime(),i.start.getTime()),o=new ft(e),s=new yt(t.timex);delete s.partOfDay,delete s.seconds,delete s.minutes,delete s.hours,s.second=o.second,s.minute=o.minute,s.hour=o.hour,n.push(s.timex)}return n},St=function(t,e){const r=[];for(const n of e)n.types.has("datetime")?r.push(new yt(j(n,t))):n.types.has("time")&&r.push(new yt(F(n,t)));return r},xt=E;var Ct=function(t){return void 0!==t.year&&void 0!==t.month&&void 0!==t.dayOfMonth?`${xt(t.year,4)}-${xt(t.month,2)}-${xt(t.dayOfMonth,2)}`:""},At=function(t){return void 0!==t.hour&&void 0!==t.minute&&void 0!==t.second?`${xt(t.hour,2)}:${xt(t.minute,2)}:${xt(t.second,2)}`:""};const Nt=ot.TimexProperty,Ot=b,wt=S,Rt=function(t,e){if(void 0!==t.month&&void 0!==t.dayOfMonth)return Ct({year:e.getFullYear()-1,month:t.month,dayOfMonth:t.dayOfMonth});if(void 0!==t.dayOfWeek){const r=7===t.dayOfWeek?0:t.dayOfWeek,n=Ot(r,e);return Ct({year:n.getFullYear(),month:n.getMonth()+1,dayOfMonth:n.getDate()})}},Lt=function(t,e){if(void 0!==t.month&&void 0!==t.dayOfMonth)return Ct({year:e.getFullYear(),month:t.month,dayOfMonth:t.dayOfMonth});if(void 0!==t.dayOfWeek){const r=7===t.dayOfWeek?0:t.dayOfWeek,n=wt(r,e);return Ct({year:n.getFullYear(),month:n.getMonth()+1,dayOfMonth:n.getDate()})}},Pt=function(t,e){return[{timex:t.timex,type:"date",value:Rt(t,e)},{timex:t.timex,type:"date",value:Lt(t,e)}]},It=function(t,e){return{start:Ct({year:t,month:e,dayOfMonth:1}),end:Ct({year:t,month:e+1,dayOfMonth:1})}},Dt=function(t){switch(t.partOfDay){case"MO":return{start:"08:00:00",end:"12:00:00"};case"AF":return{start:"12:00:00",end:"16:00:00"};case"EV":return{start:"16:00:00",end:"20:00:00"};case"NI":return{start:"20:00:00",end:"24:00:00"}}return{start:"not resolved",end:"not resolved"}},Ut=function(t,e){const r="types"in t?t.types:h(t);return r.has("datetimerange")?function(t){if("partOfDay"in t){const e=Ct(t),r=Dt(t);return[{timex:t.timex,type:"datetimerange",start:`${e} ${r.start}`,end:`${e} ${r.end}`}]}{const e=I(t);return[{timex:t.timex,type:"datetimerange",start:`${Ct(e.start)} ${At(e.start)}`,end:`${Ct(e.end)} ${At(e.end)}`}]}}(t):r.has("definite")&&r.has("time")?function(t,e){return[{timex:t.timex,type:"datetime",value:`${Ct(t)} ${At(t)}`}]}(t):r.has("definite")&&r.has("daterange")?function(t){var e=I(t);return[{timex:t.timex,type:"daterange",start:""+Ct(e.start),end:""+Ct(e.end)}]}(t):r.has("definite")?function(t,e){return[{timex:t.timex,type:"date",value:Ct(t)}]}(t):r.has("daterange")?function(t,e){if("season"in t)return[{timex:t.timex,type:"daterange",value:"not resolved"}];if(void 0!==t.year&&void 0!==t.month){const e=It(t.year,t.month);return[{timex:t.timex,type:"daterange",start:e.start,end:e.end}]}if(void 0!==t.year&&void 0!==t.weekOfYear){const e=function(t,e){var r=new Date(t,0,1);r.setDate(r.getDate()+7*(e-1));var n=Ot(1,r);r.setDate(r.getDate()+7);var i=Ot(1,r);return{start:Ct({year:n.getFullYear(),month:n.getMonth()+1,dayOfMonth:n.getDate()}),end:Ct({year:i.getFullYear(),month:i.getMonth()+1,dayOfMonth:i.getDate()})}}(t.year,t.weekOfYear);return[{timex:t.timex,type:"daterange",start:e.start,end:e.end}]}if(void 0!==t.month){const r=e.getFullYear(),n=It(r-1,t.month),i=It(r,t.month);return[{timex:t.timex,type:"daterange",start:n.start,end:n.end},{timex:t.timex,type:"daterange",start:i.start,end:i.end}]}if(void 0!==t.year){const e=(r=t.year,{start:Ct({year:r,month:1,dayOfMonth:1}),end:Ct({year:r+1,month:1,dayOfMonth:1})});return[{timex:t.timex,type:"daterange",start:e.start,end:e.end}]}return[];var r}(t,e):r.has("timerange")?function(t,e){if("partOfDay"in t){const e=Dt(t);return[{timex:t.timex,type:"timerange",start:e.start,end:e.end}]}{const e=D(t);return[{timex:t.timex,type:"timerange",start:At(e.start),end:At(e.end)}]}}(t):r.has("datetime")?function(t,e){const r=Pt(t,e);for(const n of r)n.type="datetime",n.value=`${n.value} ${At(t)}`;return r}(t,e):r.has("duration")?function(t){return[{timex:t.timex,type:"duration",value:(e=t,void 0!==e.years?(31536e3*e.years).toString():void 0!==e.months?(2592e3*e.months).toString():void 0!==e.weeks?(604800*e.weeks).toString():void 0!==e.days?(86400*e.days).toString():void 0!==e.hours?(3600*e.hours).toString():void 0!==e.minutes?(60*e.minutes).toString():void 0!==e.seconds?e.seconds.toString():"")}];var e}(t):r.has("date")?Pt(t,e):r.has("time")?function(t){return[{timex:t.timex,type:"time",value:At(t)}]}(t):[]};var Mt={Time:e,TimexProperty:ot.TimexProperty,TimexSet:class{constructor(t){this.timex=new st(t)}},creator:ut,resolver:{evaluate:function(t,e){const r=e.map(t=>new yt(t));return function(t,e){const r=e.filter(t=>t.types.has("timerange")).map(t=>k(t)),n=pt(r,ft);if(0===n.length)return t;const i=[];for(const o of t){const t=new yt(o);if(t.types.has("timerange")){const e=bt(t,n);Array.prototype.push.apply(i,e)}else if(t.types.has("time")){const e=_t(t,n);Array.prototype.push.apply(i,e)}}return Et(i)}(function(t,e){const r=e.filter(t=>t.types.has("time")).map(t=>M(t));if(0===r.length)return t;const n=[];for(const i of t.map(t=>new yt(t)))if(i.types.has("date")&&!i.types.has("time"))for(const t of r)i.hour=t.hour,i.minute=t.minute,i.second=t.second,n.push(i.timex);else n.push(i.timex);return Et(n)}(function(t,e){const r=e.filter(t=>t.types.has("daterange")).map(t=>function(t){const e=O(t);return{start:L(e.start),end:L(e.end)}}(t)),n=pt(r,Date);if(0===n.length)return t;const i=[];for(const o of t){const t=vt(new yt(o),n);Array.prototype.push.apply(i,t)}return Et(i)}(function(t,e){const r=[];for(const n of t){const t=new yt(n);if(t.types.has("duration")){const n=St(t,e);for(const t of n)r.push(t.timex)}else r.push(n)}return r}(t,r),r),r),r).map(t=>new yt(t))}},valueResolver:{resolve:function(t,e){const r={values:[]};for(const n of t){const t=new Nt(n),i=Ut(t,e);Array.prototype.push.apply(r.values,i)}return r}}},kt=Mt.Time,Ft=Mt.TimexProperty,jt=Mt.valueResolver;t.Time=kt,t.TimexProperty=Ft,t.valueResolver=jt}({})},{}],36:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=n(t(402)),u=t(213),l=t(195);class c extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.DateTimeDiff,c.evaluator,u.ReturnType.Number,c.validator)}static evaluator(t,e,r){let n;const{args:i,error:o}=s.FunctionUtils.evaluateChildren(t,e,r);let u=o;return u||(u=l.InternalFunctionUtils.verifyISOTimestamp(i[0]))||(u=l.InternalFunctionUtils.verifyISOTimestamp(i[1]))||(n=1e4*a.default(i[0]).diff(a.default(i[1]),"milliseconds")),{value:n,error:u}}static validator(t){s.FunctionUtils.validateArityAndAnyType(t,2,2,u.ReturnType.String)}}r.DateTimeDiff=c},{180:180,192:192,195:195,196:196,213:213,402:402}],37:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.DayOfMonth,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{const e=s.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:new Date(t[0]).getUTCDate(),error:e}},o.FunctionUtils.verifyString)}}r.DayOfMonth=u},{180:180,192:192,195:195,196:196,213:213}],38:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.DayOfWeek,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{const e=s.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:new Date(t[0]).getUTCDay(),error:e}},o.FunctionUtils.verifyString)}}r.DayOfWeek=u},{180:180,192:192,195:195,196:196,213:213}],39:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(403));i.default.extend(o.default);const s=n(t(405));i.default.extend(s.default);const a=t(180),u=t(192),l=t(196),c=t(195),h=t(213);class p extends a.ExpressionEvaluator{constructor(){super(u.ExpressionType.DayOfYear,p.evaluator(),h.ReturnType.Number,l.FunctionUtils.validateUnaryString)}static evaluator(){return l.FunctionUtils.applyWithError(t=>{const e=c.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:i.default(t[0]).utc().dayOfYear(),error:e}},l.FunctionUtils.verifyString)}}r.DayOfYear=p},{180:180,192:192,195:195,196:196,213:213,402:402,403:403,405:405}],403:[function(t,e,r){var n;n=function(){"use strict";return function(t,e){e.prototype.dayOfYear=function(t){var e=Math.round((this.startOf("day")-this.startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"day")}}},"object"==typeof r&&void 0!==e?e.exports=n():this.dayjs_plugin_dayOfYear=n()},{}],40:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(103);class s extends o.MultivariateNumericEvaluator{constructor(){super(n.ExpressionType.Divide,s.func,s.verify)}static func(t){const e=Number(t[0])/Number(t[1]);return Number.isInteger(t[0])&&Number.isInteger(t[1])?Math.floor(e):e}static verify(t,e,r){let n=i.FunctionUtils.verifyNumber(t,e,r);return!n&&r>0&&0===Number(t)&&(n="Cannot divide by 0 from "+e),n}}r.Divide=s},{103:103,192:192,196:196}],103:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(196),o=t(213);class s extends n.ExpressionEvaluator{constructor(t,e,r){super(t,s.evaluator(e,r),o.ReturnType.Number,i.FunctionUtils.validateTwoOrMoreThanTwoNumbers)}static evaluator(t,e){return i.FunctionUtils.applySequence(t,e||i.FunctionUtils.verifyNumber)}}r.MultivariateNumericEvaluator=s},{180:180,196:196,213:213}],41:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Element,l.evaluator,u.ReturnType.Object,o.FunctionUtils.validateBinary)}static evaluator(t,e,r){let n;const i=t.children[0],o=t.children[1],{value:u,error:l}=i.tryEvaluate(e,r);let c=l;if(!c){let t;const i=new a.Options(r);if(i.nullSubstitution=void 0,({value:t,error:c}=o.tryEvaluate(e,i)),!c)return Number.isInteger(t)?({value:n,error:c}=s.InternalFunctionUtils.accessIndex(u,Number(t))):"string"==typeof t?({value:n,error:c}=s.InternalFunctionUtils.accessProperty(u,t.toString())):c=`Could not coerce ${o} to an int or string.`,{value:n,error:c}}}}r.Element=l},{180:180,192:192,195:195,196:196,204:204,213:213}],42:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.Empty,s.func,i.FunctionUtils.validateUnary,i.FunctionUtils.verifyContainerOrNull)}static func(t){return s.isEmpty(t[0])}static isEmpty(t){return null==t||("string"==typeof t?""===t:Array.isArray(t)?0===t.length:t instanceof Map?0===t.size:0===Object.keys(t).length)}}r.Empty=s},{192:192,196:196,23:23}],43:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.EndsWith,u.evaluator(),a.ReturnType.Boolean,u.validator)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).endsWith(s.InternalFunctionUtils.parseStringOrUndefined(t[1])),o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,2,2,a.ReturnType.String)}}r.EndsWith=u},{180:180,192:192,195:195,196:196,213:213}],44:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.EOL,a.evaluator(),s.ReturnType.String,a.validator)}static evaluator(){return o.FunctionUtils.apply(()=>a.platformSpecificEOL())}static platformSpecificEOL(){return"undefined"!=typeof window?window.navigator.platform.includes("Win")?"\r\n":"\n":"undefined"!=typeof self?self.navigator.platform.includes("Win")?"\r\n":"\n":t(427).EOL}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,0,0)}}r.EOL=a},{180:180,192:192,196:196,213:213,427:427}],427:[function(t,e,r){r.EOL="\n"},{}],45:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);r.Equal=class extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.Equal,t=>i.FunctionUtils.commonEquals(t[0],t[1]),i.FunctionUtils.validateBinary)}}},{192:192,196:196,23:23}],46:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.Exists,s.func,i.FunctionUtils.validateUnary,i.FunctionUtils.verifyNotNull)}static func(t){return null!=t[0]}}r.Exists=s},{192:192,196:196,23:23}],47:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.First,u.evaluator(),a.ReturnType.Object,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>{let e;return"string"==typeof t[0]&&t[0].length>0&&(e=t[0][0]),Array.isArray(t[0])&&t[0].length>0&&(e=s.InternalFunctionUtils.accessIndex(t[0],0).value),e})}}r.First=u},{180:180,192:192,195:195,196:196,213:213}],48:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Flatten,a.evaluator(),s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{const e=t[0],r=t.length>1?t[1]:100;return a.evalFlatten(e,r)})}static evalFlatten(t,e){(!o.FunctionUtils.isNumber(e)||e<1)&&(e=1);let r=JSON.parse(JSON.stringify(t));for(let n=0;n<e&&r.some(t=>Array.isArray(t));n++)r=r.reduce((t,e)=>t.concat(e),[]);return r}static validator(t){o.FunctionUtils.validateOrder(t,[s.ReturnType.Number],s.ReturnType.Array)}}r.Flatten=a},{180:180,192:192,196:196,213:213}],49:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(396));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.Float,l.evaluator(),a.ReturnType.Number,s.FunctionUtils.validateUnary)}static evaluator(){return s.FunctionUtils.applyWithError(t=>{const e=t[0];let r,n;return u.default.isInstance(e)?{value:e.toJSNumber(),error:r}:("string"==typeof e?(n=parseFloat(e),s.FunctionUtils.isNumber(n)||(r=`parameter ${t[0]} is not a valid number string.`)):s.FunctionUtils.isNumber(e)&&(n=e),{value:n,error:r})})}}r.Float=l},{180:180,192:192,196:196,213:213,396:396}],396:[function(t,e,r){var n=function(t){"use strict";var e=1e7,r=9007199254740992,i=h(r),o="function"==typeof BigInt;function s(t,e,r,n){return void 0===t?s[0]:void 0===e||10==+e&&!r?V(t):B(t,e,r,n)}function a(t,e){this.value=t,this.sign=e,this.isSmall=!1}function u(t){this.value=t,this.sign=t<0,this.isSmall=!0}function l(t){this.value=t}function c(t){return-r<t&&t<r}function h(t){return t<1e7?[t]:t<1e14?[t%1e7,Math.floor(t/1e7)]:[t%1e7,Math.floor(t/1e7)%1e7,Math.floor(t/1e14)]}function p(t){d(t);var r=t.length;if(r<4&&O(t,i)<0)switch(r){case 0:return 0;case 1:return t[0];case 2:return t[0]+t[1]*e;default:return t[0]+(t[1]+t[2]*e)*e}return t}function d(t){for(var e=t.length;0===t[--e];);t.length=e+1}function f(t){for(var e=new Array(t),r=-1;++r<t;)e[r]=0;return e}function y(t){return t>0?Math.floor(t):Math.ceil(t)}function m(t,r){var n,i,o=t.length,s=r.length,a=new Array(o),u=0,l=e;for(i=0;i<s;i++)u=(n=t[i]+r[i]+u)>=l?1:0,a[i]=n-u*l;for(;i<o;)u=(n=t[i]+u)===l?1:0,a[i++]=n-u*l;return u>0&&a.push(u),a}function g(t,e){return t.length>=e.length?m(t,e):m(e,t)}function v(t,r){var n,i,o=t.length,s=new Array(o),a=e;for(i=0;i<o;i++)n=t[i]-a+r,r=Math.floor(n/a),s[i]=n-r*a,r+=1;for(;r>0;)s[i++]=r%a,r=Math.floor(r/a);return s}function T(t,e){var r,n,i=t.length,o=e.length,s=new Array(i),a=0;for(r=0;r<o;r++)(n=t[r]-a-e[r])<0?(n+=1e7,a=1):a=0,s[r]=n;for(r=o;r<i;r++){if(!((n=t[r]-a)<0)){s[r++]=n;break}n+=1e7,s[r]=n}for(;r<i;r++)s[r]=t[r];return d(s),s}function _(t,e,r){var n,i,o=t.length,s=new Array(o),l=-e;for(n=0;n<o;n++)i=t[n]+l,l=Math.floor(i/1e7),i%=1e7,s[n]=i<0?i+1e7:i;return"number"==typeof(s=p(s))?(r&&(s=-s),new u(s)):new a(s,r)}function E(t,e){var r,n,i,o,s=t.length,a=e.length,u=f(s+a);for(i=0;i<s;++i){o=t[i];for(var l=0;l<a;++l)r=o*e[l]+u[i+l],n=Math.floor(r/1e7),u[i+l]=r-1e7*n,u[i+l+1]+=n}return d(u),u}function b(t,r){var n,i,o=t.length,s=new Array(o),a=e,u=0;for(i=0;i<o;i++)n=t[i]*r+u,u=Math.floor(n/a),s[i]=n-u*a;for(;u>0;)s[i++]=u%a,u=Math.floor(u/a);return s}function S(t,e){for(var r=[];e-- >0;)r.push(0);return r.concat(t)}function x(t,r,n){return new a(t<e?b(r,t):E(r,h(t)),n)}function C(t){var e,r,n,i,o=t.length,s=f(o+o);for(n=0;n<o;n++){r=0-(i=t[n])*i;for(var a=n;a<o;a++)e=i*t[a]*2+s[n+a]+r,r=Math.floor(e/1e7),s[n+a]=e-1e7*r;s[n+o]=r}return d(s),s}function A(t,e){var r,n,i,o,s=t.length,a=f(s);for(i=0,r=s-1;r>=0;--r)i=(o=1e7*i+t[r])-(n=y(o/e))*e,a[r]=0|n;return[a,0|i]}function N(t,r){var n,i=V(r);if(o)return[new l(t.value/i.value),new l(t.value%i.value)];var c,m=t.value,g=i.value;if(0===g)throw new Error("Cannot divide by zero");if(t.isSmall)return i.isSmall?[new u(y(m/g)),new u(m%g)]:[s[0],t];if(i.isSmall){if(1===g)return[t,s[0]];if(-1==g)return[t.negate(),s[0]];var v=Math.abs(g);if(v<e){c=p((n=A(m,v))[0]);var _=n[1];return t.sign&&(_=-_),"number"==typeof c?(t.sign!==i.sign&&(c=-c),[new u(c),new u(_)]):[new a(c,t.sign!==i.sign),new u(_)]}g=h(v)}var E=O(m,g);if(-1===E)return[s[0],t];if(0===E)return[s[t.sign===i.sign?1:-1],s[0]];c=(n=m.length+g.length<=200?function(t,r){var n,i,o,s,a,u,l,c=t.length,h=r.length,d=e,y=f(r.length),m=r[h-1],g=Math.ceil(d/(2*m)),v=b(t,g),T=b(r,g);for(v.length<=c&&v.push(0),T.push(0),m=T[h-1],i=c-h;i>=0;i--){for(n=d-1,v[i+h]!==m&&(n=Math.floor((v[i+h]*d+v[i+h-1])/m)),o=0,s=0,u=T.length,a=0;a<u;a++)o+=n*T[a],l=Math.floor(o/d),s+=v[i+a]-(o-l*d),o=l,s<0?(v[i+a]=s+d,s=-1):(v[i+a]=s,s=0);for(;0!==s;){for(n-=1,o=0,a=0;a<u;a++)(o+=v[i+a]-d+T[a])<0?(v[i+a]=o+d,o=0):(v[i+a]=o,o=1);s+=o}y[i]=n}return v=A(v,g)[0],[p(y),p(v)]}(m,g):function(t,e){for(var r,n,i,o,s,a=t.length,u=e.length,l=[],c=[];a;)if(c.unshift(t[--a]),d(c),O(c,e)<0)l.push(0);else{i=1e7*c[(n=c.length)-1]+c[n-2],o=1e7*e[u-1]+e[u-2],n>u&&(i=1e7*(i+1)),r=Math.ceil(i/o);do{if(O(s=b(e,r),c)<=0)break;r--}while(r);l.push(r),c=T(c,s)}return l.reverse(),[p(l),p(c)]}(m,g))[0];var S=t.sign!==i.sign,x=n[1],C=t.sign;return"number"==typeof c?(S&&(c=-c),c=new u(c)):c=new a(c,S),"number"==typeof x?(C&&(x=-x),x=new u(x)):x=new a(x,C),[c,x]}function O(t,e){if(t.length!==e.length)return t.length>e.length?1:-1;for(var r=t.length-1;r>=0;r--)if(t[r]!==e[r])return t[r]>e[r]?1:-1;return 0}function w(t){var e=t.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function R(t,e){for(var r,i,o,s=t.prev(),a=s,u=0;a.isEven();)a=a.divide(2),u++;t:for(i=0;i<e.length;i++)if(!t.lesser(e[i])&&!(o=n(e[i]).modPow(a,t)).isUnit()&&!o.equals(s)){for(r=u-1;0!=r;r--){if((o=o.square().mod(t)).isUnit())return!1;if(o.equals(s))continue t}return!1}return!0}a.prototype=Object.create(s.prototype),u.prototype=Object.create(s.prototype),l.prototype=Object.create(s.prototype),a.prototype.add=function(t){var e=V(t);if(this.sign!==e.sign)return this.subtract(e.negate());var r=this.value,n=e.value;return e.isSmall?new a(v(r,Math.abs(n)),this.sign):new a(g(r,n),this.sign)},a.prototype.plus=a.prototype.add,u.prototype.add=function(t){var e=V(t),r=this.value;if(r<0!==e.sign)return this.subtract(e.negate());var n=e.value;if(e.isSmall){if(c(r+n))return new u(r+n);n=h(Math.abs(n))}return new a(v(n,Math.abs(r)),r<0)},u.prototype.plus=u.prototype.add,l.prototype.add=function(t){return new l(this.value+V(t).value)},l.prototype.plus=l.prototype.add,a.prototype.subtract=function(t){var e=V(t);if(this.sign!==e.sign)return this.add(e.negate());var r=this.value,n=e.value;return e.isSmall?_(r,Math.abs(n),this.sign):function(t,e,r){var n;return O(t,e)>=0?n=T(t,e):(n=T(e,t),r=!r),"number"==typeof(n=p(n))?(r&&(n=-n),new u(n)):new a(n,r)}(r,n,this.sign)},a.prototype.minus=a.prototype.subtract,u.prototype.subtract=function(t){var e=V(t),r=this.value;if(r<0!==e.sign)return this.add(e.negate());var n=e.value;return e.isSmall?new u(r-n):_(n,Math.abs(r),r>=0)},u.prototype.minus=u.prototype.subtract,l.prototype.subtract=function(t){return new l(this.value-V(t).value)},l.prototype.minus=l.prototype.subtract,a.prototype.negate=function(){return new a(this.value,!this.sign)},u.prototype.negate=function(){var t=this.sign,e=new u(-this.value);return e.sign=!t,e},l.prototype.negate=function(){return new l(-this.value)},a.prototype.abs=function(){return new a(this.value,!1)},u.prototype.abs=function(){return new u(Math.abs(this.value))},l.prototype.abs=function(){return new l(this.value>=0?this.value:-this.value)},a.prototype.multiply=function(t){var r,n,i,o=V(t),u=this.value,l=o.value,c=this.sign!==o.sign;if(o.isSmall){if(0===l)return s[0];if(1===l)return this;if(-1===l)return this.negate();if((r=Math.abs(l))<e)return new a(b(u,r),c);l=h(r)}return new a(-.012*(n=u.length)-.012*(i=l.length)+15e-6*n*i>0?function t(e,r){var n=Math.max(e.length,r.length);if(n<=30)return E(e,r);n=Math.ceil(n/2);var i=e.slice(n),o=e.slice(0,n),s=r.slice(n),a=r.slice(0,n),u=t(o,a),l=t(i,s),c=t(g(o,i),g(a,s)),h=g(g(u,S(T(T(c,u),l),n)),S(l,2*n));return d(h),h}(u,l):E(u,l),c)},a.prototype.times=a.prototype.multiply,u.prototype._multiplyBySmall=function(t){return c(t.value*this.value)?new u(t.value*this.value):x(Math.abs(t.value),h(Math.abs(this.value)),this.sign!==t.sign)},a.prototype._multiplyBySmall=function(t){return 0===t.value?s[0]:1===t.value?this:-1===t.value?this.negate():x(Math.abs(t.value),this.value,this.sign!==t.sign)},u.prototype.multiply=function(t){return V(t)._multiplyBySmall(this)},u.prototype.times=u.prototype.multiply,l.prototype.multiply=function(t){return new l(this.value*V(t).value)},l.prototype.times=l.prototype.multiply,a.prototype.square=function(){return new a(C(this.value),!1)},u.prototype.square=function(){var t=this.value*this.value;return c(t)?new u(t):new a(C(h(Math.abs(this.value))),!1)},l.prototype.square=function(t){return new l(this.value*this.value)},a.prototype.divmod=function(t){var e=N(this,t);return{quotient:e[0],remainder:e[1]}},l.prototype.divmod=u.prototype.divmod=a.prototype.divmod,a.prototype.divide=function(t){return N(this,t)[0]},l.prototype.over=l.prototype.divide=function(t){return new l(this.value/V(t).value)},u.prototype.over=u.prototype.divide=a.prototype.over=a.prototype.divide,a.prototype.mod=function(t){return N(this,t)[1]},l.prototype.mod=l.prototype.remainder=function(t){return new l(this.value%V(t).value)},u.prototype.remainder=u.prototype.mod=a.prototype.remainder=a.prototype.mod,a.prototype.pow=function(t){var e,r,n,i=V(t),o=this.value,a=i.value;if(0===a)return s[1];if(0===o)return s[0];if(1===o)return s[1];if(-1===o)return i.isEven()?s[1]:s[-1];if(i.sign)return s[0];if(!i.isSmall)throw new Error("The exponent "+i.toString()+" is too large.");if(this.isSmall&&c(e=Math.pow(o,a)))return new u(y(e));for(r=this,n=s[1];!0&a&&(n=n.times(r),--a),0!==a;)a/=2,r=r.square();return n},u.prototype.pow=a.prototype.pow,l.prototype.pow=function(t){var e=V(t),r=this.value,n=e.value,i=BigInt(0),o=BigInt(1),a=BigInt(2);if(n===i)return s[1];if(r===i)return s[0];if(r===o)return s[1];if(r===BigInt(-1))return e.isEven()?s[1]:s[-1];if(e.isNegative())return new l(i);for(var u=this,c=s[1];(n&o)===o&&(c=c.times(u),--n),n!==i;)n/=a,u=u.square();return c},a.prototype.modPow=function(t,e){if(t=V(t),(e=V(e)).isZero())throw new Error("Cannot take modPow with modulus 0");var r=s[1],n=this.mod(e);for(t.isNegative()&&(t=t.multiply(s[-1]),n=n.modInv(e));t.isPositive();){if(n.isZero())return s[0];t.isOdd()&&(r=r.multiply(n).mod(e)),t=t.divide(2),n=n.square().mod(e)}return r},l.prototype.modPow=u.prototype.modPow=a.prototype.modPow,a.prototype.compareAbs=function(t){var e=V(t),r=this.value,n=e.value;return e.isSmall?1:O(r,n)},u.prototype.compareAbs=function(t){var e=V(t),r=Math.abs(this.value),n=e.value;return e.isSmall?r===(n=Math.abs(n))?0:r>n?1:-1:-1},l.prototype.compareAbs=function(t){var e=this.value,r=V(t).value;return(e=e>=0?e:-e)===(r=r>=0?r:-r)?0:e>r?1:-1},a.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=V(t),r=this.value,n=e.value;return this.sign!==e.sign?e.sign?1:-1:e.isSmall?this.sign?-1:1:O(r,n)*(this.sign?-1:1)},a.prototype.compareTo=a.prototype.compare,u.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=V(t),r=this.value,n=e.value;return e.isSmall?r==n?0:r>n?1:-1:r<0!==e.sign?r<0?-1:1:r<0?1:-1},u.prototype.compareTo=u.prototype.compare,l.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=this.value,r=V(t).value;return e===r?0:e>r?1:-1},l.prototype.compareTo=l.prototype.compare,a.prototype.equals=function(t){return 0===this.compare(t)},l.prototype.eq=l.prototype.equals=u.prototype.eq=u.prototype.equals=a.prototype.eq=a.prototype.equals,a.prototype.notEquals=function(t){return 0!==this.compare(t)},l.prototype.neq=l.prototype.notEquals=u.prototype.neq=u.prototype.notEquals=a.prototype.neq=a.prototype.notEquals,a.prototype.greater=function(t){return this.compare(t)>0},l.prototype.gt=l.prototype.greater=u.prototype.gt=u.prototype.greater=a.prototype.gt=a.prototype.greater,a.prototype.lesser=function(t){return this.compare(t)<0},l.prototype.lt=l.prototype.lesser=u.prototype.lt=u.prototype.lesser=a.prototype.lt=a.prototype.lesser,a.prototype.greaterOrEquals=function(t){return this.compare(t)>=0},l.prototype.geq=l.prototype.greaterOrEquals=u.prototype.geq=u.prototype.greaterOrEquals=a.prototype.geq=a.prototype.greaterOrEquals,a.prototype.lesserOrEquals=function(t){return this.compare(t)<=0},l.prototype.leq=l.prototype.lesserOrEquals=u.prototype.leq=u.prototype.lesserOrEquals=a.prototype.leq=a.prototype.lesserOrEquals,a.prototype.isEven=function(){return 0==(1&this.value[0])},u.prototype.isEven=function(){return 0==(1&this.value)},l.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},a.prototype.isOdd=function(){return 1==(1&this.value[0])},u.prototype.isOdd=function(){return 1==(1&this.value)},l.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},a.prototype.isPositive=function(){return!this.sign},u.prototype.isPositive=function(){return this.value>0},l.prototype.isPositive=u.prototype.isPositive,a.prototype.isNegative=function(){return this.sign},u.prototype.isNegative=function(){return this.value<0},l.prototype.isNegative=u.prototype.isNegative,a.prototype.isUnit=function(){return!1},u.prototype.isUnit=function(){return 1===Math.abs(this.value)},l.prototype.isUnit=function(){return this.abs().value===BigInt(1)},a.prototype.isZero=function(){return!1},u.prototype.isZero=function(){return 0===this.value},l.prototype.isZero=function(){return this.value===BigInt(0)},a.prototype.isDivisibleBy=function(t){var e=V(t);return!e.isZero()&&(!!e.isUnit()||(0===e.compareAbs(2)?this.isEven():this.mod(e).isZero()))},l.prototype.isDivisibleBy=u.prototype.isDivisibleBy=a.prototype.isDivisibleBy,a.prototype.isPrime=function(t){var e=w(this);if(void 0!==e)return e;var r=this.abs(),i=r.bitLength();if(i<=64)return R(r,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var o=Math.log(2)*i.toJSNumber(),s=Math.ceil(!0===t?2*Math.pow(o,2):o),a=[],u=0;u<s;u++)a.push(n(u+2));return R(r,a)},l.prototype.isPrime=u.prototype.isPrime=a.prototype.isPrime,a.prototype.isProbablePrime=function(t,e){var r=w(this);if(void 0!==r)return r;for(var i=this.abs(),o=void 0===t?5:t,s=[],a=0;a<o;a++)s.push(n.randBetween(2,i.minus(2),e));return R(i,s)},l.prototype.isProbablePrime=u.prototype.isProbablePrime=a.prototype.isProbablePrime,a.prototype.modInv=function(t){for(var e,r,i,o=n.zero,s=n.one,a=V(t),u=this.abs();!u.isZero();)e=a.divide(u),r=o,i=a,o=s,a=u,s=r.subtract(e.multiply(s)),u=i.subtract(e.multiply(u));if(!a.isUnit())throw new Error(this.toString()+" and "+t.toString()+" are not co-prime");return-1===o.compare(0)&&(o=o.add(t)),this.isNegative()?o.negate():o},l.prototype.modInv=u.prototype.modInv=a.prototype.modInv,a.prototype.next=function(){var t=this.value;return this.sign?_(t,1,this.sign):new a(v(t,1),this.sign)},u.prototype.next=function(){var t=this.value;return t+1<r?new u(t+1):new a(i,!1)},l.prototype.next=function(){return new l(this.value+BigInt(1))},a.prototype.prev=function(){var t=this.value;return this.sign?new a(v(t,1),!0):_(t,1,this.sign)},u.prototype.prev=function(){var t=this.value;return t-1>-r?new u(t-1):new a(i,!0)},l.prototype.prev=function(){return new l(this.value-BigInt(1))};for(var L=[1];2*L[L.length-1]<=e;)L.push(2*L[L.length-1]);var P=L.length,I=L[P-1];function D(t){return Math.abs(t)<=e}function U(t,e,r){e=V(e);for(var i=t.isNegative(),o=e.isNegative(),s=i?t.not():t,a=o?e.not():e,u=0,l=0,c=null,h=null,p=[];!s.isZero()||!a.isZero();)u=(c=N(s,I))[1].toJSNumber(),i&&(u=I-1-u),l=(h=N(a,I))[1].toJSNumber(),o&&(l=I-1-l),s=c[0],a=h[0],p.push(r(u,l));for(var d=0!==r(i?1:0,o?1:0)?n(-1):n(0),f=p.length-1;f>=0;f-=1)d=d.multiply(I).add(n(p[f]));return d}a.prototype.shiftLeft=function(t){var e=V(t).toJSNumber();if(!D(e))throw new Error(String(e)+" is too large for shifting.");if(e<0)return this.shiftRight(-e);var r=this;if(r.isZero())return r;for(;e>=P;)r=r.multiply(I),e-=P-1;return r.multiply(L[e])},l.prototype.shiftLeft=u.prototype.shiftLeft=a.prototype.shiftLeft,a.prototype.shiftRight=function(t){var e,r=V(t).toJSNumber();if(!D(r))throw new Error(String(r)+" is too large for shifting.");if(r<0)return this.shiftLeft(-r);for(var n=this;r>=P;){if(n.isZero()||n.isNegative()&&n.isUnit())return n;n=(e=N(n,I))[1].isNegative()?e[0].prev():e[0],r-=P-1}return(e=N(n,L[r]))[1].isNegative()?e[0].prev():e[0]},l.prototype.shiftRight=u.prototype.shiftRight=a.prototype.shiftRight,a.prototype.not=function(){return this.negate().prev()},l.prototype.not=u.prototype.not=a.prototype.not,a.prototype.and=function(t){return U(this,t,(function(t,e){return t&e}))},l.prototype.and=u.prototype.and=a.prototype.and,a.prototype.or=function(t){return U(this,t,(function(t,e){return t|e}))},l.prototype.or=u.prototype.or=a.prototype.or,a.prototype.xor=function(t){return U(this,t,(function(t,e){return t^e}))},l.prototype.xor=u.prototype.xor=a.prototype.xor;function M(t){var r=t.value,n="number"==typeof r?r|1<<30:"bigint"==typeof r?r|BigInt(1<<30):r[0]+r[1]*e|1073758208;return n&-n}function k(t,e){return t=V(t),e=V(e),t.greater(e)?t:e}function F(t,e){return t=V(t),e=V(e),t.lesser(e)?t:e}function j(t,e){if(t=V(t).abs(),e=V(e).abs(),t.equals(e))return t;if(t.isZero())return e;if(e.isZero())return t;for(var r,n,i=s[1];t.isEven()&&e.isEven();)r=F(M(t),M(e)),t=t.divide(r),e=e.divide(r),i=i.multiply(r);for(;t.isEven();)t=t.divide(M(t));do{for(;e.isEven();)e=e.divide(M(e));t.greater(e)&&(n=e,e=t,t=n),e=e.subtract(t)}while(!e.isZero());return i.isUnit()?t:t.multiply(i)}a.prototype.bitLength=function(){var t=this;return t.compareTo(n(0))<0&&(t=t.negate().subtract(n(1))),0===t.compareTo(n(0))?n(0):n(function t(e,r){if(r.compareTo(e)<=0){var i=t(e,r.square(r)),o=i.p,s=i.e,a=o.multiply(r);return a.compareTo(e)<=0?{p:a,e:2*s+1}:{p:o,e:2*s}}return{p:n(1),e:0}}(t,n(2)).e).add(n(1))},l.prototype.bitLength=u.prototype.bitLength=a.prototype.bitLength;var B=function(t,e,r,n){r=r||"0123456789abcdefghijklmnopqrstuvwxyz",t=String(t),n||(t=t.toLowerCase(),r=r.toLowerCase());var i,o=t.length,s=Math.abs(e),a={};for(i=0;i<r.length;i++)a[r[i]]=i;for(i=0;i<o;i++)if("-"!==(c=t[i])&&c in a&&a[c]>=s){if("1"===c&&1===s)continue;throw new Error(c+" is not a valid digit in base "+e+".")}e=V(e);var u=[],l="-"===t[0];for(i=l?1:0;i<t.length;i++){var c;if((c=t[i])in a)u.push(V(a[c]));else{if("<"!==c)throw new Error(c+" is not a valid character");var h=i;do{i++}while(">"!==t[i]&&i<t.length);u.push(V(t.slice(h+1,i)))}}return H(u,e,l)};function H(t,e,r){var n,i=s[0],o=s[1];for(n=t.length-1;n>=0;n--)i=i.add(t[n].times(o)),o=o.times(e);return r?i.negate():i}function G(t,e){if((e=n(e)).isZero()){if(t.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(e.equals(-1)){if(t.isZero())return{value:[0],isNegative:!1};if(t.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-t.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var r=Array.apply(null,Array(t.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return r.unshift([1]),{value:[].concat.apply([],r),isNegative:!1}}var i=!1;if(t.isNegative()&&e.isPositive()&&(i=!0,t=t.abs()),e.isUnit())return t.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(t.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:i};for(var o,s=[],a=t;a.isNegative()||a.compareAbs(e)>=0;){o=a.divmod(e),a=o.quotient;var u=o.remainder;u.isNegative()&&(u=e.minus(u).abs(),a=a.next()),s.push(u.toJSNumber())}return s.push(a.toJSNumber()),{value:s.reverse(),isNegative:i}}function z(t,e,r){var n=G(t,e);return(n.isNegative?"-":"")+n.value.map((function(t){return function(t,e){return t<(e=e||"0123456789abcdefghijklmnopqrstuvwxyz").length?e[t]:"<"+t+">"}(t,r)})).join("")}function W(t){if(c(+t)){var e=+t;if(e===y(e))return o?new l(BigInt(e)):new u(e);throw new Error("Invalid integer: "+t)}var r="-"===t[0];r&&(t=t.slice(1));var n=t.split(/e/i);if(n.length>2)throw new Error("Invalid integer: "+n.join("e"));if(2===n.length){var i=n[1];if("+"===i[0]&&(i=i.slice(1)),(i=+i)!==y(i)||!c(i))throw new Error("Invalid integer: "+i+" is not a valid exponent.");var s=n[0],h=s.indexOf(".");if(h>=0&&(i-=s.length-h-1,s=s.slice(0,h)+s.slice(h+1)),i<0)throw new Error("Cannot include negative exponent part for integers");t=s+=new Array(i+1).join("0")}if(!/^([0-9][0-9]*)$/.test(t))throw new Error("Invalid integer: "+t);if(o)return new l(BigInt(r?"-"+t:t));for(var p=[],f=t.length,m=f-7;f>0;)p.push(+t.slice(m,f)),(m-=7)<0&&(m=0),f-=7;return d(p),new a(p,r)}function V(t){return"number"==typeof t?function(t){if(o)return new l(BigInt(t));if(c(t)){if(t!==y(t))throw new Error(t+" is not an integer.");return new u(t)}return W(t.toString())}(t):"string"==typeof t?W(t):"bigint"==typeof t?new l(t):t}a.prototype.toArray=function(t){return G(this,t)},u.prototype.toArray=function(t){return G(this,t)},l.prototype.toArray=function(t){return G(this,t)},a.prototype.toString=function(t,e){if(void 0===t&&(t=10),10!==t)return z(this,t,e);for(var r,n=this.value,i=n.length,o=String(n[--i]);--i>=0;)r=String(n[i]),o+="0000000".slice(r.length)+r;return(this.sign?"-":"")+o},u.prototype.toString=function(t,e){return void 0===t&&(t=10),10!=t?z(this,t,e):String(this.value)},l.prototype.toString=u.prototype.toString,l.prototype.toJSON=a.prototype.toJSON=u.prototype.toJSON=function(){return this.toString()},a.prototype.valueOf=function(){return parseInt(this.toString(),10)},a.prototype.toJSNumber=a.prototype.valueOf,u.prototype.valueOf=function(){return this.value},u.prototype.toJSNumber=u.prototype.valueOf,l.prototype.valueOf=l.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var $=0;$<1e3;$++)s[$]=V($),$>0&&(s[-$]=V(-$));return s.one=s[1],s.zero=s[0],s.minusOne=s[-1],s.max=k,s.min=F,s.gcd=j,s.lcm=function(t,e){return t=V(t).abs(),e=V(e).abs(),t.divide(j(t,e)).multiply(e)},s.isInstance=function(t){return t instanceof a||t instanceof u||t instanceof l},s.randBetween=function(t,r,n){t=V(t),r=V(r);var i=n||Math.random,o=F(t,r),a=k(t,r).subtract(o).add(1);if(a.isSmall)return o.add(Math.floor(i()*a));for(var u=G(a,e).value,l=[],c=!0,h=0;h<u.length;h++){var p=c?u[h]:e,d=y(i()*p);l.push(d),d<p&&(c=!1)}return o.add(s.fromArray(l,e,!1))},s.fromArray=function(t,e,r){return H(t.map(V),V(e||10),r)},s}();void 0!==e&&e.hasOwnProperty("exports")&&(e.exports=n)},{}],50:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(107);class o extends i.NumberTransformEvaluator{constructor(){super(n.ExpressionType.Floor,o.func)}static func(t){return Math.floor(t[0])}}r.Floor=o},{107:107,192:192}],51:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);r.Foreach=class extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Foreach,o.InternalFunctionUtils.foreach,s.ReturnType.Array,o.InternalFunctionUtils.ValidateLambdaExpression)}}},{180:180,192:192,195:195,213:213}],52:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.FormatDateTime,h.evaluator(),c.ReturnType.String,h.validator)}static evaluator(){return u.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,n,o=t[0],s=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale,a=u.FunctionUtils.DefaultDateTimeFormat;if("string"==typeof o?r=l.InternalFunctionUtils.verifyTimestamp(o.toString()):o=o.toISOString(),!r){let e;if(({format:a,locale:s}=u.FunctionUtils.determineFormatAndLocale(t,3,a,s)),o.endsWith("Z"))e=new Date(o).toISOString();else try{e=new Date(o+"Z").toISOString()}catch(c){e=new Date(o).toISOString()}n=i.default(e).locale(s).utc().format(a)}return{value:n,error:r}})}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String)}}r.FormatDateTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],53:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=t(180),s=t(192),a=t(196),u=t(213);class l extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.FormatEpoch,l.evaluator(),u.ReturnType.String,l.validator)}static evaluator(){return a.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,n,o=t[0],s=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale,u=a.FunctionUtils.DefaultDateTimeFormat;if(a.FunctionUtils.isNumber(o)?o*=1e3:r=`formatEpoch first argument ${o} must be a number`,!r){({format:u,locale:s}=a.FunctionUtils.determineFormatAndLocale(t,3,u,s));const e=new Date(o).toISOString();n=i.default(e).locale(s).utc().format(u)}return{value:n,error:r}})}static validator(t){a.FunctionUtils.validateOrder(t,[u.ReturnType.String,u.ReturnType.String],u.ReturnType.Number)}}r.FormatEpoch=l},{180:180,192:192,196:196,213:213,402:402}],54:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(401),i=t(180),o=t(192),s=t(196),a=t(213),u=t(200);class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.FormatNumber,l.evaluator(),a.ReturnType.String,l.validator)}static evaluator(){return s.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,i=null;const o=t[0],a=t[1];let l=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;if(l=s.FunctionUtils.determineLocale(t,3,l),s.FunctionUtils.isNumber(o))if(s.FunctionUtils.isNumber(a))if(l&&"string"!=typeof l)r=`formatNubmer third argument ${l} is not a valid locale`;else{const t=`,.${a}f`,e=this.roundToPrecision(o,a),r=u.localeInfo[l];i=void 0!==r?n.formatLocale(r).format(t)(e):n.format(t)(e)}else r=`formatNumber second argument ${a} must be a number`;else r=`formatNumber first argument ${o} must be a number`;return{value:i,error:r}})}static validator(t){s.FunctionUtils.validateOrder(t,[a.ReturnType.String],a.ReturnType.Number,a.ReturnType.Number)}}l.roundToPrecision=(t,e)=>Math.round(t*Math.pow(10,e))/Math.pow(10,e),r.FormatNumber=l},{180:180,192:192,196:196,200:200,213:213,401:401}],401:[function(t,e,r){var n;n=this,function(t){"use strict";function e(t,e){if((r=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var r,n=t.slice(0,r);return[n.length>1?n[0]+n.slice(2):n,+t.slice(r+1)]}function r(t){return(t=e(Math.abs(t)))?t[1]:NaN}var n,i=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function o(t){if(!(e=i.exec(t)))throw new Error("invalid format: "+t);var e;return new s({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function s(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function a(t,r){var n=e(t,r);if(!n)return t+"";var i=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+i:i.length>o+1?i.slice(0,o+1)+"."+i.slice(o+1):i+new Array(o-i.length+2).join("0")}o.prototype=s.prototype,s.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var u={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return a(100*t,e)},r:a,s:function(t,r){var i=e(t,r);if(!i)return t+"";var o=i[0],s=i[1],a=s-(n=3*Math.max(-8,Math.min(8,Math.floor(s/3))))+1,u=o.length;return a===u?o:a>u?o+new Array(a-u+1).join("0"):a>0?o.slice(0,a)+"."+o.slice(a):"0."+new Array(1-a).join("0")+e(t,Math.max(0,r+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}};function l(t){return t}var c,h=Array.prototype.map,p=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"];function d(t){var e,i,s=void 0===t.grouping||void 0===t.thousands?l:(e=h.call(t.grouping,Number),i=t.thousands+"",function(t,r){for(var n=t.length,o=[],s=0,a=e[0],u=0;n>0&&a>0&&(u+a+1>r&&(a=Math.max(1,r-u)),o.push(t.substring(n-=a,n+a)),!((u+=a+1)>r));)a=e[s=(s+1)%e.length];return o.reverse().join(i)}),a=void 0===t.currency?"":t.currency[0]+"",c=void 0===t.currency?"":t.currency[1]+"",d=void 0===t.decimal?".":t.decimal+"",f=void 0===t.numerals?l:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(h.call(t.numerals,String)),y=void 0===t.percent?"%":t.percent+"",m=void 0===t.minus?"-":t.minus+"",g=void 0===t.nan?"NaN":t.nan+"";function v(t){var e=(t=o(t)).fill,r=t.align,i=t.sign,l=t.symbol,h=t.zero,v=t.width,T=t.comma,_=t.precision,E=t.trim,b=t.type;"n"===b?(T=!0,b="g"):u[b]||(void 0===_&&(_=12),E=!0,b="g"),(h||"0"===e&&"="===r)&&(h=!0,e="0",r="=");var S="$"===l?a:"#"===l&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",x="$"===l?c:/[%p]/.test(b)?y:"",C=u[b],A=/[defgprs%]/.test(b);function N(t){var o,a,u,l=S,c=x;if("c"===b)c=C(t)+c,t="";else{var y=(t=+t)<0||1/t<0;if(t=isNaN(t)?g:C(Math.abs(t),_),E&&(t=function(t){t:for(var e,r=t.length,n=1,i=-1;n<r;++n)switch(t[n]){case".":i=e=n;break;case"0":0===i&&(i=n),e=n;break;default:if(!+t[n])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),y&&0==+t&&"+"!==i&&(y=!1),l=(y?"("===i?i:m:"-"===i||"("===i?"":i)+l,c=("s"===b?p[8+n/3]:"")+c+(y&&"("===i?")":""),A)for(o=-1,a=t.length;++o<a;)if(48>(u=t.charCodeAt(o))||u>57){c=(46===u?d+t.slice(o+1):t.slice(o))+c,t=t.slice(0,o);break}}T&&!h&&(t=s(t,1/0));var N=l.length+t.length+c.length,O=N<v?new Array(v-N+1).join(e):"";switch(T&&h&&(t=s(O+t,O.length?v-c.length:1/0),O=""),r){case"<":t=l+t+c+O;break;case"=":t=l+O+t+c;break;case"^":t=O.slice(0,N=O.length>>1)+l+t+c+O.slice(N);break;default:t=O+l+t+c}return f(t)}return _=void 0===_?6:/[gprs]/.test(b)?Math.max(1,Math.min(21,_)):Math.max(0,Math.min(20,_)),N.toString=function(){return t+""},N}return{format:v,formatPrefix:function(t,e){var n=v(((t=o(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(r(e)/3))),s=Math.pow(10,-i),a=p[8+i/3];return function(t){return n(s*t)+a}}}}function f(e){return c=d(e),t.format=c.format,c.formatPrefix,c}f({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),t.formatLocale=d,Object.defineProperty(t,"__esModule",{value:!0})}("object"==typeof r&&void 0!==e?r:(n="undefined"!=typeof globalThis?globalThis:n||self).d3=n.d3||{})},{}],55:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(396)),o=n(t(402)),s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.FormatTicks,h.evaluator(),c.ReturnType.String,h.validator)}static evaluator(){return u.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,n,s=t[0],a=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale,c=u.FunctionUtils.DefaultDateTimeFormat;if(u.FunctionUtils.isNumber(s)&&(s=i.default(s)),"string"==typeof s&&(s=i.default(s)),i.default.isInstance(s)?s=s.subtract(l.InternalFunctionUtils.UnixMilliSecondToTicksConstant).divide(l.InternalFunctionUtils.MillisecondToTickConstant).toJSNumber():r=`formatTicks first argument ${s} is not a number, numeric string or bigInt`,!r&&(({format:c,locale:a}=u.FunctionUtils.determineFormatAndLocale(t,3,c,a)),u.FunctionUtils.isNumber(s))){const t=new Date(s).toISOString();n=o.default(t).locale(a).utc().format(c)}return{value:n,error:r}})}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.Number)}}r.FormatTicks=h},{180:180,192:192,195:195,196:196,213:213,396:396,402:402}],56:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.GetFutureTime,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,o=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,s=u.FunctionUtils.DefaultDateTimeFormat;const{args:a,error:c}=u.FunctionUtils.evaluateChildren(t,e,r);let h=c;if(!h)if(Number.isInteger(a[0])&&"string"==typeof a[1]){({format:s,locale:o}=u.FunctionUtils.determineFormatAndLocale(a,4,s,o));const{duration:t,tsStr:e}=l.InternalFunctionUtils.timeUnitTransformer(a[0],a[1]);void 0===e?h=a[2]+" is not a valid time unit.":n=i.default().locale(o).utc().add(t,e).format(s)}else h=t+" should contain a time interval integer, a string unit of time and an optional output format string.";return{value:n,error:h}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.Number,c.ReturnType.String)}}r.GetFutureTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],57:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(213),s=t(192),a=t(196),u=t(195),l=t(214),c=n(t(402)),h=n(t(405));c.default.extend(h.default);const p=n(t(404));c.default.extend(p.default);const d=t(222);class f extends i.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetNextViableDate,f.evaluator,o.ReturnType.String,a.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e,r){let n;const i=c.default((new Date).toISOString());let o,s=0,h=0,p=0;const{args:y,error:m}=a.FunctionUtils.evaluateChildren(t,e,r);let g=m;if(g||({timexProperty:n,error:g}=u.InternalFunctionUtils.parseTimexProperty(y[0])),n&&!g&&(!n.year&&n.month&&n.dayOfMonth||(g=y[0]+" must be a timex string which only contains month and day-of-month, for example: 'XXXX-10-31'.")),!g)if(2===y.length&&"string"==typeof y[1]){const t=l.TimeZoneConverter.windowsToIana(y[1]);l.TimeZoneConverter.verifyTimeZoneStr(t)||(g=y[1]+" is not a valid timezone"),g||(o=i.utc().tz(t))}else o=i.utc();if(!g){const t=o.year(),e=o.month()+1,r=o.date();if(s=n.month>e||n.month===e&&n.dayOfMonth>=r?t:t+1,h=n.month,p=n.dayOfMonth,2===h&&29===p)for(;!f.leapYear(s);)s+=1}return{value:d.TimexProperty.fromDate(new Date(s,h-1,p)).timex,error:g}}static leapYear(t){return t%4==0&&t%100!=0||t%400==0}}r.GetNextViableDate=f},{180:180,192:192,195:195,196:196,213:213,214:214,222:222,402:402,404:404,405:405}],58:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(213),s=t(192),a=t(196),u=t(195),l=t(214),c=n(t(402)),h=n(t(405));c.default.extend(h.default);const p=n(t(404));c.default.extend(p.default);const d=t(222);class f extends i.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetNextViableTime,f.evaluator,o.ReturnType.String,a.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e,r){let n;const i=c.default((new Date).toISOString());let o,s=0,h=0,p=0;const{args:f,error:y}=a.FunctionUtils.evaluateChildren(t,e,r);let m=y;if(m||/TXX:[0-5][0-9]:[0-5][0-9]/g.test(f[0])||(m=f[0]+"  must be a timex string which only contains minutes and seconds, for example: 'TXX:15:28'"),!m)if(2===f.length&&"string"==typeof f[1]){const t=l.TimeZoneConverter.windowsToIana(f[1]);l.TimeZoneConverter.verifyTimeZoneStr(t)||(m=f[1]+" is not a valid timezone"),m||(o=i.utc().tz(t))}else o=i.utc();if(m||({timexProperty:n,error:m}=u.InternalFunctionUtils.parseTimexProperty(f[0].replace("XX","00"))),!m){const t=o.hour(),e=o.minute(),r=o.second();(s=n.minute>e||n.minute===e&&n.second>=r?t:t+1)>=24&&(s-=24),h=n.minute,p=n.second}return{value:d.TimexProperty.fromTime(new d.Time(s,h,p)).timex,error:m}}}r.GetNextViableTime=f},{180:180,192:192,195:195,196:196,213:213,214:214,222:222,402:402,404:404,405:405}],59:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.GetPastTime,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,o=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,s=u.FunctionUtils.DefaultDateTimeFormat;const{args:a,error:c}=u.FunctionUtils.evaluateChildren(t,e,r);let h=c;if(!h)if(Number.isInteger(a[0])&&"string"==typeof a[1]){({format:s,locale:o}=u.FunctionUtils.determineFormatAndLocale(a,4,s,o));const{duration:t,tsStr:e}=l.InternalFunctionUtils.timeUnitTransformer(a[0],a[1]);void 0===e?h=a[2]+" is not a valid time unit.":n=i.default().locale(o).utc().subtract(t,e).format(s)}else h=t+" should contain a time interval integer, a string unit of time and an optional output format string.";return{value:n,error:h}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.Number,c.ReturnType.String)}}r.GetPastTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],60:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(213),s=t(192),a=t(196),u=t(195),l=t(214),c=n(t(402)),h=n(t(404));c.default.extend(h.default);const p=n(t(405));c.default.extend(p.default);const d=t(222);class f extends i.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetPreviousViableDate,f.evaluator,o.ReturnType.String,a.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e,r){let n;const i=c.default((new Date).toISOString());let o,s=0,h=0,p=0;const{args:y,error:m}=a.FunctionUtils.evaluateChildren(t,e,r);let g=m;if(g||({timexProperty:n,error:g}=u.InternalFunctionUtils.parseTimexProperty(y[0])),n&&!g&&(!n.year&&n.month&&n.dayOfMonth||(g=y[0]+" must be a timex string which only contains month and day-of-month, for example: 'XXXX-10-31'.")),!g)if(2===y.length&&"string"==typeof y[1]){const t=l.TimeZoneConverter.windowsToIana(y[1]);l.TimeZoneConverter.verifyTimeZoneStr(t)||(g=y[1]+" is not a valid timezone"),g||(o=i.utc().tz(t))}else o=i.utc();if(!g){const t=o.year(),e=o.month()+1,r=o.date();if(s=n.month<e||n.month===e&&n.dayOfMonth<r?t:t-1,h=n.month,p=n.dayOfMonth,2===h&&29===p)for(;!f.leapYear(s);)s-=1}return{value:d.TimexProperty.fromDate(new Date(s,h-1,p)).timex,error:g}}static leapYear(t){return t%4==0&&t%100!=0||t%400==0}}r.GetPreviousViableDate=f},{180:180,192:192,195:195,196:196,213:213,214:214,222:222,402:402,404:404,405:405}],61:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(213),s=t(192),a=t(196),u=t(195),l=t(214),c=n(t(402)),h=n(t(404));c.default.extend(h.default);const p=t(222);class d extends i.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetPreviousViableTime,d.evaluator,o.ReturnType.String,a.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e,r){let n;const i=c.default((new Date).toISOString());let o,s=0,h=0,d=0;const{args:f,error:y}=a.FunctionUtils.evaluateChildren(t,e,r);let m=y;if(m||/TXX:[0-5][0-9]:[0-5][0-9]/g.test(f[0])||(m=f[0]+"  must be a timex string which only contains minutes and seconds, for example: 'TXX:15:28'"),!m)if(2===f.length&&"string"==typeof f[1]){const t=l.TimeZoneConverter.windowsToIana(f[1]);l.TimeZoneConverter.verifyTimeZoneStr(t)||(m=f[1]+" is not a valid timezone"),m||(o=i.utc().tz(t))}else o=i.utc();if(m||({timexProperty:n,error:m}=u.InternalFunctionUtils.parseTimexProperty(f[0].replace("XX","00"))),!m){const t=o.hour(),e=o.minute(),r=o.second();(s=n.minute<e||n.minute===e&&n.second<r?t:t-1)<0&&(s+=24),h=n.minute,d=n.second}return{value:p.TimexProperty.fromTime(new p.Time(s,h,d)).timex,error:m}}}r.GetPreviousViableTime=d},{180:180,192:192,195:195,196:196,213:213,214:214,222:222,402:402,404:404}],62:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(202),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.GetProperty,l.evaluator,u.ReturnType.Object,l.validator)}static evaluator(t,e,r){let n,i;const o=t.children,{value:u,error:l}=o[0].tryEvaluate(e,r);let c=l;return c||(1===o.length?"string"==typeof u?n=s.InternalFunctionUtils.wrapGetValue(e,u,r):c=`"Single parameter ${o[0]} is not a string."`:(({value:i,error:c}=o[1].tryEvaluate(e,r)),c||(n=s.InternalFunctionUtils.wrapGetValue(new a.SimpleObjectMemory(u),i.toString(),r)))),{value:n,error:c}}static validator(t){o.FunctionUtils.validateOrder(t,[u.ReturnType.String],u.ReturnType.Object)}}r.GetProperty=l},{180:180,192:192,195:195,196:196,202:202,213:213}],63:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=t(180),s=t(192),a=t(196),u=t(195),l=t(213),c=t(26);class h extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.GetTimeOfDay,h.evaluator(),l.ReturnType.String,a.FunctionUtils.validateUnaryString)}static evaluator(){return a.FunctionUtils.applyWithError(t=>{let e,r,n=u.InternalFunctionUtils.verifyISOTimestamp(t[0]);if(n){if(n=u.InternalFunctionUtils.verifyTimestamp(t[0]))return{value:e,error:n};if(i.default(t[0]).format(c.ConvertFromUTC.NoneUtcDefaultDateTimeFormat)!==t[0])return{value:e,error:n};r=100*new Date(t[0]).getHours()+new Date(t[0]).getMinutes(),n=void 0}else r=100*new Date(t[0]).getUTCHours()+new Date(t[0]).getUTCMinutes();return 0===r?e="midnight":r>0&&r<1200?e="morning":1200===r?e="noon":r>1200&&r<1800?e="afternoon":r>=1800&&r<=2200?e="evening":r>2200&&r<=2359&&(e="night"),{value:e,error:n}},a.FunctionUtils.verifyString)}}r.GetTimeOfDay=h},{180:180,192:192,195:195,196:196,213:213,26:26,402:402}],64:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.GreaterThan,s.func,i.FunctionUtils.validateBinary,i.FunctionUtils.verifyNotNull)}static func(t){if(i.FunctionUtils.isNumber(t[0])&&i.FunctionUtils.isNumber(t[1])||"string"==typeof t[0]&&"string"==typeof t[1]||t[0]instanceof Date&&t[1]instanceof Date)return t[0]>t[1];throw new Error(`${t[0]} and ${t[1]} must be comparable.`)}}r.GreaterThan=s},{192:192,196:196,23:23}],65:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.GreaterThanOrEqual,s.func,i.FunctionUtils.validateBinary,i.FunctionUtils.verifyNotNull)}static func(t){if(i.FunctionUtils.isNumber(t[0])&&i.FunctionUtils.isNumber(t[1])||"string"==typeof t[0]&&"string"==typeof t[1]||t[0]instanceof Date&&t[1]instanceof Date)return t[0]>=t[1];throw new Error(`${t[0]} and ${t[1]} must be comparable.`)}}r.GreaterThanOrEqual=s},{192:192,196:196,23:23}],66:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.If,l.evaluator,u.ReturnType.Object,l.validator)}static evaluator(t,e,r){let n,i;const o=new a.Options(r);return o.nullSubstitution=void 0,({value:n,error:i}=t.children[0].tryEvaluate(e,o)),!i&&s.InternalFunctionUtils.isLogicTrue(n)?({value:n,error:i}=t.children[1].tryEvaluate(e,r)):({value:n,error:i}=t.children[2].tryEvaluate(e,r)),{value:n,error:i}}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,3,3)}}r.If=l},{180:180,192:192,195:195,196:196,204:204,213:213}],67:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Ignore,a.evaluator,s.ReturnType.Boolean,o.FunctionUtils.validateUnaryBoolean),this.negation=this}static evaluator(t,e,r){return t.children[0].tryEvaluate(e,r)}}r.Ignore=a},{180:180,192:192,196:196,213:213}],69:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IndexOf,u.evaluator,a.ReturnType.Number,u.validator)}static evaluator(t,e,r){let n=-1;const{args:i,error:a}=o.FunctionUtils.evaluateChildren(t,e,r);let u=a;return u||(null==i[0]||"string"==typeof i[0]?void 0===i[1]||"string"==typeof i[1]?n=s.InternalFunctionUtils.parseStringOrUndefined(i[0]).indexOf(s.InternalFunctionUtils.parseStringOrUndefined(i[1])):u="Can only look for indexof string in "+t:Array.isArray(i[0])?n=i[0].indexOf(i[1]):u=t+" works only on string or list."),{value:n,error:u}}static validator(t){o.FunctionUtils.validateOrder(t,[],a.ReturnType.String|a.ReturnType.Array,a.ReturnType.Object)}}r.IndexOf=u},{180:180,192:192,195:195,196:196,213:213}],70:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IndicesAndValues,a.evaluator,s.ReturnType.Array,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n=void 0,i=void 0,o=void 0;if(({value:o,error:i}=t.children[0].tryEvaluate(e,r)),void 0===i)if(Array.isArray(o)){const t=[];for(let e=0;e<o.length;e++)t.push({index:e,value:o[e]});n=t}else if("object"==typeof o){const t=[];for(const[e,r]of Object.entries(o))t.push({index:e,value:r});n=t}else i=t.children[0]+" is not array or object.";return{value:n,error:i}}}r.IndicesAndValues=a},{180:180,192:192,196:196,213:213}],72:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Intersection,a.evaluator(),s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{let e=t[0];for(const r of t)e=e.filter(t=>r.indexOf(t)>-1);return Array.from(new Set(e))},o.FunctionUtils.verifyList)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER,s.ReturnType.Array)}}r.Intersection=a},{180:180,192:192,196:196,213:213}],73:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsArray,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>Array.isArray(t[0]))}}r.IsArray=a},{180:180,192:192,196:196,213:213}],74:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsBoolean,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>"boolean"==typeof t[0])}}r.IsBoolean=a},{180:180,192:192,196:196,213:213}],75:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDate,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.month&&void 0!==n.dayOfMonth||void 0!==n.dayOfWeek),{value:i,error:l}}}r.IsDate=u},{180:180,192:192,195:195,196:196,213:213}],76:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDateRange,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.year&&void 0===n.dayOfMonth||void 0!==n.year&&void 0!==n.month&&void 0===n.dayOfMonth||void 0!==n.month&&void 0===n.dayOfMonth||void 0!==n.season||void 0!==n.weekOfYear||void 0!==n.weekOfMonth),{value:i,error:l}}}r.IsDateRange=u},{180:180,192:192,195:195,196:196,213:213}],77:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDateTime,u.evaluator(),a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>"string"==typeof t[0]&&void 0===s.InternalFunctionUtils.verifyISOTimestamp(t[0]))}}r.IsDateTime=u},{180:180,192:192,195:195,196:196,213:213}],81:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsInteger,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>o.FunctionUtils.isNumber(t[0])&&Number.isInteger(t[0]))}}r.IsInteger=a},{180:180,192:192,196:196,213:213}],82:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(166),i=t(180),o=t(192),s=t(196),a=t(213);class u extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.IsMatch,u.evaluator(),a.ReturnType.Boolean,u.validator)}static evaluator(){return s.FunctionUtils.applyWithError(t=>{let e,r=!1;return void 0===t[0]||""===t[0]?(r=!1,e="regular expression is empty."):r=n.CommonRegex.CreateRegex(t[1].toString()).test(t[0].toString()),{value:r,error:e}},s.FunctionUtils.verifyStringOrNull)}static validator(t){s.FunctionUtils.validateArityAndAnyType(t,2,2,a.ReturnType.String);const e=t.children[1];e.returnType===a.ReturnType.String&&e.type===o.ExpressionType.Constant&&n.CommonRegex.CreateRegex(e.value.toString())}}r.IsMatch=u},{166:166,180:180,192:192,196:196,213:213}],84:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsPresent,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.now),{value:i,error:l}}}r.IsPresent=u},{180:180,192:192,195:195,196:196,213:213}],83:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsObject,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>"object"==typeof t[0])}}r.IsObject=a},{180:180,192:192,196:196,213:213}],85:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsString,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>"string"==typeof t[0])}}r.IsString=a},{180:180,192:192,196:196,213:213}],86:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsTime,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.hour&&void 0!==n.minute&&void 0!==n.second),{value:i,error:l}}}r.IsTime=u},{180:180,192:192,195:195,196:196,213:213}],87:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsTimeRange,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.partOfDay),{value:i,error:l}}}r.IsTimeRange=u},{180:180,192:192,195:195,196:196,213:213}],89:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Join,a.evaluator,s.ReturnType.String,a.validator)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||(Array.isArray(i[0])?n=2===i.length?i[0].join(i[1]):i[0].length<3?i[0].join(i[2]):i[0].slice(0,i[0].length-1).join(i[1]).concat(i[2],i[0][i[0].length-1]):a=`${t.children[0]} evaluates to ${i[0]} which is not a list.`),{value:n,error:a}}static validator(t){o.FunctionUtils.validateOrder(t,[s.ReturnType.String],s.ReturnType.Array,s.ReturnType.String)}}r.Join=a},{180:180,192:192,196:196,213:213}],90:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Json,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>JSON.parse(t[0].trim()))}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.String)}}r.Json=a},{180:180,192:192,196:196,213:213}],91:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.JsonStringify,a.evaluator(),s.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>JSON.stringify(t[0]))}}r.JsonStringify=a},{180:180,192:192,196:196,213:213}],92:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Last,u.evaluator(),a.ReturnType.Object,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>{let e;return"string"==typeof t[0]&&t[0].length>0&&(e=t[0][t[0].length-1]),Array.isArray(t[0])&&t[0].length>0&&(e=s.InternalFunctionUtils.accessIndex(t[0],t[0].length-1).value),e})}}r.Last=u},{180:180,192:192,195:195,196:196,213:213}],93:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.LastIndexOf,u.evaluator,a.ReturnType.Number,u.validator)}static evaluator(t,e,r){let n=-1;const{args:i,error:a}=o.FunctionUtils.evaluateChildren(t,e,r);let u=a;if(!u)if(null==i[0]||"string"==typeof i[0])if(void 0===i[1]||"string"==typeof i[1]){const t=s.InternalFunctionUtils.parseStringOrUndefined(i[0]),e=s.InternalFunctionUtils.parseStringOrUndefined(i[1]);n=t.lastIndexOf(e,t.length-1)}else u="Can only look for indexof string in "+t;else Array.isArray(i[0])?n=i[0].lastIndexOf(i[1]):u=t+" works only on string or list.";return{value:n,error:u}}static validator(t){o.FunctionUtils.validateOrder(t,[],a.ReturnType.String|a.ReturnType.Array,a.ReturnType.Object)}}r.LastIndexOf=u},{180:180,192:192,195:195,196:196,213:213}],94:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Length,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).length,o.FunctionUtils.verifyStringOrNull)}}r.Length=u},{180:180,192:192,195:195,196:196,213:213}],97:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Max,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateAtLeastOne)}static evaluator(){return o.FunctionUtils.apply(t=>{let e=Number.NEGATIVE_INFINITY;if(1===t.length)if(Array.isArray(t[0]))for(const r of t[0])e=Math.max(e,r);else e=Math.max(e,t[0]);else for(const r of t)if(Array.isArray(r))for(const t of r)e=Math.max(e,t);else e=Math.max(e,r);return e},o.FunctionUtils.verifyNumberOrNumericList)}}r.Max=a},{180:180,192:192,196:196,213:213}],98:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Merge,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.applySequenceWithError(t=>{let e,r;return"object"!=typeof t[0]||Array.isArray(t[0])||"object"!=typeof t[1]||Array.isArray(t[1])?r=`The argumets ${t[0]} and ${t[1]} must be JSON objects.`:(Object.assign(t[0],t[1]),e=t[0]),{value:e,error:r}})}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,2,Number.MAX_SAFE_INTEGER)}}r.Merge=a},{180:180,192:192,196:196,213:213}],99:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Min,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateAtLeastOne)}static evaluator(){return o.FunctionUtils.apply(t=>{let e=Number.POSITIVE_INFINITY;if(1===t.length)if(Array.isArray(t[0]))for(const r of t[0])e=Math.min(e,r);else e=Math.min(e,t[0]);else for(const r of t)if(Array.isArray(r))for(const t of r)e=Math.min(e,t);else e=Math.min(e,r);return e},o.FunctionUtils.verifyNumberOrNumericList)}}r.Min=a},{180:180,192:192,196:196,213:213}],100:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Mod,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateBinaryNumber)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e,r;return 0===Number(t[1])?e="Cannot mod by 0.":r=t[0]%t[1],{value:r,error:e}},o.FunctionUtils.verifyInteger)}}r.Mod=a},{180:180,192:192,196:196,213:213}],101:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Month,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{const e=s.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:new Date(t[0]).getUTCMonth()+1,error:e}},o.FunctionUtils.verifyString)}}r.Month=u},{180:180,192:192,195:195,196:196,213:213}],105:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Not,l.evaluator,u.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const o=new a.Options(r);return o.nullSubstitution=void 0,({value:i,error:n}=t.children[0].tryEvaluate(e,o)),n?(n=void 0,i=!0):i=!s.InternalFunctionUtils.isLogicTrue(i),{value:i,error:n}}}r.Not=l},{180:180,192:192,195:195,196:196,204:204,213:213}],108:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(196),o=t(213);class s extends n.ExpressionEvaluator{constructor(t,e){super(t,s.evaluator(e),o.ReturnType.Number,i.FunctionUtils.validateNumber)}static evaluator(t){return i.FunctionUtils.applySequence(t,i.FunctionUtils.verifyNumber)}}r.NumericEvaluator=s},{180:180,196:196,213:213}],109:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Optional,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnaryBoolean),this.negation=this}static evaluator(){}}r.Optional=a},{180:180,192:192,196:196,213:213}],110:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(204),u=t(213);class l extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Or,l.evaluator,u.ReturnType.Boolean,o.FunctionUtils.validateAtLeastOne)}static evaluator(t,e,r){let n,i=!1;for(const o of t.children){const t=new a.Options(r);if(t.nullSubstitution=void 0,({value:i,error:n}=o.tryEvaluate(e,t)),n)n=void 0;else if(s.InternalFunctionUtils.isLogicTrue(i)){i=!0;break}}return{value:i,error:n}}}r.Or=l},{180:180,192:192,195:195,196:196,204:204,213:213}],112:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213),a=t(193);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Rand,u.evaluator,s.ReturnType.Number,o.FunctionUtils.validateBinaryNumber)}static evaluator(t,e,r){let n,i,o,s;const[u,l]=t.children;return({value:i,error:s}=u.tryEvaluate(e,r)),s?{value:void 0,error:s}:Number.isInteger(i)?(({value:o,error:s}=l.tryEvaluate(e,r)),s?{value:void 0,error:s}:Number.isInteger(o)?(i>o?s=`Min value ${i} cannot be greater than max value ${o}.`:n=a.Extensions.randomNext(e,i,o),{value:n,error:s}):{value:void 0,error:o+" is not an integer."}):{value:void 0,error:i+" is not an integer."}}}r.Rand=u},{180:180,192:192,193:193,196:196,213:213}],113:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Range,a.evaluator(),s.ReturnType.Array,o.FunctionUtils.validateBinaryNumber)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e;return t[1]<=0&&(e="Second paramter must be more than zero"),{value:[...Array(t[1]).keys()].map(e=>e+Number(t[0])),error:e}},o.FunctionUtils.verifyInteger)}}r.Range=a},{180:180,192:192,196:196,213:213}],114:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.RemoveProperty,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{const e=t[0];return delete e[String(t[1])],e})}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.Object,s.ReturnType.String)}}r.RemoveProperty=a},{180:180,192:192,196:196,213:213}],115:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Replace,u.evaluator(),a.ReturnType.String,u.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e=void 0,r=void 0;return 0===s.InternalFunctionUtils.parseStringOrUndefined(t[1]).length&&(e=t[1]+" should be a string with length at least 1"),e||(r=s.InternalFunctionUtils.parseStringOrUndefined(t[0]).split(s.InternalFunctionUtils.parseStringOrUndefined(t[1])).join(s.InternalFunctionUtils.parseStringOrUndefined(t[2]))),{value:r,error:e}},o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,3,3,a.ReturnType.String)}}r.Replace=u},{180:180,192:192,195:195,196:196,213:213}],116:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.ReplaceIgnoreCase,u.evaluator(),a.ReturnType.String,u.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e=void 0,r=void 0;return 0===s.InternalFunctionUtils.parseStringOrUndefined(t[1]).length&&(e=t[1]+" should be a string with length at least 1"),e||(r=s.InternalFunctionUtils.parseStringOrUndefined(t[0]).replace(new RegExp(s.InternalFunctionUtils.parseStringOrUndefined(t[1]),"gi"),s.InternalFunctionUtils.parseStringOrUndefined(t[2]))),{value:r,error:e}},o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,3,3,a.ReturnType.String)}}r.ReplaceIgnoreCase=u},{180:180,192:192,195:195,196:196,213:213}],117:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Reverse,a.evaluator(),s.ReturnType.String|s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e=void 0,r=void 0;return"string"==typeof t[0]?e=t[0].split("").reverse().join(""):Array.isArray(t[0])?e=t[0].reverse():r=t[0]+" is not a string or list.",{value:e,error:r}},o.FunctionUtils.verifyContainer)}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.String|s.ReturnType.Array)}}r.Reverse=a},{180:180,192:192,196:196,213:213}],118:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Round,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateUnaryOrBinaryNumber)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e,r;if(2!==t.length||Number.isInteger(t[1])||(r=`The second parameter ${t[1]} must be an integer.`),!r){const n=2===t.length?t[1]:0;n<0||n>15?r=`The second parameter ${t[1]} must be an integer between 0 and 15;`:e=a.roundToPrecision(t[0],n)}return{value:e,error:r}},o.FunctionUtils.verifyNumber)}}a.roundToPrecision=(t,e)=>Math.round(t*Math.pow(10,e))/Math.pow(10,e),r.Round=a},{180:180,192:192,196:196,213:213}],119:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);r.Select=class extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Select,o.InternalFunctionUtils.foreach,s.ReturnType.Array,o.InternalFunctionUtils.ValidateLambdaExpression)}}},{180:180,192:192,195:195,213:213}],122:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SetProperty,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{const e=t[0];return e[String(t[1])]=t[2],e})}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.Object,s.ReturnType.String,s.ReturnType.Object)}}r.SetProperty=a},{180:180,192:192,196:196,213:213}],121:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SetPathToValue,a.evaluator,s.ReturnType.Object,o.FunctionUtils.validateBinary)}static evaluator(t,e,r){const{path:n,left:i,error:s}=o.FunctionUtils.tryAccumulatePath(t.children[0],e,r);if(void 0!==s)return{value:void 0,error:s};if(i)return{value:void 0,error:t.children[0].toString()+" is not a valid path to set value"};const{value:a,error:u}=t.children[1].tryEvaluate(e,r);return u?{value:void 0,error:u}:(e.setValue(n,a),{value:a,error:void 0})}}r.SetPathToValue=a},{180:180,192:192,196:196,213:213}],123:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Skip,a.evaluator,s.ReturnType.Array,a.validator)}static evaluator(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(!s)if(Array.isArray(i)){let o;const a=t.children[1];({value:o,error:s}=a.tryEvaluate(e,r)),s||Number.isInteger(o)||(s=a+" is not an integer."),s||(o=Math.max(o,0),n=i.slice(o))}else s=t.children[0]+" is not array.";return{value:n,error:s}}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.Array,s.ReturnType.Number)}}r.Skip=a},{180:180,192:192,196:196,213:213}],125:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SortByDescending,s.InternalFunctionUtils.sortBy(!0),a.ReturnType.Array,u.validator)}static validator(t){o.FunctionUtils.validateOrder(t,[a.ReturnType.String],a.ReturnType.Array)}}r.SortByDescending=u},{180:180,192:192,195:195,196:196,213:213}],124:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SortBy,s.InternalFunctionUtils.sortBy(!1),a.ReturnType.Array,u.validator)}static validator(t){o.FunctionUtils.validateOrder(t,[a.ReturnType.String],a.ReturnType.Array)}}r.SortBy=u},{180:180,192:192,195:195,196:196,213:213}],126:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Split,u.evaluator(),a.ReturnType.Array,u.validator)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).split(s.InternalFunctionUtils.parseStringOrUndefined(t[1]||"")),o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,2,a.ReturnType.String)}}r.Split=u},{180:180,192:192,195:195,196:196,213:213}],127:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Sqrt,a.evaluator(),s.ReturnType.Number,o.FunctionUtils.validateUnaryNumber)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{let e,r;const n=Number(t[0]);return n<0?e="Do not support square root extraction of negative numbers.":r=Math.sqrt(n),{value:r,error:e}},o.FunctionUtils.verifyNumber)}}r.Sqrt=a},{180:180,192:192,196:196,213:213}],131:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.StartsWith,u.evaluator(),a.ReturnType.Boolean,u.validator)}static evaluator(){return o.FunctionUtils.apply(t=>s.InternalFunctionUtils.parseStringOrUndefined(t[0]).startsWith(s.InternalFunctionUtils.parseStringOrUndefined(t[1])),o.FunctionUtils.verifyStringOrNull)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,2,2,a.ReturnType.String)}}r.StartsWith=u},{180:180,192:192,195:195,196:196,213:213}],133:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(167),i=t(179),o=t(180),s=t(192),a=t(196),u=t(213);class l extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.StringOrValue,l.evaluator,u.ReturnType.Object,a.FunctionUtils.validateUnaryString)}static evaluator(t,e,r){const{value:o,error:s}=t.children[0].tryEvaluate(e,r);let a=s;if("string"!=typeof o&&(a="Parameter should be a string."),!a){const t=i.Expression.parse("`"+o+"`");if(2===t.children.length){const i=t.children[0],o=t.children[1];if(i instanceof n.Constant&&""===i.value.toString()&&!(o instanceof n.Constant))return o.tryEvaluate(e,r)}return t.tryEvaluate(e,r)}return{value:void 0,error:a}}}r.StringOrValue=l},{167:167,179:179,180:180,192:192,196:196,213:213}],134:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(196),o=t(213);r.StringTransformEvaluator=class extends n.ExpressionEvaluator{constructor(t,e,r){super(t,i.FunctionUtils.applyWithOptions(e,i.FunctionUtils.verifyStringOrNull),o.ReturnType.String,r||i.FunctionUtils.validateUnaryString)}}},{180:180,196:196,213:213}],135:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.SubArray,a.evaluator,s.ReturnType.Array,a.validator)}static evaluator(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(!s)if(Array.isArray(i)){let o;const a=t.children[1];if(({value:o,error:s}=a.tryEvaluate(e,r)),s||Number.isInteger(o)?(o<0||o>i.length)&&(s=`${a}=${o} which is out of range for ${i}`):s=a+" is not an integer.",!s){let a;if(2===t.children.length)a=i.length;else{const n=t.children[2];({value:a,error:s}=n.tryEvaluate(e,r)),s||Number.isInteger(a)?(a<0||a>i.length)&&(s=`${n}=${a} which is out of range for ${i}`):s=n+" is not an integer"}s||(n=i.slice(o,a))}}else s=t.children[0]+" is not array.";return{value:n,error:s}}static validator(t){o.FunctionUtils.validateOrder(t,[s.ReturnType.Number],s.ReturnType.Array,s.ReturnType.Number)}}r.SubArray=a},{180:180,192:192,196:196,213:213}],136:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Substring,a.evaluator,s.ReturnType.String,a.validator)}static evaluator(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(!s)if("string"==typeof i){let o;const a=t.children[1];if(({value:o,error:s}=a.tryEvaluate(e,r)),s||Number.isInteger(o)?(o<0||o>i.length)&&(s=`${a}=${o} which is out of range for ${i}`):s=a+" is not an integer.",!s){let a;if(2===t.children.length)a=i.length-o;else{const n=t.children[2];({value:a,error:s}=n.tryEvaluate(e,r)),s||Number.isInteger(a)?(a<0||Number(o)+Number(a)>i.length)&&(s=`${n}=${a} which is out of range for ${i}`):s=n+" is not an integer"}s||(n=i.substr(o,a))}}else void 0===i?n="":s=t.children[0]+" is neither a string nor a null object.";return{value:n,error:s}}static validator(t){o.FunctionUtils.validateOrder(t,[s.ReturnType.Number],s.ReturnType.String,s.ReturnType.Number)}}r.Substring=a},{180:180,192:192,196:196,213:213}],139:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Sum,a.evaluator(),s.ReturnType.Number,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>t[0].reduce((t,e)=>t+e),o.FunctionUtils.verifyNumericList)}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.Array)}}r.Sum=a},{180:180,192:192,196:196,213:213}],140:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Take,a.evaluator,s.ReturnType.Array|s.ReturnType.String,a.validator)}static evaluator(t,e,r){let n;const{value:i,error:o}=t.children[0].tryEvaluate(e,r);let s=o;if(!s)if(Array.isArray(i)||"string"==typeof i){let o;const a=t.children[1];({value:o,error:s}=a.tryEvaluate(e,r)),s||Number.isInteger(o)||(s=a+" is not an integer."),s||(o=Math.max(o,0),n=i.slice(0,o))}else s=t.children[0]+" is not array or string.";return{value:n,error:s}}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.Array|s.ReturnType.String,s.ReturnType.Number)}}r.Take=a},{180:180,192:192,196:196,213:213}],141:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Ticks,u.evaluator,a.ReturnType.Number,u.validator)}static evaluator(t,e,r){let n;const{args:i,error:a}=o.FunctionUtils.evaluateChildren(t,e,r);let u=a;return u||("string"==typeof i[0]?({value:n,error:u}=s.InternalFunctionUtils.ticks(i[0])):u=t+" should contain an ISO format timestamp."),{value:n,error:u}}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,1,a.ReturnType.String)}}r.Ticks=u},{180:180,192:192,195:195,196:196,213:213}],151:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Union,a.evaluator(),s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>{let e=[];for(const r of t)e=e.concat(r);return Array.from(new Set(e))},o.FunctionUtils.verifyList)}static validator(t){o.FunctionUtils.validateArityAndAnyType(t,1,Number.MAX_SAFE_INTEGER,s.ReturnType.Array)}}r.Union=a},{180:180,192:192,196:196,213:213}],152:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Unique,a.evaluator(),s.ReturnType.Array,a.validator)}static evaluator(){return o.FunctionUtils.apply(t=>[...new Set(t[0])],o.FunctionUtils.verifyList)}static validator(t){o.FunctionUtils.validateOrder(t,[],s.ReturnType.Array)}}r.Unique=a},{180:180,192:192,196:196,213:213}],153:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriComponent,a.evaluator(),s.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>encodeURIComponent(t[0]),o.FunctionUtils.verifyString)}}r.UriComponent=a},{180:180,192:192,196:196,213:213}],154:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriComponentToString,a.evaluator(),s.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>decodeURIComponent(t[0]),o.FunctionUtils.verifyString)}}r.UriComponentToString=a},{180:180,192:192,196:196,213:213}],155:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriHost,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriHost(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriHost(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=r.hostname}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriHost=u},{180:180,192:192,195:195,196:196,213:213}],156:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriPath,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriPath(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriPath(t){let e,r=s.InternalFunctionUtils.parseUri(t).error;if(!r)try{e=new URL(t).pathname}catch(n){r="invalid operation, input uri should be an absolute URI"}return{value:e,error:r}}}r.UriPath=u},{180:180,192:192,195:195,196:196,213:213}],157:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriPathAndQuery,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriPathAndQuery(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriPathAndQuery(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=r.pathname+r.search}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriPathAndQuery=u},{180:180,192:192,195:195,196:196,213:213}],158:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriPort,u.evaluator,a.ReturnType.Number,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriPort(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriPort(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=parseInt(r.port)}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriPort=u},{180:180,192:192,195:195,196:196,213:213}],159:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriQuery,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriQuery(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriQuery(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=r.search}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriQuery=u},{180:180,192:192,195:195,196:196,213:213}],160:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.UriScheme,u.evaluator,a.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n;const{args:i,error:s}=o.FunctionUtils.evaluateChildren(t,e,r);let a=s;return a||("string"==typeof i[0]?({value:n,error:a}=u.evalUriScheme(i[0])):a=t+" should contain a URI string."),{value:n,error:a}}static evalUriScheme(t){let e;const{value:r,error:n}=s.InternalFunctionUtils.parseUri(t);let i=n;if(!i)try{e=r.protocol.replace(":","")}catch(o){i="invalid operation, input uri should be an absolute URI"}return{value:e,error:i}}}r.UriScheme=u},{180:180,192:192,195:195,196:196,213:213}],162:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(195),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Where,a.evaluator,s.ReturnType.Array,o.InternalFunctionUtils.ValidateLambdaExpression)}static evaluator(t,e,r){let n;const{value:i,error:s}=t.children[0].tryEvaluate(e,r);let a=s;if(!a){const s=o.InternalFunctionUtils.convertToList(i);if(s){if(n=[],o.InternalFunctionUtils.lambdaEvaluator(t,e,r,s,(t,e,r)=>(o.InternalFunctionUtils.isLogicTrue(e)&&!r&&n.push(t),!1)),!Array.isArray(i)){const t={};for(const e of n)t[e.key]=e.value;n=t}}else a=t.children[0]+" is not a collection or structure object to run Where"}return{value:n,error:a}}}r.Where=a},{180:180,192:192,195:195,213:213}],165:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.Year,u.evaluator(),a.ReturnType.Number,o.FunctionUtils.validateUnaryString)}static evaluator(){return o.FunctionUtils.applyWithError(t=>{const e=s.InternalFunctionUtils.verifyISOTimestamp(t[0]);return e?{value:void 0,error:e}:{value:new Date(t[0]).getUTCFullYear(),error:e}},o.FunctionUtils.verifyString)}}r.Year=u},{180:180,192:192,195:195,196:196,213:213}],80:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsFloat,a.evaluator(),s.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.apply(t=>o.FunctionUtils.isNumber(t[0])&&!Number.isInteger(t[0]))}}r.IsFloat=a},{180:180,192:192,196:196,213:213}],79:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDuration,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),n&&!l&&(i=void 0!==n.years||void 0!==n.months||void 0!==n.weeks||void 0!==n.days||void 0!==n.hours||void 0!==n.minutes||void 0!==n.seconds),{value:i,error:l}}}r.IsDuration=u},{180:180,192:192,195:195,196:196,213:213}],78:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(195),a=t(213);class u extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.IsDefinite,u.evaluator,a.ReturnType.Boolean,o.FunctionUtils.validateUnary)}static evaluator(t,e,r){let n,i=!1;const{args:a,error:u}=o.FunctionUtils.evaluateChildren(t,e,r);let l=u;return l||({timexProperty:n,error:l}=s.InternalFunctionUtils.parseTimexProperty(a[0])),l||(i=null!=n&&void 0!==n.year&&void 0!==n.month&&void 0!==n.dayOfMonth),{value:i,error:l}}}r.IsDefinite=u},{180:180,192:192,195:195,196:196,213:213}],95:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.LessThan,s.func,i.FunctionUtils.validateBinary,i.FunctionUtils.verifyNotNull)}static func(t){if(i.FunctionUtils.isNumber(t[0])&&i.FunctionUtils.isNumber(t[1])||"string"==typeof t[0]&&"string"==typeof t[1]||t[0]instanceof Date&&t[1]instanceof Date)return t[0]<t[1];throw new Error(`${t[0]} and ${t[1]} must be comparable.`)}}r.LessThan=s},{192:192,196:196,23:23}],102:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(103);class o extends i.MultivariateNumericEvaluator{constructor(){super(n.ExpressionType.Multiply,o.func)}static func(t){return Number(t[0])*Number(t[1])}}r.Multiply=o},{103:103,192:192}],106:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);r.NotEqual=class extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.NotEqual,t=>!i.FunctionUtils.commonEquals(t[0],t[1]),i.FunctionUtils.validateBinary)}}},{192:192,196:196,23:23}],111:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(103);class s extends o.MultivariateNumericEvaluator{constructor(){super(n.ExpressionType.Power,s.func,i.FunctionUtils.verifyNumberOrNumericList)}static func(t){return Math.pow(t[0],t[1])}}r.Power=s},{103:103,192:192,196:196}],120:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(195),s=t(134);class a extends s.StringTransformEvaluator{constructor(){super(n.ExpressionType.SentenceCase,a.evaluator,i.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e){let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;r=i.FunctionUtils.determineLocale(t,2,r);const n=t[0];if("string"==typeof n||void 0===n){const t=o.InternalFunctionUtils.parseStringOrUndefined(n).toLocaleLowerCase(r);return""===t?t:t.charAt(0).toUpperCase()+t.substr(1).toLocaleLowerCase(r)}}}r.SentenceCase=a},{134:134,192:192,195:195,196:196}],137:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(103);class o extends i.MultivariateNumericEvaluator{constructor(){super(n.ExpressionType.Subtract,o.func)}static func(t){return Number(t[0])-Number(t[1])}}r.Subtract=o},{103:103,192:192}],96:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(23);class s extends o.ComparisonEvaluator{constructor(){super(n.ExpressionType.LessThanOrEqual,s.func,i.FunctionUtils.validateBinary,i.FunctionUtils.verifyNotNull)}static func(t){if(i.FunctionUtils.isNumber(t[0])&&i.FunctionUtils.isNumber(t[1])||"string"==typeof t[0]&&"string"==typeof t[1]||t[0]instanceof Date&&t[1]instanceof Date)return t[0]<=t[1];throw new Error(`${t[0]} and ${t[1]} must be comparable.`)}}r.LessThanOrEqual=s},{192:192,196:196,23:23}],147:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(196),i=t(192),o=t(195),s=t(134);class a extends s.StringTransformEvaluator{constructor(){super(i.ExpressionType.TitleCase,a.evaluator,n.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e){let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;r=n.FunctionUtils.determineLocale(t,2,r);const i=t[0];if("string"==typeof i||void 0===i){const t=o.InternalFunctionUtils.parseStringOrUndefined(i).toLocaleLowerCase(r);return""===t?t:t.replace(/\w\S*/g,t=>t.charAt(0).toUpperCase()+t.substr(1).toLocaleLowerCase(r))}}}r.TitleCase=a},{134:134,192:192,195:195,196:196}],148:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(195),s=t(134);class a extends s.StringTransformEvaluator{constructor(){super(n.ExpressionType.ToLower,a.evaluator,i.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e){let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;r=i.FunctionUtils.determineLocale(t,2,r);const n=t[0];if("string"==typeof n||void 0===n)return o.InternalFunctionUtils.parseStringOrUndefined(n).toLocaleLowerCase(r)}}r.ToLower=a},{134:134,192:192,195:195,196:196}],149:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(196),o=t(195),s=t(134);class a extends s.StringTransformEvaluator{constructor(){super(n.ExpressionType.ToUpper,a.evaluator,i.FunctionUtils.validateUnaryOrBinaryString)}static evaluator(t,e){let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;r=i.FunctionUtils.determineLocale(t,2,r);const n=t[0];if("string"==typeof n||void 0===n)return o.InternalFunctionUtils.parseStringOrUndefined(n).toLocaleUpperCase(r)}}r.ToUpper=a},{134:134,192:192,195:195,196:196}],150:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(192),i=t(195),o=t(134);class s extends o.StringTransformEvaluator{constructor(){super(n.ExpressionType.Trim,s.evaluator)}static evaluator(t){const e=t[0];if("string"==typeof e||void 0===e)return String(i.InternalFunctionUtils.parseStringOrUndefined(e)).trim()}}r.Trim=s},{134:134,192:192,195:195}],146:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(222),i=t(180),o=t(192),s=t(196),a=t(195),u=t(213);class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.TimexResolve,l.evaluator,u.ReturnType.String,s.FunctionUtils.validateUnary)}static evaluator(t,e,r){let i,o=!1;const{args:u,error:l}=s.FunctionUtils.evaluateChildren(t,e,r);let c=l;if(c||({timexProperty:i,error:c}=a.InternalFunctionUtils.parseTimexProperty(u[0])),c||0!==i.types.size||(c=`The parsed TimexProperty of ${u[0]} in ${t} has no types. It can't be resolved to a string value.`),!c){const e=i.timex;try{o=n.valueResolver.resolve([e]).values[0].value}catch(h){c=`${u[0]} in ${t} is not a valid argument. ${h.Message}`}}return{value:o,error:c}}}r.TimexResolve=l},{180:180,192:192,195:195,196:196,213:213,222:222}],128:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.StartOfDay,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,3,o,i)),"string"==typeof s[0]?({value:n,error:l}=h.evalStartOfDay(s[0],o,i)):l=t+" should contain an ISO format timestamp and an optional output format string."),{value:n,error:l}}static evalStartOfDay(t,e,r){let n;const o=l.InternalFunctionUtils.verifyISOTimestamp(t);return o||(n=i.default(t).locale(r).utc().startOf("day").format(e)),{value:n,error:o}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String)}}r.StartOfDay=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],129:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.StartOfHour,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,3,o,i)),"string"==typeof s[0]?({value:n,error:l}=h.evalStartOfHour(s[0],o,i)):l=t+" should contain an ISO format timestamp and an optional output format string."),{value:n,error:l}}static evalStartOfHour(t,e,r){let n;const o=l.InternalFunctionUtils.verifyISOTimestamp(t);return o||(n=i.default(t).locale(r).utc().startOf("hour").format(e)),{value:n,error:o}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String)}}r.StartOfHour=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],130:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.StartOfMonth,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,i=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,o=u.FunctionUtils.DefaultDateTimeFormat;const{args:s,error:a}=u.FunctionUtils.evaluateChildren(t,e,r);let l=a;return l||(({format:o,locale:i}=u.FunctionUtils.determineFormatAndLocale(s,3,o,i)),"string"==typeof s[0]?({value:n,error:l}=h.evalStartOfMonth(s[0],o,i)):l=t+" should contain an ISO format timestamp and an optional output format string."),{value:n,error:l}}static evalStartOfMonth(t,e,r){let n;const o=l.InternalFunctionUtils.verifyISOTimestamp(t);return o||(n=i.default(t).locale(r).utc().startOf("month").format(e)),{value:n,error:o}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String)}}r.StartOfMonth=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],138:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(195),c=t(213);class h extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.SubtractFromTime,h.evaluator,c.ReturnType.String,h.validator)}static evaluator(t,e,r){let n,o=r.locale?r.locale:Intl.DateTimeFormat().resolvedOptions().locale,s=u.FunctionUtils.DefaultDateTimeFormat;const{args:a,error:c}=u.FunctionUtils.evaluateChildren(t,e,r);let h=c;if(!h)if("string"==typeof a[0]&&Number.isInteger(a[1])&&"string"==typeof a[2]){({format:s,locale:o}=u.FunctionUtils.determineFormatAndLocale(a,5,s,o));const{duration:t,tsStr:e}=l.InternalFunctionUtils.timeUnitTransformer(a[1],a[2]);if(void 0===e)h=a[2]+" is not a valid time unit.";else{const r=t;(h=l.InternalFunctionUtils.verifyISOTimestamp(a[0]))||(n=i.default(a[0]).locale(o).utc().subtract(r,e).format(s))}}else h=t+" should contain an ISO format timestamp, a time interval integer, a string unit of time and an optional output format string.";return{value:n,error:h}}static validator(t){u.FunctionUtils.validateOrder(t,[c.ReturnType.String,c.ReturnType.String],c.ReturnType.String,c.ReturnType.Number,c.ReturnType.String)}}r.SubtractFromTime=h},{180:180,192:192,195:195,196:196,213:213,402:402,405:405}],161:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(402)),o=n(t(405));i.default.extend(o.default);const s=t(180),a=t(192),u=t(196),l=t(213);class c extends s.ExpressionEvaluator{constructor(){super(a.ExpressionType.UtcNow,c.evaluator(),l.ReturnType.String,c.validator)}static evaluator(){return u.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale,n=u.FunctionUtils.DefaultDateTimeFormat;return({format:n,locale:r}=u.FunctionUtils.determineFormatAndLocale(t,2,n,r)),{value:i.default(new Date).locale(r).utc().format(n),error:void 0}})}static validator(t){u.FunctionUtils.validateOrder(t,[l.ReturnType.String,l.ReturnType.String])}}r.UtcNow=c},{180:180,192:192,196:196,213:213,402:402,405:405}],71:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(396)),o=t(180),s=t(192),a=t(196),u=t(213);class l extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.Int,l.evaluator(),u.ReturnType.Number,a.FunctionUtils.validateUnary)}static evaluator(){return a.FunctionUtils.applyWithError(t=>{let e,r;const n=t[0];return i.default.isInstance(n)?{value:n.toJSNumber(),error:e}:("string"==typeof n?(r=parseInt(n,10),a.FunctionUtils.isNumber(r)||(e=`parameter ${t[0]} is not a valid number string.`)):a.FunctionUtils.isNumber(n)&&(r=parseInt(n.toString(),10)),{value:r,error:e})})}}r.Int=l},{180:180,192:192,196:196,213:213,396:396}],132:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(401),i=t(180),o=t(192),s=t(196),a=t(213),u=t(200),l=t(195);class c extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.String,c.evaluator(),a.ReturnType.String,c.validator)}static evaluator(){return s.FunctionUtils.applyWithOptionsAndError((t,e)=>{let r,i=e.locale?e.locale:Intl.DateTimeFormat().resolvedOptions().locale;if(i=s.FunctionUtils.determineLocale(t,2,i),"string"==typeof t[0])r=t[0];else if(s.FunctionUtils.isNumber(t[0])){const e=u.localeInfo[i],o=t[0].toString();let s=0;o.includes(".")&&(s=o.split(".")[1].length);const a=`,.${s}f`;r=void 0!==e?n.formatLocale(e).format(a)(t[0]):n.format(a)(t[0])}else r=t[0]instanceof Date?t[0].toLocaleDateString(i):t[0]instanceof Uint8Array?l.InternalFunctionUtils.getTextDecoder().decode(t[0]):l.InternalFunctionUtils.commonStringify(t[0]);return{value:r,error:void 0}})}static validator(t){s.FunctionUtils.validateOrder(t,[a.ReturnType.String],a.ReturnType.Object)}}r.String=c},{180:180,192:192,195:195,196:196,200:200,213:213,401:401}],142:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(396));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.TicksToDays,l.evaluator,a.ReturnType.Number,s.FunctionUtils.validateUnaryNumber)}static evaluator(t,e,r){let n;const{args:i,error:o}=s.FunctionUtils.evaluateChildren(t,e,r);let a=o;if(!a){const e=i[0];Number.isInteger(e)?n=e/l.TicksPerDay:u.default.isInstance(e)?n=e.toJSNumber()/l.TicksPerDay:a=t+" should contain an integer of ticks"}return{value:n,error:a}}}l.TicksPerDay=864e9,r.TicksToDays=l},{180:180,192:192,196:196,213:213,396:396}],143:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(396));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.TicksToHours,l.evaluator,a.ReturnType.Number,s.FunctionUtils.validateUnaryNumber)}static evaluator(t,e,r){let n;const{args:i,error:o}=s.FunctionUtils.evaluateChildren(t,e,r);let a=o;if(!a){const e=i[0];Number.isInteger(e)?n=e/l.TicksPerHour:u.default.isInstance(e)?n=e.toJSNumber()/l.TicksPerHour:a=t+" should contain an integer of ticks"}return{value:n,error:a}}}l.TicksPerHour=36e9,r.TicksToHours=l},{180:180,192:192,196:196,213:213,396:396}],144:[function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(r,"__esModule",{value:!0});const i=t(180),o=t(192),s=t(196),a=t(213),u=n(t(396));class l extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.TicksToMinutes,l.evaluator,a.ReturnType.Number,s.FunctionUtils.validateUnaryNumber)}static evaluator(t,e,r){let n;const{args:i,error:o}=s.FunctionUtils.evaluateChildren(t,e,r);let a=o;if(!a){const e=i[0];Number.isInteger(e)?n=e/l.TicksPerMinute:u.default.isInstance(e)?n=e.toJSNumber()/l.TicksPerMinute:a=t+" should contain an integer of ticks"}return{value:n,error:a}}}l.TicksPerMinute=6e8,r.TicksToMinutes=l},{180:180,192:192,196:196,213:213,396:396}],164:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.XPath,a.evaluator(),s.ReturnType.Object,a.validator)}static evaluator(){return o.FunctionUtils.applyWithError(t=>a.platformSpecificXPath(t))}static platformSpecificXPath(e){if("undefined"==typeof window&&"undefined"==typeof self){let n,i;const o=t(496),{DOMParser:s}=t(238);let a;try{a=(new s).parseFromString(e[0],"text/xml")}catch(r){n=e[0]+" is not valid xml input"}if(!n){const t=o.select(e[1],a);Array.isArray(t)?0===t.length?n=`There is no matched nodes for the expression ${e[1]} in the xml: ${e[0]}`:i=t.map(t=>t.toString()):i=t}return{value:i,error:n}}{let t,n,i;try{i=(new DOMParser).parseFromString(e[0],"text/xml")}catch(r){t=t=e[0]+" is not valid xml input"}if(!t){const r=i.evaluate(e[1],i,null,XPathResult.ANY_TYPE,null);let o=r.iterateNext();const s=[];for(;o;)s.push(o.childNodes[0].nodeValue),o=r.iterateNext();return 0===s.length?t=`There is no matched nodes for the expression ${e[1]} in the xml: ${e[0]}`:n=1===s.length?s[0]:s,{value:n,error:t}}}}static validator(t){o.FunctionUtils.validateOrder(t,void 0,s.ReturnType.Object,s.ReturnType.String)}}r.XPath=a},{180:180,192:192,196:196,213:213,238:238,496:496}],88:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=n(t(421)),o=t(180),s=t(192),a=t(196),u=t(213);class l extends o.ExpressionEvaluator{constructor(){super(s.ExpressionType.JPath,l.evaluator(),u.ReturnType.Object,l.validator)}static evaluator(){return a.FunctionUtils.applyWithError(t=>l.evalJPath(t[0],t[1].toString()))}static evalJPath(t,e){let r,n,o;if("string"==typeof t)try{o=JSON.parse(t)}catch(s){r=t+" is not a valid json string"}else"object"==typeof t?o=t:r="the first parameter should be either an object or a string";if(!r)try{n=i.apply(e,o)}catch(s){r=`${e} is not a valid path + ${s}`}return{value:n,error:r}}static validator(t){a.FunctionUtils.validateOrder(t,void 0,u.ReturnType.Object,u.ReturnType.String)}}r.JPath=l},{180:180,192:192,196:196,213:213,421:421}],104:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(223),i=t(180),o=t(192),s=t(196),a=t(213);class u extends i.ExpressionEvaluator{constructor(){super(o.ExpressionType.NewGuid,u.evaluator(),a.ReturnType.String,u.validator)}static evaluator(){return s.FunctionUtils.apply(()=>u.evalNewGuid())}static evalNewGuid(){return n.v4()}static validator(t){s.FunctionUtils.validateArityAndAnyType(t,0,0)}}r.NewGuid=u},{180:180,192:192,196:196,213:213,223:223}],163:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(180),i=t(192),o=t(196),s=t(213);class a extends n.ExpressionEvaluator{constructor(){super(i.ExpressionType.XML,a.evaluator(),s.ReturnType.String,o.FunctionUtils.validateUnary)}static evaluator(){return o.FunctionUtils.applyWithError(t=>a.platformSpecificXML(t))}static platformSpecificXML(e){if("undefined"!=typeof window||"undefined"!=typeof self){const n=t(456);let i,o,s;try{"string"==typeof e[0]?s=JSON.parse(e[0]):"object"==typeof e[0]&&(s=e[0]),i=new n.json2xml_str(s)}catch(r){o=e[0]+" is not a valid json"}return{value:i,error:o}}{let n,i;const o=t(462);let s;try{"string"==typeof e[0]?s=JSON.parse(e[0]):"object"==typeof e[0]&&(s=e[0]),n=(new o.Builder).buildObject(s)}catch(r){i=e[0]+" is not a valid json"}return{value:n,error:i}}}}r.XML=a},{180:180,192:192,196:196,213:213,456:456,462:462}],421:[function(t,e,r){e.exports=t(422)},{422:422}],223:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),Object.defineProperty(r,"v1",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(r,"v3",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(r,"v4",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(r,"v5",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(r,"NIL",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(r,"version",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(r,"validate",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(r,"stringify",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(r,"parse",{enumerable:!0,get:function(){return h.default}});var n=p(t(231)),i=p(t(232)),o=p(t(234)),s=p(t(235)),a=p(t(225)),u=p(t(237)),l=p(t(236)),c=p(t(230)),h=p(t(226));function p(t){return t&&t.__esModule?t:{default:t}}},{225:225,226:226,230:230,231:231,232:232,234:234,235:235,236:236,237:237}],456:[function(t,e,r){!function(r,n){"use strict";"object"==typeof e&&e.exports?e.exports=n(t(453).DOMParser):r.X2JS=n()}(this,(function(t){"use strict";return function(e){(e=e||{}).arrayAccessForm=e.arrayAccessForm||"none",e.emptyNodeForm=e.emptyNodeForm||"text",e.jsAttributeFilter=e.jsAttributeFilter,e.jsAttributeConverter=e.jsAttributeConverter,e.attributeConverters=e.attributeConverters||[],e.datetimeAccessFormPaths=e.datetimeAccessFormPaths||[],e.arrayAccessFormPaths=e.arrayAccessFormPaths||[],e.xmldomOptions=e.xmldomOptions||{},void 0===e.enableToStringFunc&&(e.enableToStringFunc=!0),void 0===e.skipEmptyTextNodesForObj&&(e.skipEmptyTextNodesForObj=!0),void 0===e.stripWhitespaces&&(e.stripWhitespaces=!0),void 0===e.useDoubleQuotes&&(e.useDoubleQuotes=!0),void 0===e.ignoreRoot&&(e.ignoreRoot=!1),void 0===e.escapeMode&&(e.escapeMode=!0),void 0===e.attributePrefix&&(e.attributePrefix="_"),void 0===e.selfClosingElements&&(e.selfClosingElements=!0),void 0===e.keepCData&&(e.keepCData=!1),void 0===e.keepText&&(e.keepText=!1),void 0===e.jsDateUTC&&(e.jsDateUTC=!1),function(){function t(t){var e=String(t);return 1===e.length&&(e="0"+e),e}"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|^\n+|(\s|\n)+$/g,"")}),"function"!=typeof Date.prototype.toISOString&&(Date.prototype.toISOString=function(){return this.getUTCFullYear()+"-"+t(this.getUTCMonth()+1)+"-"+t(this.getUTCDate())+"T"+t(this.getUTCHours())+":"+t(this.getUTCMinutes())+":"+t(this.getUTCSeconds())+"."+String((this.getUTCMilliseconds()/1e3).toFixed(3)).slice(2,5)+"Z"})}();var r=1,n=3,i=4,o=8,s=9;function a(t){var e=t.localName;return null==e&&(e=t.baseName),null!=e&&""!==e||(e=t.nodeName),e}function u(t){return"string"==typeof t?t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;"):t}function l(t,r,n){switch(e.arrayAccessForm){case"property":t[r]instanceof Array?t[r+"_asArray"]=t[r]:t[r+"_asArray"]=[t[r]]}if(!(t[r]instanceof Array)&&e.arrayAccessFormPaths.length>0){for(var i=!1,o=0;o<e.arrayAccessFormPaths.length;o++){var s=e.arrayAccessFormPaths[o];if("string"==typeof s){if(s===n){i=!0;break}}else if(s instanceof RegExp){if(s.test(n)){i=!0;break}}else if("function"==typeof s&&s(r,n)){i=!0;break}}i&&(t[r]=[t[r]])}}function c(t){var e=t.split(/[-T:+Z]/g),r=new Date(e[0],e[1]-1,e[2]),n=e[5].split(".");if(r.setHours(e[3],e[4],n[0]),n.length>1&&r.setMilliseconds(n[1]),e[6]&&e[7]){var i=60*e[6]+Number(e[7]);i=0+("-"==(/\d\d-\d\d:\d\d$/.test(t)?"-":"+")?-1*i:i),r.setMinutes(r.getMinutes()-i-r.getTimezoneOffset())}else-1!==t.indexOf("Z",t.length-1)&&(r=new Date(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate(),r.getHours(),r.getMinutes(),r.getSeconds(),r.getMilliseconds())));return r}function h(t,u){return t.nodeType===s?function(t){for(var n={},i=t.childNodes,o=0;o<i.length;o++){var s=i.item(o);if(s.nodeType===r){var u=a(s);e.ignoreRoot?n=h(s,u):n[u]=h(s,u)}}return n}(t):t.nodeType===r?function(t,r){for(var n={__cnt:0},i=t.childNodes,s=0;s<i.length;s++){var u=i.item(s),p=a(u);u.nodeType!==o&&(n.__cnt++,null==n[p]?(n[p]=h(u,r+"."+p),l(n,p,r+"."+p)):(n[p]instanceof Array||(n[p]=[n[p]],l(n,p,r+"."+p)),n[p][n[p].length]=h(u,r+"."+p)))}for(var d=0;d<t.attributes.length;d++){var f=t.attributes.item(d);n.__cnt++;for(var y=f.value,m=0;m<e.attributeConverters.length;m++){var g=e.attributeConverters[m];g.test.call(null,f.name,f.value)&&(y=g.convert.call(null,f.name,f.value))}n[e.attributePrefix+f.name]=y}var v=t.prefix;return v&&(n.__cnt++,n.__prefix=v),n["#text"]&&(n.__text=n["#text"],n.__text instanceof Array&&(n.__text=n.__text.join("\n")),e.escapeMode&&(n.__text=n.__text.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,'"').replace(/&#x27;/g,"'").replace(/&amp;/g,"&")),e.stripWhitespaces&&(n.__text=n.__text.trim()),delete n["#text"],"property"===e.arrayAccessForm&&delete n["#text_asArray"],n.__text=function(t,r,n){if(e.datetimeAccessFormPaths.length>0)for(var i=n.split(".#")[0],o=0;o<e.datetimeAccessFormPaths.length;o++){var s=e.datetimeAccessFormPaths[o];if("string"==typeof s){if(s===i)return c(t)}else if(s instanceof RegExp){if(s.test(i))return c(t)}else if("function"==typeof s&&s(i))return c(t)}return t}(n.__text,0,r+".#text")),n.hasOwnProperty("#cdata-section")&&(n.__cdata=n["#cdata-section"],delete n["#cdata-section"],"property"===e.arrayAccessForm&&delete n["#cdata-section_asArray"]),1===n.__cnt&&n.__text&&!e.keepText?n=n.__text:0===n.__cnt&&"text"===e.emptyNodeForm?n="":n.__cnt>1&&void 0!==n.__text&&e.skipEmptyTextNodesForObj&&(e.stripWhitespaces&&""===n.__text||""===n.__text.trim())&&delete n.__text,delete n.__cnt,e.keepCData||n.hasOwnProperty("__text")||!n.hasOwnProperty("__cdata")||1!==Object.keys(n).length?(e.enableToStringFunc&&(n.__text||n.__cdata)&&(n.toString=function(){return(this.__text?this.__text:"")+(this.__cdata?this.__cdata:"")}),n):n.__cdata?n.__cdata:""}(t,u):t.nodeType===n||t.nodeType===i?t.nodeValue:null}function p(t,r,n,i){var o="<"+(t&&t.__prefix?t.__prefix+":":"")+r;if(n)for(var s=0;s<n.length;s++){var a=n[s],l=t[a];e.escapeMode&&(l=u(l)),o+=" "+a.substr(e.attributePrefix.length)+"=",e.useDoubleQuotes?o+='"'+l+'"':o+="'"+l+"'"}return o+(i?" />":">")}function d(t,e){return"</"+(t&&t.__prefix?t.__prefix+":":"")+e+">"}function f(t,r){return"property"===e.arrayAccessForm&&("_asArray",-1!==(n=r.toString()).indexOf("_asArray",n.length-"_asArray".length))||0===r.toString().indexOf(e.attributePrefix)||0===r.toString().indexOf("__")||t[r]instanceof Function;var n}function y(t){var e=0;if(t instanceof Object)for(var r in t)f(t,r)||e++;return e}function m(t){var r=[];if(t instanceof Object)for(var n in t)-1===n.toString().indexOf("__")&&0===n.toString().indexOf(e.attributePrefix)&&r.push(n);return r}function g(t){var r="";return t instanceof Object?r+=function(t){var r="";return t.__cdata&&(r+="<![CDATA["+t.__cdata+"]]>"),(t.__text||"number"==typeof t.__text||"boolean"==typeof t.__text)&&(e.escapeMode?r+=u(t.__text):r+=t.__text),r}(t):null!==t&&(e.escapeMode?r+=u(t):r+=t),r}function v(t,r,n){var i="";return e.jsAttributeFilter&&e.jsAttributeFilter.call(null,r,t)||(e.jsAttributeConverter&&(t=e.jsAttributeConverter.call(null,r,t)),null!=t&&""!==t||!e.selfClosingElements?"object"==typeof t?"[object Array]"===Object.prototype.toString.call(t)?i+=function(t,e,r){var n="";if(0===t.length)n+=p(t,e,r,!0);else for(var i=0;i<t.length;i++)n+=v(t[i],e,m(t[i]));return n}(t,r,n):t instanceof Date?(i+=p(t,r,n,!1),i+=e.jsDateUTC?t.toUTCString():t.toISOString(),i+=d(t,r)):y(t)>0||"number"==typeof t.__text||"boolean"==typeof t.__text||t.__text||t.__cdata?(i+=p(t,r,n,!1),i+=T(t),i+=d(t,r)):e.selfClosingElements?i+=p(t,r,n,!0):(i+=p(t,r,n,!1),i+=d(t,r)):(i+=p(t,r,n,!1),i+=g(t),i+=d(t,r)):i+=p(t,r,n,!0)),i}function T(t){var e="";if(y(t)>0)for(var r in t)if(!f(t,r)){var n=t[r];e+=v(n,r,m(n))}return e+g(t)}function _(r){if(void 0===r)return null;if("string"!=typeof r)return null;var n=null,i=null;if(t)i=(n=new t(e.xmldomOptions)).parseFromString(r,"text/xml");else if(window&&window.DOMParser){n=new window.DOMParser;var o=null;if(!window.ActiveXObject&&!("ActiveXObject"in window)&&document.all&&!document.addEventListener)try{o=n.parseFromString("INVALID","text/xml").childNodes[0].namespaceURI}catch(s){o=null}try{i=n.parseFromString(r,"text/xml"),null!==o&&i.getElementsByTagNameNS(o,"parsererror").length>0&&(i=null)}catch(s){i=null}}else 0===r.indexOf("<?")&&(r=r.substr(r.indexOf("?>")+2)),(i=new ActiveXObject("Microsoft.XMLDOM")).async="false",i.loadXML(r);return i}this.asArray=function(t){return null==t?[]:t instanceof Array?t:[t]},this.toXmlDateTime=function(t){return t instanceof Date?t.toISOString():"number"==typeof t?new Date(t).toISOString():null},this.asDateTime=function(t){return"string"==typeof t?c(t):t},this.xml2dom=function(t){return _(t)},this.dom2js=function(t){return h(t,null)},this.js2dom=function(t){return _(this.js2xml(t))},this.xml2js=function(t){var e=_(t);return null!=e?this.dom2js(e):null},this.js2xml=function(t){return T(t)},this.getVersion=function(){return"3.4.0"}}}))},{453:453}],462:[function(t,e,r){(function(){"use strict";var e,n,i,o={}.hasOwnProperty;n=t(459),e=t(458),i=t(460),t(461),n.defaults,function(t){function e(t){this.message=t}(function(t,e){for(var r in e)o.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype})(e,Error)}(),r.Builder=e.Builder,i.Parser,i.parseString,i.parseStringPromise}).call(this)},{458:458,459:459,460:460,461:461}],496:[function(t,e,r){!function(t){"use strict";var e=function(t,e){for(var r=0;r<e.length;r+=1)t(e[r],r,e)},r=function(t,r,n){var i=r;return e((function(e,r){i=t(i,e,r)}),n),i},n=function(t,r){var n=new Array(r.length);return e((function(e,r){n[r]=t(e)}),r),n};function i(t){return t.toString()}var o=function(t,e){return e.join(t)},s=function(t,e,r){return t+r+e},a=Array.prototype.concat;function u(t,e){for(var r=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(null!=i)for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(r[o]=i[o])}return r}function l(){this.init()}function c(t){this.expression=t}function h(t,e,r){e in t||(t[e]=r)}function p(){}function d(t){arguments.length>0&&this.init(t)}function f(t){arguments.length>0&&this.init(t)}function y(t,e){arguments.length>0&&this.init(t,e)}function m(t,e){arguments.length>0&&this.init(t,e)}function g(t,e){arguments.length>0&&this.init(t,e)}function v(t,e){arguments.length>0&&this.init(t,e)}function T(t,e){arguments.length>0&&this.init(t,e)}function _(t,e){arguments.length>0&&this.init(t,e)}function E(t,e){arguments.length>0&&this.init(t,e)}function b(t,e){arguments.length>0&&this.init(t,e)}function S(t,e){arguments.length>0&&this.init(t,e)}function x(t,e){arguments.length>0&&this.init(t,e)}function C(t,e){arguments.length>0&&this.init(t,e)}function A(t,e){arguments.length>0&&this.init(t,e)}function N(t,e){arguments.length>0&&this.init(t,e)}function O(t,e){arguments.length>0&&this.init(t,e)}function w(t,e){arguments.length>0&&this.init(t,e)}function R(t,e,r){arguments.length>0&&this.init(t,e,r)}function L(t){for(;t&&t.parentNode;)t=t.parentNode;return t}function P(t,e,r){return function(t){for(var e=[],r=0;r<t.length;r+=32767){var n=t.slice(r,r+32767);e=a.apply(e,n)}return e}(n(function(t,e,r){return R.applyPredicates(t.predicates,e,R.applyStep(t,e,r))}.bind(null,r,t),e))}function I(t,e){arguments.length>0&&this.init(t,e)}function D(t,e,r){arguments.length>0&&this.init(t,e,r)}function U(t,e){arguments.length>0&&this.init(t,e)}function M(t){arguments.length>0&&this.init(t)}function k(t,e){arguments.length>0&&this.init(t,e)}l.prototype=new Object,l.prototype.constructor=l,l.superclass=Object.prototype,l.prototype.init=function(){this.reduceActions=[],this.reduceActions[3]=function(t){return new m(t[0],t[2])},this.reduceActions[5]=function(t){return new g(t[0],t[2])},this.reduceActions[7]=function(t){return new v(t[0],t[2])},this.reduceActions[8]=function(t){return new T(t[0],t[2])},this.reduceActions[10]=function(t){return new _(t[0],t[2])},this.reduceActions[11]=function(t){return new E(t[0],t[2])},this.reduceActions[12]=function(t){return new b(t[0],t[2])},this.reduceActions[13]=function(t){return new S(t[0],t[2])},this.reduceActions[15]=function(t){return new x(t[0],t[2])},this.reduceActions[16]=function(t){return new C(t[0],t[2])},this.reduceActions[18]=function(t){return new A(t[0],t[2])},this.reduceActions[19]=function(t){return new N(t[0],t[2])},this.reduceActions[20]=function(t){return new O(t[0],t[2])},this.reduceActions[22]=function(t){return new f(t[1])},this.reduceActions[24]=function(t){return new w(t[0],t[2])},this.reduceActions[25]=function(t){return new R(void 0,void 0,t[0])},this.reduceActions[27]=function(t){return t[0].locationPath=t[2],t[0]},this.reduceActions[28]=function(t){return t[0].locationPath=t[2],t[0].locationPath.steps.unshift(new D(D.DESCENDANTORSELF,U.nodeTest,[])),t[0]},this.reduceActions[29]=function(t){return new R(t[0],[],void 0)},this.reduceActions[30]=function(t){return X.instance_of(t[0],R)?(null==t[0].filterPredicates&&(t[0].filterPredicates=[]),t[0].filterPredicates.push(t[1]),t[0]):new R(t[0],[t[1]],void 0)},this.reduceActions[32]=function(t){return t[1]},this.reduceActions[33]=function(t){return new j(t[0])},this.reduceActions[34]=function(t){return new B(t[0])},this.reduceActions[36]=function(t){return new k(t[0],[])},this.reduceActions[37]=function(t){return new k(t[0],t[2])},this.reduceActions[38]=function(t){return[t[0]]},this.reduceActions[39]=function(t){return t[2].unshift(t[0]),t[2]},this.reduceActions[43]=function(t){return new I(!0,[])},this.reduceActions[44]=function(t){return t[1].absolute=!0,t[1]},this.reduceActions[46]=function(t){return new I(!1,[t[0]])},this.reduceActions[47]=function(t){return t[0].steps.push(t[2]),t[0]},this.reduceActions[49]=function(t){return new D(t[0],t[1],[])},this.reduceActions[50]=function(t){return new D(D.CHILD,t[0],[])},this.reduceActions[51]=function(t){return new D(t[0],t[1],t[2])},this.reduceActions[52]=function(t){return new D(D.CHILD,t[0],t[1])},this.reduceActions[54]=function(t){return[t[0]]},this.reduceActions[55]=function(t){return t[1].unshift(t[0]),t[1]},this.reduceActions[56]=function(t){return"ancestor"==t[0]?D.ANCESTOR:"ancestor-or-self"==t[0]?D.ANCESTORORSELF:"attribute"==t[0]?D.ATTRIBUTE:"child"==t[0]?D.CHILD:"descendant"==t[0]?D.DESCENDANT:"descendant-or-self"==t[0]?D.DESCENDANTORSELF:"following"==t[0]?D.FOLLOWING:"following-sibling"==t[0]?D.FOLLOWINGSIBLING:"namespace"==t[0]?D.NAMESPACE:"parent"==t[0]?D.PARENT:"preceding"==t[0]?D.PRECEDING:"preceding-sibling"==t[0]?D.PRECEDINGSIBLING:"self"==t[0]?D.SELF:-1},this.reduceActions[57]=function(t){return D.ATTRIBUTE},this.reduceActions[59]=function(t){return"comment"==t[0]?U.commentTest:"text"==t[0]?U.textTest:"processing-instruction"==t[0]?U.anyPiTest:"node"==t[0]?U.nodeTest:new U(-1,void 0)},this.reduceActions[60]=function(t){return new U.PITest(t[2])},this.reduceActions[61]=function(t){return t[1]},this.reduceActions[63]=function(t){return t[1].absolute=!0,t[1].steps.unshift(new D(D.DESCENDANTORSELF,U.nodeTest,[])),t[1]},this.reduceActions[64]=function(t){return t[0].steps.push(new D(D.DESCENDANTORSELF,U.nodeTest,[])),t[0].steps.push(t[2]),t[0]},this.reduceActions[65]=function(t){return new D(D.SELF,U.nodeTest,[])},this.reduceActions[66]=function(t){return new D(D.PARENT,U.nodeTest,[])},this.reduceActions[67]=function(t){return new M(t[1])},this.reduceActions[68]=function(t){return U.nameTestAny},this.reduceActions[69]=function(t){return new U.NameTestPrefixAny(t[0].split(":")[0])},this.reduceActions[70]=function(t){return new U.NameTestQName(t[0])}},l.actionTable=[" s s        sssssssss    s ss  s  ss","                 s                  ","r  rrrrrrrrr         rrrrrrr rr  r  ","                rrrrr               "," s s        sssssssss    s ss  s  ss","rs  rrrrrrrr s  sssssrrrrrr  rrs rs "," s s        sssssssss    s ss  s  ss","                            s       ","                            s       ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","  s                                 ","                            s       "," s           s  sssss          s  s ","r  rrrrrrrrr         rrrrrrr rr  r  ","a                                   ","r       s                    rr  r  ","r      sr                    rr  r  ","r   s  rr            s       rr  r  ","r   rssrr            rss     rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrrsss         rrrrr   rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","r   rrrrrrrr         rrrrrs  rr  r  ","r   rrrrrrrr         rrrrrr  rr  r  ","r   rrrrrrrr         rrrrrr  rr  r  ","r  srrrrrrrr         rrrrrrs rr sr  ","r  srrrrrrrr         rrrrrrs rr  r  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r   rrrrrrrr         rrrrrr  rr  r  ","r   rrrrrrrr         rrrrrr  rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","                sssss               ","r  rrrrrrrrr         rrrrrrr rr sr  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","                             s      ","r  srrrrrrrr         rrrrrrs rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","              s                     ","                             s      ","                rrrrr               "," s s        sssssssss    s sss s  ss","r  srrrrrrrr         rrrrrrs rr  r  "," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss    s ss  s  ss"," s s        sssssssss      ss  s  ss"," s s        sssssssss    s ss  s  ss"," s           s  sssss          s  s "," s           s  sssss          s  s ","r  rrrrrrrrr         rrrrrrr rr rr  "," s           s  sssss          s  s "," s           s  sssss          s  s ","r  rrrrrrrrr         rrrrrrr rr sr  ","r  rrrrrrrrr         rrrrrrr rr sr  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr rr  ","                             s      ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  ","                             rr     ","                             s      ","                             rs     ","r      sr                    rr  r  ","r   s  rr            s       rr  r  ","r   rssrr            rss     rr  r  ","r   rssrr            rss     rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrr            rrrss   rr  r  ","r   rrrrrsss         rrrrr   rr  r  ","r   rrrrrsss         rrrrr   rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","r   rrrrrrrr         rrrrr   rr  r  ","r   rrrrrrrr         rrrrrr  rr  r  ","                                 r  ","                                 s  ","r  srrrrrrrr         rrrrrrs rr  r  ","r  srrrrrrrr         rrrrrrs rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr  r  ","r  rrrrrrrrr         rrrrrrr rr rr  ","r  rrrrrrrrr         rrrrrrr rr rr  "," s s        sssssssss    s ss  s  ss","r  rrrrrrrrr         rrrrrrr rr rr  ","                             r      "],l.actionTableNumber=[" 1 0        /.-,+*)('    & %$  #  \"!","                 J                  ","a  aaaaaaaaa         aaaaaaa aa  a  ","                YYYYY               "," 1 0        /.-,+*)('    & %$  #  \"!","K1  KKKKKKKK .  +*)('KKKKKK  KK# K\" "," 1 0        /.-,+*)('    & %$  #  \"!","                            N       ","                            O       ","e  eeeeeeeee         eeeeeee ee ee  ","f  fffffffff         fffffff ff ff  ","d  ddddddddd         ddddddd dd dd  ","B  BBBBBBBBB         BBBBBBB BB BB  ","A  AAAAAAAAA         AAAAAAA AA AA  ","  P                                 ","                            Q       "," 1           .  +*)('          #  \" ","b  bbbbbbbbb         bbbbbbb bb  b  ","                                    ","!       S                    !!  !  ",'"      T"                    ""  "  ',"$   V  $$            U       $$  $  ","&   &ZY&&            &XW     &&  &  ",")   )))))            )))\\[   ))  )  ",".   ....._^]         .....   ..  .  ","1   11111111         11111   11  1  ","5   55555555         55555`  55  5  ","7   77777777         777777  77  7  ","9   99999999         999999  99  9  ",":  c::::::::         ::::::b :: a:  ","I  fIIIIIIII         IIIIIIe II  I  ","=  =========         ======= == ==  ","?  ?????????         ??????? ?? ??  ","C  CCCCCCCCC         CCCCCCC CC CC  ","J   JJJJJJJJ         JJJJJJ  JJ  J  ","M   MMMMMMMM         MMMMMM  MM  M  ","N  NNNNNNNNN         NNNNNNN NN  N  ","P  PPPPPPPPP         PPPPPPP PP  P  ","                +*)('               ","R  RRRRRRRRR         RRRRRRR RR aR  ","U  UUUUUUUUU         UUUUUUU UU  U  ","Z  ZZZZZZZZZ         ZZZZZZZ ZZ ZZ  ","c  ccccccccc         ccccccc cc cc  ","                             j      ","L  fLLLLLLLL         LLLLLLe LL  L  ","6   66666666         66666   66  6  ","              k                     ","                             l      ","                XXXXX               "," 1 0        /.-,+*)('    & %$m #  \"!","_  f________         ______eaQ  ","V  VVVVVVVVV         VVVVVVV VV aV  ","T  TTTTTTTTT         TTTTTTT TT  T  ","@  @@@@@@@@@         @@@@@@@ @@ @@  ","                             \x87      ","[  [[[[[[[[[         [[[[[[[ [[ [[  ","D  DDDDDDDDD         DDDDDDD DD DD  ","                             HH     ","                             \x88      ","                             F\x89     ","#      T#                    ##  #  ","%   V  %%            U       %%  %  ","'   'ZY''            'XW     ''  '  ","(   (ZY((            (XW     ((  (  ","+   +++++            +++\\[   ++  +  ","*   *****            ***\\[   **  *  ","-   -----            ---\\[   --  -  ",",   ,,,,,            ,,,\\[   ,,  ,  ","0   00000_^]         00000   00  0  ","/   /////_^]         /////   //  /  ","2   22222222         22222   22  2  ","3   33333333         33333   33  3  ","4   44444444         44444   44  4  ","8   88888888         888888  88  8  ","                                 ^  ","                                 \x8a  ",";  f;;;;;;;;         ;;;;;;e ;;  ;  ","<  f<<<<<<<<         <<<<<<e <<  <  ","O  OOOOOOOOO         OOOOOOO OO  O  ","`  `````````         ``````` ``  `  ","S  SSSSSSSSS         SSSSSSS SS  S  ","W  WWWWWWWWW         WWWWWWW WW  W  ","\\  \\\\\\\\\\\\\\\\\\         \\\\\\\\\\\\\\ \\\\ \\\\  ","E  EEEEEEEEE         EEEEEEE EE EE  "," 1 0        /.-,+*)('    & %$  #  \"!","]  ]]]]]]]]]         ]]]]]]] ]] ]]  ","                             G      "],l.gotoTable=["3456789:;<=>?@ AB  CDEFGH IJ ","                             ","                             ","                             ","L456789:;<=>?@ AB  CDEFGH IJ ","            M        EFGH IJ ","       N;<=>?@ AB  CDEFGH IJ ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","            S        EFGH IJ ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","              e              ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                        h  J ","              i          j   ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","                             ","o456789:;<=>?@ ABpqCDEFGH IJ ","                             ","  r6789:;<=>?@ AB  CDEFGH IJ ","   s789:;<=>?@ AB  CDEFGH IJ ","    t89:;<=>?@ AB  CDEFGH IJ ","    u89:;<=>?@ AB  CDEFGH IJ ","     v9:;<=>?@ AB  CDEFGH IJ ","     w9:;<=>?@ AB  CDEFGH IJ ","     x9:;<=>?@ AB  CDEFGH IJ ","     y9:;<=>?@ AB  CDEFGH IJ ","      z:;<=>?@ AB  CDEFGH IJ ","      {:;<=>?@ AB  CDEFGH IJ ","       |;<=>?@ AB  CDEFGH IJ ","       };<=>?@ AB  CDEFGH IJ ","       ~;<=>?@ AB  CDEFGH IJ ","         \x7f=>?@ AB  CDEFGH IJ ","\x80456789:;<=>?@ AB  CDEFGH IJ\x81","            \x82        EFGH IJ ","            \x83        EFGH IJ ","                             ","                     \x84 GH IJ ","                     \x85 GH IJ ","              i          \x86   ","              i          \xo456789:;<=>?@ AB\x8cqCDEFGH IJ ","                             ","                             "],l.productions=[[1,1,2],[2,1,3],[3,1,4],[3,3,3,-9,4],[4,1,5],[4,3,4,-8,5],[5,1,6],[5,3,5,-22,6],[5,3,5,-5,6],[6,1,7],[6,3,6,-23,7],[6,3,6,-24,7],[6,3,6,-6,7],[6,3,6,-7,7],[7,1,8],[7,3,7,-25,8],[7,3,7,-26,8],[8,1,9],[8,3,8,-12,9],[8,3,8,-11,9],[8,3,8,-10,9],[9,1,10],[9,2,-26,9],[10,1,11],[10,3,10,-27,11],[11,1,12],[11,1,13],[11,3,13,-28,14],[11,3,13,-4,14],[13,1,15],[13,2,13,16],[15,1,17],[15,3,-29,2,-30],[15,1,-15],[15,1,-16],[15,1,18],[18,3,-13,-29,-30],[18,4,-13,-29,19,-30],[19,1,20],[19,3,20,-31,19],[20,1,2],[12,1,14],[12,1,21],[21,1,-28],[21,2,-28,14],[21,1,22],[14,1,23],[14,3,14,-28,23],[14,1,24],[23,2,25,26],[23,1,26],[23,3,25,26,27],[23,2,26,27],[23,1,28],[27,1,16],[27,2,16,27],[25,2,-14,-3],[25,1,-32],[26,1,29],[26,3,-20,-29,-30],[26,4,-21,-29,-15,-30],[16,3,-33,30,-34],[30,1,2],[22,2,-4,14],[24,3,14,-4,23],[28,1,-35],[28,1,-2],[17,2,-36,-18],[29,1,-17],[29,1,-19],[29,1,-18]],l.DOUBLEDOT=2,l.DOUBLECOLON=3,l.DOUBLESLASH=4,l.NOTEQUAL=5,l.LESSTHANOREQUAL=6,l.GREATERTHANOREQUAL=7,l.AND=8,l.OR=9,l.MOD=10,l.DIV=11,l.MULTIPLYOPERATOR=12,l.FUNCTIONNAME=13,l.AXISNAME=14,l.LITERAL=15,l.NUMBER=16,l.ASTERISKNAMETEST=17,l.QNAME=18,l.NCNAMECOLONASTERISK=19,l.NODETYPE=20,l.PROCESSINGINSTRUCTIONWITHLITERAL=21,l.EQUALS=22,l.LESSTHAN=23,l.GREATERTHAN=24,l.PLUS=25,l.MINUS=26,l.BAR=27,l.SLASH=28,l.LEFTPARENTHESIS=29,l.RIGHTPARENTHESIS=30,l.COMMA=31,l.AT=32,l.LEFTBRACKET=33,l.RIGHTBRACKET=34,l.DOT=35,l.DOLLAR=36,l.prototype.tokenize=function(t){for(var e=[],r=[],n=t+"\0",i=0,o=n.charAt(i++);;){for(;" "==o||"\t"==o||"\r"==o||"\n"==o;)o=n.charAt(i++);if("\0"==o||i>=n.length)break;if("("!=o)if(")"!=o)if("["!=o)if("]"!=o)if("@"!=o)if(","!=o)if("|"!=o)if("+"!=o)if("-"!=o)if("="!=o)if("$"!=o)if("."!=o)if("'"!=o&&'"'!=o)if(o>="0"&&o<="9"){for(h=o,o=n.charAt(i++);o>="0"&&o<="9";)h+=o,o=n.charAt(i++);if("."==o&&n.charAt(i)>="0"&&n.charAt(i)<="9")for(h+=o,h+=n.charAt(i++),o=n.charAt(i++);o>="0"&&o<="9";)h+=o,o=n.charAt(i++);e.push(l.NUMBER),r.push(h)}else if("*"!=o)if(":"!=o||":"!=n.charAt(i))if("/"!=o)if("!"!=o||"="!=n.charAt(i))if("<"!=o)if(">"!=o){if("_"!=o&&!X.isLetter(o.charCodeAt(0)))throw new Error("Unexpected character "+o);var s=o;for(o=n.charAt(i++);X.isNCNameChar(o.charCodeAt(0));)s+=o,o=n.charAt(i++);if(e.length>0&&(a=e[e.length-1])!=l.AT&&a!=l.DOUBLECOLON&&a!=l.LEFTPARENTHESIS&&a!=l.LEFTBRACKET&&a!=l.AND&&a!=l.OR&&a!=l.MOD&&a!=l.DIV&&a!=l.MULTIPLYOPERATOR&&a!=l.SLASH&&a!=l.DOUBLESLASH&&a!=l.BAR&&a!=l.PLUS&&a!=l.MINUS&&a!=l.EQUALS&&a!=l.NOTEQUAL&&a!=l.LESSTHAN&&a!=l.LESSTHANOREQUAL&&a!=l.GREATERTHAN&&a!=l.GREATERTHANOREQUAL){if("and"==s){e.push(l.AND),r.push(s);continue}if("or"==s){e.push(l.OR),r.push(s);continue}if("mod"==s){e.push(l.MOD),r.push(s);continue}if("div"==s){e.push(l.DIV),r.push(s);continue}}if(":"==o){if("*"==n.charAt(i)){e.push(l.NCNAMECOLONASTERISK),r.push(s+":*"),i++,o=n.charAt(i++);continue}if("_"==n.charAt(i)||X.isLetter(n.charCodeAt(i))){for(s+=":",o=n.charAt(i++);X.isNCNameChar(o.charCodeAt(0));)s+=o,o=n.charAt(i++);if("("==o){e.push(l.FUNCTIONNAME),r.push(s);continue}e.push(l.QNAME),r.push(s);continue}if(":"==n.charAt(i)){e.push(l.AXISNAME),r.push(s);continue}}if("("==o){if("comment"==s||"text"==s||"node"==s){e.push(l.NODETYPE),r.push(s);continue}if("processing-instruction"==s){")"==n.charAt(i)?e.push(l.NODETYPE):e.push(l.PROCESSINGINSTRUCTIONWITHLITERAL),r.push(s);continue}e.push(l.FUNCTIONNAME),r.push(s);continue}e.push(l.QNAME),r.push(s)}else{if("="==n.charAt(i)){e.push(l.GREATERTHANOREQUAL),r.push(">="),i++,o=n.charAt(i++);continue}e.push(l.GREATERTHAN),r.push(">"),o=n.charAt(i++)}else{if("="==n.charAt(i)){e.push(l.LESSTHANOREQUAL),r.push("<="),i++,o=n.charAt(i++);continue}e.push(l.LESSTHAN),r.push("<"),o=n.charAt(i++)}else e.push(l.NOTEQUAL),r.push("!="),i++,o=n.charAt(i++);else{if("/"==(o=n.charAt(i++))){e.push(l.DOUBLESLASH),r.push("//"),o=n.charAt(i++);continue}e.push(l.SLASH),r.push("/")}else e.push(l.DOUBLECOLON),r.push("::"),i++,o=n.charAt(i++);else{var a;if(e.length>0&&(a=e[e.length-1])!=l.AT&&a!=l.DOUBLECOLON&&a!=l.LEFTPARENTHESIS&&a!=l.LEFTBRACKET&&a!=l.AND&&a!=l.OR&&a!=l.MOD&&a!=l.DIV&&a!=l.MULTIPLYOPERATOR&&a!=l.SLASH&&a!=l.DOUBLESLASH&&a!=l.BAR&&a!=l.PLUS&&a!=l.MINUS&&a!=l.EQUALS&&a!=l.NOTEQUAL&&a!=l.LESSTHAN&&a!=l.LESSTHANOREQUAL&&a!=l.GREATERTHAN&&a!=l.GREATERTHANOREQUAL){e.push(l.MULTIPLYOPERATOR),r.push(o),o=n.charAt(i++);continue}e.push(l.ASTERISKNAMETEST),r.push(o),o=n.charAt(i++)}else{for(var u=o,c="";i<n.length&&(o=n.charAt(i))!==u;)c+=o,i+=1;if(o!==u)throw Q.fromMessage("Unterminated string literal: "+u+c);i+=1,e.push(l.LITERAL),r.push(c),o=n.charAt(i++)}else{if("."==(o=n.charAt(i++))){e.push(l.DOUBLEDOT),r.push(".."),o=n.charAt(i++);continue}if(o>="0"&&o<="9"){var h="."+o;for(o=n.charAt(i++);o>="0"&&o<="9";)h+=o,o=n.charAt(i++);e.push(l.NUMBER),r.push(h);continue}e.push(l.DOT),r.push(".")}else e.push(l.DOLLAR),r.push(o),o=n.charAt(i++);else e.push(l.EQUALS),r.push(o),o=n.charAt(i++);else e.push(l.MINUS),r.push(o),o=n.charAt(i++);else e.push(l.PLUS),r.push(o),o=n.charAt(i++);else e.push(l.BAR),r.push(o),o=n.charAt(i++);else e.push(l.COMMA),r.push(o),o=n.charAt(i++);else e.push(l.AT),r.push(o),o=n.charAt(i++);else e.push(l.RIGHTBRACKET),r.push(o),o=n.charAt(i++);else e.push(l.LEFTBRACKET),r.push(o),o=n.charAt(i++);else e.push(l.RIGHTPARENTHESIS),r.push(o),o=n.charAt(i++);else e.push(l.LEFTPARENTHESIS),r.push(o),o=n.charAt(i++)}return e.push(1),r.push("[EOF]"),[e,r]},l.SHIFT="s",l.REDUCE="r",l.ACCEPT="a",l.prototype.parse=function(t){var e,r,n=this.tokenize(t);if(null!=n){e=n[0],r=n[1];var i,o,s=0,a=[],u=[],h=[];for(a.push(0),u.push(1),h.push("_S"),i=e[s],o=r[s++];;)switch(t=a[a.length-1],l.actionTable[t].charAt(i-1)){case l.SHIFT:u.push(-i),h.push(o),a.push(l.actionTableNumber[t].charCodeAt(i-1)-32),i=e[s],o=r[s++];break;case l.REDUCE:for(var p=l.productions[l.actionTableNumber[t].charCodeAt(i-1)-32][1],d=[],f=0;f<p;f++)u.pop(),d.unshift(h.pop()),a.pop();var y=a[a.length-1];u.push(l.productions[l.actionTableNumber[t].charCodeAt(i-1)-32][0]),null==this.reduceActions[l.actionTableNumber[t].charCodeAt(i-1)-32]?h.push(d[0]):h.push(this.reduceActions[l.actionTableNumber[t].charCodeAt(i-1)-32](d)),a.push(l.gotoTable[y].charCodeAt(l.productions[l.actionTableNumber[t].charCodeAt(i-1)-32][0]-2)-33);break;case l.ACCEPT:return new c(h.pop());default:throw new Error("XPath parse error")}}},c.prototype=new Object,c.prototype.constructor=c,c.superclass=Object.prototype,c.prototype.toString=function(){return this.expression.toString()},c.prototype.evaluate=function(t){return t.contextNode=t.expressionContextNode,t.contextSize=1,t.contextPosition=1,t.isHtml&&(h(t,"caseInsensitive",!0),h(t,"allowAnyNamespaceForNoPrefix",!0)),h(t,"caseInsensitive",!1),this.expression.evaluate(t)},c.XML_NAMESPACE_URI="http://www.w3.org/XML/1998/namespace",c.XMLNS_NAMESPACE_URI="http://www.w3.org/2000/xmlns/",p.prototype=new Object,p.prototype.constructor=p,p.superclass=Object.prototype,p.prototype.init=function(){},p.prototype.toString=function(){return"<Expression>"},p.prototype.evaluate=function(t){throw new Error("Could not evaluate expression.")},d.prototype=new p,d.prototype.constructor=d,d.superclass=p.prototype,d.prototype.init=function(t){this.rhs=t},f.prototype=new d,f.prototype.constructor=f,f.superclass=d.prototype,f.prototype.init=function(t){f.superclass.init.call(this,t)},f.prototype.evaluate=function(t){return this.rhs.evaluate(t).number().negate()},f.prototype.toString=function(){return"-"+this.rhs.toString()},y.prototype=new p,y.prototype.constructor=y,y.superclass=p.prototype,y.prototype.init=function(t,e){this.lhs=t,this.rhs=e},m.prototype=new y,m.prototype.constructor=m,m.superclass=y.prototype,m.prototype.init=function(t,e){m.superclass.init.call(this,t,e)},m.prototype.toString=function(){return"("+this.lhs.toString()+" or "+this.rhs.toString()+")"},m.prototype.evaluate=function(t){var e=this.lhs.evaluate(t).bool();return e.booleanValue()?e:this.rhs.evaluate(t).bool()},g.prototype=new y,g.prototype.constructor=g,g.superclass=y.prototype,g.prototype.init=function(t,e){g.superclass.init.call(this,t,e)},g.prototype.toString=function(){return"("+this.lhs.toString()+" and "+this.rhs.toString()+")"},g.prototype.evaluate=function(t){var e=this.lhs.evaluate(t).bool();return e.booleanValue()?this.rhs.evaluate(t).bool():e},v.prototype=new y,v.prototype.constructor=v,v.superclass=y.prototype,v.prototype.init=function(t,e){v.superclass.init.call(this,t,e)},v.prototype.toString=function(){return"("+this.lhs.toString()+" = "+this.rhs.toString()+")"},v.prototype.evaluate=function(t){return this.lhs.evaluate(t).equals(this.rhs.evaluate(t))},T.prototype=new y,T.prototype.constructor=T,T.superclass=y.prototype,T.prototype.init=function(t,e){T.superclass.init.call(this,t,e)},T.prototype.toString=function(){return"("+this.lhs.toString()+" != "+this.rhs.toString()+")"},T.prototype.evaluate=function(t){return this.lhs.evaluate(t).notequal(this.rhs.evaluate(t))},_.prototype=new y,_.prototype.constructor=_,_.superclass=y.prototype,_.prototype.init=function(t,e){_.superclass.init.call(this,t,e)},_.prototype.evaluate=function(t){return this.lhs.evaluate(t).lessthan(this.rhs.evaluate(t))},_.prototype.toString=function(){return"("+this.lhs.toString()+" < "+this.rhs.toString()+")"},E.prototype=new y,E.prototype.constructor=E,E.superclass=y.prototype,E.prototype.init=function(t,e){E.superclass.init.call(this,t,e)},E.prototype.evaluate=function(t){return this.lhs.evaluate(t).greaterthan(this.rhs.evaluate(t))},E.prototype.toString=function(){return"("+this.lhs.toString()+" > "+this.rhs.toString()+")"},b.prototype=new y,b.prototype.constructor=b,b.superclass=y.prototype,b.prototype.init=function(t,e){b.superclass.init.call(this,t,e)},b.prototype.evaluate=function(t){return this.lhs.evaluate(t).lessthanorequal(this.rhs.evaluate(t))},b.prototype.toString=function(){return"("+this.lhs.toString()+" <= "+this.rhs.toString()+")"},S.prototype=new y,S.prototype.constructor=S,S.superclass=y.prototype,S.prototype.init=function(t,e){S.superclass.init.call(this,t,e)},S.prototype.evaluate=function(t){return this.lhs.evaluate(t).greaterthanorequal(this.rhs.evaluate(t))},S.prototype.toString=function(){return"("+this.lhs.toString()+" >= "+this.rhs.toString()+")"},x.prototype=new y,x.prototype.constructor=x,x.superclass=y.prototype,x.prototype.init=function(t,e){x.superclass.init.call(this,t,e)},x.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().plus(this.rhs.evaluate(t).number())},x.prototype.toString=function(){return"("+this.lhs.toString()+" + "+this.rhs.toString()+")"},C.prototype=new y,C.prototype.constructor=C,C.superclass=y.prototype,C.prototype.init=function(t,e){C.superclass.init.call(this,t,e)},C.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().minus(this.rhs.evaluate(t).number())},C.prototype.toString=function(){return"("+this.lhs.toString()+" - "+this.rhs.toString()+")"},A.prototype=new y,A.prototype.constructor=A,A.superclass=y.prototype,A.prototype.init=function(t,e){A.superclass.init.call(this,t,e)},A.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().multiply(this.rhs.evaluate(t).number())},A.prototype.toString=function(){return"("+this.lhs.toString()+" * "+this.rhs.toString()+")"},N.prototype=new y,N.prototype.constructor=N,N.superclass=y.prototype,N.prototype.init=function(t,e){N.superclass.init.call(this,t,e)},N.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().div(this.rhs.evaluate(t).number())},N.prototype.toString=function(){return"("+this.lhs.toString()+" div "+this.rhs.toString()+")"},O.prototype=new y,O.prototype.constructor=O,O.superclass=y.prototype,O.prototype.init=function(t,e){O.superclass.init.call(this,t,e)},O.prototype.evaluate=function(t){return this.lhs.evaluate(t).number().mod(this.rhs.evaluate(t).number())},O.prototype.toString=function(){return"("+this.lhs.toString()+" mod "+this.rhs.toString()+")"},w.prototype=new y,w.prototype.constructor=w,w.superclass=y.prototype,w.prototype.init=function(t,e){w.superclass.init.call(this,t,e)},w.prototype.evaluate=function(t){return this.lhs.evaluate(t).nodeset().union(this.rhs.evaluate(t).nodeset())},w.prototype.toString=function(){return n(i,[this.lhs,this.rhs]).join(" | ")},R.prototype=new p,R.prototype.constructor=R,R.superclass=p.prototype,R.prototype.init=function(t,e,r){R.superclass.init.call(this),this.filter=t,this.filterPredicates=e,this.locationPath=r},R.applyPredicates=function(t,n,i){if(0===t.length)return i;var o=n.extend({});return r((function(t,r){return o.contextSize=t.length,n=function(t,e){return o.contextNode=t,o.contextPosition=e+1,R.predicateMatches(r,o)},i=[],e((function(t,e){n(t,e)&&i.push(t)}),t),i;var n,i}),i,t)},R.getRoot=function(t,e){var r=e[0];if(9===r.nodeType)return r;if(t.virtualRoot)return t.virtualRoot;var n=r.ownerDocument;if(n)return n;for(var i=r;null!=i.parentNode;)i=i.parentNode;return i},R.applyStep=function(t,e,r){var n=[];switch(e.contextNode=r,t.axis){case D.ANCESTOR:if(e.contextNode===e.virtualRoot)break;for(i=2==e.contextNode.nodeType?R.getOwnerElement(e.contextNode):e.contextNode.parentNode;null!=i&&(t.nodeTest.matches(i,e)&&n.push(i),i!==e.virtualRoot);)i=i.parentNode;break;case D.ANCESTORORSELF:for(var i=e.contextNode;null!=i&&(t.nodeTest.matches(i,e)&&n.push(i),i!==e.virtualRoot);i=2==i.nodeType?R.getOwnerElement(i):i.parentNode);break;case D.ATTRIBUTE:var o=e.contextNode.attributes;if(null!=o)for(var s=0;s<o.length;s++)i=o.item(s),t.nodeTest.matches(i,e)&&n.push(i);break;case D.CHILD:for(i=e.contextNode.firstChild;null!=i;i=i.nextSibling)t.nodeTest.matches(i,e)&&n.push(i);break;case D.DESCENDANT:for(var a=[e.contextNode.firstChild];a.length>0;)for(i=a.pop();null!=i;)t.nodeTest.matches(i,e)&&n.push(i),null!=i.firstChild?(a.push(i.nextSibling),i=i.firstChild):i=i.nextSibling;break;case D.DESCENDANTORSELF:for(t.nodeTest.matches(e.contextNode,e)&&n.push(e.contextNode),a=[e.contextNode.firstChild];a.length>0;)for(i=a.pop();null!=i;)t.nodeTest.matches(i,e)&&n.push(i),null!=i.firstChild?(a.push(i.nextSibling),i=i.firstChild):i=i.nextSibling;break;case D.FOLLOWING:if(e.contextNode===e.virtualRoot)break;for(a=[],null!=e.contextNode.firstChild?a.unshift(e.contextNode.firstChild):a.unshift(e.contextNode.nextSibling),i=e.contextNode.parentNode;null!=i&&9!=i.nodeType&&i!==e.virtualRoot;i=i.parentNode)a.unshift(i.nextSibling);do{for(i=a.pop();null!=i;)t.nodeTest.matches(i,e)&&n.push(i),null!=i.firstChild?(a.push(i.nextSibling),i=i.firstChild):i=i.nextSibling}while(a.length>0);break;case D.FOLLOWINGSIBLING:if(e.contextNode===e.virtualRoot)break;for(i=e.contextNode.nextSibling;null!=i;i=i.nextSibling)t.nodeTest.matches(i,e)&&n.push(i);break;case D.NAMESPACE:var u={};if(1==e.contextNode.nodeType){for(u.xml=c.XML_NAMESPACE_URI,u.xmlns=c.XMLNS_NAMESPACE_URI,i=e.contextNode;null!=i&&1==i.nodeType;i=i.parentNode)for(s=0;s<i.attributes.length;s++){var l=i.attributes.item(s),h=String(l.name);"xmlns"==h?null==u[""]&&(u[""]=l.value):h.length>6&&"xmlns:"==h.substring(0,6)&&null==u[p=h.substring(6,h.length)]&&(u[p]=l.value)}for(var p in u){var d=new W(p,u[p],e.contextNode);t.nodeTest.matches(d,e)&&n.push(d)}}break;case D.PARENT:i=null,e.contextNode!==e.virtualRoot&&(i=2==e.contextNode.nodeType?R.getOwnerElement(e.contextNode):e.contextNode.parentNode),null!=i&&t.nodeTest.matches(i,e)&&n.push(i);break;case D.PRECEDING:a=null!=e.virtualRoot?[e.virtualRoot]:[L(e.contextNode)];t:for(;a.length>0;)for(i=a.pop();null!=i;){if(i==e.contextNode)break t;t.nodeTest.matches(i,e)&&n.unshift(i),null!=i.firstChild?(a.push(i.nextSibling),i=i.firstChild):i=i.nextSibling}break;case D.PRECEDINGSIBLING:if(e.contextNode===e.virtualRoot)break;for(i=e.contextNode.previousSibling;null!=i;i=i.previousSibling)t.nodeTest.matches(i,e)&&n.push(i);break;case D.SELF:t.nodeTest.matches(e.contextNode,e)&&n.push(e.contextNode)}return n},R.applySteps=function(t,e,n){return r(P.bind(null,e),n,t)},R.prototype.applyFilter=function(t,e){if(!this.filter)return{nodes:[t.contextNode]};var r=this.filter.evaluate(t);if(!X.instance_of(r,z)){if(null!=this.filterPredicates&&this.filterPredicates.length>0||null!=this.locationPath)throw new Error("Path expression filter must evaluate to a nodeset if predicates or location path are used");return{nonNodes:r}}return{nodes:R.applyPredicates(this.filterPredicates||[],e,r.toUnsortedArray())}},R.applyLocationPath=function(t,e,r){if(!t)return r;var n=t.absolute?[R.getRoot(e,r)]:r;return R.applySteps(t.steps,e,n)},R.prototype.evaluate=function(t){var e=u(new V,t),r=this.applyFilter(t,e);if("nonNodes"in r)return r.nonNodes;var n=new z;return n.addArray(R.applyLocationPath(this.locationPath,e,r.nodes)),n},R.predicateMatches=function(t,e){var r=t.evaluate(e);return X.instance_of(r,B)?e.contextPosition===r.numberValue():r.booleanValue()},R.predicateString=function(t){return s("[","]",t.toString())},R.predicatesString=function(t){return o("",n(R.predicateString,t))},R.prototype.toString=function(){if(null!=this.filter){var t=i(this.filter);return X.instance_of(this.filter,j)?s("'","'",t):null!=this.filterPredicates&&this.filterPredicates.length?s("(",")",t)+R.predicatesString(this.filterPredicates):null!=this.locationPath?t+(this.locationPath.absolute?"":"/")+i(this.locationPath):t}return i(this.locationPath)},R.getOwnerElement=function(t){if(t.ownerElement)return t.ownerElement;try{if(t.selectSingleNode)return t.selectSingleNode("..")}catch(s){}for(var e=(9==t.nodeType?t:t.ownerDocument).getElementsByTagName("*"),r=0;r<e.length;r++)for(var n=e.item(r),i=n.attributes,o=0;o<i.length;o++)if(i.item(o)===t)return n;return null},I.prototype=new Object,I.prototype.constructor=I,I.superclass=Object.prototype,I.prototype.init=function(t,e){this.absolute=t,this.steps=e},I.prototype.toString=function(){return(this.absolute?"/":"")+n(i,this.steps).join("/")},D.prototype=new Object,D.prototype.constructor=D,D.superclass=Object.prototype,D.prototype.init=function(t,e,r){this.axis=t,this.nodeTest=e,this.predicates=r},D.prototype.toString=function(){return D.STEPNAMES[this.axis]+"::"+this.nodeTest.toString()+R.predicatesString(this.predicates)},D.ANCESTOR=0,D.ANCESTORORSELF=1,D.ATTRIBUTE=2,D.CHILD=3,D.DESCENDANT=4,D.DESCENDANTORSELF=5,D.FOLLOWING=6,D.FOLLOWINGSIBLING=7,D.NAMESPACE=8,D.PARENT=9,D.PRECEDING=10,D.PRECEDINGSIBLING=11,D.SELF=12,D.STEPNAMES=r((function(t,e){return t[e[0]]=e[1],t}),{},[[D.ANCESTOR,"ancestor"],[D.ANCESTORORSELF,"ancestor-or-self"],[D.ATTRIBUTE,"attribute"],[D.CHILD,"child"],[D.DESCENDANT,"descendant"],[D.DESCENDANTORSELF,"descendant-or-self"],[D.FOLLOWING,"following"],[D.FOLLOWINGSIBLING,"following-sibling"],[D.NAMESPACE,"namespace"],[D.PARENT,"parent"],[D.PRECEDING,"preceding"],[D.PRECEDINGSIBLING,"preceding-sibling"],[D.SELF,"self"]]),U.prototype=new Object,U.prototype.constructor=U,U.superclass=Object.prototype,U.prototype.init=function(t,e){this.type=t,this.value=e},U.prototype.toString=function(){return"<unknown nodetest type>"},U.prototype.matches=function(t,e){console.warn("unknown node test type")},U.NAMETESTANY=0,U.NAMETESTPREFIXANY=1,U.NAMETESTQNAME=2,U.COMMENT=3,U.TEXT=4,U.PI=5,U.NODE=6,U.isNodeType=function(t){return function(e){return function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return!0;return!1}(t,e.nodeType)}},U.makeNodeTestType=function(t,e,r){var n=r||function(){};return n.prototype=new U(t),n.prototype.constructor=n,u(n.prototype,e),n},U.makeNodeTypeTest=function(t,e,r){return new(U.makeNodeTestType(t,{matches:U.isNodeType(e),toString:(n=r,function(){return n})}));var n},U.hasPrefix=function(t){return t.prefix||-1!==(t.nodeName||t.tagName).indexOf(":")},U.isElementOrAttribute=U.isNodeType([1,2]),U.nameSpaceMatches=function(t,e,r){var n=r.namespaceURI||"";if(!t)return!n||e.allowAnyNamespaceForNoPrefix&&!U.hasPrefix(r);var i=e.namespaceResolver.getNamespace(t,e.expressionContextNode);if(null==i)throw new Error("Cannot resolve QName "+t);return i===n},U.localNameMatches=function(t,e,r){var n=r.localName||r.nodeName;return e.caseInsensitive?t.toLowerCase()===n.toLowerCase():t===n},U.NameTestPrefixAny=U.makeNodeTestType(U.NAMETESTPREFIXANY,{matches:function(t,e){return U.isElementOrAttribute(t)&&U.nameSpaceMatches(this.prefix,e,t)},toString:function(){return this.prefix+":*"}},(function(t){this.prefix=t})),U.NameTestQName=U.makeNodeTestType(U.NAMETESTQNAME,{matches:function(t,e){return U.isNodeType([1,2,W.XPATH_NAMESPACE_NODE])(t)&&U.nameSpaceMatches(this.prefix,e,t)&&U.localNameMatches(this.localName,e,t)},toString:function(){return this.name}},(function(t){var e=t.split(":");this.name=t,this.prefix=e.length>1?e[0]:null,this.localName=e[e.length>1?1:0]})),U.PITest=U.makeNodeTestType(U.PI,{matches:function(t,e){return U.isNodeType([7])(t)&&(t.target||t.nodeName)===this.name},toString:function(){return s('processing-instruction("','")',this.name)}},(function(t){this.name=t})),U.nameTestAny=U.makeNodeTypeTest(U.NAMETESTANY,[1,2,W.XPATH_NAMESPACE_NODE],"*"),U.textTest=U.makeNodeTypeTest(U.TEXT,[3,4],"text()"),U.commentTest=U.makeNodeTypeTest(U.COMMENT,[8],"comment()"),U.nodeTest=U.makeNodeTypeTest(U.NODE,[1,2,3,4,7,8,9],"node()"),U.anyPiTest=U.makeNodeTypeTest(U.PI,[7],"processing-instruction()"),M.prototype=new p,M.prototype.constructor=M,M.superclass=p.prototype,M.prototype.init=function(t){this.variable=t},M.prototype.toString=function(){return"$"+this.variable},M.prototype.evaluate=function(t){var e=X.resolveQName(this.variable,t.namespaceResolver,t.contextNode,!1);if(null==e[0])throw new Error("Cannot resolve QName "+fn);var r=t.variableResolver.getVariable(e[1],e[0]);if(!r)throw Q.fromMessage("Undeclared variable: "+this.toString());return r},k.prototype=new p,k.prototype.constructor=k,k.superclass=p.prototype,k.prototype.init=function(t,e){this.functionName=t,this.arguments=e},k.prototype.toString=function(){for(var t=this.functionName+"(",e=0;e<this.arguments.length;e++)e>0&&(t+=", "),t+=this.arguments[e].toString();return t+")"},k.prototype.evaluate=function(t){var e=q.getFunctionFromContext(this.functionName,t);if(!e)throw new Error("Unknown function "+this.functionName);var r=[t].concat(this.arguments);return e.apply(t.functionResolver.thisArg,r)};var F=new Object;function j(t){arguments.length>0&&this.init(t)}function B(t){arguments.length>0&&this.init(t)}function H(t){arguments.length>0&&this.init(t)}function G(t){this.init(t)}function z(){this.init()}function W(t,e,r){this.isXPathNamespace=!0,this.ownerDocument=r.ownerDocument,this.nodeName="#namespace",this.prefix=t,this.localName=t,this.namespaceURI=e,this.nodeValue=e,this.ownerElement=r,this.nodeType=W.XPATH_NAMESPACE_NODE}function V(t,e,r){this.variableResolver=null!=t?t:new $,this.namespaceResolver=null!=e?e:new Y,this.functionResolver=null!=r?r:new q}function $(){}function q(t){this.thisArg=null!=t?t:K,this.functions=new Object,this.addStandardFunctions()}function Y(){}F.equals=function(t,e){return t.equals(e)},F.notequal=function(t,e){return t.notequal(e)},F.lessthan=function(t,e){return t.lessthan(e)},F.greaterthan=function(t,e){return t.greaterthan(e)},F.lessthanorequal=function(t,e){return t.lessthanorequal(e)},F.greaterthanorequal=function(t,e){return t.greaterthanorequal(e)},j.prototype=new p,j.prototype.constructor=j,j.superclass=p.prototype,j.prototype.init=function(t){this.str=String(t)},j.prototype.toString=function(){return this.str},j.prototype.evaluate=function(t){return this},j.prototype.string=function(){return this},j.prototype.number=function(){return new B(this.str)},j.prototype.bool=function(){return new H(this.str)},j.prototype.nodeset=function(){throw new Error("Cannot convert string to nodeset")},j.prototype.stringValue=function(){return this.str},j.prototype.numberValue=function(){return this.number().numberValue()},j.prototype.booleanValue=function(){return this.bool().booleanValue()},j.prototype.equals=function(t){return X.instance_of(t,H)?this.bool().equals(t):X.instance_of(t,B)?this.number().equals(t):X.instance_of(t,z)?t.compareWithString(this,F.equals):new H(this.str==t.str)},j.prototype.notequal=function(t){return X.instance_of(t,H)?this.bool().notequal(t):X.instance_of(t,B)?this.number().notequal(t):X.instance_of(t,z)?t.compareWithString(this,F.notequal):new H(this.str!=t.str)},j.prototype.lessthan=function(t){return this.number().lessthan(t)},j.prototype.greaterthan=function(t){return this.number().greaterthan(t)},j.prototype.lessthanorequal=function(t){return this.number().lessthanorequal(t)},j.prototype.greaterthanorequal=function(t){return this.number().greaterthanorequal(t)},B.prototype=new p,B.prototype.constructor=B,B.superclass=p.prototype,B.prototype.init=function(t){this.num="string"==typeof t?this.parse(t):Number(t)},B.prototype.numberFormat=/^\s*-?[0-9]*\.?[0-9]+\s*$/,B.prototype.parse=function(t){return this.numberFormat.test(t)?parseFloat(t):Number.NaN},B.prototype.toString=function(){var t=this.num.toString();return-1!==t.indexOf("e-")?function(t){for(var e=t.split("e-"),r=e[0].replace(".",""),n=Number(e[1]),i=0;i<n-1;i+=1)r="0"+r;return"0."+r}(t):-1!==t.indexOf("e")?function(t){for(var e=t.split("e"),r=e[0].replace(".",""),n=Number(e[1])+1-r.length,i=0;i<n;i+=1)r+="0";return r}(t):t},B.prototype.evaluate=function(t){return this},B.prototype.string=function(){return new j(this.toString())},B.prototype.number=function(){return this},B.prototype.bool=function(){return new H(this.num)},B.prototype.nodeset=function(){throw new Error("Cannot convert number to nodeset")},B.prototype.stringValue=function(){return this.string().stringValue()},B.prototype.numberValue=function(){return this.num},B.prototype.booleanValue=function(){return this.bool().booleanValue()},B.prototype.negate=function(){return new B(-this.num)},B.prototype.equals=function(t){return X.instance_of(t,H)?this.bool().equals(t):X.instance_of(t,j)?this.equals(t.number()):X.instance_of(t,z)?t.compareWithNumber(this,F.equals):new H(this.num==t.num)},B.prototype.notequal=function(t){return X.instance_of(t,H)?this.bool().notequal(t):X.instance_of(t,j)?this.notequal(t.number()):X.instance_of(t,z)?t.compareWithNumber(this,F.notequal):new H(this.num!=t.num)},B.prototype.lessthan=function(t){return X.instance_of(t,z)?t.compareWithNumber(this,F.greaterthan):X.instance_of(t,H)||X.instance_of(t,j)?this.lessthan(t.number()):new H(this.num<t.num)},B.prototype.greaterthan=function(t){return X.instance_of(t,z)?t.compareWithNumber(this,F.lessthan):X.instance_of(t,H)||X.instance_of(t,j)?this.greaterthan(t.number()):new H(this.num>t.num)},B.prototype.lessthanorequal=function(t){return X.instance_of(t,z)?t.compareWithNumber(this,F.greaterthanorequal):X.instance_of(t,H)||X.instance_of(t,j)?this.lessthanorequal(t.number()):new H(this.num<=t.num)},B.prototype.greaterthanorequal=function(t){return X.instance_of(t,z)?t.compareWithNumber(this,F.lessthanorequal):X.instance_of(t,H)||X.instance_of(t,j)?this.greaterthanorequal(t.number()):new H(this.num>=t.num)},B.prototype.plus=function(t){return new B(this.num+t.num)},B.prototype.minus=function(t){return new B(this.num-t.num)},B.prototype.multiply=function(t){return new B(this.num*t.num)},B.prototype.div=function(t){return new B(this.num/t.num)},B.prototype.mod=function(t){return new B(this.num%t.num)},H.prototype=new p,H.prototype.constructor=H,H.superclass=p.prototype,H.prototype.init=function(t){this.b=Boolean(t)},H.prototype.toString=function(){return this.b.toString()},H.prototype.evaluate=function(t){return this},H.prototype.string=function(){return new j(this.b)},H.prototype.number=function(){return new B(this.b)},H.prototype.bool=function(){return this},H.prototype.nodeset=function(){throw new Error("Cannot convert boolean to nodeset")},H.prototype.stringValue=function(){return this.string().stringValue()},H.prototype.numberValue=function(){return this.number().numberValue()},H.prototype.booleanValue=function(){return this.b},H.prototype.not=function(){return new H(!this.b)},H.prototype.equals=function(t){return X.instance_of(t,j)||X.instance_of(t,B)?this.equals(t.bool()):X.instance_of(t,z)?t.compareWithBoolean(this,F.equals):new H(this.b==t.b)},H.prototype.notequal=function(t){return X.instance_of(t,j)||X.instance_of(t,B)?this.notequal(t.bool()):X.instance_of(t,z)?t.compareWithBoolean(this,F.notequal):new H(this.b!=t.b)},H.prototype.lessthan=function(t){return this.number().lessthan(t)},H.prototype.greaterthan=function(t){return this.number().greaterthan(t)},H.prototype.lessthanorequal=function(t){return this.number().lessthanorequal(t)},H.prototype.greaterthanorequal=function(t){return this.number().greaterthanorequal(t)},H.true_=new H(!0),H.false_=new H(!1),G.prototype=new Object,G.prototype.constructor=G,G.superclass=Object.prototype,G.prototype.init=function(t){this.left=null,this.right=null,this.node=t,this.depth=1},G.prototype.balance=function(){var t=null==this.left?0:this.left.depth,e=null==this.right?0:this.right.depth;if(t>e+1)(null==this.left.left?0:this.left.left.depth)<(null==this.left.right?0:this.left.right.depth)&&this.left.rotateRR(),this.rotateLL();else if(t+1<e){var r=null==this.right.right?0:this.right.right.depth;(null==this.right.left?0:this.right.left.depth)>r&&this.right.rotateLL(),this.rotateRR()}},G.prototype.rotateLL=function(){var t=this.node,e=this.right;this.node=this.left.node,this.right=this.left,this.left=this.left.left,this.right.left=this.right.right,this.right.right=e,this.right.node=t,this.right.updateInNewLocation(),this.updateInNewLocation()},G.prototype.rotateRR=function(){var t=this.node,e=this.left;this.node=this.right.node,this.left=this.right,this.right=this.right.right,this.left.right=this.left.left,this.left.left=e,this.left.node=t,this.left.updateInNewLocation(),this.updateInNewLocation()},G.prototype.updateInNewLocation=function(){this.getDepthFromChildren()},G.prototype.getDepthFromChildren=function(){this.depth=null==this.node?0:1,null!=this.left&&(this.depth=this.left.depth+1),null!=this.right&&this.depth<=this.right.depth&&(this.depth=this.right.depth+1)},G.prototype.add=function(t){if(t===this.node)return!1;var e=function(t,e){if(t===e)return 0;if(t.compareDocumentPosition){var r=t.compareDocumentPosition(e);return 1&r||10&r?1:20&r?-1:0}for(var n=0,i=0,o=t;null!=o;o=o.parentNode||o.ownerElement)n++;for(var s=e;null!=s;s=s.parentNode||s.ownerElement)i++;if(n>i){for(;n>i;)t=t.parentNode||t.ownerElement,n--;if(t===e)return 1}else if(i>n){for(;i>n;)e=e.parentNode||e.ownerElement,i--;if(t===e)return-1}for(var a=t.parentNode||t.ownerElement,u=e.parentNode||e.ownerElement;a!==u;)e=u,a=(t=a).parentNode||t.ownerElement,u=e.parentNode||e.ownerElement;var l=X.isAttribute(t),c=X.isAttribute(e);if(l&&!c)return-1;if(!l&&c)return 1;if(a)for(var h=l?a.attributes:a.childNodes,p=h.length,d=0;d<p;d+=1){var f=h[d];if(f===t)return-1;if(f===e)return 1}throw new Error("Unexpected: could not determine node order")}(t,this.node),r=!1;return-1==e?null==this.left?(this.left=new G(t),r=!0):(r=this.left.add(t))&&this.balance():1==e&&(null==this.right?(this.right=new G(t),r=!0):(r=this.right.add(t))&&this.balance()),r&&this.getDepthFromChildren(),r},z.prototype=new p,z.prototype.constructor=z,z.superclass=p.prototype,z.prototype.init=function(){this.tree=null,this.nodes=[],this.size=0},z.prototype.toString=function(){var t=this.first();return null==t?"":this.stringForNode(t)},z.prototype.evaluate=function(t){return this},z.prototype.string=function(){return new j(this.toString())},z.prototype.stringValue=function(){return this.toString()},z.prototype.number=function(){return new B(this.string())},z.prototype.numberValue=function(){return Number(this.string())},z.prototype.bool=function(){return new H(this.booleanValue())},z.prototype.booleanValue=function(){return!!this.size},z.prototype.nodeset=function(){return this},z.prototype.stringForNode=function(t){return 9==t.nodeType||1==t.nodeType||11===t.nodeType?this.stringForContainerNode(t):2===t.nodeType?t.value||t.nodeValue:t.isNamespaceNode?t.namespace:t.nodeValue},z.prototype.stringForContainerNode=function(t){for(var e="",r=t.firstChild;null!=r;r=r.nextSibling){var n=r.nodeType;1!==n&&3!==n&&4!==n&&9!==n&&11!==n||(e+=this.stringForNode(r))}return e},z.prototype.buildTree=function(){if(!this.tree&&this.nodes.length){this.tree=new G(this.nodes[0]);for(var t=1;t<this.nodes.length;t+=1)this.tree.add(this.nodes[t])}return this.tree},z.prototype.first=function(){var t=this.buildTree();if(null==t)return null;for(;null!=t.left;)t=t.left;return t.node},z.prototype.add=function(t){for(var e=0;e<this.nodes.length;e+=1)if(t===this.nodes[e])return;this.tree=null,this.nodes.push(t),this.size+=1},z.prototype.addArray=function(t){var r=this;e((function(t){r.add(t)}),t)},z.prototype.toArray=function(){var t=[];return this.toArrayRec(this.buildTree(),t),t},z.prototype.toArrayRec=function(t,e){null!=t&&(this.toArrayRec(t.left,e),e.push(t.node),this.toArrayRec(t.right,e))},z.prototype.toUnsortedArray=function(){return this.nodes.slice()},z.prototype.compareWithString=function(t,e){for(var r=this.toUnsortedArray(),n=0;n<r.length;n++){var i=r[n],o=e(new j(this.stringForNode(i)),t);if(o.booleanValue())return o}return new H(!1)},z.prototype.compareWithNumber=function(t,e){for(var r=this.toUnsortedArray(),n=0;n<r.length;n++){var i=r[n],o=e(new B(this.stringForNode(i)),t);if(o.booleanValue())return o}return new H(!1)},z.prototype.compareWithBoolean=function(t,e){return e(this.bool(),t)},z.prototype.compareWithNodeSet=function(t,e){for(var r=this.toUnsortedArray(),n=function(t,r){return e(r,t)},i=0;i<r.length;i++){var o=new j(this.stringForNode(r[i])),s=t.compareWithString(o,n);if(s.booleanValue())return s}return new H(!1)},z.compareWith=function(t){var e=Array.prototype.slice,r=t.length,n=function(){var i=e.call(arguments);return i.length<r?function(t,r){return function(){return r.apply(this,t.concat(e.call(arguments)))}}(i,n):t.apply(this,e.apply(arguments,[0,r]))};return n}((function(t,e){return X.instance_of(e,j)?this.compareWithString(e,t):X.instance_of(e,B)?this.compareWithNumber(e,t):X.instance_of(e,H)?this.compareWithBoolean(e,t):this.compareWithNodeSet(e,t)})),z.prototype.equals=z.compareWith(F.equals),z.prototype.notequal=z.compareWith(F.notequal),z.prototype.lessthan=z.compareWith(F.lessthan),z.prototype.greaterthan=z.compareWith(F.greaterthan),z.prototype.lessthanorequal=z.compareWith(F.lessthanorequal),z.prototype.greaterthanorequal=z.compareWith(F.greaterthanorequal),z.prototype.union=function(t){var e=new z;return e.addArray(this.toUnsortedArray()),e.addArray(t.toUnsortedArray()),e},W.prototype=new Object,W.prototype.constructor=W,W.superclass=Object.prototype,W.prototype.toString=function(){return'{ "'+this.prefix+'", "'+this.namespaceURI+'" }'},V.prototype=new Object,V.prototype.constructor=V,V.superclass=Object.prototype,V.prototype.extend=function(t){return u(new V,this,t)},$.prototype=new Object,$.prototype.constructor=$,$.superclass=Object.prototype,$.prototype.getVariable=function(t,e){return null},q.prototype=new Object,q.prototype.constructor=q,q.superclass=Object.prototype,q.prototype.addStandardFunctions=function(){this.functions["{}last"]=K.last,this.functions["{}position"]=K.position,this.functions["{}count"]=K.count,this.functions["{}id"]=K.id,this.functions["{}local-name"]=K.localName,this.functions["{}namespace-uri"]=K.namespaceURI,this.functions["{}name"]=K.name,this.functions["{}string"]=K.string,this.functions["{}concat"]=K.concat,this.functions["{}starts-with"]=K.startsWith,this.functions["{}contains"]=K.contains,this.functions["{}substring-before"]=K.substringBefore,this.functions["{}substring-after"]=K.substringAfter,this.functions["{}substring"]=K.substring,this.functions["{}string-length"]=K.stringLength,this.functions["{}normalize-space"]=K.normalizeSpace,this.functions["{}translate"]=K.translate,this.functions["{}boolean"]=K.boolean_,this.functions["{}not"]=K.not,this.functions["{}true"]=K.true_,this.functions["{}false"]=K.false_,this.functions["{}lang"]=K.lang,this.functions["{}number"]=K.number,this.functions["{}sum"]=K.sum,this.functions["{}floor"]=K.floor,this.functions["{}ceiling"]=K.ceiling,this.functions["{}round"]=K.round},q.prototype.addFunction=function(t,e,r){this.functions["{"+t+"}"+e]=r},q.getFunctionFromContext=function(t,e){var r=X.resolveQName(t,e.namespaceResolver,e.contextNode,!1);if(null===r[0])throw new Error("Cannot resolve QName "+name);return e.functionResolver.getFunction(r[1],r[0])},q.prototype.getFunction=function(t,e){return this.functions["{"+e+"}"+t]},Y.prototype=new Object,Y.prototype.constructor=Y,Y.superclass=Object.prototype,Y.prototype.getNamespace=function(t,e){if("xml"==t)return c.XML_NAMESPACE_URI;if("xmlns"==t)return c.XMLNS_NAMESPACE_URI;for(9==e.nodeType?e=e.documentElement:2==e.nodeType?e=R.getOwnerElement(e):1!=e.nodeType&&(e=e.parentNode);null!=e&&1==e.nodeType;){for(var r=e.attributes,n=0;n<r.length;n++){var i=r.item(n),o=i.name||i.nodeName;if("xmlns"===o&&""===t||o==="xmlns:"+t)return String(i.value||i.nodeValue)}e=e.parentNode}return null};var K=new Object;K.last=function(t){if(1!=arguments.length)throw new Error("Function last expects ()");return new B(t.contextSize)},K.position=function(t){if(1!=arguments.length)throw new Error("Function position expects ()");return new B(t.contextPosition)},K.count=function(){var t,e=arguments[0];if(2!=arguments.length||!X.instance_of(t=arguments[1].evaluate(e),z))throw new Error("Function count expects (node-set)");return new B(t.size)},K.id=function(){var t,e=arguments[0];if(2!=arguments.length)throw new Error("Function id expects (object)");t=arguments[1].evaluate(e);for(var r=(t=X.instance_of(t,z)?t.toArray().join(" "):t.stringValue()).split(/[\x0d\x0a\x09\x20]+/),n=new z,i=9==e.contextNode.nodeType?e.contextNode:e.contextNode.ownerDocument,o=0;o<r.length;o++){var s;null!=(s=i.getElementById?i.getElementById(r[o]):X.getElementById(i,r[o]))&&n.add(s)}return n},K.localName=function(t,e){var r;if(1==arguments.length)r=t.contextNode;else{if(2!=arguments.length)throw new Error("Function local-name expects (node-set?)");r=e.evaluate(t).first()}return new j(null==r?"":r.localName||r.baseName||r.target||r.nodeName||"")},K.namespaceURI=function(){var t,e=arguments[0];if(1==arguments.length)t=e.contextNode;else{if(2!=arguments.length)throw new Error("Function namespace-uri expects (node-set?)");t=arguments[1].evaluate(e).first()}return new j(null==t?"":t.namespaceURI)},K.name=function(){var t,e=arguments[0];if(1==arguments.length)t=e.contextNode;else{if(2!=arguments.length)throw new Error("Function name expects (node-set?)");t=arguments[1].evaluate(e).first()}return null==t?new j(""):1==t.nodeType?new j(t.nodeName):2==t.nodeType?new j(t.name||t.nodeName):7===t.nodeType?new j(t.target||t.nodeName):null==t.localName?new j(""):new j(t.localName)},K.string=function(){var t=arguments[0];if(1==arguments.length)return new j(z.prototype.stringForNode(t.contextNode));if(2==arguments.length)return arguments[1].evaluate(t).string();throw new Error("Function string expects (object?)")},K.concat=function(t){if(arguments.length<3)throw new Error("Function concat expects (string, string[, string]*)");for(var e="",r=1;r<arguments.length;r++)e+=arguments[r].evaluate(t).stringValue();return new j(e)},K.startsWith=function(){var t=arguments[0];if(3!=arguments.length)throw new Error("Function startsWith expects (string, string)");var e=arguments[1].evaluate(t).stringValue(),r=arguments[2].evaluate(t).stringValue();return new H(e.substring(0,r.length)==r)},K.contains=function(){var t=arguments[0];if(3!=arguments.length)throw new Error("Function contains expects (string, string)");var e=arguments[1].evaluate(t).stringValue(),r=arguments[2].evaluate(t).stringValue();return new H(-1!==e.indexOf(r))},K.substringBefore=function(){var t=arguments[0];if(3!=arguments.length)throw new Error("Function substring-before expects (string, string)");var e=arguments[1].evaluate(t).stringValue(),r=arguments[2].evaluate(t).stringValue();return new j(e.substring(0,e.indexOf(r)))},K.substringAfter=function(){var t=arguments[0];if(3!=arguments.length)throw new Error("Function substring-after expects (string, string)");var e=arguments[1].evaluate(t).stringValue(),r=arguments[2].evaluate(t).stringValue();if(0==r.length)return new j(e);var n=e.indexOf(r);return new j(-1==n?"":e.substring(n+r.length))},K.substring=function(){var t=arguments[0];if(3!=arguments.length&&4!=arguments.length)throw new Error("Function substring expects (string, number, number?)");var e=arguments[1].evaluate(t).stringValue(),r=Math.round(arguments[2].evaluate(t).numberValue())-1,n=4==arguments.length?r+Math.round(arguments[3].evaluate(t).numberValue()):void 0;return new j(e.substring(r,n))},K.stringLength=function(){var t,e=arguments[0];if(1==arguments.length)t=z.prototype.stringForNode(e.contextNode);else{if(2!=arguments.length)throw new Error("Function string-length expects (string?)");t=arguments[1].evaluate(e).stringValue()}return new B(t.length)},K.normalizeSpace=function(){var t,e=arguments[0];if(1==arguments.length)t=z.prototype.stringForNode(e.contextNode);else{if(2!=arguments.length)throw new Error("Function normalize-space expects (string?)");t=arguments[1].evaluate(e).stringValue()}for(var r=0,n=t.length-1;X.isSpace(t.charCodeAt(n));)n--;for(var i="";r<=n&&X.isSpace(t.charCodeAt(r));)r++;for(;r<=n;)if(X.isSpace(t.charCodeAt(r)))for(i+=" ";r<=n&&X.isSpace(t.charCodeAt(r));)r++;else i+=t.charAt(r),r++;return new j(i)},K.translate=function(t,e,i,s){if(4!=arguments.length)throw new Error("Function translate expects (string, string, string)");var a=e.evaluate(t).stringValue(),u=i.evaluate(t).stringValue(),l=s.evaluate(t).stringValue(),c=r((function(t,e,r){return e in t||(t[e]=r>l.length?"":l[r]),t}),{},u);return new j(o("",n((function(t){return t in c?c[t]:t}),a)))},K.boolean_=function(){var t=arguments[0];if(2!=arguments.length)throw new Error("Function boolean expects (object)");return arguments[1].evaluate(t).bool()},K.not=function(t,e){if(2!=arguments.length)throw new Error("Function not expects (object)");return e.evaluate(t).bool().not()},K.true_=function(){if(1!=arguments.length)throw new Error("Function true expects ()");return H.true_},K.false_=function(){if(1!=arguments.length)throw new Error("Function false expects ()");return H.false_},K.lang=function(){var t,e=arguments[0];if(2!=arguments.length)throw new Error("Function lang expects (string)");for(var r=e.contextNode;null!=r&&9!=r.nodeType;r=r.parentNode){var n=r.getAttributeNS(c.XML_NAMESPACE_URI,"lang");if(null!=n){t=String(n);break}}if(null==t)return H.false_;var i=arguments[1].evaluate(e).stringValue();return new H(t.substring(0,i.length)==i&&(t.length==i.length||"-"==t.charAt(i.length)))},K.number=function(){var t=arguments[0];if(1!=arguments.length&&2!=arguments.length)throw new Error("Function number expects (object?)");return 1==arguments.length?new B(z.prototype.stringForNode(t.contextNode)):arguments[1].evaluate(t).number()},K.sum=function(){var t,e=arguments[0];if(2!=arguments.length||!X.instance_of(t=arguments[1].evaluate(e),z))throw new Error("Function sum expects (node-set)");t=t.toUnsortedArray();for(var r=0,n=0;n<t.length;n++)r+=new B(z.prototype.stringForNode(t[n])).numberValue();return new B(r)},K.floor=function(){var t=arguments[0];if(2!=arguments.length)throw new Error("Function floor expects (number)");return new B(Math.floor(arguments[1].evaluate(t).numberValue()))},K.ceiling=function(){var t=arguments[0];if(2!=arguments.length)throw new Error("Function ceiling expects (number)");return new B(Math.ceil(arguments[1].evaluate(t).numberValue()))},K.round=function(){var t=arguments[0];if(2!=arguments.length)throw new Error("Function round expects (number)");return new B(Math.round(arguments[1].evaluate(t).numberValue()))};var X=new Object;X.isAttribute=function(t){return t&&(2===t.nodeType||t.ownerElement)},X.splitQName=function(t){var e=t.indexOf(":");return-1==e?[null,t]:[t.substring(0,e),t.substring(e+1)]},X.resolveQName=function(t,e,r,n){var i=X.splitQName(t);return null!=i[0]?i[0]=e.getNamespace(i[0],r):n?(i[0]=e.getNamespace("",r),null==i[0]&&(i[0]="")):i[0]="",i},X.isSpace=function(t){return 9==t||13==t||10==t||32==t},X.isLetter=function(t){return t>=65&&t<=90||t>=97&&t<=122||t>=192&&t<=214||t>=216&&t<=246||t>=248&&t<=255||t>=256&&t<=305||t>=308&&t<=318||t>=321&&t<=328||t>=330&&t<=382||t>=384&&t<=451||t>=461&&t<=496||t>=500&&t<=501||t>=506&&t<=535||t>=592&&t<=680||t>=699&&t<=705||902==t||t>=904&&t<=906||908==t||t>=910&&t<=929||t>=931&&t<=974||t>=976&&t<=982||986==t||988==t||990==t||992==t||t>=994&&t<=1011||t>=1025&&t<=1036||t>=1038&&t<=1103||t>=1105&&t<=1116||t>=1118&&t<=1153||t>=1168&&t<=1220||t>=1223&&t<=1224||t>=1227&&t<=1228||t>=1232&&t<=1259||t>=1262&&t<=1269||t>=1272&&t<=1273||t>=1329&&t<=1366||1369==t||t>=1377&&t<=1414||t>=1488&&t<=1514||t>=1520&&t<=1522||t>=1569&&t<=1594||t>=1601&&t<=1610||t>=1649&&t<=1719||t>=1722&&t<=1726||t>=1728&&t<=1742||t>=1744&&t<=1747||1749==t||t>=1765&&t<=1766||t>=2309&&t<=2361||2365==t||t>=2392&&t<=2401||t>=2437&&t<=2444||t>=2447&&t<=2448||t>=2451&&t<=2472||t>=2474&&t<=2480||2482==t||t>=2486&&t<=2489||t>=2524&&t<=2525||t>=2527&&t<=2529||t>=2544&&t<=2545||t>=2565&&t<=2570||t>=2575&&t<=2576||t>=2579&&t<=2600||t>=2602&&t<=2608||t>=2610&&t<=2611||t>=2613&&t<=2614||t>=2616&&t<=2617||t>=2649&&t<=2652||2654==t||t>=2674&&t<=2676||t>=2693&&t<=2699||2701==t||t>=2703&&t<=2705||t>=2707&&t<=2728||t>=2730&&t<=2736||t>=2738&&t<=2739||t>=2741&&t<=2745||2749==t||2784==t||t>=2821&&t<=2828||t>=2831&&t<=2832||t>=2835&&t<=2856||t>=2858&&t<=2864||t>=2866&&t<=2867||t>=2870&&t<=2873||2877==t||t>=2908&&t<=2909||t>=2911&&t<=2913||t>=2949&&t<=2954||t>=2958&&t<=2960||t>=2962&&t<=2965||t>=2969&&t<=2970||2972==t||t>=2974&&t<=2975||t>=2979&&t<=2980||t>=2984&&t<=2986||t>=2990&&t<=2997||t>=2999&&t<=3001||t>=3077&&t<=3084||t>=3086&&t<=3088||t>=3090&&t<=3112||t>=3114&&t<=3123||t>=3125&&t<=3129||t>=3168&&t<=3169||t>=3205&&t<=3212||t>=3214&&t<=3216||t>=3218&&t<=3240||t>=3242&&t<=3251||t>=3253&&t<=3257||3294==t||t>=3296&&t<=3297||t>=3333&&t<=3340||t>=3342&&t<=3344||t>=3346&&t<=3368||t>=3370&&t<=3385||t>=3424&&t<=3425||t>=3585&&t<=3630||3632==t||t>=3634&&t<=3635||t>=3648&&t<=3653||t>=3713&&t<=3714||3716==t||t>=3719&&t<=3720||3722==t||3725==t||t>=3732&&t<=3735||t>=3737&&t<=3743||t>=3745&&t<=3747||3749==t||3751==t||t>=3754&&t<=3755||t>=3757&&t<=3758||3760==t||t>=3762&&t<=3763||3773==t||t>=3776&&t<=3780||t>=3904&&t<=3911||t>=3913&&t<=3945||t>=4256&&t<=4293||t>=4304&&t<=4342||4352==t||t>=4354&&t<=4355||t>=4357&&t<=4359||4361==t||t>=4363&&t<=4364||t>=4366&&t<=4370||4412==t||4414==t||4416==t||4428==t||4430==t||4432==t||t>=4436&&t<=4437||4441==t||t>=4447&&t<=4449||4451==t||4453==t||4455==t||4457==t||t>=4461&&t<=4462||t>=4466&&t<=4467||4469==t||4510==t||4520==t||4523==t||t>=4526&&t<=4527||t>=4535&&t<=4536||4538==t||t>=4540&&t<=4546||4587==t||4592==t||4601==t||t>=7680&&t<=7835||t>=7840&&t<=7929||t>=7936&&t<=7957||t>=7960&&t<=7965||t>=7968&&t<=8005||t>=8008&&t<=8013||t>=8016&&t<=8023||8025==t||8027==t||8029==t||t>=8031&&t<=8061||t>=8064&&t<=8116||t>=8118&&t<=8124||8126==t||t>=8130&&t<=8132||t>=8134&&t<=8140||t>=8144&&t<=8147||t>=8150&&t<=8155||t>=8160&&t<=8172||t>=8178&&t<=8180||t>=8182&&t<=8188||8486==t||t>=8490&&t<=8491||8494==t||t>=8576&&t<=8578||t>=12353&&t<=12436||t>=12449&&t<=12538||t>=12549&&t<=12588||t>=44032&&t<=55203||t>=19968&&t<=40869||12295==t||t>=12321&&t<=12329},X.isNCNameChar=function(t){return t>=48&&t<=57||t>=1632&&t<=1641||t>=1776&&t<=1785||t>=2406&&t<=2415||t>=2534&&t<=2543||t>=2662&&t<=2671||t>=2790&&t<=2799||t>=2918&&t<=2927||t>=3047&&t<=3055||t>=3174&&t<=3183||t>=3302&&t<=3311||t>=3430&&t<=3439||t>=3664&&t<=3673||t>=3792&&t<=3801||t>=3872&&t<=3881||46==t||45==t||95==t||X.isLetter(t)||t>=768&&t<=837||t>=864&&t<=865||t>=1155&&t<=1158||t>=1425&&t<=1441||t>=1443&&t<=1465||t>=1467&&t<=1469||1471==t||t>=1473&&t<=1474||1476==t||t>=1611&&t<=1618||1648==t||t>=1750&&t<=1756||t>=1757&&t<=1759||t>=1760&&t<=1764||t>=1767&&t<=1768||t>=1770&&t<=1773||t>=2305&&t<=2307||2364==t||t>=2366&&t<=2380||2381==t||t>=2385&&t<=2388||t>=2402&&t<=2403||t>=2433&&t<=2435||2492==t||2494==t||2495==t||t>=2496&&t<=2500||t>=2503&&t<=2504||t>=2507&&t<=2509||2519==t||t>=2530&&t<=2531||2562==t||2620==t||2622==t||2623==t||t>=2624&&t<=2626||t>=2631&&t<=2632||t>=2635&&t<=2637||t>=2672&&t<=2673||t>=2689&&t<=2691||2748==t||t>=2750&&t<=2757||t>=2759&&t<=2761||t>=2763&&t<=2765||t>=2817&&t<=2819||2876==t||t>=2878&&t<=2883||t>=2887&&t<=2888||t>=2891&&t<=2893||t>=2902&&t<=2903||t>=2946&&t<=2947||t>=3006&&t<=3010||t>=3014&&t<=3016||t>=3018&&t<=3021||3031==t||t>=3073&&t<=3075||t>=3134&&t<=3140||t>=3142&&t<=3144||t>=3146&&t<=3149||t>=3157&&t<=3158||t>=3202&&t<=3203||t>=3262&&t<=3268||t>=3270&&t<=3272||t>=3274&&t<=3277||t>=3285&&t<=3286||t>=3330&&t<=3331||t>=3390&&t<=3395||t>=3398&&t<=3400||t>=3402&&t<=3405||3415==t||3633==t||t>=3636&&t<=3642||t>=3655&&t<=3662||3761==t||t>=3764&&t<=3769||t>=3771&&t<=3772||t>=3784&&t<=3789||t>=3864&&t<=3865||3893==t||3895==t||3897==t||3902==t||3903==t||t>=3953&&t<=3972||t>=3974&&t<=3979||t>=3984&&t<=3989||3991==t||t>=3993&&t<=4013||t>=4017&&t<=4023||4025==t||t>=8400&&t<=8412||8417==t||t>=12330&&t<=12335||12441==t||12442==t||183==t||720==t||721==t||903==t||1600==t||3654==t||3782==t||12293==t||t>=12337&&t<=12341||t>=12445&&t<=12446||t>=12540&&t<=12542},X.coalesceText=function(t){for(var e=t.firstChild;null!=e;e=e.nextSibling)if(3==e.nodeType||4==e.nodeType){var r=e.nodeValue,n=e;for(e=e.nextSibling;null!=e&&(3==e.nodeType||4==e.nodeType);){r+=e.nodeValue;var i=e;e=e.nextSibling,i.parentNode.removeChild(i)}if(4==n.nodeType){var o=n.parentNode;if(null==n.nextSibling)o.removeChild(n),o.appendChild(o.ownerDocument.createTextNode(r));else{var s=n.nextSibling;o.removeChild(n),o.insertBefore(o.ownerDocument.createTextNode(r),s)}}else n.nodeValue=r;if(null==e)break}else 1==e.nodeType&&X.coalesceText(e)},X.instance_of=function(t,e){for(;null!=t;){if(t.constructor===e)return!0;if(t===Object)return!1;t=t.constructor.superclass}return!1},X.getElementById=function(t,e){if(1==t.nodeType&&(t.getAttribute("id")==e||t.getAttributeNS(null,"id")==e))return t;for(var r=t.firstChild;null!=r;r=r.nextSibling){var n=X.getElementById(r,e);if(null!=n)return n}return null};var Q=function(){function t(e,r,n){var i=Error.call(this,function(e,r){var n=r?": "+r.toString():"";switch(e){case t.INVALID_EXPRESSION_ERR:return"Invalid expression"+n;case t.TYPE_ERR:return"Type error"+n}return null}(e,r)||n);return i.code=e,i.exception=r,i}return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t.superclass=Error,t.prototype.toString=function(){return this.message},t.fromMessage=function(e,r){return new t(null,r,e)},t.INVALID_EXPRESSION_ERR=51,t.TYPE_ERR=52,t}();function Z(t,e,r){this.xpath=r.parse(t),this.context=new V,this.context.namespaceResolver=new J(e)}function J(t){this.xpathNSResolver=t}function tt(t){this.node=t,this.namespaceResolver=new Y}function et(t,e){switch(e==et.ANY_TYPE&&(t.constructor===j?e=et.STRING_TYPE:t.constructor===B?e=et.NUMBER_TYPE:t.constructor===H?e=et.BOOLEAN_TYPE:t.constructor===z&&(e=et.UNORDERED_NODE_ITERATOR_TYPE)),this.resultType=e,e){case et.NUMBER_TYPE:return void(this.numberValue=t.numberValue());case et.STRING_TYPE:return void(this.stringValue=t.stringValue());case et.BOOLEAN_TYPE:return void(this.booleanValue=t.booleanValue());case et.ANY_UNORDERED_NODE_TYPE:case et.FIRST_ORDERED_NODE_TYPE:if(t.constructor===z)return void(this.singleNodeValue=t.first());break;case et.UNORDERED_NODE_ITERATOR_TYPE:case et.ORDERED_NODE_ITERATOR_TYPE:if(t.constructor===z)return this.invalidIteratorState=!1,this.nodes=t.toArray(),void(this.iteratorIndex=0);break;case et.UNORDERED_NODE_SNAPSHOT_TYPE:case et.ORDERED_NODE_SNAPSHOT_TYPE:if(t.constructor===z)return this.nodes=t.toArray(),void(this.snapshotLength=this.nodes.length)}throw new Q(Q.TYPE_ERR)}function rt(t,e){t.createExpression=function(t,r){try{return new Z(t,r,e)}catch(t){throw new Q(Q.INVALID_EXPRESSION_ERR,t)}},t.createNSResolver=function(t){return new tt(t)},t.evaluate=function(r,n,i,o,s){if(o<0||o>9)throw{code:0,toString:function(){return"Request type not supported"}};return t.createExpression(r,i,e).evaluate(n,o,s)}}Z.prototype={},Z.prototype.constructor=Z,Z.superclass=Object.prototype,Z.getOwnerDocument=function(t){return 9===t.nodeType?t:t.ownerDocument},Z.detectHtmlDom=function(t){if(!t)return!1;var e=Z.getOwnerDocument(t);try{return e.implementation.hasFeature("HTML","2.0")}catch(r){return!0}},Z.prototype.evaluate=function(t,e,r){return this.context.expressionContextNode=t,this.context.caseInsensitive=Z.detectHtmlDom(t),new et(this.xpath.evaluate(this.context),e)},J.prototype={},J.prototype.constructor=J,J.superclass=Object.prototype,J.prototype.getNamespace=function(t,e){return null==this.xpathNSResolver?null:this.xpathNSResolver.lookupNamespaceURI(t)},tt.prototype={},tt.prototype.constructor=tt,tt.superclass=Object.prototype,tt.prototype.lookupNamespaceURI=function(t){return this.namespaceResolver.getNamespace(t,this.node)},et.prototype={},et.prototype.constructor=et,et.superclass=Object.prototype,et.prototype.iterateNext=function(){if(this.resultType!=et.UNORDERED_NODE_ITERATOR_TYPE&&this.resultType!=et.ORDERED_NODE_ITERATOR_TYPE)throw new Q(Q.TYPE_ERR);return this.nodes[this.iteratorIndex++]},et.prototype.snapshotItem=function(t){if(this.resultType!=et.UNORDERED_NODE_SNAPSHOT_TYPE&&this.resultType!=et.ORDERED_NODE_SNAPSHOT_TYPE)throw new Q(Q.TYPE_ERR);return this.nodes[t]},et.ANY_TYPE=0,et.NUMBER_TYPE=1,et.STRING_TYPE=2,et.BOOLEAN_TYPE=3,et.UNORDERED_NODE_ITERATOR_TYPE=4,et.ORDERED_NODE_ITERATOR_TYPE=5,et.UNORDERED_NODE_SNAPSHOT_TYPE=6,et.ORDERED_NODE_SNAPSHOT_TYPE=7,et.ANY_UNORDERED_NODE_TYPE=8,et.FIRST_ORDERED_NODE_TYPE=9;try{var nt=!0;try{document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("XPath",null)&&(nt=!1)}catch(it){}nt&&rt(document,new l)}catch(it){}rt(t,new l),new l,new Y,new q,new $,u(t,{XPath:c,XPathParser:l,XPathResult:et,Step:D,PathExpr:R,NodeTest:U,LocationPath:I,OrOperation:m,AndOperation:g,BarOperation:w,EqualsOperation:v,NotEqualOperation:T,LessThanOperation:_,GreaterThanOperation:E,LessThanOrEqualOperation:b,GreaterThanOrEqualOperation:S,PlusOperation:x,MinusOperation:C,MultiplyOperation:A,DivOperation:N,ModOperation:O,UnaryMinusOperation:f,FunctionCall:k,VariableReference:M,XPathContext:V,XNodeSet:z,XBoolean:H,XString:j,XNumber:B,NamespaceResolver:Y,FunctionResolver:q,VariableResolver:$,Utilities:X}),t.select=function(e,r,n){return t.selectWithResolver(e,r,null,n)}}(void 0===r?{}:r)},{}],238:[function(t,e,r){function n(t){this.options=t||{locator:{}}}function i(){this.cdata=!1}function o(t,e){e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber}function s(t){if(t)return"\n@"+(t.systemId||"")+"#[line:"+t.lineNumber+",col:"+t.columnNumber+"]"}function a(t,e,r){return"string"==typeof t?t.substr(e,r):t.length>=e+r||e?new java.lang.String(t,e,r)+"":t}function u(t,e){t.currentElement?t.currentElement.appendChild(e):t.doc.appendChild(e)}n.prototype.parseFromString=function(t,e){var r=this.options,n=new h,o=r.domBuilder||new i,a=r.errorHandler,u=r.locator,c=r.xmlns||{},p=/\/x?html?$/.test(e),d=p?l.entityMap:{lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return u&&o.setDocumentLocator(u),n.errorHandler=function(t,e,r){if(!t){if(e instanceof i)return e;t=e}var n={},o=t instanceof Function;function a(e){var i=t[e];!i&&o&&(i=2==t.length?function(r){t(e,r)}:t),n[e]=i&&function(t){i("[xmldom "+e+"]\t"+t+s(r))}||function(){}}return r=r||{},a("warning"),a("error"),a("fatalError"),n}(a,o,u),n.domBuilder=r.domBuilder||o,p&&(c[""]="http://www.w3.org/1999/xhtml"),c.xml=c.xml||"http://www.w3.org/XML/1998/namespace",t&&"string"==typeof t?n.parse(t,c,d):n.errorHandler.error("invalid doc source"),o.doc},i.prototype={startDocument:function(){this.doc=(new d).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(t,e,r,n){var i=this.doc,s=i.createElementNS(t,r||e),a=n.length;u(this,s),this.currentElement=s,this.locator&&o(this.locator,s);for(var l=0;l<a;l++){t=n.getURI(l);var c=n.getValue(l),h=(r=n.getQName(l),i.createAttributeNS(t,r));this.locator&&o(n.getLocator(l),h),h.value=h.nodeValue=c,s.setAttributeNode(h)}},endElement:function(t,e,r){var n=this.currentElement;n.tagName,this.currentElement=n.parentNode},startPrefixMapping:function(t,e){},endPrefixMapping:function(t){},processingInstruction:function(t,e){var r=this.doc.createProcessingInstruction(t,e);this.locator&&o(this.locator,r),u(this,r)},ignorableWhitespace:function(t,e,r){},characters:function(t,e,r){if(t=a.apply(this,arguments)){if(this.cdata)var n=this.doc.createCDATASection(t);else n=this.doc.createTextNode(t);this.currentElement?this.currentElement.appendChild(n):/^\s*$/.test(t)&&this.doc.appendChild(n),this.locator&&o(this.locator,n)}},skippedEntity:function(t){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(t){(this.locator=t)&&(t.lineNumber=0)},comment:function(t,e,r){t=a.apply(this,arguments);var n=this.doc.createComment(t);this.locator&&o(this.locator,n),u(this,n)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(t,e,r){var n=this.doc.implementation;if(n&&n.createDocumentType){var i=n.createDocumentType(t,e,r);this.locator&&o(this.locator,i),u(this,i)}},warning:function(t){console.warn("[xmldom warning]\t"+t,s(this.locator))},error:function(t){console.error("[xmldom error]\t"+t,s(this.locator))},fatalError:function(t){throw new p(t,this.locator)}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,(function(t){i.prototype[t]=function(){return null}}));var l=t(240),c=t(241),h=c.XMLReader,p=c.ParseError,d=t(239).DOMImplementation;t(239).XMLSerializer,r.DOMParser=n},{239:239,240:240,241:241}],424:[function(t,e,r){"use strict";const n=t(426),i=Symbol("max"),o=Symbol("length"),s=Symbol("lengthCalculator"),a=Symbol("allowStale"),u=Symbol("maxAge"),l=Symbol("dispose"),c=Symbol("noDisposeOnSet"),h=Symbol("lruList"),p=Symbol("cache"),d=Symbol("updateAgeOnGet"),f=()=>1,y=(t,e,r)=>{const n=t[p].get(e);if(n){const e=n.value;if(m(t,e)){if(v(t,n),!t[a])return}else r&&(t[d]&&(n.value.now=Date.now()),t[h].unshiftNode(n));return e.value}},m=(t,e)=>{if(!e||!e.maxAge&&!t[u])return!1;const r=Date.now()-e.now;return e.maxAge?r>e.maxAge:t[u]&&r>t[u]},g=t=>{if(t[o]>t[i])for(let e=t[h].tail;t[o]>t[i]&&null!==e;){const r=e.prev;v(t,e),e=r}},v=(t,e)=>{if(e){const r=e.value;t[l]&&t[l](r.key,r.value),t[o]-=r.length,t[p].delete(r.key),t[h].removeNode(e)}};class T{constructor(t,e,r,n,i){this.key=t,this.value=e,this.length=r,this.now=n,this.maxAge=i||0}}const _=(t,e,r,n)=>{let i=r.value;m(t,i)&&(v(t,r),t[a]||(i=void 0)),i&&e.call(n,i.value,i.key,t)};e.exports=class{constructor(t){if("number"==typeof t&&(t={max:t}),t||(t={}),t.max&&("number"!=typeof t.max||t.max<0))throw new TypeError("max must be a non-negative number");this[i]=t.max||1/0;const e=t.length||f;if(this[s]="function"!=typeof e?f:e,this[a]=t.stale||!1,t.maxAge&&"number"!=typeof t.maxAge)throw new TypeError("maxAge must be a number");this[u]=t.maxAge||0,this[l]=t.dispose,this[c]=t.noDisposeOnSet||!1,this[d]=t.updateAgeOnGet||!1,this.reset()}set max(t){if("number"!=typeof t||t<0)throw new TypeError("max must be a non-negative number");this[i]=t||1/0,g(this)}get max(){return this[i]}set allowStale(t){this[a]=!!t}get allowStale(){return this[a]}set maxAge(t){if("number"!=typeof t)throw new TypeError("maxAge must be a non-negative number");this[u]=t,g(this)}get maxAge(){return this[u]}set lengthCalculator(t){"function"!=typeof t&&(t=f),t!==this[s]&&(this[s]=t,this[o]=0,this[h].forEach(t=>{t.length=this[s](t.value,t.key),this[o]+=t.length})),g(this)}get lengthCalculator(){return this[s]}get length(){return this[o]}get itemCount(){return this[h].length}rforEach(t,e){e=e||this;for(let r=this[h].tail;null!==r;){const n=r.prev;_(this,t,r,e),r=n}}forEach(t,e){e=e||this;for(let r=this[h].head;null!==r;){const n=r.next;_(this,t,r,e),r=n}}keys(){return this[h].toArray().map(t=>t.key)}values(){return this[h].toArray().map(t=>t.value)}reset(){this[l]&&this[h]&&this[h].length&&this[h].forEach(t=>this[l](t.key,t.value)),this[p]=new Map,this[h]=new n,this[o]=0}dump(){return this[h].map(t=>!m(this,t)&&{k:t.key,v:t.value,e:t.now+(t.maxAge||0)}).toArray().filter(t=>t)}dumpLru(){return this[h]}set(t,e,r){if((r=r||this[u])&&"number"!=typeof r)throw new TypeError("maxAge must be a number");const n=r?Date.now():0,a=this[s](e,t);if(this[p].has(t)){if(a>this[i])return v(this,this[p].get(t)),!1;const s=this[p].get(t).value;return this[l]&&(this[c]||this[l](t,s.value)),s.now=n,s.maxAge=r,s.value=e,this[o]+=a-s.length,s.length=a,this.get(t),g(this),!0}const d=new T(t,e,a,n,r);return d.length>this[i]?(this[l]&&this[l](t,e),!1):(this[o]+=d.length,this[h].unshift(d),this[p].set(t,this[h].head),g(this),!0)}has(t){if(!this[p].has(t))return!1;const e=this[p].get(t).value;return!m(this,e)}get(t){return y(this,t,!0)}peek(t){return y(this,t,!1)}pop(){const t=this[h].tail;return t?(v(this,t),t.value):null}del(t){v(this,this[p].get(t))}load(t){this.reset();const e=Date.now();for(let r=t.length-1;r>=0;r--){const n=t[r],i=n.e||0;if(0===i)this.set(n.k,n.v);else{const t=i-e;t>0&&this.set(n.k,n.v,t)}}}prune(){this[p].forEach((t,e)=>y(this,e,!1))}}},{426:426}],348:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(242)),n(t(243)),n(t(244)),n(t(245)),n(t(246)),n(t(247)),n(t(248)),n(t(249)),n(t(250)),n(t(251)),n(t(253)),n(t(254)),n(t(255)),n(t(256)),n(t(257)),n(t(259)),n(t(258)),n(t(260)),n(t(261)),n(t(262)),n(t(263)),n(t(264)),n(t(265)),n(t(266)),n(t(267)),n(t(268)),n(t(269)),n(t(270)),n(t(271)),n(t(272)),n(t(273)),n(t(274)),n(t(275)),n(t(276)),n(t(277)),n(t(278))},{242:242,243:243,244:244,245:245,246:246,247:247,248:248,249:249,250:250,251:251,253:253,254:254,255:255,256:256,257:257,258:258,259:259,260:260,261:261,262:262,263:263,264:264,265:265,266:266,267:267,268:268,269:269,270:270,271:271,272:272,273:273,274:274,275:275,276:276,277:277,278:278}],168:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.ArrayExpressionConverter=class{convert(t){return t instanceof n.ArrayExpression?t:new n.ArrayExpression(t)}}},{186:186}],169:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.BoolExpressionConverter=class{convert(t){return t instanceof n.BoolExpression?t:new n.BoolExpression(t)}}},{186:186}],170:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.EnumExpressionConverter=class{constructor(t){this.enumValue=t,this.lowercaseIndex=Object.keys(t||{}).reduce((t,e)=>(t[e.toLowerCase()]=e,t),{})}convert(t){if(t instanceof n.EnumExpression)return t;if("string"==typeof t){let e=this.enumValue[t];return void 0===e&&(e=this.enumValue[this.lowercaseIndex[t]]),void 0!==e?new n.EnumExpression(e):new n.EnumExpression("="+t)}return new n.EnumExpression(t)}}},{186:186}],171:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179);r.ExpressionConverter=class{convert(t){return t instanceof n.Expression?t:n.Expression.parse(t)}}},{179:179}],173:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.IntExpressionConverter=class{convert(t){return t instanceof n.IntExpression?t:new n.IntExpression(t)}}},{186:186}],174:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.NumberExpressionConverter=class{convert(t){return t instanceof n.NumberExpression?t:new n.NumberExpression(t)}}},{186:186}],175:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.ObjectExpressionConverter=class{convert(t){return t instanceof n.ObjectExpression?t:new n.ObjectExpression(t)}}},{186:186}],176:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.StringExpressionConverter=class{convert(t){return t instanceof n.StringExpression?t:new n.StringExpression(t)}}},{186:186}],177:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(186);r.ValueExpressionConverter=class{convert(t){return t instanceof n.ValueExpression?t:new n.ValueExpression(t)}}},{186:186}],182:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179);r.ArrayExpression=class extends n.ExpressionProperty{constructor(t){super(t)}setValue(t){if(!(null==t||Array.isArray(t)||"string"==typeof t||t instanceof i.Expression))throw new Error("ArrayExpression accepts string, array or Expression as the value.");super.setValue(t)}}},{179:179,185:185}],185:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179);r.ExpressionProperty=class{constructor(t,e){this.defaultValue=e,this.setValue(t)}toString(){return this.expressionText?"="+this.expressionText.replace(/^=/,""):this.value?this.value.toString():""}toExpression(){if(this.expression)return this.expression;if(this.expressionText)return this.expression=n.Expression.parse(this.expressionText.replace(/^=/,"")),this.expression;switch(typeof this.value){case"string":case"number":case"boolean":this.expression=n.Expression.parse(this.value.toString());break;default:void 0===this.value?this.expression=n.Expression.parse("undefined"):null===this.value?this.expression=n.Expression.parse("null"):this.expression=n.Expression.parse(`json(${JSON.stringify(this.value)})`)}return this.expression}getValue(t){const{value:e,error:r}=this.tryGetValue(t);if(r)throw r;return e}tryGetValue(t){if(!this.expression&&this.expressionText)try{this.expression=n.Expression.parse(this.expressionText.replace(/^=/,""))}catch(e){return{value:void 0,error:e.message}}return this.expression?this.expression.tryEvaluate(t):{value:this.value,error:void 0}}setValue(t){this.value=this.defaultValue,this.expression=void 0,this.expressionText=void 0,"string"==typeof t?this.expressionText=t.replace(/^=/,""):t instanceof n.Expression?(this.expression=t,this.expressionText=t.toString()):void 0!==t&&(this.value=t)}}},{179:179}],183:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179);r.BoolExpression=class extends n.ExpressionProperty{constructor(t){super(t,!1)}setValue(t){if(null!=t&&"boolean"!=typeof t&&"string"!=typeof t&&!(t instanceof i.Expression))throw new Error("BoolExpression accepts string, boolean or Expression as the value.");super.setValue(t)}}},{179:179,185:185}],184:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185);r.EnumExpression=class extends n.ExpressionProperty{constructor(t){super(t)}setValue(t){super.setValue(void 0),"string"!=typeof t||t.startsWith("=")?super.setValue(t):this.value=t}}},{185:185}],187:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179),o=t(196);r.IntExpression=class extends n.ExpressionProperty{constructor(t){super(t,0)}tryGetValue(t){const e=super.tryGetValue(t);return o.FunctionUtils.isNumber(e.value)&&(e.value=Math.trunc(e.value)),e}setValue(t){if(!(null==t||o.FunctionUtils.isNumber(t)||"string"==typeof t||t instanceof i.Expression))throw new Error("IntExpression accepts string, number or Expression as the value.");super.setValue(t)}}},{179:179,185:185,196:196}],188:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179),o=t(196);r.NumberExpression=class extends n.ExpressionProperty{constructor(t){super(t,0)}setValue(t){if(!(null==t||o.FunctionUtils.isNumber(t)||"string"==typeof t||t instanceof i.Expression))throw new Error("NumberExpression accepts string, number or Expression as the value.");super.setValue(t)}}},{179:179,185:185,196:196}],189:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185);r.ObjectExpression=class extends n.ExpressionProperty{constructor(t){super(t)}}},{185:185}],190:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185),i=t(179);r.StringExpression=class extends n.ExpressionProperty{constructor(t){super(t)}setValue(t){if(super.setValue(void 0),t instanceof i.Expression)super.setValue(t);else{if("string"==typeof t)return t.startsWith("=")?void(this.expressionText=t):(t.startsWith("\\=")&&(t=t.substr(1)),void(this.expressionText=`=\`${t.replace("`","\\`")}\``));if(null!=t)throw new Error("StringExpression accepts string or Expression as the value.")}}}},{179:179,185:185}],191:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(185);r.ValueExpression=class extends n.ExpressionProperty{constructor(t){super(t)}setValue(t){if(super.setValue(void 0),"string"==typeof t)return t.startsWith("=")?void(this.expressionText=t):(t.startsWith("\\=")&&(t=t.substr(1)),void(this.expressionText=`=\`${t.replace("`","\\`")}\``));super.setValue(t)}}},{185:185}],451:[function(t,e,r){(function(e){(function(){var n=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r};if(e.env.NODE_DEBUG){var i=e.env.NODE_DEBUG;i=i.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),new RegExp("^"+i+"$","i")}function o(t,e){var n={seen:[],stylize:a};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),p(e)?n.showHidden=e:e&&r._extend(n,e),m(n.showHidden)&&(n.showHidden=!1),m(n.depth)&&(n.depth=2),m(n.colors)&&(n.colors=!1),m(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=s),u(n,t,n.depth)}function s(t,e){var r=o.styles[e];return r?"\x1b["+o.colors[r][0]+"m"+t+"\x1b["+o.colors[r][1]+"m":t}function a(t,e){return t}function u(t,e,n){if(t.customInspect&&e&&E(e.inspect)&&e.inspect!==r.inspect&&(!e.constructor||e.constructor.prototype!==e)){var i=e.inspect(n,t);return y(i)||(i=u(t,i,n)),i}var o=function(t,e){if(m(e))return t.stylize("undefined","undefined");if(y(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return f(e)?t.stylize(""+e,"number"):p(e)?t.stylize(""+e,"boolean"):d(e)?t.stylize("null","null"):void 0}(t,e);if(o)return o;var s=Object.keys(e),a=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(e)),_(e)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return l(e);if(0===s.length){if(E(e)){var v=e.name?": "+e.name:"";return t.stylize("[Function"+v+"]","special")}if(g(e))return t.stylize(RegExp.prototype.toString.call(e),"regexp");if(T(e))return t.stylize(Date.prototype.toString.call(e),"date");if(_(e))return l(e)}var b,x="",C=!1,A=["{","}"];return h(e)&&(C=!0,A=["[","]"]),E(e)&&(x=" [Function"+(e.name?": "+e.name:"")+"]"),g(e)&&(x=" "+RegExp.prototype.toString.call(e)),T(e)&&(x=" "+Date.prototype.toUTCString.call(e)),_(e)&&(x=" "+l(e)),0!==s.length||C&&0!=e.length?n<0?g(e)?t.stylize(RegExp.prototype.toString.call(e),"regexp"):t.stylize("[Object]","special"):(t.seen.push(e),b=C?function(t,e,r,n,i){for(var o=[],s=0,a=e.length;s<a;++s)S(e,String(s))?o.push(c(t,e,r,n,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(c(t,e,r,n,i,!0))})),o}(t,e,n,a,s):s.map((function(r){return c(t,e,n,a,r,C)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(b,x,A)):A[0]+x+A[1]}function l(t){return"["+Error.prototype.toString.call(t)+"]"}function c(t,e,r,n,i,o){var s,a,l;if((l=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?a=l.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):l.set&&(a=t.stylize("[Setter]","special")),S(n,i)||(s="["+i+"]"),a||(t.seen.indexOf(l.value)<0?(a=d(r)?u(t,l.value,null):u(t,l.value,r-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+a.split("\n").map((function(t){return"   "+t})).join("\n")):a=t.stylize("[Circular]","special")),m(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function h(t){return Array.isArray(t)}function p(t){return"boolean"==typeof t}function d(t){return null===t}function f(t){return"number"==typeof t}function y(t){return"string"==typeof t}function m(t){return void 0===t}function g(t){return v(t)&&"[object RegExp]"===b(t)}function v(t){return"object"==typeof t&&null!==t}function T(t){return v(t)&&"[object Date]"===b(t)}function _(t){return v(t)&&("[object Error]"===b(t)||t instanceof Error)}function E(t){return"function"==typeof t}function b(t){return Object.prototype.toString.call(t)}r.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},r.types=t(450),r.types.isRegExp=g,r.types.isDate=T,r.types.isNativeError=_,t(449);function S(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t(417),r._extend=function(t,e){if(!e||!v(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var x="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;r.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(x&&t[x]){var e;if("function"!=typeof(e=t[x]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,x,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,i)}catch(s){r(s)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),x&&Object.defineProperty(e,x,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,n(t))},r.promisify.custom=x}).call(this)}).call(this,t(428))},{417:417,428:428,449:449,450:450}],423:[function(t,e,r){(function(t){(function(){var n="[object Arguments]",i="[object Map]",o="[object Object]",s="[object Set]",a=/^\[object .+?Constructor\]$/,u=/^(?:0|[1-9]\d*)$/,l={};l["[object Float32Array]"]=l["[object Float64Array]"]=l["[object Int8Array]"]=l["[object Int16Array]"]=l["[object Int32Array]"]=l["[object Uint8Array]"]=l["[object Uint8ClampedArray]"]=l["[object Uint16Array]"]=l["[object Uint32Array]"]=!0,l[n]=l["[object Array]"]=l["[object ArrayBuffer]"]=l["[object Boolean]"]=l["[object DataView]"]=l["[object Date]"]=l["[object Error]"]=l["[object Function]"]=l[i]=l["[object Number]"]=l[o]=l["[object RegExp]"]=l[s]=l["[object String]"]=l["[object WeakMap]"]=!1;var c="object"==typeof t&&t&&t.Object===Object&&t,h="object"==typeof self&&self&&self.Object===Object&&self,p=c||h||Function("return this")(),d="object"==typeof r&&r&&!r.nodeType&&r,f=d&&"object"==typeof e&&e&&!e.nodeType&&e,y=f&&f.exports===d,m=y&&c.process,g=function(){try{return m&&m.binding&&m.binding("util")}catch(t){}}(),v=g&&g.isTypedArray;function T(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}function _(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}function E(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}var b,S,x,C=Array.prototype,A=Function.prototype,N=Object.prototype,O=p["__core-js_shared__"],w=A.toString,R=N.hasOwnProperty,L=(b=/[^.]+$/.exec(O&&O.keys&&O.keys.IE_PROTO||""))?"Symbol(src)_1."+b:"",P=N.toString,I=RegExp("^"+w.call(R).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),D=y?p.Buffer:void 0,U=p.Symbol,M=p.Uint8Array,k=N.propertyIsEnumerable,F=C.splice,j=U?U.toStringTag:void 0,B=Object.getOwnPropertySymbols,H=D?D.isBuffer:void 0,G=(S=Object.keys,x=Object,function(t){return S(x(t))}),z=ft(p,"DataView"),W=ft(p,"Map"),V=ft(p,"Promise"),$=ft(p,"Set"),q=ft(p,"WeakMap"),Y=ft(Object,"create"),K=vt(z),X=vt(W),Q=vt(V),Z=vt($),J=vt(q),tt=U?U.prototype:void 0,et=tt?tt.valueOf:void 0;function rt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function nt(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function it(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function ot(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new it;++e<r;)this.add(t[e])}function st(t){var e=this.__data__=new nt(t);this.size=e.size}function at(t,e){for(var r=t.length;r--;)if(Tt(t[r][0],e))return r;return-1}function ut(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":j&&j in Object(t)?function(t){var e=R.call(t,j),r=t[j];try{t[j]=void 0;var n=!0}catch(o){}var i=P.call(t);return n&&(e?t[j]=r:delete t[j]),i}(t):function(t){return P.call(t)}(t)}function lt(t){return At(t)&&ut(t)==n}function ct(t,e,r,a,u){return t===e||(null==t||null==e||!At(t)&&!At(e)?t!=t&&e!=e:function(t,e,r,a,u,l){var c=Et(t),h=Et(e),p=c?"[object Array]":mt(t),d=h?"[object Array]":mt(e),f=(p=p==n?o:p)==o,y=(d=d==n?o:d)==o,m=p==d;if(m&&bt(t)){if(!bt(e))return!1;c=!0,f=!1}if(m&&!f)return l||(l=new st),c||Nt(t)?ht(t,e,r,a,u,l):function(t,e,r,n,o,a,u){switch(r){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!a(new M(t),new M(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return Tt(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case i:var l=_;case s:var c=1&n;if(l||(l=E),t.size!=e.size&&!c)return!1;var h=u.get(t);if(h)return h==e;n|=2,u.set(t,e);var p=ht(l(t),l(e),n,o,a,u);return u.delete(t),p;case"[object Symbol]":if(et)return et.call(t)==et.call(e)}return!1}(t,e,p,r,a,u,l);if(!(1&r)){var g=f&&R.call(t,"__wrapped__"),v=y&&R.call(e,"__wrapped__");if(g||v){var T=g?t.value():t,b=v?e.value():e;return l||(l=new st),u(T,b,r,a,l)}}return!!m&&(l||(l=new st),function(t,e,r,n,i,o){var s=1&r,a=pt(t),u=a.length;if(u!=pt(e).length&&!s)return!1;for(var l=u;l--;){var c=a[l];if(!(s?c in e:R.call(e,c)))return!1}var h=o.get(t);if(h&&o.get(e))return h==e;var p=!0;o.set(t,e),o.set(e,t);for(var d=s;++l<u;){var f=t[c=a[l]],y=e[c];if(n)var m=s?n(y,f,c,e,t,o):n(f,y,c,t,e,o);if(!(void 0===m?f===y||i(f,y,r,n,o):m)){p=!1;break}d||(d="constructor"==c)}if(p&&!d){var g=t.constructor,v=e.constructor;g!=v&&"constructor"in t&&"constructor"in e&&!("function"==typeof g&&g instanceof g&&"function"==typeof v&&v instanceof v)&&(p=!1)}return o.delete(t),o.delete(e),p}(t,e,r,a,u,l))}(t,e,r,a,ct,u))}function ht(t,e,r,n,i,o){var s=1&r,a=t.length,u=e.length;if(a!=u&&!(s&&u>a))return!1;var l=o.get(t);if(l&&o.get(e))return l==e;var c=-1,h=!0,p=2&r?new ot:void 0;for(o.set(t,e),o.set(e,t);++c<a;){var d=t[c],f=e[c];if(n)var y=s?n(f,d,c,e,t,o):n(d,f,c,t,e,o);if(void 0!==y){if(y)continue;h=!1;break}if(p){if(!T(e,(function(t,e){if(s=e,!p.has(s)&&(d===t||i(d,t,r,n,o)))return p.push(e);var s}))){h=!1;break}}else if(d!==f&&!i(d,f,r,n,o)){h=!1;break}}return o.delete(t),o.delete(e),h}function pt(t){return function(t,e,r){var n=e(t);return Et(t)?n:function(t,e){for(var r=-1,n=e.length,i=t.length;++r<n;)t[i+r]=e[r];return t}(n,r(t))}(t,Ot,yt)}function dt(t,e){var r,n,i=t.__data__;return("string"==(n=typeof(r=e))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function ft(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return function(t){return!(!Ct(t)||(e=t,L&&L in e))&&(St(t)?I:a).test(vt(t));var e}(r)?r:void 0}rt.prototype.clear=function(){this.__data__=Y?Y(null):{},this.size=0},rt.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},rt.prototype.get=function(t){var e=this.__data__;if(Y){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return R.call(e,t)?e[t]:void 0},rt.prototype.has=function(t){var e=this.__data__;return Y?void 0!==e[t]:R.call(e,t)},rt.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=Y&&void 0===e?"__lodash_hash_undefined__":e,this},nt.prototype.clear=function(){this.__data__=[],this.size=0},nt.prototype.delete=function(t){var e=this.__data__,r=at(e,t);return!(r<0||(r==e.length-1?e.pop():F.call(e,r,1),--this.size,0))},nt.prototype.get=function(t){var e=this.__data__,r=at(e,t);return r<0?void 0:e[r][1]},nt.prototype.has=function(t){return at(this.__data__,t)>-1},nt.prototype.set=function(t,e){var r=this.__data__,n=at(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this},it.prototype.clear=function(){this.size=0,this.__data__={hash:new rt,map:new(W||nt),string:new rt}},it.prototype.delete=function(t){var e=dt(this,t).delete(t);return this.size-=e?1:0,e},it.prototype.get=function(t){return dt(this,t).get(t)},it.prototype.has=function(t){return dt(this,t).has(t)},it.prototype.set=function(t,e){var r=dt(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this},ot.prototype.add=ot.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},ot.prototype.has=function(t){return this.__data__.has(t)},st.prototype.clear=function(){this.__data__=new nt,this.size=0},st.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},st.prototype.get=function(t){return this.__data__.get(t)},st.prototype.has=function(t){return this.__data__.has(t)},st.prototype.set=function(t,e){var r=this.__data__;if(r instanceof nt){var n=r.__data__;if(!W||n.length<199)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new it(n)}return r.set(t,e),this.size=r.size,this};var yt=B?function(t){return null==t?[]:(t=Object(t),function(e,r){for(var n=-1,i=null==e?0:e.length,o=0,s=[];++n<i;){var a=e[n];u=a,k.call(t,u)&&(s[o++]=a)}var u;return s}(B(t)))}:function(){return[]},mt=ut;function gt(t,e){return!!(e=null==e?9007199254740991:e)&&("number"==typeof t||u.test(t))&&t>-1&&t%1==0&&t<e}function vt(t){if(null!=t){try{return w.call(t)}catch(e){}try{return t+""}catch(e){}}return""}function Tt(t,e){return t===e||t!=t&&e!=e}(z&&"[object DataView]"!=mt(new z(new ArrayBuffer(1)))||W&&mt(new W)!=i||V&&"[object Promise]"!=mt(V.resolve())||$&&mt(new $)!=s||q&&"[object WeakMap]"!=mt(new q))&&(mt=function(t){var e=ut(t),r=e==o?t.constructor:void 0,n=r?vt(r):"";if(n)switch(n){case K:return"[object DataView]";case X:return i;case Q:return"[object Promise]";case Z:return s;case J:return"[object WeakMap]"}return e});var _t=lt(function(){return arguments}())?lt:function(t){return At(t)&&R.call(t,"callee")&&!k.call(t,"callee")},Et=Array.isArray,bt=H||function(){return!1};function St(t){if(!Ct(t))return!1;var e=ut(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}function xt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Ct(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function At(t){return null!=t&&"object"==typeof t}var Nt=v?function(t){return function(e){return t(e)}}(v):function(t){return At(t)&&xt(t.length)&&!!l[ut(t)]};function Ot(t){return null!=(e=t)&&xt(e.length)&&!St(e)?function(t,e){var r=Et(t),n=!r&&_t(t),i=!r&&!n&&bt(t),o=!r&&!n&&!i&&Nt(t),s=r||n||i||o,a=s?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],u=a.length;for(var l in t)!e&&!R.call(t,l)||s&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||gt(l,u))||a.push(l);return a}(t):function(t){if(r=(e=t)&&e.constructor,e!==("function"==typeof r&&r.prototype||N))return G(t);var e,r,n=[];for(var i in Object(t))R.call(t,i)&&"constructor"!=i&&n.push(i);return n}(t);var e}e.exports=function(t,e){return ct(t,e)}}).call(this)}).call(this,"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],197:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(283),o=t(260),s=t(304),a=t(278),u=n(t(365));class l extends o.Lexer{constructor(t){super(t),this._interp=new s.LexerATNSimulator(l._ATN,this)}get vocabulary(){return l.VOCABULARY}get grammarFileName(){return"CommonRegex.g4"}get ruleNames(){return l.ruleNames}get serializedATN(){return l._serializedATN}get channelNames(){return l.channelNames}get modeNames(){return l.modeNames}static get _ATN(){return l.__ATN||(l.__ATN=(new i.ATNDeserializer).deserialize(u.toCharArray(l._serializedATN))),l.__ATN}}l.Quoted=1,l.BlockQuoted=2,l.BellChar=3,l.ControlChar=4,l.EscapeChar=5,l.FormFeed=6,l.NewLine=7,l.CarriageReturn=8,l.Tab=9,l.Backslash=10,l.HexChar=11,l.Dot=12,l.DecimalDigit=13,l.NotDecimalDigit=14,l.CharWithProperty=15,l.CharWithoutProperty=16,l.WhiteSpace=17,l.NotWhiteSpace=18,l.WordChar=19,l.NotWordChar=20,l.CharacterClassStart=21,l.CharacterClassEnd=22,l.Caret=23,l.Hyphen=24,l.QuestionMark=25,l.Plus=26,l.Star=27,l.OpenBrace=28,l.CloseBrace=29,l.Comma=30,l.EndOfSubject=31,l.Pipe=32,l.OpenParen=33,l.CloseParen=34,l.LessThan=35,l.GreaterThan=36,l.SingleQuote=37,l.Underscore=38,l.Colon=39,l.Hash=40,l.Equals=41,l.Exclamation=42,l.Ampersand=43,l.ALC=44,l.BLC=45,l.CLC=46,l.DLC=47,l.ELC=48,l.FLC=49,l.GLC=50,l.HLC=51,l.ILC=52,l.JLC=53,l.KLC=54,l.LLC=55,l.MLC=56,l.NLC=57,l.OLC=58,l.PLC=59,l.QLC=60,l.RLC=61,l.SLC=62,l.TLC=63,l.ULC=64,l.VLC=65,l.WLC=66,l.XLC=67,l.YLC=68,l.ZLC=69,l.AUC=70,l.BUC=71,l.CUC=72,l.DUC=73,l.EUC=74,l.FUC=75,l.GUC=76,l.HUC=77,l.IUC=78,l.JUC=79,l.KUC=80,l.LUC=81,l.MUC=82,l.NUC=83,l.OUC=84,l.PUC=85,l.QUC=86,l.RUC=87,l.SUC=88,l.TUC=89,l.UUC=90,l.VUC=91,l.WUC=92,l.XUC=93,l.YUC=94,l.ZUC=95,l.D1=96,l.D2=97,l.D3=98,l.D4=99,l.D5=100,l.D6=101,l.D7=102,l.D8=103,l.D9=104,l.D0=105,l.OtherChar=106,l.channelNames=["DEFAULT_TOKEN_CHANNEL","HIDDEN"],l.modeNames=["DEFAULT_MODE"],l.ruleNames=["Quoted","BlockQuoted","BellChar","ControlChar","EscapeChar","FormFeed","NewLine","CarriageReturn","Tab","Backslash","HexChar","Dot","DecimalDigit","NotDecimalDigit","CharWithProperty","CharWithoutProperty","WhiteSpace","NotWhiteSpace","WordChar","NotWordChar","CharacterClassStart","CharacterClassEnd","Caret","Hyphen","QuestionMark","Plus","Star","OpenBrace","CloseBrace","Comma","EndOfSubject","Pipe","OpenParen","CloseParen","LessThan","GreaterThan","SingleQuote","Underscore","Colon","Hash","Equals","Exclamation","Ampersand","ALC","BLC","CLC","DLC","ELC","FLC","GLC","HLC","ILC","JLC","KLC","LLC","MLC","NLC","OLC","PLC","QLC","RLC","SLC","TLC","ULC","VLC","WLC","XLC","YLC","ZLC","AUC","BUC","CUC","DUC","EUC","FUC","GUC","HUC","IUC","JUC","KUC","LUC","MUC","NUC","OUC","PUC","QUC","RUC","SUC","TUC","UUC","VUC","WUC","XUC","YUC","ZUC","D1","D2","D3","D4","D5","D6","D7","D8","D9","D0","OtherChar","UnderscoreAlphaNumerics","AlphaNumerics","AlphaNumeric","NonAlphaNumeric","HexDigit","ASCII"],l._LITERAL_NAMES=[void 0,void 0,void 0,"'\\'","'\\'","'\\'","'\\'","'\\'","'\\'","'\\'","'\\'",void 0,"'.'","'\\'","'\\'",void 0,void 0,"'\\'","'\\'","'\\'","'\\'","'['","']'","'^'","'-'","'?'","'+'","'*'","'{'","'}'","','","'$'","'|'","'('","')'","'<'","'>'","'''","'_'","':'","'#'","'='","'!'","'&'","'a'","'b'","'c'","'d'","'e'","'f'","'g'","'h'","'i'","'j'","'k'","'l'","'m'","'n'","'o'","'p'","'q'","'r'","'s'","'t'","'u'","'v'","'w'","'x'","'y'","'z'","'A'","'B'","'C'","'D'","'E'","'F'","'G'","'H'","'I'","'J'","'K'","'L'","'M'","'N'","'O'","'P'","'Q'","'R'","'S'","'T'","'U'","'V'","'W'","'X'","'Y'","'Z'","'1'","'2'","'3'","'4'","'5'","'6'","'7'","'8'","'9'","'0'"],l._SYMBOLIC_NAMES=[void 0,"Quoted","BlockQuoted","BellChar","ControlChar","EscapeChar","FormFeed","NewLine","CarriageReturn","Tab","Backslash","HexChar","Dot","DecimalDigit","NotDecimalDigit","CharWithProperty","CharWithoutProperty","WhiteSpace","NotWhiteSpace","WordChar","NotWordChar","CharacterClassStart","CharacterClassEnd","Caret","Hyphen","QuestionMark","Plus","Star","OpenBrace","CloseBrace","Comma","EndOfSubject","Pipe","OpenParen","CloseParen","LessThan","GreaterThan","SingleQuote","Underscore","Colon","Hash","Equals","Exclamation","Ampersand","ALC","BLC","CLC","DLC","ELC","FLC","GLC","HLC","ILC","JLC","KLC","LLC","MLC","NLC","OLC","PLC","QLC","RLC","SLC","TLC","ULC","VLC","WLC","XLC","YLC","ZLC","AUC","BUC","CUC","DUC","EUC","FUC","GUC","HUC","IUC","JUC","KUC","LUC","MUC","NUC","OUC","PUC","QUC","RUC","SUC","TUC","UUC","VUC","WUC","XUC","YUC","ZUC","D1","D2","D3","D4","D5","D6","D7","D8","D9","D0","OtherChar"],l.VOCABULARY=new a.VocabularyImpl(l._LITERAL_NAMES,l._SYMBOLIC_NAMES,[]),l._serializedATN="\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x02l\u01fc\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04\x0e\t\x0e\x04\x0f\t\x0f\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1a\t\x1a\x04\x1b\t\x1b\x04\x1c\t\x1c\x04\x1d\t\x1d\x04\x1e\t\x1e\x04\x1f\t\x1f\x04 \t \x04!\t!\x04\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03\xeb\n\x03\f\x03\x0e\x03\xee\v\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x06\f\u0114\n\f\r\f\x0e\f\u0115\x03\f\x03\f\x05\f\u011a\n\f\x03\r\x03\r\x03\x0e\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03'\x03'\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x03+\x03,\x03,\x03-\x03-\x03.\x03.\x03/\x03/\x030\x030\x031\x031\x032\x032\x033\x033\x034\x034\x035\x035\x036\x036\x037\x037\x038\x038\x039\x039\x03:\x03:\x03;\x03;\x03<\x03<\x03=\x03=\x03>\x03>\x03?\x03?\x03@\x03@\x03A\x03A\x03B\x03B\x03C\x03C\x03D\x03D\x03E\x03E\x03F\x03F\x03G\x03G\x03H\x03H\x03I\x03I\x03J\x03J\x03K\x03K\x03L\x03L\x03M\x03M\x03N\x03N\x03O\x03O\x03P\x03P\x03Q\x03Q\x03R\x03R\x03S\x03S\x03T\x03T\x03U\x03U\x03V\x03V\x03W\x03W\x03X\x03X\x03Y\x03Y\x03Z\x03Z\x03[\x03[\x03\\\x03\\\x03]\x03]\x03^\x03^\x03_\x03_\x03`\x03`\x03a\x03a\x03b\x03b\x03c\x03c\x03d\x03d\x03e\x03e\x03f\x03f\x03g\x03g\x03h\x03h\x03i\x03i\x03j\x03j\x03k\x03k\x03l\x03l\x06l\u01ec\nl\rl\x0el\u01ed\x03m\x06m\u01f1\nm\rm\x0em\u01f2\x03n\x03n\x03o\x03o\x03p\x03p\x03q\x03q\x03\xec\x02\x02r\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0f\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0e\x1b\x02\x0f\x1d\x02\x10\x1f\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1a3\x02\x1b5\x02\x1c7\x02\x1d9\x02\x1e;\x02\x1f=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-Y\x02.[\x02/]\x020_\x021a\x022c\x023e\x024g\x025i\x026k\x027m\x028o\x029q\x02:s\x02;u\x02<w\x02=y\x02>{\x02?}\x02@\x7f\x02A\x81\x02B\x83\x02C\x85\x02D\x87\x02E\x89\x02F\x8b\x02G\x8d\x02H\x8f\x02I\x91\x02J\x93\x02K\x95\x02L\x97\x02M\x99\x02N\x9b\x02O\x9d\x02P\x9f\x02Q\xa1\x02R\xa3\x02S\xa5\x02T\xa7\x02U\xa9\x02V\xab\x02W\xad\x02X\xaf\x02Y\xb1\x02Z\xb3\x02[\xb5\x02\\\xb7\x02]\xb9\x02^\xbb\x02_\xbd\x02`\xbf\x02a\xc1\x02b\xc3\x02c\xc5\x02d\xc7\x02e\xc9\x02f\xcb\x02g\xcd\x02h\xcf\x02i\xd1\x02j\xd3\x02k\xd5\x02l\xd7\x02\x02\xd9\x02\x02\xdb\x02\x02\xdd\x02\x02\xdf\x02\x02\xe1\x02\x02\x03\x02\x05\x05\x022;C\\c|\x05\x022;CHch\x03\x02\x02\x81\x02\u01fb\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0f\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1b\x03\x02\x02\x02\x02\x1d\x03\x02\x02\x02\x02\x1f\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02w\x03\x02\x02\x02\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02}\x03\x02\x02\x02\x02\x7f\x03\x02\x02\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02\x85\x03\x02\x02\x02\x02\x87\x03\x02\x02\x02\x02\x89\x03\x02\x02\x02\x02\x8b\x03\x02\x02\x02\x02\x8d\x03\x02\x02\x02\x02\x8f\x03\x02\x02\x02\x02\x91\x03\x02\x02\x02\x02\x93\x03\x02\x02\x02\x02\x95\x03\x02\x02\x02\x02\x97\x03\x02\x02\x02\x02\x99\x03\x02\x02\x02\x02\x9b\x03\x02\x02\x02\x02\x9d\x03\x02\x02\x02\x02\x9f\x03\x02\x02\x02\x02\xa1\x03\x02\x02\x02\x02\xa3\x03\x02\x02\x02\x02\xa5\x03\x02\x02\x02\x02\xa7\x03\x02\x02\x02\x02\xa9\x03\x02\x02\x02\x02\xab\x03\x02\x02\x02\x02\xad\x03\x02\x02\x02\x02\xaf\x03\x02\x02\x02\x02\xb1\x03\x02\x02\x02\x02\xb3\x03\x02\x02\x02\x02\xb5\x03\x02\x02\x02\x02\xb7\x03\x02\x02\x02\x02\xb9\x03\x02\x02\x02\x02\xbb\x03\x02\x02\x02\x02\xbd\x03\x02\x02\x02\x02\xbf\x03\x02\x02\x02\x02\xc1\x03\x02\x02\x02\x02\xc3\x03\x02\x02\x02\x02\xc5\x03\x02\x02\x02\x02\xc7\x03\x02\x02\x02\x02\xc9\x03\x02\x02\x02\x02\xcb\x03\x02\x02\x02\x02\xcd\x03\x02\x02\x02\x02\xcf\x03\x02\x02\x02\x02\xd1\x03\x02\x02\x02\x02\xd3\x03\x02\x02\x02\x02\xd5\x03\x02\x02\x02\x03\xe3\x03\x02\x02\x02\x05\xe6\x03\x02\x02\x02\x07\xf2\x03\x02\x02\x02\t\xf5\x03\x02\x02\x02\v\xf8\x03\x02\x02\x02\r\xfb\x03\x02\x02\x02\x0f\xfe\x03\x02\x02\x02\x11\u0101\x03\x02\x02\x02\x13\u0104\x03\x02\x02\x02\x15\u0107\x03\x02\x02\x02\x17\u0109\x03\x02\x02\x02\x19\u011b\x03\x02\x02\x02\x1b\u011d\x03\x02\x02\x02\x1d\u0120\x03\x02\x02\x02\x1f\u0123\x03\x02\x02\x02!\u012a\x03\x02\x02\x02#\u0131\x03\x02\x02\x02%\u0134\x03\x02\x02\x02'\u0137\x03\x02\x02\x02)\u013a\x03\x02\x02\x02+\u013d\x03\x02\x02\x02-\u013f\x03\x02\x02\x02/\u0141\x03\x02\x02\x021\u0143\x03\x02\x02\x023\u0145\x03\x02\x02\x025\u0147\x03\x02\x02\x027\u0149\x03\x02\x02\x029\u014b\x03\x02\x02\x02;\u014d\x03\x02\x02\x02=\u014f\x03\x02\x02\x02?\u0151\x03\x02\x02\x02A\u0153\x03\x02\x02\x02C\u0155\x03\x02\x02\x02E\u0157\x03\x02\x02\x02G\u0159\x03\x02\x02\x02I\u015b\x03\x02\x02\x02K\u015d\x03\x02\x02\x02M\u015f\x03\x02\x02\x02O\u0161\x03\x02\x02\x02Q\u0163\x03\x02\x02\x02S\u0165\x03\x02\x02\x02U\u0167\x03\x02\x02\x02W\u0169\x03\x02\x02\x02Y\u016b\x03\x02\x02\x02[\u016d\x03\x02\x02\x02]\u016f\x03\x02\x02\x02_\u0171\x03\x02\x02\x02a\u0173\x03\x02\x02\x02c\u0175\x03\x02\x02\x02e\u0177\x03\x02\x02\x02g\u0179\x03\x02\x02\x02i\u017b\x03\x02\x02\x02k\u017d\x03\x02\x02\x02m\u017f\x03\x02\x02\x02o\u0181\x03\x02\x02\x02q\u0183\x03\x02\x02\x02s\u0185\x03\x02\x02\x02u\u0187\x03\x02\x02\x02w\u0189\x03\x02\x02\x02y\u018b\x03\x02\x02\x02{\u018d\x03\x02\x02\x02}\u018f\x03\x02\x02\x02\x7f\u0191\x03\x02\x02\x02\x81\u0193\x03\x02\x02\x02\x83\u0195\x03\x02\x02\x02\x85\u0197\x03\x02\x02\x02\x87\u0199\x03\x02\x02\x02\x89\u019b\x03\x02\x02\x02\x8b\u019d\x03\x02\x02\x02\x8d\u019f\x03\x02\x02\x02\x8f\u01a1\x03\x02\x02\x02\x91\u01a3\x03\x02\x02\x02\x93\u01a5\x03\x02\x02\x02\x95\u01a7\x03\x02\x02\x02\x97\u01a9\x03\x02\x02\x02\x99\u01ab\x03\x02\x02\x02\x9b\u01ad\x03\x02\x02\x02\x9d\u01af\x03\x02\x02\x02\x9f\u01b1\x03\x02\x02\x02\xa1\u01b3\x03\x02\x02\x02\xa3\u01b5\x03\x02\x02\x02\xa5\u01b7\x03\x02\x02\x02\xa7\u01b9\x03\x02\x02\x02\xa9\u01bb\x03\x02\x02\x02\xab\u01bd\x03\x02\x02\x02\xad\u01bf\x03\x02\x02\x02\xaf\u01c1\x03\x02\x02\x02\xb1\u01c3\x03\x02\x02\x02\xb3\u01c5\x03\x02\x02\x02\xb5\u01c7\x03\x02\x02\x02\xb7\u01c9\x03\x02\x02\x02\xb9\u01cb\x03\x02\x02\x02\xbb\u01cd\x03\x02\x02\x02\xbd\u01cf\x03\x02\x02\x02\xbf\u01d1\x03\x02\x02\x02\xc1\u01d3\x03\x02\x02\x02\xc3\u01d5\x03\x02\x02\x02\xc5\u01d7\x03\x02\x02\x02\xc7\u01d9\x03\x02\x02\x02\xc9\u01db\x03\x02\x02\x02\xcb\u01dd\x03\x02\x02\x02\xcd\u01df\x03\x02\x02\x02\xcf\u01e1\x03\x02\x02\x02\xd1\u01e3\x03\x02\x02\x02\xd3\u01e5\x03\x02\x02\x02\xd5\u01e7\x03\x02\x02\x02\xd7\u01eb\x03\x02\x02\x02\xd9\u01f0\x03\x02\x02\x02\xdb\u01f4\x03\x02\x02\x02\xdd\u01f6\x03\x02\x02\x02\xdf\u01f8\x03\x02\x02\x02\xe1\u01fa\x03\x02\x02\x02\xe3\xe4\x07^\x02\x02\xe4\xe5\x05\xddo\x02\xe5\x04\x03\x02\x02\x02\xe6\xe7\x07^\x02\x02\xe7\xe8\x07S\x02\x02\xe8\xec\x03\x02\x02\x02\xe9\xeb\v\x02\x02\x02\xea\xe9\x03\x02\x02\x02\xeb\xee\x03\x02\x02\x02\xec\xed\x03\x02\x02\x02\xec\xea\x03\x02\x02\x02\xed\xef\x03\x02\x02\x02\xee\xec\x03\x02\x02\x02\xef\xf0\x07^\x02\x02\xf0\xf1\x07G\x02\x02\xf1\x06\x03\x02\x02\x02\xf2\xf3\x07^\x02\x02\xf3\xf4\x07c\x02\x02\xf4\b\x03\x02\x02\x02\xf5\xf6\x07^\x02\x02\xf6\xf7\x07e\x02\x02\xf7\n\x03\x02\x02\x02\xf8\xf9\x07^\x02\x02\xf9\xfa\x07g\x02\x02\xfa\f\x03\x02\x02\x02\xfb\xfc\x07^\x02\x02\xfc\xfd\x07h\x02\x02\xfd\x0e\x03\x02\x02\x02\xfe\xff\x07^\x02\x02\xff\u0100\x07p\x02\x02\u0100\x10\x03\x02\x02\x02\u0101\u0102\x07^\x02\x02\u0102\u0103\x07t\x02\x02\u0103\x12\x03\x02\x02\x02\u0104\u0105\x07^\x02\x02\u0105\u0106\x07v\x02\x02\u0106\x14\x03\x02\x02\x02\u0107\u0108\x07^\x02\x02\u0108\x16\x03\x02\x02\x02\u0109\u010a\x07^\x02\x02\u010a\u010b\x07z\x02\x02\u010b\u0119\x03\x02\x02\x02\u010c\u010d\x05\xdfp\x02\u010d\u010e\x05\xdfp\x02\u010e\u011a\x03\x02\x02\x02\u010f\u0110\x07}\x02\x02\u0110\u0111\x05\xdfp\x02\u0111\u0113\x05\xdfp\x02\u0112\u0114\x05\xdfp\x02\u0113\u0112\x03\x02\x02\x02\u0114\u0115\x03\x02\x02\x02\u0115\u0113\x03\x02\x02\x02\u0115\u0116\x03\x02\x02\x02\u0116\u0117\x03\x02\x02\x02\u0117\u0118\x07\x7f\x02\x02\u0118\u011a\x03\x02\x02\x02\u0119\u010c\x03\x02\x02\x02\u0119\u010f\x03\x02\x02\x02\u011a\x18\x03\x02\x02\x02\u011b\u011c\x070\x02\x02\u011c\x1a\x03\x02\x02\x02\u011d\u011e\x07^\x02\x02\u011e\u011f\x07f\x02\x02\u011f\x1c\x03\x02\x02\x02\u0120\u0121\x07^\x02\x02\u0121\u0122\x07F\x02\x02\u0122\x1e\x03\x02\x02\x02\u0123\u0124\x07^\x02\x02\u0124\u0125\x07r\x02\x02\u0125\u0126\x07}\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127\u0128\x05\xd7l\x02\u0128\u0129\x07\x7f\x02\x02\u0129 \x03\x02\x02\x02\u012a\u012b\x07^\x02\x02\u012b\u012c\x07R\x02\x02\u012c\u012d\x07}\x02\x02\u012d\u012e\x03\x02\x02\x02\u012e\u012f\x05\xd7l\x02\u012f\u0130\x07\x7f\x02\x02\u0130\"\x03\x02\x02\x02\u0131\u0132\x07^\x02\x02\u0132\u0133\x07u\x02\x02\u0133$\x03\x02\x02\x02\u0134\u0135\x07^\x02\x02\u0135\u0136\x07U\x02\x02\u0136&\x03\x02\x02\x02\u0137\u0138\x07^\x02\x02\u0138\u0139\x07y\x02\x02\u0139(\x03\x02\x02\x02\u013a\u013b\x07^\x02\x02\u013b\u013c\x07Y\x02\x02\u013c*\x03\x02\x02\x02\u013d\u013e\x07]\x02\x02\u013e,\x03\x02\x02\x02\u013f\u0140\x07_\x02\x02\u0140.\x03\x02\x02\x02\u0141\u0142\x07`\x02\x02\u01420\x03\x02\x02\x02\u0143\u0144\x07/\x02\x02\u01442\x03\x02\x02\x02\u0145\u0146\x07A\x02\x02\u01464\x03\x02\x02\x02\u0147\u0148\x07-\x02\x02\u01486\x03\x02\x02\x02\u0149\u014a\x07,\x02\x02\u014a8\x03\x02\x02\x02\u014b\u014c\x07}\x02\x02\u014c:\x03\x02\x02\x02\u014d\u014e\x07\x7f\x02\x02\u014e<\x03\x02\x02\x02\u014f\u0150\x07.\x02\x02\u0150>\x03\x02\x02\x02\u0151\u0152\x07&\x02\x02\u0152@\x03\x02\x02\x02\u0153\u0154\x07~\x02\x02\u0154B\x03\x02\x02\x02\u0155\u0156\x07*\x02\x02\u0156D\x03\x02\x02\x02\u0157\u0158\x07+\x02\x02\u0158F\x03\x02\x02\x02\u0159\u015a\x07>\x02\x02\u015aH\x03\x02\x02\x02\u015b\u015c\x07@\x02\x02\u015cJ\x03\x02\x02\x02\u015d\u015e\x07)\x02\x02\u015eL\x03\x02\x02\x02\u015f\u0160\x07a\x02\x02\u0160N\x03\x02\x02\x02\u0161\u0162\x07<\x02\x02\u0162P\x03\x02\x02\x02\u0163\u0164\x07%\x02\x02\u0164R\x03\x02\x02\x02\u0165\u0166\x07?\x02\x02\u0166T\x03\x02\x02\x02\u0167\u0168\x07#\x02\x02\u0168V\x03\x02\x02\x02\u0169\u016a\x07(\x02\x02\u016aX\x03\x02\x02\x02\u016b\u016c\x07c\x02\x02\u016cZ\x03\x02\x02\x02\u016d\u016e\x07d\x02\x02\u016e\\\x03\x02\x02\x02\u016f\u0170\x07e\x02\x02\u0170^\x03\x02\x02\x02\u0171\u0172\x07f\x02\x02\u0172`\x03\x02\x02\x02\u0173\u0174\x07g\x02\x02\u0174b\x03\x02\x02\x02\u0175\u0176\x07h\x02\x02\u0176d\x03\x02\x02\x02\u0177\u0178\x07i\x02\x02\u0178f\x03\x02\x02\x02\u0179\u017a\x07j\x02\x02\u017ah\x03\x02\x02\x02\u017b\u017c\x07k\x02\x02\u017cj\x03\x02\x02\x02\u017d\u017e\x07l\x02\x02\u017el\x03\x02\x02\x02\u017f\u0180\x07m\x02\x02\u0180n\x03\x02\x02\x02\u0181\u0182\x07n\x02\x02\u0182p\x03\x02\x02\x02\u0183\u0184\x07o\x02\x02\u0184r\x03\x02\x02\x02\u0185\u0186\x07p\x02\x02\u0186t\x03\x02\x02\x02\u0187\u0188\x07q\x02\x02\u0188v\x03\x02\x02\x02\u0189\u018a\x07r\x02\x02\u018ax\x03\x02\x02\x02\u018b\u018c\x07s\x02\x02\u018cz\x03\x02\x02\x02\u018d\u018e\x07t\x02\x02\u018e|\x03\x02\x02\x02\u018f\u0190\x07u\x02\x02\u0190~\x03\x02\x02\x02\u0191\u0192\x07v\x02\x02\u0192\x80\x03\x02\x02\x02\u0193\u0194\x07w\x02\x02\u0194\x82\x03\x02\x02\x02\u0195\u0196\x07x\x02\x02\u0196\x84\x03\x02\x02\x02\u0197\u0198\x07y\x02\x02\u0198\x86\x03\x02\x02\x02\u0199\u019a\x07z\x02\x02\u019a\x88\x03\x02\x02\x02\u019b\u019c\x07{\x02\x02\u019c\x8a\x03\x02\x02\x02\u019d\u019e\x07|\x02\x02\u019e\x8c\x03\x02\x02\x02\u019f\u01a0\x07C\x02\x02\u01a0\x8e\x03\x02\x02\x02\u01a1\u01a2\x07D\x02\x02\u01a2\x90\x03\x02\x02\x02\u01a3\u01a4\x07E\x02\x02\u01a4\x92\x03\x02\x02\x02\u01a5\u01a6\x07F\x02\x02\u01a6\x94\x03\x02\x02\x02\u01a7\u01a8\x07G\x02\x02\u01a8\x96\x03\x02\x02\x02\u01a9\u01aa\x07H\x02\x02\u01aa\x98\x03\x02\x02\x02\u01ab\u01ac\x07I\x02\x02\u01ac\x9a\x03\x02\x02\x02\u01ad\u01ae\x07J\x02\x02\u01ae\x9c\x03\x02\x02\x02\u01af\u01b0\x07K\x02\x02\u01b0\x9e\x03\x02\x02\x02\u01b1\u01b2\x07L\x02\x02\u01b2\xa0\x03\x02\x02\x02\u01b3\u01b4\x07M\x02\x02\u01b4\xa2\x03\x02\x02\x02\u01b5\u01b6\x07N\x02\x02\u01b6\xa4\x03\x02\x02\x02\u01b7\u01b8\x07O\x02\x02\u01b8\xa6\x03\x02\x02\x02\u01b9\u01ba\x07P\x02\x02\u01ba\xa8\x03\x02\x02\x02\u01bb\u01bc\x07Q\x02\x02\u01bc\xaa\x03\x02\x02\x02\u01bd\u01be\x07R\x02\x02\u01be\xac\x03\x02\x02\x02\u01bf\u01c0\x07S\x02\x02\u01c0\xae\x03\x02\x02\x02\u01c1\u01c2\x07T\x02\x02\u01c2\xb0\x03\x02\x02\x02\u01c3\u01c4\x07U\x02\x02\u01c4\xb2\x03\x02\x02\x02\u01c5\u01c6\x07V\x02\x02\u01c6\xb4\x03\x02\x02\x02\u01c7\u01c8\x07W\x02\x02\u01c8\xb6\x03\x02\x02\x02\u01c9\u01ca\x07X\x02\x02\u01ca\xb8\x03\x02\x02\x02\u01cb\u01cc\x07Y\x02\x02\u01cc\xba\x03\x02\x02\x02\u01cd\u01ce\x07Z\x02\x02\u01ce\xbc\x03\x02\x02\x02\u01cf\u01d0\x07[\x02\x02\u01d0\xbe\x03\x02\x02\x02\u01d1\u01d2\x07\\\x02\x02\u01d2\xc0\x03\x02\x02\x02\u01d3\u01d4\x073\x02\x02\u01d4\xc2\x03\x02\x02\x02\u01d5\u01d6\x074\x02\x02\u01d6\xc4\x03\x02\x02\x02\u01d7\u01d8\x075\x02\x02\u01d8\xc6\x03\x02\x02\x02\u01d9\u01da\x076\x02\x02\u01da\xc8\x03\x02\x02\x02\u01db\u01dc\x077\x02\x02\u01dc\xca\x03\x02\x02\x02\u01dd\u01de\x078\x02\x02\u01de\xcc\x03\x02\x02\x02\u01df\u01e0\x079\x02\x02\u01e0\xce\x03\x02\x02\x02\u01e1\u01e2\x07:\x02\x02\u01e2\xd0\x03\x02\x02\x02\u01e3\u01e4\x07;\x02\x02\u01e4\xd2\x03\x02\x02\x02\u01e5\u01e6\x072\x02\x02\u01e6\xd4\x03\x02\x02\x02\u01e7\u01e8\v\x02\x02\x02\u01e8\xd6\x03\x02\x02\x02\u01e9\u01ec\x07a\x02\x02\u01ea\u01ec\x05\xdbn\x02\u01eb\u01e9\x03\x02\x02\x02\u01eb\u01ea\x03\x02\x02\x02\u01ec\u01ed\x03\x02\x02\x02\u01ed\u01eb\x03\x02\x02\x02\u01ed\u01ee\x03\x02\x02\x02\u01ee\xd8\x03\x02\x02\x02\u01ef\u01f1\x05\xdbn\x02\u01f0\u01ef\x03\x02\x02\x02\u01f1\u01f2\x03\x02\x02\x02\u01f2\u01f0\x03\x02\x02\x02\u01f2\u01f3\x03\x02\x02\x02\u01f3\xda\x03\x02\x02\x02\u01f4\u01f5\t\x02\x02\x02\u01f5\xdc\x03\x02\x02\x02\u01f6\u01f7\n\x02\x02\x02\u01f7\xde\x03\x02\x02\x02\u01f8\u01f9\t\x03\x02\x02\u01f9\xe0\x03\x02\x02\x02\u01fa\u01fb\t\x04\x02\x02\u01fb\xe2\x03\x02\x02\x02\t\x02\xec\u0115\u0119\u01eb\u01ed\u01f2\x02",r.CommonRegexLexer=l},{260:260,278:278,283:283,304:304,365:365}],260:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(249),o=t(357),s=t(358),a=t(258),u=t(304),l=t(262),c=t(252),h=t(271),p=t(276);class d extends h.Recognizer{constructor(t){super(),this._factory=i.CommonTokenFactory.DEFAULT,this._tokenStartCharIndex=-1,this._tokenStartLine=0,this._tokenStartCharPositionInLine=0,this._hitEOF=!1,this._channel=0,this._type=0,this._modeStack=new o.IntegerStack,this._mode=d.DEFAULT_MODE,this._input=t,this._tokenFactorySourcePair={source:this,stream:t}}static get DEFAULT_TOKEN_CHANNEL(){return p.Token.DEFAULT_CHANNEL}static get HIDDEN(){return p.Token.HIDDEN_CHANNEL}reset(t){(void 0===t||t)&&this._input.seek(0),this._token=void 0,this._type=p.Token.INVALID_TYPE,this._channel=p.Token.DEFAULT_CHANNEL,this._tokenStartCharIndex=-1,this._tokenStartCharPositionInLine=-1,this._tokenStartLine=-1,this._text=void 0,this._hitEOF=!1,this._mode=d.DEFAULT_MODE,this._modeStack.clear(),this.interpreter.reset()}nextToken(){if(null==this._input)throw new Error("nextToken requires a non-null input stream.");let t=this._input.mark();try{t:for(;;){if(this._hitEOF)return this.emitEOF();this._token=void 0,this._channel=p.Token.DEFAULT_CHANNEL,this._tokenStartCharIndex=this._input.index,this._tokenStartCharPositionInLine=this.interpreter.charPositionInLine,this._tokenStartLine=this.interpreter.line,this._text=void 0;do{let t;this._type=p.Token.INVALID_TYPE;try{t=this.interpreter.match(this._input,this._mode)}catch(e){if(!(e instanceof l.LexerNoViableAltException))throw e;this.notifyListeners(e),this.recover(e),t=d.SKIP}if(this._input.LA(1)===a.IntStream.EOF&&(this._hitEOF=!0),this._type===p.Token.INVALID_TYPE&&(this._type=t),this._type===d.SKIP)continue t}while(this._type===d.MORE);return null==this._token?this.emit():this._token}}finally{this._input.release(t)}}skip(){this._type=d.SKIP}more(){this._type=d.MORE}mode(t){this._mode=t}pushMode(t){u.LexerATNSimulator.debug&&console.log("pushMode "+t),this._modeStack.push(this._mode),this.mode(t)}popMode(){if(this._modeStack.isEmpty)throw new Error("EmptyStackException");return u.LexerATNSimulator.debug&&console.log("popMode back to "+this._modeStack.peek()),this.mode(this._modeStack.pop()),this._mode}get tokenFactory(){return this._factory}set tokenFactory(t){this._factory=t}get inputStream(){return this._input}set inputStream(t){this.reset(!1),this._input=t,this._tokenFactorySourcePair={source:this,stream:this._input}}get sourceName(){return this._input.sourceName}emit(t){return t||(t=this._factory.create(this._tokenFactorySourcePair,this._type,this._text,this._channel,this._tokenStartCharIndex,this.charIndex-1,this._tokenStartLine,this._tokenStartCharPositionInLine)),this._token=t,t}emitEOF(){let t=this.charPositionInLine,e=this.line,r=this._factory.create(this._tokenFactorySourcePair,p.Token.EOF,void 0,p.Token.DEFAULT_CHANNEL,this._input.index,this._input.index-1,e,t);return this.emit(r),r}get line(){return this.interpreter.line}set line(t){this.interpreter.line=t}get charPositionInLine(){return this.interpreter.charPositionInLine}set charPositionInLine(t){this.interpreter.charPositionInLine=t}get charIndex(){return this._input.index}get text(){return null!=this._text?this._text:this.interpreter.getText(this._input)}set text(t){this._text=t}get token(){return this._token}set token(t){this._token=t}set type(t){this._type=t}get type(){return this._type}set channel(t){this._channel=t}get channel(){return this._channel}getAllTokens(){let t=[],e=this.nextToken();for(;e.type!==p.Token.EOF;)t.push(e),e=this.nextToken();return t}notifyListeners(t){let e=this._input.getText(s.Interval.of(this._tokenStartCharIndex,this._input.index)),r="token recognition error at: '"+this.getErrorDisplay(e)+"'",n=this.getErrorListenerDispatch();n.syntaxError&&n.syntaxError(this,void 0,this._tokenStartLine,this._tokenStartCharPositionInLine,r,t)}getErrorDisplay(t){if("number"==typeof t){switch(t){case p.Token.EOF:return"<EOF>";case 10:return"\\n";case 9:return"\\t";case 13:return"\\r"}return String.fromCharCode(t)}return t.replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/\r/g,"\\r")}getCharErrorDisplay(t){return"'"+this.getErrorDisplay(t)+"'"}recover(t){t instanceof l.LexerNoViableAltException?this._input.LA(1)!==a.IntStream.EOF&&this.interpreter.consume(this._input):this._input.consume()}}d.DEFAULT_MODE=0,d.MORE=-2,d.SKIP=-3,d.MIN_CHAR_VALUE=0,d.MAX_CHAR_VALUE=1114111,n([c.Override],d.prototype,"nextToken",null),n([c.Override],d.prototype,"tokenFactory",null),n([c.Override],d.prototype,"inputStream",null),n([c.Override],d.prototype,"sourceName",null),n([c.Override],d.prototype,"line",null),n([c.Override],d.prototype,"charPositionInLine",null),r.Lexer=d},{249:249,252:252,258:258,262:262,271:271,276:276,304:304,357:357,358:358}],278:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(276);class s{constructor(t,e,r){this.literalNames=t,this.symbolicNames=e,this.displayNames=r,this._maxTokenType=Math.max(this.displayNames.length,Math.max(this.literalNames.length,this.symbolicNames.length))-1}get maxTokenType(){return this._maxTokenType}getLiteralName(t){if(t>=0&&t<this.literalNames.length)return this.literalNames[t]}getSymbolicName(t){return t>=0&&t<this.symbolicNames.length?this.symbolicNames[t]:t===o.Token.EOF?"EOF":void 0}getDisplayName(t){if(t>=0&&t<this.displayNames.length){let e=this.displayNames[t];if(e)return e}let e=this.getLiteralName(t);return e||(this.getSymbolicName(t)||String(t))}}s.EMPTY_VOCABULARY=new s([],[],[]),n([i.NotNull],s.prototype,"literalNames",void 0),n([i.NotNull],s.prototype,"symbolicNames",void 0),n([i.NotNull],s.prototype,"displayNames",void 0),n([i.Override],s.prototype,"maxTokenType",null),n([i.Override],s.prototype,"getLiteralName",null),n([i.Override],s.prototype,"getSymbolicName",null),n([i.Override,i.NotNull],s.prototype,"getDisplayName",null),n([i.NotNull],s,"EMPTY_VOCABULARY",void 0),r.VocabularyImpl=s},{252:252,276:276}],365:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.escapeWhitespace=function(t,e){return e?t.replace(/ /,"\xb7"):t.replace(/\t/,"\\t").replace(/\n/,"\\n").replace(/\r/,"\\r")},r.join=function(t,e){let r="",n=!0;for(let i of t)n?n=!1:r+=e,r+=i;return r},r.equals=function(t,e){return t===e||void 0!==t&&void 0!==e&&t.equals(e)},r.toMap=function(t){let e=new Map;for(let r=0;r<t.length;r++)e.set(t[r],r);return e},r.toCharArray=function(t){if("string"==typeof t){let e=new Uint16Array(t.length);for(let r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return e}return t.toCharArray()}},{}],304:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(343),s=t(279),a=t(280),u=t(281),l=t(284),c=t(346),h=t(358),p=t(258),d=t(260),f=t(305),y=t(262),m=t(252),g=t(318),v=t(326),T=t(332),_=t(276);let E=class t extends l.ATNSimulator{constructor(e,r){super(e),this.optimize_tail_calls=!0,this.startIndex=-1,this._line=1,this._charPositionInLine=0,this.mode=d.Lexer.DEFAULT_MODE,this.prevAccept=new t.SimState,this.recog=r}copyState(t){this._charPositionInLine=t.charPositionInLine,this._line=t._line,this.mode=t.mode,this.startIndex=t.startIndex}match(e,r){t.match_calls++,this.mode=r;let n=e.mark();try{this.startIndex=e.index,this.prevAccept.reset();let t=this.atn.modeToDFA[r].s0;return null==t?this.matchATN(e):this.execATN(e,t)}finally{e.release(n)}}reset(){this.prevAccept.reset(),this.startIndex=-1,this._line=1,this._charPositionInLine=0,this.mode=d.Lexer.DEFAULT_MODE}matchATN(e){let r=this.atn.modeToStartState[this.mode];t.debug&&console.log(`matchATN mode ${this.mode} start: ${r}`);let n=this.mode,i=this.computeStartState(e,r),o=i.hasSemanticContext;o&&(i.hasSemanticContext=!1);let s=this.addDFAState(i);if(!o){let t=this.atn.modeToDFA[this.mode];t.s0?s=t.s0:t.s0=s}let a=this.execATN(e,s);return t.debug&&console.log("DFA after matchATN: "+this.atn.modeToDFA[n].toLexerString()),a}execATN(e,r){t.debug&&console.log("start state closure="+r.configs),r.isAcceptState&&this.captureSimState(this.prevAccept,e,r);let n=e.LA(1),i=r;for(;;){t.debug&&console.log("execATN loop starting closure: "+i.configs);let r=this.getExistingTargetState(i,n);if(null==r&&(r=this.computeTargetState(e,i,n)),r===l.ATNSimulator.ERROR)break;if(n!==p.IntStream.EOF&&this.consume(e),r.isAcceptState&&(this.captureSimState(this.prevAccept,e,r),n===p.IntStream.EOF))break;n=e.LA(1),i=r}return this.failOrAccept(this.prevAccept,e,i.configs,n)}getExistingTargetState(e,r){let n=e.getTarget(r);return t.debug&&null!=n&&console.log("reuse state "+e.stateNumber+" edge to "+n.stateNumber),n}computeTargetState(t,e,r){let n=new g.OrderedATNConfigSet;return this.getReachableConfigSet(t,e.configs,n,r),n.isEmpty?(n.hasSemanticContext||this.addDFAEdge(e,r,l.ATNSimulator.ERROR),l.ATNSimulator.ERROR):this.addDFAEdge(e,r,n)}failOrAccept(t,e,r,n){if(null!=t.dfaState){let r=t.dfaState.lexerActionExecutor;return this.accept(e,r,this.startIndex,t.index,t.line,t.charPos),t.dfaState.prediction}if(n===p.IntStream.EOF&&e.index===this.startIndex)return _.Token.EOF;throw new y.LexerNoViableAltException(this.recog,e,this.startIndex,r)}getReachableConfigSet(e,r,n,i){let o=s.ATN.INVALID_ALT_NUMBER;for(let s of r){let r=s.alt===o;if(r&&s.hasPassedThroughNonGreedyDecision)continue;t.debug&&console.log(`testing ${this.getTokenName(i)} at ${s.toString(this.recog,!0)}`);let a=s.state.numberOfOptimizedTransitions;for(let t=0;t<a;t++){let a=s.state.getOptimizedTransition(t),u=this.getReachableTarget(a,i);if(null!=u){let t,a=s.lexerActionExecutor;null!=a?(a=a.fixOffsetBeforeMatch(e.index-this.startIndex),t=s.transform(u,!0,a)):t=s.transform(u,!0);let l=i===p.IntStream.EOF;if(this.closure(e,t,n,r,!0,l)){o=s.alt;break}}}}}accept(e,r,n,i,o,s){t.debug&&console.log("ACTION "+r),e.seek(i),this._line=o,this._charPositionInLine=s,null!=r&&null!=this.recog&&r.execute(this.recog,e,n)}getReachableTarget(t,e){if(t.matches(e,d.Lexer.MIN_CHAR_VALUE,d.Lexer.MAX_CHAR_VALUE))return t.target}computeStartState(t,e){let r=v.PredictionContext.EMPTY_FULL,n=new g.OrderedATNConfigSet;for(let i=0;i<e.numberOfTransitions;i++){let o=e.transition(i).target,s=a.ATNConfig.create(o,i+1,r);this.closure(t,s,n,!1,!1,!1)}return n}closure(e,r,n,i,o,s){if(t.debug&&console.log("closure("+r.toString(this.recog,!0)+")"),r.state instanceof T.RuleStopState){t.debug&&(null!=this.recog?console.log(`closure at ${this.recog.ruleNames[r.state.ruleIndex]} rule stop ${r}`):console.log("closure at rule stop "+r));let a=r.context;if(a.isEmpty)return n.add(r),!0;a.hasEmpty&&(n.add(r.transform(r.state,!0,v.PredictionContext.EMPTY_FULL)),i=!0);for(let t=0;t<a.size;t++){let u=a.getReturnState(t);if(u===v.PredictionContext.EMPTY_FULL_STATE_KEY)continue;let l=a.getParent(t),c=this.atn.states[u],h=r.transform(c,!1,l);i=this.closure(e,h,n,i,o,s)}return i}r.state.onlyHasEpsilonTransitions||i&&r.hasPassedThroughNonGreedyDecision||n.add(r);let a=r.state;for(let t=0;t<a.numberOfOptimizedTransitions;t++){let u=a.getOptimizedTransition(t),l=this.getEpsilonTarget(e,r,u,n,o,s);null!=l&&(i=this.closure(e,l,n,i,o,s))}return i}getEpsilonTarget(e,r,n,i,o,s){let a;switch(n.serializationType){case 3:let u=n;if(this.optimize_tail_calls&&u.optimizedTailCall&&!r.context.hasEmpty)a=r.transform(n.target,!0);else{let t=r.context.getChild(u.followState.stateNumber);a=r.transform(n.target,!0,t)}break;case 10:throw new Error("Precedence predicates are not supported in lexers.");case 4:let l=n;t.debug&&console.log("EVAL rule "+l.ruleIndex+":"+l.predIndex),i.hasSemanticContext=!0,a=this.evaluatePredicate(e,l.ruleIndex,l.predIndex,o)?r.transform(n.target,!0):void 0;break;case 6:if(r.context.hasEmpty){let t=f.LexerActionExecutor.append(r.lexerActionExecutor,this.atn.lexerActions[n.actionIndex]);a=r.transform(n.target,!0,t);break}a=r.transform(n.target,!0);break;case 1:a=r.transform(n.target,!0);break;case 5:case 2:case 7:if(s&&n.matches(p.IntStream.EOF,d.Lexer.MIN_CHAR_VALUE,d.Lexer.MAX_CHAR_VALUE)){a=r.transform(n.target,!1);break}a=void 0;break;default:a=void 0}return a}evaluatePredicate(t,e,r,n){if(null==this.recog)return!0;if(!n)return this.recog.sempred(void 0,e,r);let i=this._charPositionInLine,o=this._line,s=t.index,a=t.mark();try{return this.consume(t),this.recog.sempred(void 0,e,r)}finally{this._charPositionInLine=i,this._line=o,t.seek(s),t.release(a)}}captureSimState(t,e,r){t.index=e.index,t.line=this._line,t.charPos=this._charPositionInLine,t.dfaState=r}addDFAEdge(e,r,n){if(n instanceof u.ATNConfigSet){let t=n.hasSemanticContext;t&&(n.hasSemanticContext=!1);let i=this.addDFAState(n);return t||this.addDFAEdge(e,r,i),i}t.debug&&console.log("EDGE "+e+" -> "+n+" upon "+String.fromCharCode(r)),null!=e&&e.setTarget(r,n)}addDFAState(t){let e=new c.DFAState(t),r=this.atn.modeToDFA[this.mode].states.get(e);if(null!=r)return r;t.optimizeConfigs(this);let n,i=new c.DFAState(t.clone(!0));for(let o of t)if(o.state instanceof T.RuleStopState){n=o;break}if(null!=n){let t=this.atn.ruleToTokenType[n.state.ruleIndex],e=n.lexerActionExecutor;i.acceptStateInfo=new o.AcceptStateInfo(t,e)}return this.atn.modeToDFA[this.mode].addState(i)}getDFA(t){return this.atn.modeToDFA[t]}getText(t){return t.getText(h.Interval.of(this.startIndex,t.index-1))}get line(){return this._line}set line(t){this._line=t}get charPositionInLine(){return this._charPositionInLine}set charPositionInLine(t){this._charPositionInLine=t}consume(t){t.LA(1)==="\n".charCodeAt(0)?(this._line++,this._charPositionInLine=0):this._charPositionInLine++,t.consume()}getTokenName(t){return-1===t?"EOF":"'"+String.fromCharCode(t)+"'"}};E.match_calls=0,n([m.NotNull],E.prototype,"prevAccept",void 0),n([i(0,m.NotNull)],E.prototype,"copyState",null),n([i(0,m.NotNull)],E.prototype,"match",null),n([m.Override],E.prototype,"reset",null),n([i(0,m.NotNull)],E.prototype,"matchATN",null),n([i(0,m.NotNull),i(1,m.NotNull)],E.prototype,"execATN",null),n([i(0,m.NotNull)],E.prototype,"getExistingTargetState",null),n([m.NotNull,i(0,m.NotNull),i(1,m.NotNull)],E.prototype,"computeTargetState",null),n([i(0,m.NotNull),i(1,m.NotNull),i(2,m.NotNull)],E.prototype,"getReachableConfigSet",null),n([i(0,m.NotNull)],E.prototype,"accept",null),n([m.NotNull,i(0,m.NotNull),i(1,m.NotNull)],E.prototype,"computeStartState",null),n([i(0,m.NotNull),i(1,m.NotNull),i(2,m.NotNull)],E.prototype,"closure",null),n([i(0,m.NotNull),i(1,m.NotNull),i(2,m.NotNull),i(3,m.NotNull)],E.prototype,"getEpsilonTarget",null),n([i(0,m.NotNull)],E.prototype,"evaluatePredicate",null),n([i(0,m.NotNull),i(1,m.NotNull),i(2,m.NotNull)],E.prototype,"captureSimState",null),n([m.NotNull,i(0,m.NotNull)],E.prototype,"addDFAState",null),n([m.NotNull],E.prototype,"getDFA",null),n([m.NotNull,i(0,m.NotNull)],E.prototype,"getText",null),n([i(0,m.NotNull)],E.prototype,"consume",null),n([m.NotNull],E.prototype,"getTokenName",null),E=n([i(0,m.NotNull)],E),r.LexerATNSimulator=E,function(t){t.debug=!1,t.dfa_debug=!1,t.SimState=class{constructor(){this.index=-1,this.line=0,this.charPos=-1}reset(){this.index=-1,this.line=0,this.charPos=-1,this.dfaState=void 0}}}(E=r.LexerATNSimulator||(r.LexerATNSimulator={})),r.LexerATNSimulator=E},{252:252,258:258,260:260,262:262,276:276,279:279,280:280,281:281,284:284,305:305,318:318,326:326,332:332,343:343,346:346,358:358}],283:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(288),s=t(350),a=t(279),u=t(282),l=t(286),c=t(290),h=t(291),p=t(292),d=t(353),f=t(293),y=t(294),m=t(299),g=t(344),v=t(300),T=t(359),_=t(302),E=t(306),b=t(307),S=t(309),x=t(310),C=t(311),A=t(312),N=t(313),O=t(314),w=t(316),R=t(252),L=t(317),P=t(320),I=t(321),D=t(322),U=t(323),M=t(325),k=t(330),F=t(331),j=t(332),B=t(333),H=t(335),G=t(337),z=t(339),W=t(338),V=t(276),$=t(340),q=t(364),Y=t(342);var K;!function(t){t[t.UNICODE_BMP=0]="UNICODE_BMP",t[t.UNICODE_SMP=1]="UNICODE_SMP"}(K||(K={}));class X{constructor(t){null==t&&(t=u.ATNDeserializationOptions.defaultOptions),this.deserializationOptions=t}static get SERIALIZED_VERSION(){return 3}static isFeatureSupported(t,e){let r=X.SUPPORTED_UUIDS.findIndex(e=>e.equals(t));return!(r<0)&&X.SUPPORTED_UUIDS.findIndex(t=>t.equals(e))>=r}static getUnicodeDeserializer(t){return 0===t?{readUnicode:(t,e)=>X.toInt(t[e]),size:1}:{readUnicode:(t,e)=>X.toInt32(t,e),size:2}}deserialize(t){t=t.slice(0);for(let o=1;o<t.length;o++)t[o]=t[o]-2&65535;let e=0,r=X.toInt(t[e++]);if(r!==X.SERIALIZED_VERSION){let t=`Could not deserialize ATN with version ${r} (expected ${X.SERIALIZED_VERSION}).`;throw new Error(t)}let n=X.toUUID(t,e);if(e+=8,X.SUPPORTED_UUIDS.findIndex(t=>t.equals(n))<0){let t=`Could not deserialize ATN with UUID ${n} (expected ${X.SERIALIZED_UUID} or a legacy UUID).`;throw new Error(t)}let i=X.isFeatureSupported(X.ADDED_LEXER_ACTIONS,n),u=X.toInt(t[e++]),d=X.toInt(t[e++]),m=new a.ATN(u,d),T=[],E=[],S=X.toInt(t[e++]);for(let o=0;o<S;o++){let r=X.toInt(t[e++]);if(r===l.ATNStateType.INVALID_TYPE){m.addState(new _.InvalidState);continue}let n=X.toInt(t[e++]);65535===n&&(n=-1);let i=this.stateFactory(r,n);if(r===l.ATNStateType.LOOP_END){let r=X.toInt(t[e++]);T.push([i,r])}else if(i instanceof y.BlockStartState){let r=X.toInt(t[e++]);E.push([i,r])}m.addState(i)}for(let o of T)o[0].loopBackState=m.states[o[1]];for(let o of E)o[0].endState=m.states[o[1]];let x=X.toInt(t[e++]);for(let o=0;o<x;o++){let r=X.toInt(t[e++]);m.states[r].nonGreedy=!0}let C=X.toInt(t[e++]);for(let o=0;o<C;o++){let r=X.toInt(t[e++]);m.states[r].sll=!0}let A=X.toInt(t[e++]);for(let o=0;o<A;o++){let r=X.toInt(t[e++]);m.states[r].isPrecedenceRule=!0}let N=X.toInt(t[e++]);0===m.grammarType&&(m.ruleToTokenType=new Int32Array(N)),m.ruleToStartState=new Array(N);for(let o=0;o<N;o++){let r=X.toInt(t[e++]),i=m.states[r];if(i.leftFactored=0!==X.toInt(t[e++]),m.ruleToStartState[o]=i,0===m.grammarType){let r=X.toInt(t[e++]);if(65535===r&&(r=V.Token.EOF),m.ruleToTokenType[o]=r,!X.isFeatureSupported(X.ADDED_LEXER_ACTIONS,n)){let r=X.toInt(t[e++]);65535===r&&(r=-1)}}}m.ruleToStopState=new Array(N);for(let o of m.states)o instanceof j.RuleStopState&&(m.ruleToStopState[o.ruleIndex]=o,m.ruleToStartState[o.ruleIndex].stopState=o);let O=X.toInt(t[e++]);for(let o=0;o<O;o++){let r=X.toInt(t[e++]);m.modeToStartState.push(m.states[r])}m.modeToDFA=new Array(O);for(let o=0;o<O;o++)m.modeToDFA[o]=new g.DFA(m.modeToStartState[o]);let R=[];e=this.deserializeSets(t,e,R,X.getUnicodeDeserializer(0)),X.isFeatureSupported(X.ADDED_UNICODE_SMP,n)&&(e=this.deserializeSets(t,e,R,X.getUnicodeDeserializer(1)));let L=X.toInt(t[e++]);for(let o=0;o<L;o++){let r=X.toInt(t[e]),n=X.toInt(t[e+1]),i=X.toInt(t[e+2]),o=X.toInt(t[e+3]),s=X.toInt(t[e+4]),a=X.toInt(t[e+5]),u=this.edgeFactory(m,i,r,n,o,s,a,R);m.states[r].addTransition(u),e+=6}let P=new s.Array2DHashSet({hashCode:t=>t.stopState^t.returnState^t.outermostPrecedenceReturn,equals:(t,e)=>t.stopState===e.stopState&&t.returnState===e.returnState&&t.outermostPrecedenceReturn===e.outermostPrecedenceReturn}),U=[];for(let o of m.states){let t=o.ruleIndex>=0&&m.ruleToStartState[o.ruleIndex].leftFactored;for(let e=0;e<o.numberOfTransitions;e++){let r=o.transition(e);if(!(r instanceof B.RuleTransition))continue;let n=r;if(!m.ruleToStartState[n.target.ruleIndex].leftFactored&&t)continue;let i=-1;m.ruleToStartState[n.target.ruleIndex].isPrecedenceRule&&0===n.precedence&&(i=n.target.ruleIndex);let s={stopState:n.target.ruleIndex,returnState:n.followState.stateNumber,outermostPrecedenceReturn:i};P.add(s)&&U.push(s)}}for(let o of U){let t=new v.EpsilonTransition(m.states[o.returnState],o.outermostPrecedenceReturn);m.ruleToStopState[o.stopState].addTransition(t)}for(let o of m.states){if(o instanceof y.BlockStartState){if(null==o.endState)throw new Error("IllegalStateException");if(null!=o.endState.startState)throw new Error("IllegalStateException");o.endState.startState=o}if(o instanceof D.PlusLoopbackState){let t=o;for(let e=0;e<t.numberOfTransitions;e++){let r=t.transition(e).target;r instanceof I.PlusBlockStartState&&(r.loopBackState=t)}}else if(o instanceof z.StarLoopbackState){let t=o;for(let e=0;e<t.numberOfTransitions;e++){let r=t.transition(e).target;r instanceof W.StarLoopEntryState&&(r.loopBackState=t)}}}let M=X.toInt(t[e++]);for(let o=1;o<=M;o++){let r=X.toInt(t[e++]),n=m.states[r];m.decisionToState.push(n),n.decision=o-1}if(0===m.grammarType)if(i){m.lexerActions=new Array(X.toInt(t[e++]));for(let r=0;r<m.lexerActions.length;r++){let n=X.toInt(t[e++]),i=X.toInt(t[e++]);65535===i&&(i=-1);let o=X.toInt(t[e++]);65535===o&&(o=-1);let s=this.lexerActionFactory(n,i,o);m.lexerActions[r]=s}}else{let t=[];for(let e of m.states)for(let r=0;r<e.numberOfTransitions;r++){let n=e.transition(r);if(!(n instanceof o.ActionTransition))continue;let i=n.ruleIndex,s=n.actionIndex,a=new b.LexerCustomAction(i,s);e.setTransition(r,new o.ActionTransition(n.target,i,t.length,!1)),t.push(a)}m.lexerActions=t}this.markPrecedenceDecisions(m),m.decisionToDFA=new Array(M);for(let o=0;o<M;o++)m.decisionToDFA[o]=new g.DFA(m.decisionToState[o],o);if(this.deserializationOptions.isVerifyATN&&this.verifyATN(m),this.deserializationOptions.isGenerateRuleBypassTransitions&&1===m.grammarType){m.ruleToTokenType=new Int32Array(m.ruleToStartState.length);for(let t=0;t<m.ruleToStartState.length;t++)m.ruleToTokenType[t]=m.maxTokenType+t+1;for(let t=0;t<m.ruleToStartState.length;t++){let e=new h.BasicBlockStartState;e.ruleIndex=t,m.addState(e);let r,n,i=new f.BlockEndState;if(i.ruleIndex=t,m.addState(i),e.endState=i,m.defineDecisionState(e),i.startState=e,m.ruleToStartState[t].isPrecedenceRule){r=void 0;for(let e of m.states){if(e.ruleIndex!==t)continue;if(!(e instanceof W.StarLoopEntryState))continue;let n=e.transition(e.numberOfTransitions-1).target;if(n instanceof w.LoopEndState&&n.epsilonOnlyTransitions&&n.transition(0).target instanceof j.RuleStopState){r=e;break}}if(!r)throw new Error("Couldn't identify final state of the precedence rule prefix section.");n=r.loopBackState.transition(0)}else r=m.ruleToStopState[t];for(let t of m.states)for(let e=0;e<t.numberOfTransitions;e++){let o=t.transition(e);o!==n&&o.target===r&&(o.target=i)}for(;m.ruleToStartState[t].numberOfTransitions>0;){let r=m.ruleToStartState[t].removeTransition(m.ruleToStartState[t].numberOfTransitions-1);e.addTransition(r)}m.ruleToStartState[t].addTransition(new v.EpsilonTransition(e)),i.addTransition(new v.EpsilonTransition(r));let o=new p.BasicState;m.addState(o),o.addTransition(new c.AtomTransition(i,m.ruleToTokenType[t])),e.addTransition(new v.EpsilonTransition(o))}this.deserializationOptions.isVerifyATN&&this.verifyATN(m)}if(this.deserializationOptions.isOptimize){for(;;){let t=0;t+=X.inlineSetRules(m),t+=X.combineChainedEpsilons(m);let e=0===m.grammarType;if(0===(t+=X.optimizeSets(m,e)))break}this.deserializationOptions.isVerifyATN&&this.verifyATN(m)}return X.identifyTailCalls(m),m}deserializeSets(t,e,r,n){let i=X.toInt(t[e++]);for(let o=0;o<i;o++){let i=X.toInt(t[e]);e++;let o=new T.IntervalSet;r.push(o),0!==X.toInt(t[e++])&&o.add(-1);for(let r=0;r<i;r++){let r=n.readUnicode(t,e);e+=n.size;let i=n.readUnicode(t,e);e+=n.size,o.add(r,i)}}return e}markPrecedenceDecisions(t){let e=new Map;for(let r of t.states)if(r instanceof W.StarLoopEntryState&&t.ruleToStartState[r.ruleIndex].isPrecedenceRule){let n=r.transition(r.numberOfTransitions-1).target;n instanceof w.LoopEndState&&n.epsilonOnlyTransitions&&n.transition(0).target instanceof j.RuleStopState&&(e.set(r.ruleIndex,r),r.precedenceRuleDecision=!0,r.precedenceLoopbackStates=new d.BitSet(t.states.length))}for(let r of e)for(let e of t.ruleToStopState[r[0]].getTransitions())1===e.serializationType&&-1===e.outermostPrecedenceReturn&&r[1].precedenceLoopbackStates.set(e.target.stateNumber)}verifyATN(t){for(let e of t.states)if(this.checkCondition(null!=e,"ATN states should not be null."),e.stateType!==l.ATNStateType.INVALID_TYPE){if(this.checkCondition(e.onlyHasEpsilonTransitions||e.numberOfTransitions<=1),e instanceof I.PlusBlockStartState&&this.checkCondition(null!=e.loopBackState),e instanceof W.StarLoopEntryState){let t=e;if(this.checkCondition(null!=t.loopBackState),this.checkCondition(2===t.numberOfTransitions),t.transition(0).target instanceof G.StarBlockStartState)this.checkCondition(t.transition(1).target instanceof w.LoopEndState),this.checkCondition(!t.nonGreedy);else{if(!(t.transition(0).target instanceof w.LoopEndState))throw new Error("IllegalStateException");this.checkCondition(t.transition(1).target instanceof G.StarBlockStartState),this.checkCondition(t.nonGreedy)}}if(e instanceof z.StarLoopbackState&&(this.checkCondition(1===e.numberOfTransitions),this.checkCondition(e.transition(0).target instanceof W.StarLoopEntryState)),e instanceof w.LoopEndState&&this.checkCondition(null!=e.loopBackState),e instanceof F.RuleStartState&&this.checkCondition(null!=e.stopState),e instanceof y.BlockStartState&&this.checkCondition(null!=e.endState),e instanceof f.BlockEndState&&this.checkCondition(null!=e.startState),e instanceof m.DecisionState){let t=e;this.checkCondition(t.numberOfTransitions<=1||t.decision>=0)}else this.checkCondition(e.numberOfTransitions<=1||e instanceof j.RuleStopState)}}checkCondition(t,e){if(!t)throw new Error("IllegalStateException: "+e)}static inlineSetRules(t){let e=0,r=new Array(t.ruleToStartState.length);for(let n=0;n<t.ruleToStartState.length;n++){let e=t.ruleToStartState[n];for(;e.onlyHasEpsilonTransitions&&1===e.numberOfOptimizedTransitions&&1===e.getOptimizedTransition(0).serializationType;)e=e.getOptimizedTransition(0).target;if(1!==e.numberOfOptimizedTransitions)continue;let i=e.getOptimizedTransition(0),o=i.target;if(!i.isEpsilon&&o.onlyHasEpsilonTransitions&&1===o.numberOfOptimizedTransitions&&o.getOptimizedTransition(0).target instanceof j.RuleStopState)switch(i.serializationType){case 5:case 2:case 7:r[n]=i;break;case 8:case 9:default:continue}}for(let n of t.states){if(n.ruleIndex<0)continue;let i;for(let o=0;o<n.numberOfOptimizedTransitions;o++){let s=n.getOptimizedTransition(o);if(!(s instanceof B.RuleTransition)){null!=i&&i.push(s);continue}let a=s,u=r[a.target.ruleIndex];if(null==u){null!=i&&i.push(s);continue}if(null==i){i=[];for(let t=0;t<o;t++)i.push(n.getOptimizedTransition(o))}e++;let l=a.followState,h=new p.BasicState;switch(h.setRuleIndex(l.ruleIndex),t.addState(h),i.push(new v.EpsilonTransition(h)),u.serializationType){case 5:h.addTransition(new c.AtomTransition(l,u._label));break;case 2:h.addTransition(new k.RangeTransition(l,u.from,u.to));break;case 7:h.addTransition(new H.SetTransition(l,u.label));break;default:throw new Error("UnsupportedOperationException")}}if(null!=i){if(n.isOptimized)for(;n.numberOfOptimizedTransitions>0;)n.removeOptimizedTransition(n.numberOfOptimizedTransitions-1);for(let t of i)n.addOptimizedTransition(t)}}return P.ParserATNSimulator.debug&&console.log("ATN runtime optimizer removed "+e+" rule invocations by inlining sets."),e}static combineChainedEpsilons(t){let e=0;for(let r of t.states){if(!r.onlyHasEpsilonTransitions||r instanceof j.RuleStopState)continue;let t;t:for(let n=0;n<r.numberOfOptimizedTransitions;n++){let i=r.getOptimizedTransition(n),o=i.target;if(1===i.serializationType&&-1===i.outermostPrecedenceReturn&&o.stateType===l.ATNStateType.BASIC&&o.onlyHasEpsilonTransitions){for(let e=0;e<o.numberOfOptimizedTransitions;e++)if(1!==o.getOptimizedTransition(e).serializationType||-1!==o.getOptimizedTransition(e).outermostPrecedenceReturn){null!=t&&t.push(i);continue t}if(e++,null==t){t=[];for(let e=0;e<n;e++)t.push(r.getOptimizedTransition(e))}for(let e=0;e<o.numberOfOptimizedTransitions;e++){let r=o.getOptimizedTransition(e).target;t.push(new v.EpsilonTransition(r))}}else null!=t&&t.push(i)}if(null!=t){if(r.isOptimized)for(;r.numberOfOptimizedTransitions>0;)r.removeOptimizedTransition(r.numberOfOptimizedTransitions-1);for(let e of t)r.addOptimizedTransition(e)}}return P.ParserATNSimulator.debug&&console.log("ATN runtime optimizer removed "+e+" transitions by combining chained epsilon transitions."),e}static optimizeSets(t,e){if(e)return 0;let r=0,n=t.decisionToState;for(let i of n){let e=new T.IntervalSet;for(let t=0;t<i.numberOfOptimizedTransitions;t++){let r=i.getOptimizedTransition(t);if(!(r instanceof v.EpsilonTransition))continue;if(1!==r.target.numberOfOptimizedTransitions)continue;let n=r.target.getOptimizedTransition(0);n.target instanceof f.BlockEndState&&(n instanceof L.NotSetTransition||(n instanceof c.AtomTransition||n instanceof k.RangeTransition||n instanceof H.SetTransition)&&e.add(t))}if(e.size<=1)continue;let n=[];for(let t=0;t<i.numberOfOptimizedTransitions;t++)e.contains(t)||n.push(i.getOptimizedTransition(t));let o,s=i.getOptimizedTransition(e.minElement).target.getOptimizedTransition(0).target,a=new T.IntervalSet;for(let t of e.intervals)for(let e=t.a;e<=t.b;e++){let t=i.getOptimizedTransition(e).target.getOptimizedTransition(0);if(t instanceof L.NotSetTransition)throw new Error("Not yet implemented.");a.addAll(t.label)}if(1===a.intervals.length)if(1===a.size)o=new c.AtomTransition(s,a.minElement);else{let t=a.intervals[0];o=new k.RangeTransition(s,t.a,t.b)}else o=new H.SetTransition(s,a);let u=new p.BasicState;if(u.setRuleIndex(i.ruleIndex),t.addState(u),u.addTransition(o),n.push(new v.EpsilonTransition(u)),r+=i.numberOfOptimizedTransitions-n.length,i.isOptimized)for(;i.numberOfOptimizedTransitions>0;)i.removeOptimizedTransition(i.numberOfOptimizedTransitions-1);for(let t of n)i.addOptimizedTransition(t)}return P.ParserATNSimulator.debug&&console.log("ATN runtime optimizer removed "+r+" paths by collapsing sets."),r}static identifyTailCalls(t){for(let e of t.states){for(let r=0;r<e.numberOfTransitions;r++){let n=e.transition(r);n instanceof B.RuleTransition&&(n.tailCall=this.testTailCall(t,n,!1),n.optimizedTailCall=this.testTailCall(t,n,!0))}if(e.isOptimized)for(let r=0;r<e.numberOfOptimizedTransitions;r++){let n=e.getOptimizedTransition(r);n instanceof B.RuleTransition&&(n.tailCall=this.testTailCall(t,n,!1),n.optimizedTailCall=this.testTailCall(t,n,!0))}}}static testTailCall(t,e,r){if(!r&&e.tailCall)return!0;if(r&&e.optimizedTailCall)return!0;let n=new d.BitSet(t.states.length),i=[];for(i.push(e.followState);;){let t=i.pop();if(!t)break;if(n.get(t.stateNumber))continue;if(t instanceof j.RuleStopState)continue;if(!t.onlyHasEpsilonTransitions)return!1;let e=r?t.numberOfOptimizedTransitions:t.numberOfTransitions;for(let n=0;n<e;n++){let e=r?t.getOptimizedTransition(n):t.transition(n);if(1!==e.serializationType)return!1;i.push(e.target)}}return!0}static toInt(t){return t}static toInt32(t,e){return(t[e]|t[e+1]<<16)>>>0}static toUUID(t,e){let r=X.toInt32(t,e),n=X.toInt32(t,e+2),i=X.toInt32(t,e+4),o=X.toInt32(t,e+6);return new q.UUID(o,i,n,r)}edgeFactory(t,e,r,n,i,s,a,u){let l=t.states[n];switch(e){case 1:return new v.EpsilonTransition(l);case 2:return 0!==a?new k.RangeTransition(l,V.Token.EOF,s):new k.RangeTransition(l,i,s);case 3:return new B.RuleTransition(t.states[i],s,a,l);case 4:return new M.PredicateTransition(l,i,s,0!==a);case 10:return new U.PrecedencePredicateTransition(l,i);case 5:return 0!==a?new c.AtomTransition(l,V.Token.EOF):new c.AtomTransition(l,i);case 6:return new o.ActionTransition(l,i,s,0!==a);case 7:return new H.SetTransition(l,u[i]);case 8:return new L.NotSetTransition(l,u[i]);case 9:return new Y.WildcardTransition(l)}throw new Error("The specified transition type is not valid.")}stateFactory(t,e){let r;switch(t){case l.ATNStateType.INVALID_TYPE:return new _.InvalidState;case l.ATNStateType.BASIC:r=new p.BasicState;break;case l.ATNStateType.RULE_START:r=new F.RuleStartState;break;case l.ATNStateType.BLOCK_START:r=new h.BasicBlockStartState;break;case l.ATNStateType.PLUS_BLOCK_START:r=new I.PlusBlockStartState;break;case l.ATNStateType.STAR_BLOCK_START:r=new G.StarBlockStartState;break;case l.ATNStateType.TOKEN_START:r=new $.TokensStartState;break;case l.ATNStateType.RULE_STOP:r=new j.RuleStopState;break;case l.ATNStateType.BLOCK_END:r=new f.BlockEndState;break;case l.ATNStateType.STAR_LOOP_BACK:r=new z.StarLoopbackState;break;case l.ATNStateType.STAR_LOOP_ENTRY:r=new W.StarLoopEntryState;break;case l.ATNStateType.PLUS_LOOP_BACK:r=new D.PlusLoopbackState;break;case l.ATNStateType.LOOP_END:r=new w.LoopEndState;break;default:throw new Error(`The specified state type ${t} is not valid.`)}return r.ruleIndex=e,r}lexerActionFactory(t,e,r){switch(t){case 0:return new E.LexerChannelAction(e);case 1:return new b.LexerCustomAction(e,r);case 2:return new S.LexerModeAction(e);case 3:return x.LexerMoreAction.INSTANCE;case 4:return C.LexerPopModeAction.INSTANCE;case 5:return new A.LexerPushModeAction(e);case 6:return N.LexerSkipAction.INSTANCE;case 7:return new O.LexerTypeAction(e);default:throw new Error(`The specified lexer action type ${t} is not valid.`)}}}X.BASE_SERIALIZED_UUID=q.UUID.fromString("E4178468-DF95-44D0-AD87-F22A5D5FB6D3"),X.ADDED_LEXER_ACTIONS=q.UUID.fromString("AB35191A-1603-487E-B75A-479B831EAF6D"),X.ADDED_UNICODE_SMP=q.UUID.fromString("C23FEA89-0605-4f51-AFB8-058BCAB8C91B"),X.SUPPORTED_UUIDS=[X.BASE_SERIALIZED_UUID,X.ADDED_LEXER_ACTIONS,X.ADDED_UNICODE_SMP],X.SERIALIZED_UUID=X.ADDED_UNICODE_SMP,n([R.NotNull],X.prototype,"deserializationOptions",void 0),n([i(0,R.NotNull)],X.prototype,"deserialize",null),n([i(0,R.NotNull)],X.prototype,"markPrecedenceDecisions",null),n([R.NotNull,i(0,R.NotNull)],X.prototype,"edgeFactory",null),r.ATNDeserializer=X},{252:252,276:276,279:279,282:282,286:286,288:288,290:290,291:291,292:292,293:293,294:294,299:299,300:300,302:302,306:306,307:307,309:309,310:310,311:311,312:312,313:313,314:314,316:316,317:317,320:320,321:321,322:322,323:323,325:325,330:330,331:331,332:332,333:333,335:335,337:337,338:338,339:339,340:340,342:342,344:344,350:350,353:353,359:359,364:364}],198:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(283),o=t(264),s=t(265),a=t(267),u=t(320),l=t(270),c=t(276),h=t(278),p=n(t(365));class d extends s.Parser{constructor(t){super(t),this._interp=new u.ParserATNSimulator(d._ATN,this)}get vocabulary(){return d.VOCABULARY}get grammarFileName(){return"CommonRegex.g4"}get ruleNames(){return d.ruleNames}get serializedATN(){return d._serializedATN}parse(){let t=new f(this._ctx,this.state);this.enterRule(t,0,d.RULE_parse);try{this.enterOuterAlt(t,1),this.state=54,this.alternation(),this.state=55,this.match(d.EOF)}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}alternation(){let t,e=new y(this._ctx,this.state);this.enterRule(e,2,d.RULE_alternation);try{for(this.enterOuterAlt(e,1),this.state=57,this.expr(),this.state=62,this._errHandler.sync(this),t=this._input.LA(1);t===d.Pipe;)this.state=58,this.match(d.Pipe),this.state=59,this.expr(),this.state=64,this._errHandler.sync(this),t=this._input.LA(1)}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}expr(){let t,e=new m(this._ctx,this.state);this.enterRule(e,4,d.RULE_expr);try{for(this.enterOuterAlt(e,1),this.state=68,this._errHandler.sync(this),t=this._input.LA(1);0==(-32&t)&&0!=(1<<t&(1<<d.Quoted|1<<d.BlockQuoted|1<<d.BellChar|1<<d.ControlChar|1<<d.EscapeChar|1<<d.FormFeed|1<<d.NewLine|1<<d.CarriageReturn|1<<d.Tab|1<<d.Backslash|1<<d.HexChar|1<<d.Dot|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar|1<<d.CharacterClassStart|1<<d.CharacterClassEnd|1<<d.Caret|1<<d.Hyphen|1<<d.OpenBrace|1<<d.CloseBrace|1<<d.Comma|1<<d.EndOfSubject))||0==(t-33&-32)&&0!=(1<<t-33&(1<<d.OpenParen-33|1<<d.LessThan-33|1<<d.GreaterThan-33|1<<d.SingleQuote-33|1<<d.Underscore-33|1<<d.Colon-33|1<<d.Hash-33|1<<d.Equals-33|1<<d.Exclamation-33|1<<d.Ampersand-33|1<<d.ALC-33|1<<d.BLC-33|1<<d.CLC-33|1<<d.DLC-33|1<<d.ELC-33|1<<d.FLC-33|1<<d.GLC-33|1<<d.HLC-33|1<<d.ILC-33|1<<d.JLC-33|1<<d.KLC-33|1<<d.LLC-33|1<<d.MLC-33|1<<d.NLC-33|1<<d.OLC-33|1<<d.PLC-33|1<<d.QLC-33|1<<d.RLC-33|1<<d.SLC-33|1<<d.TLC-33|1<<d.ULC-33))||0==(t-65&-32)&&0!=(1<<t-65&(1<<d.VLC-65|1<<d.WLC-65|1<<d.XLC-65|1<<d.YLC-65|1<<d.ZLC-65|1<<d.AUC-65|1<<d.BUC-65|1<<d.CUC-65|1<<d.DUC-65|1<<d.EUC-65|1<<d.FUC-65|1<<d.GUC-65|1<<d.HUC-65|1<<d.IUC-65|1<<d.JUC-65|1<<d.KUC-65|1<<d.LUC-65|1<<d.MUC-65|1<<d.NUC-65|1<<d.OUC-65|1<<d.PUC-65|1<<d.QUC-65|1<<d.RUC-65|1<<d.SUC-65|1<<d.TUC-65|1<<d.UUC-65|1<<d.VUC-65|1<<d.WUC-65|1<<d.XUC-65|1<<d.YUC-65|1<<d.ZUC-65|1<<d.D1-65))||0==(t-97&-32)&&0!=(1<<t-97&(1<<d.D2-97|1<<d.D3-97|1<<d.D4-97|1<<d.D5-97|1<<d.D6-97|1<<d.D7-97|1<<d.D8-97|1<<d.D9-97|1<<d.D0-97|1<<d.OtherChar-97));)this.state=65,this.element(),this.state=70,this._errHandler.sync(this),t=this._input.LA(1)}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}element(){let t=new g(this._ctx,this.state);this.enterRule(t,6,d.RULE_element);try{switch(this.enterOuterAlt(t,1),this.state=71,this.atom(),this.state=73,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,2,this._ctx)){case 1:this.state=72,this.quantifier()}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}quantifier(){let t=new v(this._ctx,this.state);this.enterRule(t,8,d.RULE_quantifier);try{switch(this.state=99,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,3,this._ctx)){case 1:this.enterOuterAlt(t,1),this.state=75,this.match(d.QuestionMark),this.state=76,this.quantifier_type();break;case 2:this.enterOuterAlt(t,2),this.state=77,this.match(d.Plus),this.state=78,this.quantifier_type();break;case 3:this.enterOuterAlt(t,3),this.state=79,this.match(d.Star),this.state=80,this.quantifier_type();break;case 4:this.enterOuterAlt(t,4),this.state=81,this.match(d.OpenBrace),this.state=82,this.number(),this.state=83,this.match(d.CloseBrace),this.state=84,this.quantifier_type();break;case 5:this.enterOuterAlt(t,5),this.state=86,this.match(d.OpenBrace),this.state=87,this.number(),this.state=88,this.match(d.Comma),this.state=89,this.match(d.CloseBrace),this.state=90,this.quantifier_type();break;case 6:this.enterOuterAlt(t,6),this.state=92,this.match(d.OpenBrace),this.state=93,this.number(),this.state=94,this.match(d.Comma),this.state=95,this.number(),this.state=96,this.match(d.CloseBrace),this.state=97,this.quantifier_type()}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}quantifier_type(){let t=new T(this._ctx,this.state);this.enterRule(t,10,d.RULE_quantifier_type);try{switch(this.state=104,this._errHandler.sync(this),this._input.LA(1)){case d.Plus:this.enterOuterAlt(t,1),this.state=101,this.match(d.Plus);break;case d.QuestionMark:this.enterOuterAlt(t,2),this.state=102,this.match(d.QuestionMark);break;case d.EOF:case d.Quoted:case d.BlockQuoted:case d.BellChar:case d.ControlChar:case d.EscapeChar:case d.FormFeed:case d.NewLine:case d.CarriageReturn:case d.Tab:case d.Backslash:case d.HexChar:case d.Dot:case d.DecimalDigit:case d.NotDecimalDigit:case d.CharWithProperty:case d.CharWithoutProperty:case d.WhiteSpace:case d.NotWhiteSpace:case d.WordChar:case d.NotWordChar:case d.CharacterClassStart:case d.CharacterClassEnd:case d.Caret:case d.Hyphen:case d.OpenBrace:case d.CloseBrace:case d.Comma:case d.EndOfSubject:case d.Pipe:case d.OpenParen:case d.CloseParen:case d.LessThan:case d.GreaterThan:case d.SingleQuote:case d.Underscore:case d.Colon:case d.Hash:case d.Equals:case d.Exclamation:case d.Ampersand:case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:case d.OtherChar:this.enterOuterAlt(t,3);break;default:throw new o.NoViableAltException(this)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}character_class(){let t,e=new _(this._ctx,this.state);this.enterRule(e,12,d.RULE_character_class);try{switch(this.state=123,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,7,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=106,this.match(d.CharacterClassStart),this.state=107,this.match(d.Caret),this.state=109,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=108,this.cc_atom(),this.state=111,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(-32&t)&&0!=(1<<t&(1<<d.Quoted|1<<d.BlockQuoted|1<<d.BellChar|1<<d.ControlChar|1<<d.EscapeChar|1<<d.FormFeed|1<<d.NewLine|1<<d.CarriageReturn|1<<d.Tab|1<<d.Backslash|1<<d.HexChar|1<<d.Dot|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar|1<<d.CharacterClassStart|1<<d.Caret|1<<d.Hyphen|1<<d.QuestionMark|1<<d.Plus|1<<d.Star|1<<d.OpenBrace|1<<d.CloseBrace|1<<d.Comma|1<<d.EndOfSubject))||0==(t-32&-32)&&0!=(1<<t-32&(1<<d.Pipe-32|1<<d.OpenParen-32|1<<d.CloseParen-32|1<<d.LessThan-32|1<<d.GreaterThan-32|1<<d.SingleQuote-32|1<<d.Underscore-32|1<<d.Colon-32|1<<d.Hash-32|1<<d.Equals-32|1<<d.Exclamation-32|1<<d.Ampersand-32|1<<d.ALC-32|1<<d.BLC-32|1<<d.CLC-32|1<<d.DLC-32|1<<d.ELC-32|1<<d.FLC-32|1<<d.GLC-32|1<<d.HLC-32|1<<d.ILC-32|1<<d.JLC-32|1<<d.KLC-32|1<<d.LLC-32|1<<d.MLC-32|1<<d.NLC-32|1<<d.OLC-32|1<<d.PLC-32|1<<d.QLC-32|1<<d.RLC-32|1<<d.SLC-32|1<<d.TLC-32))||0==(t-64&-32)&&0!=(1<<t-64&(1<<d.ULC-64|1<<d.VLC-64|1<<d.WLC-64|1<<d.XLC-64|1<<d.YLC-64|1<<d.ZLC-64|1<<d.AUC-64|1<<d.BUC-64|1<<d.CUC-64|1<<d.DUC-64|1<<d.EUC-64|1<<d.FUC-64|1<<d.GUC-64|1<<d.HUC-64|1<<d.IUC-64|1<<d.JUC-64|1<<d.KUC-64|1<<d.LUC-64|1<<d.MUC-64|1<<d.NUC-64|1<<d.OUC-64|1<<d.PUC-64|1<<d.QUC-64|1<<d.RUC-64|1<<d.SUC-64|1<<d.TUC-64|1<<d.UUC-64|1<<d.VUC-64|1<<d.WUC-64|1<<d.XUC-64|1<<d.YUC-64|1<<d.ZUC-64))||0==(t-96&-32)&&0!=(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96|1<<d.OtherChar-96)));this.state=113,this.match(d.CharacterClassEnd);break;case 2:this.enterOuterAlt(e,2),this.state=115,this.match(d.CharacterClassStart),this.state=117,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=116,this.cc_atom(),this.state=119,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(-32&t)&&0!=(1<<t&(1<<d.Quoted|1<<d.BlockQuoted|1<<d.BellChar|1<<d.ControlChar|1<<d.EscapeChar|1<<d.FormFeed|1<<d.NewLine|1<<d.CarriageReturn|1<<d.Tab|1<<d.Backslash|1<<d.HexChar|1<<d.Dot|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar|1<<d.CharacterClassStart|1<<d.Caret|1<<d.Hyphen|1<<d.QuestionMark|1<<d.Plus|1<<d.Star|1<<d.OpenBrace|1<<d.CloseBrace|1<<d.Comma|1<<d.EndOfSubject))||0==(t-32&-32)&&0!=(1<<t-32&(1<<d.Pipe-32|1<<d.OpenParen-32|1<<d.CloseParen-32|1<<d.LessThan-32|1<<d.GreaterThan-32|1<<d.SingleQuote-32|1<<d.Underscore-32|1<<d.Colon-32|1<<d.Hash-32|1<<d.Equals-32|1<<d.Exclamation-32|1<<d.Ampersand-32|1<<d.ALC-32|1<<d.BLC-32|1<<d.CLC-32|1<<d.DLC-32|1<<d.ELC-32|1<<d.FLC-32|1<<d.GLC-32|1<<d.HLC-32|1<<d.ILC-32|1<<d.JLC-32|1<<d.KLC-32|1<<d.LLC-32|1<<d.MLC-32|1<<d.NLC-32|1<<d.OLC-32|1<<d.PLC-32|1<<d.QLC-32|1<<d.RLC-32|1<<d.SLC-32|1<<d.TLC-32))||0==(t-64&-32)&&0!=(1<<t-64&(1<<d.ULC-64|1<<d.VLC-64|1<<d.WLC-64|1<<d.XLC-64|1<<d.YLC-64|1<<d.ZLC-64|1<<d.AUC-64|1<<d.BUC-64|1<<d.CUC-64|1<<d.DUC-64|1<<d.EUC-64|1<<d.FUC-64|1<<d.GUC-64|1<<d.HUC-64|1<<d.IUC-64|1<<d.JUC-64|1<<d.KUC-64|1<<d.LUC-64|1<<d.MUC-64|1<<d.NUC-64|1<<d.OUC-64|1<<d.PUC-64|1<<d.QUC-64|1<<d.RUC-64|1<<d.SUC-64|1<<d.TUC-64|1<<d.UUC-64|1<<d.VUC-64|1<<d.WUC-64|1<<d.XUC-64|1<<d.YUC-64|1<<d.ZUC-64))||0==(t-96&-32)&&0!=(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96|1<<d.OtherChar-96)));this.state=121,this.match(d.CharacterClassEnd)}}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}capture(){let t=new E(this._ctx,this.state);this.enterRule(t,14,d.RULE_capture);try{switch(this.state=137,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,8,this._ctx)){case 1:this.enterOuterAlt(t,1),this.state=125,this.match(d.OpenParen),this.state=126,this.match(d.QuestionMark),this.state=127,this.match(d.LessThan),this.state=128,this.name(),this.state=129,this.match(d.GreaterThan),this.state=130,this.alternation(),this.state=131,this.match(d.CloseParen);break;case 2:this.enterOuterAlt(t,2),this.state=133,this.match(d.OpenParen),this.state=134,this.alternation(),this.state=135,this.match(d.CloseParen)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}non_capture(){let t=new b(this._ctx,this.state);this.enterRule(t,16,d.RULE_non_capture);try{this.enterOuterAlt(t,1),this.state=139,this.match(d.OpenParen),this.state=140,this.match(d.QuestionMark),this.state=141,this.match(d.Colon),this.state=142,this.alternation(),this.state=143,this.match(d.CloseParen)}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}option(){let t,e=new S(this._ctx,this.state);this.enterRule(e,18,d.RULE_option);try{this.enterOuterAlt(e,1),this.state=145,this.match(d.OpenParen),this.state=146,this.match(d.QuestionMark),this.state=148,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=147,this.option_flag(),this.state=150,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(t-52&-32)&&0!=(1<<t-52&(1<<d.ILC-52|1<<d.MLC-52|1<<d.SLC-52)));this.state=152,this.match(d.CloseParen)}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}option_flag(){let t,e=new x(this._ctx,this.state);this.enterRule(e,20,d.RULE_option_flag);try{this.enterOuterAlt(e,1),this.state=154,0!=((t=this._input.LA(1))-52&-32)||0==(1<<t-52&(1<<d.ILC-52|1<<d.MLC-52|1<<d.SLC-52))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}atom(){let t=new C(this._ctx,this.state);this.enterRule(t,22,d.RULE_atom);try{switch(this.state=165,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,10,this._ctx)){case 1:this.enterOuterAlt(t,1),this.state=156,this.shared_atom();break;case 2:this.enterOuterAlt(t,2),this.state=157,this.literal();break;case 3:this.enterOuterAlt(t,3),this.state=158,this.character_class();break;case 4:this.enterOuterAlt(t,4),this.state=159,this.capture();break;case 5:this.enterOuterAlt(t,5),this.state=160,this.non_capture();break;case 6:this.enterOuterAlt(t,6),this.state=161,this.option();break;case 7:this.enterOuterAlt(t,7),this.state=162,this.match(d.Dot);break;case 8:this.enterOuterAlt(t,8),this.state=163,this.match(d.Caret);break;case 9:this.enterOuterAlt(t,9),this.state=164,this.match(d.EndOfSubject)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}cc_atom(){let t=new A(this._ctx,this.state);this.enterRule(t,24,d.RULE_cc_atom);try{switch(this.state=173,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,11,this._ctx)){case 1:this.enterOuterAlt(t,1),this.state=167,this.cc_literal(),this.state=168,this.match(d.Hyphen),this.state=169,this.cc_literal();break;case 2:this.enterOuterAlt(t,2),this.state=171,this.shared_atom();break;case 3:this.enterOuterAlt(t,3),this.state=172,this.cc_literal()}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}shared_atom(){let t,e=new N(this._ctx,this.state);this.enterRule(e,26,d.RULE_shared_atom);try{this.enterOuterAlt(e,1),this.state=175,0!=(-32&(t=this._input.LA(1)))||0==(1<<t&(1<<d.ControlChar|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}literal(){let t=new O(this._ctx,this.state);this.enterRule(t,28,d.RULE_literal);try{switch(this.state=179,this._errHandler.sync(this),this._input.LA(1)){case d.Quoted:case d.BlockQuoted:case d.BellChar:case d.EscapeChar:case d.FormFeed:case d.NewLine:case d.CarriageReturn:case d.Tab:case d.Backslash:case d.HexChar:case d.Hyphen:case d.OpenBrace:case d.CloseBrace:case d.Comma:case d.LessThan:case d.GreaterThan:case d.SingleQuote:case d.Underscore:case d.Colon:case d.Hash:case d.Equals:case d.Exclamation:case d.Ampersand:case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:case d.OtherChar:this.enterOuterAlt(t,1),this.state=177,this.shared_literal();break;case d.CharacterClassEnd:this.enterOuterAlt(t,2),this.state=178,this.match(d.CharacterClassEnd);break;default:throw new o.NoViableAltException(this)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}cc_literal(){let t=new w(this._ctx,this.state);this.enterRule(t,30,d.RULE_cc_literal);try{switch(this.state=192,this._errHandler.sync(this),this._input.LA(1)){case d.Quoted:case d.BlockQuoted:case d.BellChar:case d.EscapeChar:case d.FormFeed:case d.NewLine:case d.CarriageReturn:case d.Tab:case d.Backslash:case d.HexChar:case d.Hyphen:case d.OpenBrace:case d.CloseBrace:case d.Comma:case d.LessThan:case d.GreaterThan:case d.SingleQuote:case d.Underscore:case d.Colon:case d.Hash:case d.Equals:case d.Exclamation:case d.Ampersand:case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:case d.OtherChar:this.enterOuterAlt(t,1),this.state=181,this.shared_literal();break;case d.Dot:this.enterOuterAlt(t,2),this.state=182,this.match(d.Dot);break;case d.CharacterClassStart:this.enterOuterAlt(t,3),this.state=183,this.match(d.CharacterClassStart);break;case d.Caret:this.enterOuterAlt(t,4),this.state=184,this.match(d.Caret);break;case d.QuestionMark:this.enterOuterAlt(t,5),this.state=185,this.match(d.QuestionMark);break;case d.Plus:this.enterOuterAlt(t,6),this.state=186,this.match(d.Plus);break;case d.Star:this.enterOuterAlt(t,7),this.state=187,this.match(d.Star);break;case d.EndOfSubject:this.enterOuterAlt(t,8),this.state=188,this.match(d.EndOfSubject);break;case d.Pipe:this.enterOuterAlt(t,9),this.state=189,this.match(d.Pipe);break;case d.OpenParen:this.enterOuterAlt(t,10),this.state=190,this.match(d.OpenParen);break;case d.CloseParen:this.enterOuterAlt(t,11),this.state=191,this.match(d.CloseParen);break;default:throw new o.NoViableAltException(this)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}shared_literal(){let t=new R(this._ctx,this.state);this.enterRule(t,32,d.RULE_shared_literal);try{switch(this.state=220,this._errHandler.sync(this),this._input.LA(1)){case d.Backslash:this.enterOuterAlt(t,1),this.state=194,this.octal_char();break;case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:this.enterOuterAlt(t,2),this.state=195,this.letter();break;case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:this.enterOuterAlt(t,3),this.state=196,this.digit();break;case d.BellChar:this.enterOuterAlt(t,4),this.state=197,this.match(d.BellChar);break;case d.EscapeChar:this.enterOuterAlt(t,5),this.state=198,this.match(d.EscapeChar);break;case d.FormFeed:this.enterOuterAlt(t,6),this.state=199,this.match(d.FormFeed);break;case d.NewLine:this.enterOuterAlt(t,7),this.state=200,this.match(d.NewLine);break;case d.CarriageReturn:this.enterOuterAlt(t,8),this.state=201,this.match(d.CarriageReturn);break;case d.Tab:this.enterOuterAlt(t,9),this.state=202,this.match(d.Tab);break;case d.HexChar:this.enterOuterAlt(t,10),this.state=203,this.match(d.HexChar);break;case d.Quoted:this.enterOuterAlt(t,11),this.state=204,this.match(d.Quoted);break;case d.BlockQuoted:this.enterOuterAlt(t,12),this.state=205,this.match(d.BlockQuoted);break;case d.OpenBrace:this.enterOuterAlt(t,13),this.state=206,this.match(d.OpenBrace);break;case d.CloseBrace:this.enterOuterAlt(t,14),this.state=207,this.match(d.CloseBrace);break;case d.Comma:this.enterOuterAlt(t,15),this.state=208,this.match(d.Comma);break;case d.Hyphen:this.enterOuterAlt(t,16),this.state=209,this.match(d.Hyphen);break;case d.LessThan:this.enterOuterAlt(t,17),this.state=210,this.match(d.LessThan);break;case d.GreaterThan:this.enterOuterAlt(t,18),this.state=211,this.match(d.GreaterThan);break;case d.SingleQuote:this.enterOuterAlt(t,19),this.state=212,this.match(d.SingleQuote);break;case d.Underscore:this.enterOuterAlt(t,20),this.state=213,this.match(d.Underscore);break;case d.Colon:this.enterOuterAlt(t,21),this.state=214,this.match(d.Colon);break;case d.Hash:this.enterOuterAlt(t,22),this.state=215,this.match(d.Hash);break;case d.Equals:this.enterOuterAlt(t,23),this.state=216,this.match(d.Equals);break;case d.Exclamation:this.enterOuterAlt(t,24),this.state=217,this.match(d.Exclamation);break;case d.Ampersand:this.enterOuterAlt(t,25),this.state=218,this.match(d.Ampersand);break;case d.OtherChar:this.enterOuterAlt(t,26),this.state=219,this.match(d.OtherChar);break;default:throw new o.NoViableAltException(this)}}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}number(){let t=new L(this._ctx,this.state);this.enterRule(t,34,d.RULE_number);try{this.enterOuterAlt(t,1),this.state=222,this.digits()}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}octal_char(){let t,e=new P(this._ctx,this.state);this.enterRule(e,36,d.RULE_octal_char);try{switch(this.enterOuterAlt(e,1),this.state=233,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,15,this._ctx)){case 1:this.state=224,this.match(d.Backslash),this.state=225,0!=((t=this._input.LA(1))-96&-32)||0==(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D0-96))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=226,this.octal_digit(),this.state=227,this.octal_digit();break;case 2:this.state=229,this.match(d.Backslash),this.state=230,this.octal_digit(),this.state=231,this.octal_digit()}}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}octal_digit(){let t,e=new I(this._ctx,this.state);this.enterRule(e,38,d.RULE_octal_digit);try{this.enterOuterAlt(e,1),this.state=235,0!=((t=this._input.LA(1))-96&-32)||0==(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D0-96))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}digits(){let t,e=new D(this._ctx,this.state);this.enterRule(e,40,d.RULE_digits);try{this.enterOuterAlt(e,1),this.state=238,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=237,this.digit(),this.state=240,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(t-96&-32)&&0!=(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96)))}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}digit(){let t,e=new U(this._ctx,this.state);this.enterRule(e,42,d.RULE_digit);try{this.enterOuterAlt(e,1),this.state=242,0!=((t=this._input.LA(1))-96&-32)||0==(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96))?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}name(){let t=new M(this._ctx,this.state);this.enterRule(t,44,d.RULE_name);try{this.enterOuterAlt(t,1),this.state=244,this.alpha_nums()}catch(e){if(!(e instanceof l.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}alpha_nums(){let t,e=new k(this._ctx,this.state);this.enterRule(e,46,d.RULE_alpha_nums);try{switch(this.enterOuterAlt(e,1),this.state=248,this._errHandler.sync(this),this._input.LA(1)){case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:this.state=246,this.letter();break;case d.Underscore:this.state=247,this.match(d.Underscore);break;default:throw new o.NoViableAltException(this)}for(this.state=255,this._errHandler.sync(this),t=this._input.LA(1);0==(t-38&-32)&&0!=(1<<t-38&(1<<d.Underscore-38|1<<d.ALC-38|1<<d.BLC-38|1<<d.CLC-38|1<<d.DLC-38|1<<d.ELC-38|1<<d.FLC-38|1<<d.GLC-38|1<<d.HLC-38|1<<d.ILC-38|1<<d.JLC-38|1<<d.KLC-38|1<<d.LLC-38|1<<d.MLC-38|1<<d.NLC-38|1<<d.OLC-38|1<<d.PLC-38|1<<d.QLC-38|1<<d.RLC-38|1<<d.SLC-38|1<<d.TLC-38|1<<d.ULC-38|1<<d.VLC-38|1<<d.WLC-38|1<<d.XLC-38|1<<d.YLC-38|1<<d.ZLC-38))||0==(t-70&-32)&&0!=(1<<t-70&(1<<d.AUC-70|1<<d.BUC-70|1<<d.CUC-70|1<<d.DUC-70|1<<d.EUC-70|1<<d.FUC-70|1<<d.GUC-70|1<<d.HUC-70|1<<d.IUC-70|1<<d.JUC-70|1<<d.KUC-70|1<<d.LUC-70|1<<d.MUC-70|1<<d.NUC-70|1<<d.OUC-70|1<<d.PUC-70|1<<d.QUC-70|1<<d.RUC-70|1<<d.SUC-70|1<<d.TUC-70|1<<d.UUC-70|1<<d.VUC-70|1<<d.WUC-70|1<<d.XUC-70|1<<d.YUC-70|1<<d.ZUC-70|1<<d.D1-70|1<<d.D2-70|1<<d.D3-70|1<<d.D4-70|1<<d.D5-70|1<<d.D6-70))||0==(t-102&-32)&&0!=(1<<t-102&(1<<d.D7-102|1<<d.D8-102|1<<d.D9-102|1<<d.D0-102));){switch(this.state=253,this._errHandler.sync(this),this._input.LA(1)){case d.ALC:case d.BLC:case d.CLC:case d.DLC:case d.ELC:case d.FLC:case d.GLC:case d.HLC:case d.ILC:case d.JLC:case d.KLC:case d.LLC:case d.MLC:case d.NLC:case d.OLC:case d.PLC:case d.QLC:case d.RLC:case d.SLC:case d.TLC:case d.ULC:case d.VLC:case d.WLC:case d.XLC:case d.YLC:case d.ZLC:case d.AUC:case d.BUC:case d.CUC:case d.DUC:case d.EUC:case d.FUC:case d.GUC:case d.HUC:case d.IUC:case d.JUC:case d.KUC:case d.LUC:case d.MUC:case d.NUC:case d.OUC:case d.PUC:case d.QUC:case d.RUC:case d.SUC:case d.TUC:case d.UUC:case d.VUC:case d.WUC:case d.XUC:case d.YUC:case d.ZUC:this.state=250,this.letter();break;case d.Underscore:this.state=251,this.match(d.Underscore);break;case d.D1:case d.D2:case d.D3:case d.D4:case d.D5:case d.D6:case d.D7:case d.D8:case d.D9:case d.D0:this.state=252,this.digit();break;default:throw new o.NoViableAltException(this)}this.state=257,this._errHandler.sync(this),t=this._input.LA(1)}}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}non_close_parens(){let t,e=new F(this._ctx,this.state);this.enterRule(e,48,d.RULE_non_close_parens);try{this.enterOuterAlt(e,1),this.state=259,this._errHandler.sync(this),t=this._input.LA(1);do{this.state=258,this.non_close_paren(),this.state=261,this._errHandler.sync(this),t=this._input.LA(1)}while(0==(-32&t)&&0!=(1<<t&(1<<d.Quoted|1<<d.BlockQuoted|1<<d.BellChar|1<<d.ControlChar|1<<d.EscapeChar|1<<d.FormFeed|1<<d.NewLine|1<<d.CarriageReturn|1<<d.Tab|1<<d.Backslash|1<<d.HexChar|1<<d.Dot|1<<d.DecimalDigit|1<<d.NotDecimalDigit|1<<d.CharWithProperty|1<<d.CharWithoutProperty|1<<d.WhiteSpace|1<<d.NotWhiteSpace|1<<d.WordChar|1<<d.NotWordChar|1<<d.CharacterClassStart|1<<d.CharacterClassEnd|1<<d.Caret|1<<d.Hyphen|1<<d.QuestionMark|1<<d.Plus|1<<d.Star|1<<d.OpenBrace|1<<d.CloseBrace|1<<d.Comma|1<<d.EndOfSubject))||0==(t-32&-32)&&0!=(1<<t-32&(1<<d.Pipe-32|1<<d.OpenParen-32|1<<d.LessThan-32|1<<d.GreaterThan-32|1<<d.SingleQuote-32|1<<d.Underscore-32|1<<d.Colon-32|1<<d.Hash-32|1<<d.Equals-32|1<<d.Exclamation-32|1<<d.Ampersand-32|1<<d.ALC-32|1<<d.BLC-32|1<<d.CLC-32|1<<d.DLC-32|1<<d.ELC-32|1<<d.FLC-32|1<<d.GLC-32|1<<d.HLC-32|1<<d.ILC-32|1<<d.JLC-32|1<<d.KLC-32|1<<d.LLC-32|1<<d.MLC-32|1<<d.NLC-32|1<<d.OLC-32|1<<d.PLC-32|1<<d.QLC-32|1<<d.RLC-32|1<<d.SLC-32|1<<d.TLC-32))||0==(t-64&-32)&&0!=(1<<t-64&(1<<d.ULC-64|1<<d.VLC-64|1<<d.WLC-64|1<<d.XLC-64|1<<d.YLC-64|1<<d.ZLC-64|1<<d.AUC-64|1<<d.BUC-64|1<<d.CUC-64|1<<d.DUC-64|1<<d.EUC-64|1<<d.FUC-64|1<<d.GUC-64|1<<d.HUC-64|1<<d.IUC-64|1<<d.JUC-64|1<<d.KUC-64|1<<d.LUC-64|1<<d.MUC-64|1<<d.NUC-64|1<<d.OUC-64|1<<d.PUC-64|1<<d.QUC-64|1<<d.RUC-64|1<<d.SUC-64|1<<d.TUC-64|1<<d.UUC-64|1<<d.VUC-64|1<<d.WUC-64|1<<d.XUC-64|1<<d.YUC-64|1<<d.ZUC-64))||0==(t-96&-32)&&0!=(1<<t-96&(1<<d.D1-96|1<<d.D2-96|1<<d.D3-96|1<<d.D4-96|1<<d.D5-96|1<<d.D6-96|1<<d.D7-96|1<<d.D8-96|1<<d.D9-96|1<<d.D0-96|1<<d.OtherChar-96)))}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}non_close_paren(){let t,e=new j(this._ctx,this.state);this.enterRule(e,50,d.RULE_non_close_paren);try{this.enterOuterAlt(e,1),this.state=263,(t=this._input.LA(1))<=0||t===d.CloseParen?this._errHandler.recoverInline(this):(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}letter(){let t,e=new B(this._ctx,this.state);this.enterRule(e,52,d.RULE_letter);try{this.enterOuterAlt(e,1),this.state=265,0==((t=this._input.LA(1))-44&-32)&&0!=(1<<t-44&(1<<d.ALC-44|1<<d.BLC-44|1<<d.CLC-44|1<<d.DLC-44|1<<d.ELC-44|1<<d.FLC-44|1<<d.GLC-44|1<<d.HLC-44|1<<d.ILC-44|1<<d.JLC-44|1<<d.KLC-44|1<<d.LLC-44|1<<d.MLC-44|1<<d.NLC-44|1<<d.OLC-44|1<<d.PLC-44|1<<d.QLC-44|1<<d.RLC-44|1<<d.SLC-44|1<<d.TLC-44|1<<d.ULC-44|1<<d.VLC-44|1<<d.WLC-44|1<<d.XLC-44|1<<d.YLC-44|1<<d.ZLC-44|1<<d.AUC-44|1<<d.BUC-44|1<<d.CUC-44|1<<d.DUC-44|1<<d.EUC-44|1<<d.FUC-44))||0==(t-76&-32)&&0!=(1<<t-76&(1<<d.GUC-76|1<<d.HUC-76|1<<d.IUC-76|1<<d.JUC-76|1<<d.KUC-76|1<<d.LUC-76|1<<d.MUC-76|1<<d.NUC-76|1<<d.OUC-76|1<<d.PUC-76|1<<d.QUC-76|1<<d.RUC-76|1<<d.SUC-76|1<<d.TUC-76|1<<d.UUC-76|1<<d.VUC-76|1<<d.WUC-76|1<<d.XUC-76|1<<d.YUC-76|1<<d.ZUC-76))?(this._input.LA(1)===c.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()):this._errHandler.recoverInline(this)}catch(r){if(!(r instanceof l.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}static get _ATN(){return d.__ATN||(d.__ATN=(new i.ATNDeserializer).deserialize(p.toCharArray(d._serializedATN))),d.__ATN}}d.Quoted=1,d.BlockQuoted=2,d.BellChar=3,d.ControlChar=4,d.EscapeChar=5,d.FormFeed=6,d.NewLine=7,d.CarriageReturn=8,d.Tab=9,d.Backslash=10,d.HexChar=11,d.Dot=12,d.DecimalDigit=13,d.NotDecimalDigit=14,d.CharWithProperty=15,d.CharWithoutProperty=16,d.WhiteSpace=17,d.NotWhiteSpace=18,d.WordChar=19,d.NotWordChar=20,d.CharacterClassStart=21,d.CharacterClassEnd=22,d.Caret=23,d.Hyphen=24,d.QuestionMark=25,d.Plus=26,d.Star=27,d.OpenBrace=28,d.CloseBrace=29,d.Comma=30,d.EndOfSubject=31,d.Pipe=32,d.OpenParen=33,d.CloseParen=34,d.LessThan=35,d.GreaterThan=36,d.SingleQuote=37,d.Underscore=38,d.Colon=39,d.Hash=40,d.Equals=41,d.Exclamation=42,d.Ampersand=43,d.ALC=44,d.BLC=45,d.CLC=46,d.DLC=47,d.ELC=48,d.FLC=49,d.GLC=50,d.HLC=51,d.ILC=52,d.JLC=53,d.KLC=54,d.LLC=55,d.MLC=56,d.NLC=57,d.OLC=58,d.PLC=59,d.QLC=60,d.RLC=61,d.SLC=62,d.TLC=63,d.ULC=64,d.VLC=65,d.WLC=66,d.XLC=67,d.YLC=68,d.ZLC=69,d.AUC=70,d.BUC=71,d.CUC=72,d.DUC=73,d.EUC=74,d.FUC=75,d.GUC=76,d.HUC=77,d.IUC=78,d.JUC=79,d.KUC=80,d.LUC=81,d.MUC=82,d.NUC=83,d.OUC=84,d.PUC=85,d.QUC=86,d.RUC=87,d.SUC=88,d.TUC=89,d.UUC=90,d.VUC=91,d.WUC=92,d.XUC=93,d.YUC=94,d.ZUC=95,d.D1=96,d.D2=97,d.D3=98,d.D4=99,d.D5=100,d.D6=101,d.D7=102,d.D8=103,d.D9=104,d.D0=105,d.OtherChar=106,d.RULE_parse=0,d.RULE_alternation=1,d.RULE_expr=2,d.RULE_element=3,d.RULE_quantifier=4,d.RULE_quantifier_type=5,d.RULE_character_class=6,d.RULE_capture=7,d.RULE_non_capture=8,d.RULE_option=9,d.RULE_option_flag=10,d.RULE_atom=11,d.RULE_cc_atom=12,d.RULE_shared_atom=13,d.RULE_literal=14,d.RULE_cc_literal=15,d.RULE_shared_literal=16,d.RULE_number=17,d.RULE_octal_char=18,d.RULE_octal_digit=19,d.RULE_digits=20,d.RULE_digit=21,d.RULE_name=22,d.RULE_alpha_nums=23,d.RULE_non_close_parens=24,d.RULE_non_close_paren=25,d.RULE_letter=26,d.ruleNames=["parse","alternation","expr","element","quantifier","quantifier_type","character_class","capture","non_capture","option","option_flag","atom","cc_atom","shared_atom","literal","cc_literal","shared_literal","number","octal_char","octal_digit","digits","digit","name","alpha_nums","non_close_parens","non_close_paren","letter"],d._LITERAL_NAMES=[void 0,void 0,void 0,"'\\'","'\\'","'\\'","'\\'","'\\'","'\\'","'\\'","'\\'",void 0,"'.'","'\\'","'\\'",void 0,void 0,"'\\'","'\\'","'\\'","'\\'","'['","']'","'^'","'-'","'?'","'+'","'*'","'{'","'}'","','","'$'","'|'","'('","')'","'<'","'>'","'''","'_'","':'","'#'","'='","'!'","'&'","'a'","'b'","'c'","'d'","'e'","'f'","'g'","'h'","'i'","'j'","'k'","'l'","'m'","'n'","'o'","'p'","'q'","'r'","'s'","'t'","'u'","'v'","'w'","'x'","'y'","'z'","'A'","'B'","'C'","'D'","'E'","'F'","'G'","'H'","'I'","'J'","'K'","'L'","'M'","'N'","'O'","'P'","'Q'","'R'","'S'","'T'","'U'","'V'","'W'","'X'","'Y'","'Z'","'1'","'2'","'3'","'4'","'5'","'6'","'7'","'8'","'9'","'0'"],d._SYMBOLIC_NAMES=[void 0,"Quoted","BlockQuoted","BellChar","ControlChar","EscapeChar","FormFeed","NewLine","CarriageReturn","Tab","Backslash","HexChar","Dot","DecimalDigit","NotDecimalDigit","CharWithProperty","CharWithoutProperty","WhiteSpace","NotWhiteSpace","WordChar","NotWordChar","CharacterClassStart","CharacterClassEnd","Caret","Hyphen","QuestionMark","Plus","Star","OpenBrace","CloseBrace","Comma","EndOfSubject","Pipe","OpenParen","CloseParen","LessThan","GreaterThan","SingleQuote","Underscore","Colon","Hash","Equals","Exclamation","Ampersand","ALC","BLC","CLC","DLC","ELC","FLC","GLC","HLC","ILC","JLC","KLC","LLC","MLC","NLC","OLC","PLC","QLC","RLC","SLC","TLC","ULC","VLC","WLC","XLC","YLC","ZLC","AUC","BUC","CUC","DUC","EUC","FUC","GUC","HUC","IUC","JUC","KUC","LUC","MUC","NUC","OUC","PUC","QUC","RUC","SUC","TUC","UUC","VUC","WUC","XUC","YUC","ZUC","D1","D2","D3","D4","D5","D6","D7","D8","D9","D0","OtherChar"],d.VOCABULARY=new h.VocabularyImpl(d._LITERAL_NAMES,d._SYMBOLIC_NAMES,[]),d._serializedATN='\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x03l\u010e\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04\x0e\t\x0e\x04\x0f\t\x0f\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1a\t\x1a\x04\x1b\t\x1b\x04\x1c\t\x1c\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x07\x03?\n\x03\f\x03\x0e\x03B\v\x03\x03\x04\x07\x04E\n\x04\f\x04\x0e\x04H\v\x04\x03\x05\x03\x05\x05\x05L\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06f\n\x06\x03\x07\x03\x07\x03\x07\x05\x07k\n\x07\x03\b\x03\b\x03\b\x06\bp\n\b\r\b\x0e\bq\x03\b\x03\b\x03\b\x03\b\x06\bx\n\b\r\b\x0e\by\x03\b\x03\b\x05\b~\n\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\t\x8c\n\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x06\v\x97\n\v\r\v\x0e\v\x98\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\r\xa8\n\r\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x05\x0e\xb0\n\x0e\x03\x0f\x03\x0f\x03\x10\x03\x10\x05\x10\xb6\n\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\xc3\n\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\xdf\n\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\xec\n\x14\x03\x15\x03\x15\x03\x16\x06\x16\xf1\n\x16\r\x16\x0e\x16\xf2\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x05\x19\xfb\n\x19\x03\x19\x03\x19\x03\x19\x07\x19\u0100\n\x19\f\x19\x0e\x19\u0103\v\x19\x03\x1a\x06\x1a\u0106\n\x1a\r\x1a\x0e\x1a\u0107\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1c\x02\x02\x02\x1d\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0e\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1a\x02\x1c\x02\x1e\x02 \x02"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x02\x02\t\x05\x0266::@@\x04\x02\x06\x06\x0f\x16\x04\x02bdkk\x04\x02bhkk\x03\x02bk\x03\x02$$\x03\x02.a\x02\u0136\x028\x03\x02\x02\x02\x04;\x03\x02\x02\x02\x06F\x03\x02\x02\x02\bI\x03\x02\x02\x02\ne\x03\x02\x02\x02\fj\x03\x02\x02\x02\x0e}\x03\x02\x02\x02\x10\x8b\x03\x02\x02\x02\x12\x8d\x03\x02\x02\x02\x14\x93\x03\x02\x02\x02\x16\x9c\x03\x02\x02\x02\x18\xa7\x03\x02\x02\x02\x1a\xaf\x03\x02\x02\x02\x1c\xb1\x03\x02\x02\x02\x1e\xb5\x03\x02\x02\x02 \xc2\x03\x02\x02\x02"\xde\x03\x02\x02\x02$\xe0\x03\x02\x02\x02&\xeb\x03\x02\x02\x02(\xed\x03\x02\x02\x02*\xf0\x03\x02\x02\x02,\xf4\x03\x02\x02\x02.\xf6\x03\x02\x02\x020\xfa\x03\x02\x02\x022\u0105\x03\x02\x02\x024\u0109\x03\x02\x02\x026\u010b\x03\x02\x02\x0289\x05\x04\x03\x029:\x07\x02\x02\x03:\x03\x03\x02\x02\x02;@\x05\x06\x04\x02<=\x07"\x02\x02=?\x05\x06\x04\x02><\x03\x02\x02\x02?B\x03\x02\x02\x02@>\x03\x02\x02\x02@A\x03\x02\x02\x02A\x05\x03\x02\x02\x02B@\x03\x02\x02\x02CE\x05\b\x05\x02DC\x03\x02\x02\x02EH\x03\x02\x02\x02FD\x03\x02\x02\x02FG\x03\x02\x02\x02G\x07\x03\x02\x02\x02HF\x03\x02\x02\x02IK\x05\x18\r\x02JL\x05\n\x06\x02KJ\x03\x02\x02\x02KL\x03\x02\x02\x02L\t\x03\x02\x02\x02MN\x07\x1b\x02\x02Nf\x05\f\x07\x02OP\x07\x1c\x02\x02Pf\x05\f\x07\x02QR\x07\x1d\x02\x02Rf\x05\f\x07\x02ST\x07\x1e\x02\x02TU\x05$\x13\x02UV\x07\x1f\x02\x02VW\x05\f\x07\x02Wf\x03\x02\x02\x02XY\x07\x1e\x02\x02YZ\x05$\x13\x02Z[\x07 \x02\x02[\\\x07\x1f\x02\x02\\]\x05\f\x07\x02]f\x03\x02\x02\x02^_\x07\x1e\x02\x02_`\x05$\x13\x02`a\x07 \x02\x02ab\x05$\x13\x02bc\x07\x1f\x02\x02cd\x05\f\x07\x02df\x03\x02\x02\x02eM\x03\x02\x02\x02eO\x03\x02\x02\x02eQ\x03\x02\x02\x02eS\x03\x02\x02\x02eX\x03\x02\x02\x02e^\x03\x02\x02\x02f\v\x03\x02\x02\x02gk\x07\x1c\x02\x02hk\x07\x1b\x02\x02ik\x03\x02\x02\x02jg\x03\x02\x02\x02jh\x03\x02\x02\x02ji\x03\x02\x02\x02k\r\x03\x02\x02\x02lm\x07\x17\x02\x02mo\x07\x19\x02\x02np\x05\x1a\x0e\x02on\x03\x02\x02\x02pq\x03\x02\x02\x02qo\x03\x02\x02\x02qr\x03\x02\x02\x02rs\x03\x02\x02\x02st\x07\x18\x02\x02t~\x03\x02\x02\x02uw\x07\x17\x02\x02vx\x05\x1a\x0e\x02wv\x03\x02\x02\x02xy\x03\x02\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z{\x03\x02\x02\x02{|\x07\x18\x02\x02|~\x03\x02\x02\x02}l\x03\x02\x02\x02}u\x03\x02\x02\x02~\x0f\x03\x02\x02\x02\x7f\x80\x07#\x02\x02\x80\x81\x07\x1b\x02\x02\x81\x82\x07%\x02\x02\x82\x83\x05.\x18\x02\x83\x84\x07&\x02\x02\x84\x85\x05\x04\x03\x02\x85\x86\x07$\x02\x02\x86\x8c\x03\x02\x02\x02\x87\x88\x07#\x02\x02\x88\x89\x05\x04\x03\x02\x89\x8a\x07$\x02\x02\x8a\x8c\x03\x02\x02\x02\x8b\x7f\x03\x02\x02\x02\x8b\x87\x03\x02\x02\x02\x8c\x11\x03\x02\x02\x02\x8d\x8e\x07#\x02\x02\x8e\x8f\x07\x1b\x02\x02\x8f\x90\x07)\x02\x02\x90\x91\x05\x04\x03\x02\x91\x92\x07$\x02\x02\x92\x13\x03\x02\x02\x02\x93\x94\x07#\x02\x02\x94\x96\x07\x1b\x02\x02\x95\x97\x05\x16\f\x02\x96\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98\x96\x03\x02\x02\x02\x98\x99\x03\x02\x02\x02\x99\x9a\x03\x02\x02\x02\x9a\x9b\x07$\x02\x02\x9b\x15\x03\x02\x02\x02\x9c\x9d\t\x02\x02\x02\x9d\x17\x03\x02\x02\x02\x9e\xa8\x05\x1c\x0f\x02\x9f\xa8\x05\x1e\x10\x02\xa0\xa8\x05\x0e\b\x02\xa1\xa8\x05\x10\t\x02\xa2\xa8\x05\x12\n\x02\xa3\xa8\x05\x14\v\x02\xa4\xa8\x07\x0e\x02\x02\xa5\xa8\x07\x19\x02\x02\xa6\xa8\x07!\x02\x02\xa7\x9e\x03\x02\x02\x02\xa7\x9f\x03\x02\x02\x02\xa7\xa0\x03\x02\x02\x02\xa7\xa1\x03\x02\x02\x02\xa7\xa2\x03\x02\x02\x02\xa7\xa3\x03\x02\x02\x02\xa7\xa4\x03\x02\x02\x02\xa7\xa5\x03\x02\x02\x02\xa7\xa6\x03\x02\x02\x02\xa8\x19\x03\x02\x02\x02\xa9\xaa\x05 \x11\x02\xaa\xab\x07\x1a\x02\x02\xab\xac\x05 \x11\x02\xac\xb0\x03\x02\x02\x02\xad\xb0\x05\x1c\x0f\x02\xae\xb0\x05 \x11\x02\xaf\xa9\x03\x02\x02\x02\xaf\xad\x03\x02\x02\x02\xaf\xae\x03\x02\x02\x02\xb0\x1b\x03\x02\x02\x02\xb1\xb2\t\x03\x02\x02\xb2\x1d\x03\x02\x02\x02\xb3\xb6\x05"\x12\x02\xb4\xb6\x07\x18\x02\x02\xb5\xb3\x03\x02\x02\x02\xb5\xb4\x03\x02\x02\x02\xb6\x1f\x03\x02\x02\x02\xb7\xc3\x05"\x12\x02\xb8\xc3\x07\x0e\x02\x02\xb9\xc3\x07\x17\x02\x02\xba\xc3\x07\x19\x02\x02\xbb\xc3\x07\x1b\x02\x02\xbc\xc3\x07\x1c\x02\x02\xbd\xc3\x07\x1d\x02\x02\xbe\xc3\x07!\x02\x02\xbf\xc3\x07"\x02\x02\xc0\xc3\x07#\x02\x02\xc1\xc3\x07$\x02\x02\xc2\xb7\x03\x02\x02\x02\xc2\xb8\x03\x02\x02\x02\xc2\xb9\x03\x02\x02\x02\xc2\xba\x03\x02\x02\x02\xc2\xbb\x03\x02\x02\x02\xc2\xbc\x03\x02\x02\x02\xc2\xbd\x03\x02\x02\x02\xc2\xbe\x03\x02\x02\x02\xc2\xbf\x03\x02\x02\x02\xc2\xc0\x03\x02\x02\x02\xc2\xc1\x03\x02\x02\x02\xc3!\x03\x02\x02\x02\xc4\xdf\x05&\x14\x02\xc5\xdf\x056\x1c\x02\xc6\xdf\x05,\x17\x02\xc7\xdf\x07\x05\x02\x02\xc8\xdf\x07\x07\x02\x02\xc9\xdf\x07\b\x02\x02\xca\xdf\x07\t\x02\x02\xcb\xdf\x07\n\x02\x02\xcc\xdf\x07\v\x02\x02\xcd\xdf\x07\r\x02\x02\xce\xdf\x07\x03\x02\x02\xcf\xdf\x07\x04\x02\x02\xd0\xdf\x07\x1e\x02\x02\xd1\xdf\x07\x1f\x02\x02\xd2\xdf\x07 \x02\x02\xd3\xdf\x07\x1a\x02\x02\xd4\xdf\x07%\x02\x02\xd5\xdf\x07&\x02\x02\xd6\xdf\x07\'\x02\x02\xd7\xdf\x07(\x02\x02\xd8\xdf\x07)\x02\x02\xd9\xdf\x07*\x02\x02\xda\xdf\x07+\x02\x02\xdb\xdf\x07,\x02\x02\xdc\xdf\x07-\x02\x02\xdd\xdf\x07l\x02\x02\xde\xc4\x03\x02\x02\x02\xde\xc5\x03\x02\x02\x02\xde\xc6\x03\x02\x02\x02\xde\xc7\x03\x02\x02\x02\xde\xc8\x03\x02\x02\x02\xde\xc9\x03\x02\x02\x02\xde\xca\x03\x02\x02\x02\xde\xcb\x03\x02\x02\x02\xde\xcc\x03\x02\x02\x02\xde\xcd\x03\x02\x02\x02\xde\xce\x03\x02\x02\x02\xde\xcf\x03\x02\x02\x02\xde\xd0\x03\x02\x02\x02\xde\xd1\x03\x02\x02\x02\xde\xd2\x03\x02\x02\x02\xde\xd3\x03\x02\x02\x02\xde\xd4\x03\x02\x02\x02\xde\xd5\x03\x02\x02\x02\xde\xd6\x03\x02\x02\x02\xde\xd7\x03\x02\x02\x02\xde\xd8\x03\x02\x02\x02\xde\xd9\x03\x02\x02\x02\xde\xda\x03\x02\x02\x02\xde\xdb\x03\x02\x02\x02\xde\xdc\x03\x02\x02\x02\xde\xdd\x03\x02\x02\x02\xdf#\x03\x02\x02\x02\xe0\xe1\x05*\x16\x02\xe1%\x03\x02\x02\x02\xe2\xe3\x07\f\x02\x02\xe3\xe4\t\x04\x02\x02\xe4\xe5\x05(\x15\x02\xe5\xe6\x05(\x15\x02\xe6\xec\x03\x02\x02\x02\xe7\xe8\x07\f\x02\x02\xe8\xe9\x05(\x15\x02\xe9\xea\x05(\x15\x02\xea\xec\x03\x02\x02\x02\xeb\xe2\x03\x02\x02\x02\xeb\xe7\x03\x02\x02\x02\xec\'\x03\x02\x02\x02\xed\xee\t\x05\x02\x02\xee)\x03\x02\x02\x02\xef\xf1\x05,\x17\x02\xf0\xef\x03\x02\x02\x02\xf1\xf2\x03\x02\x02\x02\xf2\xf0\x03\x02\x02\x02\xf2\xf3\x03\x02\x02\x02\xf3+\x03\x02\x02\x02\xf4\xf5\t\x06\x02\x02\xf5-\x03\x02\x02\x02\xf6\xf7\x050\x19\x02\xf7/\x03\x02\x02\x02\xf8\xfb\x056\x1c\x02\xf9\xfb\x07(\x02\x02\xfa\xf8\x03\x02\x02\x02\xfa\xf9\x03\x02\x02\x02\xfb\u0101\x03\x02\x02\x02\xfc\u0100\x056\x1c\x02\xfd\u0100\x07(\x02\x02\xfe\u0100\x05,\x17\x02\xff\xfc\x03\x02\x02\x02\xff\xfd\x03\x02\x02\x02\xff\xfe\x03\x02\x02\x02\u0100\u0103\x03\x02\x02\x02\u0101\xff\x03\x02\x02\x02\u0101\u0102\x03\x02\x02\x02\u01021\x03\x02\x02\x02\u0103\u0101\x03\x02\x02\x02\u0104\u0106\x054\x1b\x02\u0105\u0104\x03\x02\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u01083\x03\x02\x02\x02\u0109\u010a\n\x07\x02\x02\u010a5\x03\x02\x02\x02\u010b\u010c\t\b\x02\x02\u010c7\x03\x02\x02\x02\x17@FKejqy}\x8b\x98\xa7\xaf\xb5\xc2\xde\xeb\xf2\xfa\xff\u0101\u0107',r.CommonRegexParser=d;class f extends a.ParserRuleContext{alternation(){return this.getRuleContext(0,y)}EOF(){return this.getToken(d.EOF,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_parse}enterRule(t){t.enterParse&&t.enterParse(this)}exitRule(t){t.exitParse&&t.exitParse(this)}accept(t){return t.visitParse?t.visitParse(this):t.visitChildren(this)}}r.ParseContext=f;class y extends a.ParserRuleContext{expr(t){return void 0===t?this.getRuleContexts(m):this.getRuleContext(t,m)}Pipe(t){return void 0===t?this.getTokens(d.Pipe):this.getToken(d.Pipe,t)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_alternation}enterRule(t){t.enterAlternation&&t.enterAlternation(this)}exitRule(t){t.exitAlternation&&t.exitAlternation(this)}accept(t){return t.visitAlternation?t.visitAlternation(this):t.visitChildren(this)}}r.AlternationContext=y;class m extends a.ParserRuleContext{element(t){return void 0===t?this.getRuleContexts(g):this.getRuleContext(t,g)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_expr}enterRule(t){t.enterExpr&&t.enterExpr(this)}exitRule(t){t.exitExpr&&t.exitExpr(this)}accept(t){return t.visitExpr?t.visitExpr(this):t.visitChildren(this)}}r.ExprContext=m;class g extends a.ParserRuleContext{atom(){return this.getRuleContext(0,C)}quantifier(){return this.tryGetRuleContext(0,v)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_element}enterRule(t){t.enterElement&&t.enterElement(this)}exitRule(t){t.exitElement&&t.exitElement(this)}accept(t){return t.visitElement?t.visitElement(this):t.visitChildren(this)}}r.ElementContext=g;class v extends a.ParserRuleContext{QuestionMark(){return this.tryGetToken(d.QuestionMark,0)}quantifier_type(){return this.getRuleContext(0,T)}Plus(){return this.tryGetToken(d.Plus,0)}Star(){return this.tryGetToken(d.Star,0)}OpenBrace(){return this.tryGetToken(d.OpenBrace,0)}number(t){return void 0===t?this.getRuleContexts(L):this.getRuleContext(t,L)}CloseBrace(){return this.tryGetToken(d.CloseBrace,0)}Comma(){return this.tryGetToken(d.Comma,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_quantifier}enterRule(t){t.enterQuantifier&&t.enterQuantifier(this)}exitRule(t){t.exitQuantifier&&t.exitQuantifier(this)}accept(t){return t.visitQuantifier?t.visitQuantifier(this):t.visitChildren(this)}}r.QuantifierContext=v;class T extends a.ParserRuleContext{Plus(){return this.tryGetToken(d.Plus,0)}QuestionMark(){return this.tryGetToken(d.QuestionMark,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_quantifier_type}enterRule(t){t.enterQuantifier_type&&t.enterQuantifier_type(this)}exitRule(t){t.exitQuantifier_type&&t.exitQuantifier_type(this)}accept(t){return t.visitQuantifier_type?t.visitQuantifier_type(this):t.visitChildren(this)}}r.Quantifier_typeContext=T;class _ extends a.ParserRuleContext{CharacterClassStart(){return this.getToken(d.CharacterClassStart,0)}Caret(){return this.tryGetToken(d.Caret,0)}CharacterClassEnd(){return this.getToken(d.CharacterClassEnd,0)}cc_atom(t){return void 0===t?this.getRuleContexts(A):this.getRuleContext(t,A)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_character_class}enterRule(t){t.enterCharacter_class&&t.enterCharacter_class(this)}exitRule(t){t.exitCharacter_class&&t.exitCharacter_class(this)}accept(t){return t.visitCharacter_class?t.visitCharacter_class(this):t.visitChildren(this)}}r.Character_classContext=_;class E extends a.ParserRuleContext{OpenParen(){return this.getToken(d.OpenParen,0)}QuestionMark(){return this.tryGetToken(d.QuestionMark,0)}LessThan(){return this.tryGetToken(d.LessThan,0)}name(){return this.tryGetRuleContext(0,M)}GreaterThan(){return this.tryGetToken(d.GreaterThan,0)}alternation(){return this.getRuleContext(0,y)}CloseParen(){return this.getToken(d.CloseParen,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_capture}enterRule(t){t.enterCapture&&t.enterCapture(this)}exitRule(t){t.exitCapture&&t.exitCapture(this)}accept(t){return t.visitCapture?t.visitCapture(this):t.visitChildren(this)}}r.CaptureContext=E;class b extends a.ParserRuleContext{OpenParen(){return this.getToken(d.OpenParen,0)}QuestionMark(){return this.getToken(d.QuestionMark,0)}Colon(){return this.getToken(d.Colon,0)}alternation(){return this.getRuleContext(0,y)}CloseParen(){return this.getToken(d.CloseParen,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_non_capture}enterRule(t){t.enterNon_capture&&t.enterNon_capture(this)}exitRule(t){t.exitNon_capture&&t.exitNon_capture(this)}accept(t){return t.visitNon_capture?t.visitNon_capture(this):t.visitChildren(this)}}r.Non_captureContext=b;class S extends a.ParserRuleContext{OpenParen(){return this.getToken(d.OpenParen,0)}QuestionMark(){return this.getToken(d.QuestionMark,0)}CloseParen(){return this.getToken(d.CloseParen,0)}option_flag(t){return void 0===t?this.getRuleContexts(x):this.getRuleContext(t,x)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_option}enterRule(t){t.enterOption&&t.enterOption(this)}exitRule(t){t.exitOption&&t.exitOption(this)}accept(t){return t.visitOption?t.visitOption(this):t.visitChildren(this)}}r.OptionContext=S;class x extends a.ParserRuleContext{ILC(){return this.tryGetToken(d.ILC,0)}MLC(){return this.tryGetToken(d.MLC,0)}SLC(){return this.tryGetToken(d.SLC,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_option_flag}enterRule(t){t.enterOption_flag&&t.enterOption_flag(this)}exitRule(t){t.exitOption_flag&&t.exitOption_flag(this)}accept(t){return t.visitOption_flag?t.visitOption_flag(this):t.visitChildren(this)}}r.Option_flagContext=x;class C extends a.ParserRuleContext{shared_atom(){return this.tryGetRuleContext(0,N)}literal(){return this.tryGetRuleContext(0,O)}character_class(){return this.tryGetRuleContext(0,_)}capture(){return this.tryGetRuleContext(0,E)}non_capture(){return this.tryGetRuleContext(0,b)}option(){return this.tryGetRuleContext(0,S)}Dot(){return this.tryGetToken(d.Dot,0)}Caret(){return this.tryGetToken(d.Caret,0)}EndOfSubject(){return this.tryGetToken(d.EndOfSubject,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_atom}enterRule(t){t.enterAtom&&t.enterAtom(this)}exitRule(t){t.exitAtom&&t.exitAtom(this)}accept(t){return t.visitAtom?t.visitAtom(this):t.visitChildren(this)}}r.AtomContext=C;class A extends a.ParserRuleContext{cc_literal(t){return void 0===t?this.getRuleContexts(w):this.getRuleContext(t,w)}Hyphen(){return this.tryGetToken(d.Hyphen,0)}shared_atom(){return this.tryGetRuleContext(0,N)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_cc_atom}enterRule(t){t.enterCc_atom&&t.enterCc_atom(this)}exitRule(t){t.exitCc_atom&&t.exitCc_atom(this)}accept(t){return t.visitCc_atom?t.visitCc_atom(this):t.visitChildren(this)}}r.Cc_atomContext=A;class N extends a.ParserRuleContext{ControlChar(){return this.tryGetToken(d.ControlChar,0)}DecimalDigit(){return this.tryGetToken(d.DecimalDigit,0)}NotDecimalDigit(){return this.tryGetToken(d.NotDecimalDigit,0)}CharWithProperty(){return this.tryGetToken(d.CharWithProperty,0)}CharWithoutProperty(){return this.tryGetToken(d.CharWithoutProperty,0)}WhiteSpace(){return this.tryGetToken(d.WhiteSpace,0)}NotWhiteSpace(){return this.tryGetToken(d.NotWhiteSpace,0)}WordChar(){return this.tryGetToken(d.WordChar,0)}NotWordChar(){return this.tryGetToken(d.NotWordChar,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_shared_atom}enterRule(t){t.enterShared_atom&&t.enterShared_atom(this)}exitRule(t){t.exitShared_atom&&t.exitShared_atom(this)}accept(t){return t.visitShared_atom?t.visitShared_atom(this):t.visitChildren(this)}}r.Shared_atomContext=N;class O extends a.ParserRuleContext{shared_literal(){return this.tryGetRuleContext(0,R)}CharacterClassEnd(){return this.tryGetToken(d.CharacterClassEnd,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_literal}enterRule(t){t.enterLiteral&&t.enterLiteral(this)}exitRule(t){t.exitLiteral&&t.exitLiteral(this)}accept(t){return t.visitLiteral?t.visitLiteral(this):t.visitChildren(this)}}r.LiteralContext=O;class w extends a.ParserRuleContext{shared_literal(){return this.tryGetRuleContext(0,R)}Dot(){return this.tryGetToken(d.Dot,0)}CharacterClassStart(){return this.tryGetToken(d.CharacterClassStart,0)}Caret(){return this.tryGetToken(d.Caret,0)}QuestionMark(){return this.tryGetToken(d.QuestionMark,0)}Plus(){return this.tryGetToken(d.Plus,0)}Star(){return this.tryGetToken(d.Star,0)}EndOfSubject(){return this.tryGetToken(d.EndOfSubject,0)}Pipe(){return this.tryGetToken(d.Pipe,0)}OpenParen(){return this.tryGetToken(d.OpenParen,0)}CloseParen(){return this.tryGetToken(d.CloseParen,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_cc_literal}enterRule(t){t.enterCc_literal&&t.enterCc_literal(this)}exitRule(t){t.exitCc_literal&&t.exitCc_literal(this)}accept(t){return t.visitCc_literal?t.visitCc_literal(this):t.visitChildren(this)}}r.Cc_literalContext=w;class R extends a.ParserRuleContext{octal_char(){return this.tryGetRuleContext(0,P)}letter(){return this.tryGetRuleContext(0,B)}digit(){return this.tryGetRuleContext(0,U)}BellChar(){return this.tryGetToken(d.BellChar,0)}EscapeChar(){return this.tryGetToken(d.EscapeChar,0)}FormFeed(){return this.tryGetToken(d.FormFeed,0)}NewLine(){return this.tryGetToken(d.NewLine,0)}CarriageReturn(){return this.tryGetToken(d.CarriageReturn,0)}Tab(){return this.tryGetToken(d.Tab,0)}HexChar(){return this.tryGetToken(d.HexChar,0)}Quoted(){return this.tryGetToken(d.Quoted,0)}BlockQuoted(){return this.tryGetToken(d.BlockQuoted,0)}OpenBrace(){return this.tryGetToken(d.OpenBrace,0)}CloseBrace(){return this.tryGetToken(d.CloseBrace,0)}Comma(){return this.tryGetToken(d.Comma,0)}Hyphen(){return this.tryGetToken(d.Hyphen,0)}LessThan(){return this.tryGetToken(d.LessThan,0)}GreaterThan(){return this.tryGetToken(d.GreaterThan,0)}SingleQuote(){return this.tryGetToken(d.SingleQuote,0)}Underscore(){return this.tryGetToken(d.Underscore,0)}Colon(){return this.tryGetToken(d.Colon,0)}Hash(){return this.tryGetToken(d.Hash,0)}Equals(){return this.tryGetToken(d.Equals,0)}Exclamation(){return this.tryGetToken(d.Exclamation,0)}Ampersand(){return this.tryGetToken(d.Ampersand,0)}OtherChar(){return this.tryGetToken(d.OtherChar,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_shared_literal}enterRule(t){t.enterShared_literal&&t.enterShared_literal(this)}exitRule(t){t.exitShared_literal&&t.exitShared_literal(this)}accept(t){return t.visitShared_literal?t.visitShared_literal(this):t.visitChildren(this)}}r.Shared_literalContext=R;class L extends a.ParserRuleContext{digits(){return this.getRuleContext(0,D)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_number}enterRule(t){t.enterNumber&&t.enterNumber(this)}exitRule(t){t.exitNumber&&t.exitNumber(this)}accept(t){return t.visitNumber?t.visitNumber(this):t.visitChildren(this)}}r.NumberContext=L;class P extends a.ParserRuleContext{Backslash(){return this.tryGetToken(d.Backslash,0)}octal_digit(t){return void 0===t?this.getRuleContexts(I):this.getRuleContext(t,I)}D0(){return this.tryGetToken(d.D0,0)}D1(){return this.tryGetToken(d.D1,0)}D2(){return this.tryGetToken(d.D2,0)}D3(){return this.tryGetToken(d.D3,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_octal_char}enterRule(t){t.enterOctal_char&&t.enterOctal_char(this)}exitRule(t){t.exitOctal_char&&t.exitOctal_char(this)}accept(t){return t.visitOctal_char?t.visitOctal_char(this):t.visitChildren(this)}}r.Octal_charContext=P;class I extends a.ParserRuleContext{D0(){return this.tryGetToken(d.D0,0)}D1(){return this.tryGetToken(d.D1,0)}D2(){return this.tryGetToken(d.D2,0)}D3(){return this.tryGetToken(d.D3,0)}D4(){return this.tryGetToken(d.D4,0)}D5(){return this.tryGetToken(d.D5,0)}D6(){return this.tryGetToken(d.D6,0)}D7(){return this.tryGetToken(d.D7,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_octal_digit}enterRule(t){t.enterOctal_digit&&t.enterOctal_digit(this)}exitRule(t){t.exitOctal_digit&&t.exitOctal_digit(this)}accept(t){return t.visitOctal_digit?t.visitOctal_digit(this):t.visitChildren(this)}}r.Octal_digitContext=I;class D extends a.ParserRuleContext{digit(t){return void 0===t?this.getRuleContexts(U):this.getRuleContext(t,U)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_digits}enterRule(t){t.enterDigits&&t.enterDigits(this)}exitRule(t){t.exitDigits&&t.exitDigits(this)}accept(t){return t.visitDigits?t.visitDigits(this):t.visitChildren(this)}}r.DigitsContext=D;class U extends a.ParserRuleContext{D0(){return this.tryGetToken(d.D0,0)}D1(){return this.tryGetToken(d.D1,0)}D2(){return this.tryGetToken(d.D2,0)}D3(){return this.tryGetToken(d.D3,0)}D4(){return this.tryGetToken(d.D4,0)}D5(){return this.tryGetToken(d.D5,0)}D6(){return this.tryGetToken(d.D6,0)}D7(){return this.tryGetToken(d.D7,0)}D8(){return this.tryGetToken(d.D8,0)}D9(){return this.tryGetToken(d.D9,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_digit}enterRule(t){t.enterDigit&&t.enterDigit(this)}exitRule(t){t.exitDigit&&t.exitDigit(this)}accept(t){return t.visitDigit?t.visitDigit(this):t.visitChildren(this)}}r.DigitContext=U;class M extends a.ParserRuleContext{alpha_nums(){return this.getRuleContext(0,k)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_name}enterRule(t){t.enterName&&t.enterName(this)}exitRule(t){t.exitName&&t.exitName(this)}accept(t){return t.visitName?t.visitName(this):t.visitChildren(this)}}r.NameContext=M;class k extends a.ParserRuleContext{letter(t){return void 0===t?this.getRuleContexts(B):this.getRuleContext(t,B)}Underscore(t){return void 0===t?this.getTokens(d.Underscore):this.getToken(d.Underscore,t)}digit(t){return void 0===t?this.getRuleContexts(U):this.getRuleContext(t,U)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_alpha_nums}enterRule(t){t.enterAlpha_nums&&t.enterAlpha_nums(this)}exitRule(t){t.exitAlpha_nums&&t.exitAlpha_nums(this)}accept(t){return t.visitAlpha_nums?t.visitAlpha_nums(this):t.visitChildren(this)}}r.Alpha_numsContext=k;class F extends a.ParserRuleContext{non_close_paren(t){return void 0===t?this.getRuleContexts(j):this.getRuleContext(t,j)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_non_close_parens}enterRule(t){t.enterNon_close_parens&&t.enterNon_close_parens(this)}exitRule(t){t.exitNon_close_parens&&t.exitNon_close_parens(this)}accept(t){return t.visitNon_close_parens?t.visitNon_close_parens(this):t.visitChildren(this)}}r.Non_close_parensContext=F;class j extends a.ParserRuleContext{CloseParen(){return this.getToken(d.CloseParen,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_non_close_paren}enterRule(t){t.enterNon_close_paren&&t.enterNon_close_paren(this)}exitRule(t){t.exitNon_close_paren&&t.exitNon_close_paren(this)}accept(t){return t.visitNon_close_paren?t.visitNon_close_paren(this):t.visitChildren(this)}}r.Non_close_parenContext=j;class B extends a.ParserRuleContext{ALC(){return this.tryGetToken(d.ALC,0)}BLC(){return this.tryGetToken(d.BLC,0)}CLC(){return this.tryGetToken(d.CLC,0)}DLC(){return this.tryGetToken(d.DLC,0)}ELC(){return this.tryGetToken(d.ELC,0)}FLC(){return this.tryGetToken(d.FLC,0)}GLC(){return this.tryGetToken(d.GLC,0)}HLC(){return this.tryGetToken(d.HLC,0)}ILC(){return this.tryGetToken(d.ILC,0)}JLC(){return this.tryGetToken(d.JLC,0)}KLC(){return this.tryGetToken(d.KLC,0)}LLC(){return this.tryGetToken(d.LLC,0)}MLC(){return this.tryGetToken(d.MLC,0)}NLC(){return this.tryGetToken(d.NLC,0)}OLC(){return this.tryGetToken(d.OLC,0)}PLC(){return this.tryGetToken(d.PLC,0)}QLC(){return this.tryGetToken(d.QLC,0)}RLC(){return this.tryGetToken(d.RLC,0)}SLC(){return this.tryGetToken(d.SLC,0)}TLC(){return this.tryGetToken(d.TLC,0)}ULC(){return this.tryGetToken(d.ULC,0)}VLC(){return this.tryGetToken(d.VLC,0)}WLC(){return this.tryGetToken(d.WLC,0)}XLC(){return this.tryGetToken(d.XLC,0)}YLC(){return this.tryGetToken(d.YLC,0)}ZLC(){return this.tryGetToken(d.ZLC,0)}AUC(){return this.tryGetToken(d.AUC,0)}BUC(){return this.tryGetToken(d.BUC,0)}CUC(){return this.tryGetToken(d.CUC,0)}DUC(){return this.tryGetToken(d.DUC,0)}EUC(){return this.tryGetToken(d.EUC,0)}FUC(){return this.tryGetToken(d.FUC,0)}GUC(){return this.tryGetToken(d.GUC,0)}HUC(){return this.tryGetToken(d.HUC,0)}IUC(){return this.tryGetToken(d.IUC,0)}JUC(){return this.tryGetToken(d.JUC,0)}KUC(){return this.tryGetToken(d.KUC,0)}LUC(){return this.tryGetToken(d.LUC,0)}MUC(){return this.tryGetToken(d.MUC,0)}NUC(){return this.tryGetToken(d.NUC,0)}OUC(){return this.tryGetToken(d.OUC,0)}PUC(){return this.tryGetToken(d.PUC,0)}QUC(){return this.tryGetToken(d.QUC,0)}RUC(){return this.tryGetToken(d.RUC,0)}SUC(){return this.tryGetToken(d.SUC,0)}TUC(){return this.tryGetToken(d.TUC,0)}UUC(){return this.tryGetToken(d.UUC,0)}VUC(){return this.tryGetToken(d.VUC,0)}WUC(){return this.tryGetToken(d.WUC,0)}XUC(){return this.tryGetToken(d.XUC,0)}YUC(){return this.tryGetToken(d.YUC,0)}ZUC(){return this.tryGetToken(d.ZUC,0)}constructor(t,e){super(t,e)}get ruleIndex(){return d.RULE_letter}enterRule(t){t.enterLetter&&t.enterLetter(this)}exitRule(t){t.exitLetter&&t.exitLetter(this)}accept(t){return t.visitLetter?t.visitLetter(this):t.visitChildren(this)}}r.LetterContext=B},{264:264,265:265,267:267,270:270,276:276,278:278,283:283,320:320,365:365}],264:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(265),o=t(270);class s extends o.RecognitionException{constructor(t,e,r,n,o,s){t instanceof i.Parser&&(void 0===e&&(e=t.inputStream),void 0===r&&(r=t.currentToken),void 0===n&&(n=t.currentToken),void 0===s&&(s=t.context)),super(t,e,s),this._deadEndConfigs=o,this._startToken=r,this.setOffendingToken(t,n)}get startToken(){return this._startToken}get deadEndConfigs(){return this._deadEndConfigs}}n([t(252).NotNull],s.prototype,"_startToken",void 0),r.NoViableAltException=s},{252:252,265:265,270:270}],265:[function(t,e,r){(function(e){(function(){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}},o=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(e){o(e)}}function a(t){try{u(n.throw(t))}catch(e){o(e)}}function u(t){t.done?i(t.value):new r((function(e){e(t.value)})).then(s,a)}u((n=n.apply(t,e||[])).next())}))};Object.defineProperty(r,"__esModule",{value:!0});const s=t(365),a=t(282),u=t(283),l=t(253),c=t(367),h=t(357),p=t(260),d=t(252),f=t(319),y=t(320),m=t(269),g=t(271),v=t(371),T=t(276);class _{constructor(t,e){this.ruleNames=t,this.tokenStream=e}enterEveryRule(t){console.log("enter   "+this.ruleNames[t.ruleIndex]+", LT(1)="+this.tokenStream.LT(1).text)}exitEveryRule(t){console.log("exit    "+this.ruleNames[t.ruleIndex]+", LT(1)="+this.tokenStream.LT(1).text)}visitErrorNode(t){}visitTerminal(t){let e=t.parent.ruleContext,r=t.symbol;console.log("consume "+r+" rule "+this.ruleNames[e.ruleIndex])}}n([d.Override],_.prototype,"enterEveryRule",null),n([d.Override],_.prototype,"exitEveryRule",null),n([d.Override],_.prototype,"visitErrorNode",null),n([d.Override],_.prototype,"visitTerminal",null);class E extends g.Recognizer{constructor(t){super(),this._errHandler=new l.DefaultErrorStrategy,this._precedenceStack=new h.IntegerStack,this._buildParseTrees=!0,this._parseListeners=[],this._syntaxErrors=0,this.matchedEOF=!1,this._precedenceStack.push(0),this.inputStream=t}reset(t){(void 0===t||t)&&this.inputStream.seek(0),this._errHandler.reset(this),this._ctx=void 0,this._syntaxErrors=0,this.matchedEOF=!1,this.isTrace=!1,this._precedenceStack.clear(),this._precedenceStack.push(0);let e=this.interpreter;null!=e&&e.reset()}match(t){let e=this.currentToken;return e.type===t?(t===T.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()):(e=this._errHandler.recoverInline(this),this._buildParseTrees&&-1===e.tokenIndex&&this._ctx.addErrorNode(this.createErrorNode(this._ctx,e))),e}matchWildcard(){let t=this.currentToken;return t.type>0?(this._errHandler.reportMatch(this),this.consume()):(t=this._errHandler.recoverInline(this),this._buildParseTrees&&-1===t.tokenIndex&&this._ctx.addErrorNode(this.createErrorNode(this._ctx,t))),t}set buildParseTree(t){this._buildParseTrees=t}get buildParseTree(){return this._buildParseTrees}getParseListeners(){return this._parseListeners}addParseListener(t){if(null==t)throw new TypeError("listener cannot be null");this._parseListeners.push(t)}removeParseListener(t){let e=this._parseListeners.findIndex(e=>e===t);-1!==e&&this._parseListeners.splice(e,1)}removeParseListeners(){this._parseListeners.length=0}triggerEnterRuleEvent(){for(let t of this._parseListeners)t.enterEveryRule&&t.enterEveryRule(this._ctx),this._ctx.enterRule(t)}triggerExitRuleEvent(){for(let t=this._parseListeners.length-1;t>=0;t--){let e=this._parseListeners[t];this._ctx.exitRule(e),e.exitEveryRule&&e.exitEveryRule(this._ctx)}}get numberOfSyntaxErrors(){return this._syntaxErrors}get tokenFactory(){return this._input.tokenSource.tokenFactory}getATNWithBypassAlts(){let t=this.serializedATN;if(null==t)throw new Error("The current parser does not support an ATN with bypass alternatives.");let e=E.bypassAltsAtnCache.get(t);if(null==e){let r=new a.ATNDeserializationOptions;r.isGenerateRuleBypassTransitions=!0,e=new u.ATNDeserializer(r).deserialize(s.toCharArray(t)),E.bypassAltsAtnCache.set(t,e)}return e}compileParseTreePattern(e,r,n){return o(this,void 0,void 0,(function*(){if(!n){if(this.inputStream){let t=this.inputStream.tokenSource;t instanceof p.Lexer&&(n=t)}if(!n)throw new Error("Parser can't discover a lexer to use")}let i=n;return new((yield Promise.resolve().then(()=>t(377))).ParseTreePatternMatcher)(i,this).compile(e,r)}))}get errorHandler(){return this._errHandler}set errorHandler(t){this._errHandler=t}get inputStream(){return this._input}set inputStream(t){this.reset(!1),this._input=t}get currentToken(){return this._input.LT(1)}notifyErrorListeners(t,e,r){void 0===e?e=this.currentToken:null===e&&(e=void 0),this._syntaxErrors++;let n=-1,i=-1;null!=e&&(n=e.line,i=e.charPositionInLine);let o=this.getErrorListenerDispatch();o.syntaxError&&o.syntaxError(this,e,n,i,t,r)}consume(){let t=this.currentToken;t.type!==E.EOF&&this.inputStream.consume();let e=0!==this._parseListeners.length;if(this._buildParseTrees||e)if(this._errHandler.inErrorRecoveryMode(this)){let r=this._ctx.addErrorNode(this.createErrorNode(this._ctx,t));if(e)for(let t of this._parseListeners)t.visitErrorNode&&t.visitErrorNode(r)}else{let r=this.createTerminalNode(this._ctx,t);if(this._ctx.addChild(r),e)for(let t of this._parseListeners)t.visitTerminal&&t.visitTerminal(r)}return t}createTerminalNode(t,e){return new v.TerminalNode(e)}createErrorNode(t,e){return new c.ErrorNode(e)}addContextToParseTree(){let t=this._ctx._parent;null!=t&&t.addChild(this._ctx)}enterRule(t,e,r){this.state=e,this._ctx=t,this._ctx._start=this._input.LT(1),this._buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}enterLeftFactoredRule(t,e,r){if(this.state=e,this._buildParseTrees){let e=this._ctx.getChild(this._ctx.childCount-1);this._ctx.removeLastChild(),e._parent=t,t.addChild(e)}this._ctx=t,this._ctx._start=this._input.LT(1),this._buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}exitRule(){this.matchedEOF?this._ctx._stop=this._input.LT(1):this._ctx._stop=this._input.tryLT(-1),this.triggerExitRuleEvent(),this.state=this._ctx.invokingState,this._ctx=this._ctx._parent}enterOuterAlt(t,e){if(t.altNumber=e,this._buildParseTrees&&this._ctx!==t){let e=this._ctx._parent;null!=e&&(e.removeLastChild(),e.addChild(t))}this._ctx=t}get precedence(){return this._precedenceStack.isEmpty?-1:this._precedenceStack.peek()}enterRecursionRule(t,e,r,n){this.state=e,this._precedenceStack.push(n),this._ctx=t,this._ctx._start=this._input.LT(1),this.triggerEnterRuleEvent()}pushNewRecursionContext(t,e,r){let n=this._ctx;n._parent=t,n.invokingState=e,n._stop=this._input.tryLT(-1),this._ctx=t,this._ctx._start=n._start,this._buildParseTrees&&this._ctx.addChild(n),this.triggerEnterRuleEvent()}unrollRecursionContexts(t){this._precedenceStack.pop(),this._ctx._stop=this._input.tryLT(-1);let e=this._ctx;if(this._parseListeners.length>0)for(;this._ctx!==t;)this.triggerExitRuleEvent(),this._ctx=this._ctx._parent;else this._ctx=t;e._parent=t,this._buildParseTrees&&null!=t&&t.addChild(e)}getInvokingContext(t){let e=this._ctx;for(;e&&e.ruleIndex!==t;)e=e._parent;return e}get context(){return this._ctx}set context(t){this._ctx=t}precpred(t,e){return e>=this._precedenceStack.peek()}getErrorListenerDispatch(){return new m.ProxyParserErrorListener(this.getErrorListeners())}inContext(t){return!1}isExpectedToken(t){let e=this.interpreter.atn,r=this._ctx,n=e.states[this.state],i=e.nextTokens(n);if(i.contains(t))return!0;if(!i.contains(T.Token.EPSILON))return!1;for(;null!=r&&r.invokingState>=0&&i.contains(T.Token.EPSILON);){let n=e.states[r.invokingState].transition(0);if((i=e.nextTokens(n.followState)).contains(t))return!0;r=r._parent}return!(!i.contains(T.Token.EPSILON)||t!==T.Token.EOF)}get isMatchedEOF(){return this.matchedEOF}getExpectedTokens(){return this.atn.getExpectedTokens(this.state,this.context)}getExpectedTokensWithinCurrentRule(){let t=this.interpreter.atn,e=t.states[this.state];return t.nextTokens(e)}getRuleIndex(t){let e=this.getRuleIndexMap().get(t);return null!=e?e:-1}get ruleContext(){return this._ctx}getRuleInvocationStack(t=this._ctx){let e=t,r=this.ruleNames,n=[];for(;null!=e;){let t=e.ruleIndex;t<0?n.push("n/a"):n.push(r[t]),e=e._parent}return n}getDFAStrings(){let t=[];for(let e of this._interp.atn.decisionToDFA)t.push(e.toString(this.vocabulary,this.ruleNames));return t}dumpDFA(){let t=!1;for(let r of this._interp.atn.decisionToDFA)r.isEmpty||(t&&console.log(),console.log("Decision "+r.decision+":"),e.stdout.write(r.toString(this.vocabulary,this.ruleNames)),t=!0)}get sourceName(){return this._input.sourceName}get parseInfo(){return Promise.resolve().then(()=>t(329)).then(t=>{let e=this.interpreter;if(e instanceof t.ProfilingATNSimulator)return new f.ParseInfo(e)})}setProfile(e){return o(this,void 0,void 0,(function*(){let r=yield Promise.resolve().then(()=>t(329)),n=this.interpreter;e?n instanceof r.ProfilingATNSimulator||(this.interpreter=new r.ProfilingATNSimulator(this)):n instanceof r.ProfilingATNSimulator&&(this.interpreter=new y.ParserATNSimulator(this.atn,this)),this.interpreter.setPredictionMode(n.getPredictionMode())}))}set isTrace(t){t?(this._tracer?this.removeParseListener(this._tracer):this._tracer=new _(this.ruleNames,this._input),this.addParseListener(this._tracer)):this._tracer&&(this.removeParseListener(this._tracer),this._tracer=void 0)}get isTrace(){return null!=this._tracer}}E.bypassAltsAtnCache=new Map,n([d.NotNull],E.prototype,"_errHandler",void 0),n([d.NotNull],E.prototype,"match",null),n([d.NotNull],E.prototype,"matchWildcard",null),n([d.NotNull],E.prototype,"getParseListeners",null),n([i(0,d.NotNull)],E.prototype,"addParseListener",null),n([d.NotNull],E.prototype,"getATNWithBypassAlts",null),n([d.NotNull,i(0,d.NotNull)],E.prototype,"errorHandler",null),n([d.Override],E.prototype,"inputStream",null),n([d.NotNull],E.prototype,"currentToken",null),n([i(0,d.NotNull)],E.prototype,"enterRule",null),n([d.Override,i(0,d.Nullable)],E.prototype,"precpred",null),n([d.Override],E.prototype,"getErrorListenerDispatch",null),n([d.NotNull],E.prototype,"getExpectedTokens",null),n([d.NotNull],E.prototype,"getExpectedTokensWithinCurrentRule",null),n([d.Override],E.prototype,"parseInfo",null),r.Parser=E}).call(this)}).call(this,t(428))},{252:252,253:253,260:260,269:269,271:271,276:276,282:282,283:283,319:319,320:320,329:329,357:357,365:365,367:367,371:371,377:377,428:428}],267:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(367),o=t(358),s=t(252),a=t(272),u=t(371);class l extends a.RuleContext{constructor(t,e){null==e?super():super(t,e)}static emptyContext(){return l.EMPTY}copyFrom(t){if(this._parent=t._parent,this.invokingState=t.invokingState,this._start=t._start,this._stop=t._stop,t.children){this.children=[];for(let e of t.children)e instanceof i.ErrorNode&&this.addChild(e)}}enterRule(t){}exitRule(t){}addAnyChild(t){return this.children?this.children.push(t):this.children=[t],t}addChild(t){return t instanceof u.TerminalNode?(t.setParent(this),void this.addAnyChild(t)):t instanceof a.RuleContext?void this.addAnyChild(t):(t=new u.TerminalNode(t),this.addAnyChild(t),t.setParent(this),t)}addErrorNode(t){if(t instanceof i.ErrorNode){const e=t;return e.setParent(this),this.addAnyChild(e)}{const e=t;let r=new i.ErrorNode(e);return this.addAnyChild(r),r.setParent(this),r}}removeLastChild(){this.children&&this.children.pop()}get parent(){let t=super.parent;if(void 0===t||t instanceof l)return t;throw new TypeError("Invalid parent type for ParserRuleContext")}getChild(t,e){if(!this.children||t<0||t>=this.children.length)throw new RangeError("index parameter must be between >= 0 and <= number of children.");if(null==e)return this.children[t];let r=this.tryGetChild(t,e);if(void 0===r)throw new Error("The specified node does not exist");return r}tryGetChild(t,e){if(!this.children||t<0||t>=this.children.length)return;let r=-1;for(let n of this.children)if(n instanceof e&&++r===t)return n}getToken(t,e){let r=this.tryGetToken(t,e);if(void 0===r)throw new Error("The specified token does not exist");return r}tryGetToken(t,e){if(!this.children||e<0||e>=this.children.length)return;let r=-1;for(let n of this.children)if(n instanceof u.TerminalNode&&n.symbol.type===t&&++r===e)return n}getTokens(t){let e=[];if(!this.children)return e;for(let r of this.children)r instanceof u.TerminalNode&&r.symbol.type===t&&e.push(r);return e}get ruleContext(){return this}getRuleContext(t,e){return this.getChild(t,e)}tryGetRuleContext(t,e){return this.tryGetChild(t,e)}getRuleContexts(t){let e=[];if(!this.children)return e;for(let r of this.children)r instanceof t&&e.push(r);return e}get childCount(){return this.children?this.children.length:0}get sourceInterval(){return this._start?!this._stop||this._stop.tokenIndex<this._start.tokenIndex?o.Interval.of(this._start.tokenIndex,this._start.tokenIndex-1):o.Interval.of(this._start.tokenIndex,this._stop.tokenIndex):o.Interval.INVALID}get start(){return this._start}get stop(){return this._stop}toInfoString(t){return"ParserRuleContext"+t.getRuleInvocationStack(this).reverse()+"{start="+this._start+", stop="+this._stop+"}"}}l.EMPTY=new l,n([s.Override],l.prototype,"parent",null),n([s.Override],l.prototype,"childCount",null),n([s.Override],l.prototype,"sourceInterval",null),r.ParserRuleContext=l},{252:252,272:272,358:358,367:367,371:371}],270:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.RecognitionException=class extends Error{constructor(t,e,r,n){super(n),this._offendingState=-1,this._recognizer=t,this.input=e,this.ctx=r,t&&(this._offendingState=t.state)}get offendingState(){return this._offendingState}setOffendingState(t){this._offendingState=t}get expectedTokens(){if(this._recognizer)return this._recognizer.atn.getExpectedTokens(this._offendingState,this.ctx)}get context(){return this.ctx}get inputStream(){return this.input}getOffendingToken(t){if(!t||t===this._recognizer)return this.offendingToken}setOffendingToken(t,e){t===this._recognizer&&(this.offendingToken=e)}get recognizer(){return this._recognizer}}},{}],276:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(258);var i;(i=r.Token||(r.Token={})).INVALID_TYPE=0,i.EPSILON=-2,i.MIN_USER_TOKEN_TYPE=1,i.EOF=n.IntStream.EOF,i.DEFAULT_CHANNEL=0,i.HIDDEN_CHANNEL=1,i.MIN_USER_CHANNEL_VALUE=2},{258:258}],320:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(343),s=t(288),a=t(350),u=t(352),l=t(279),c=t(280),h=t(281),p=t(284),d=t(286),f=t(290),y=t(353),m=t(295),g=t(299),v=t(346),T=t(356),_=t(358),E=t(258),b=t(252),S=t(317),x=t(264),C=t(362),A=t(267),N=t(326),O=t(327),w=t(328),R=t(332),L=t(333),P=t(334),I=t(335),D=t(336),U=t(276),M=t(278);let k=class t extends p.ATNSimulator{constructor(t,e){super(t),this.predictionMode=w.PredictionMode.LL,this.force_global_context=!1,this.always_try_local_context=!0,this.enable_global_context_dfa=!1,this.optimize_unique_closure=!0,this.optimize_ll1=!0,this.optimize_tail_calls=!0,this.tail_call_preserves_sll=!0,this.treat_sllk1_conflict_as_ambiguity=!1,this.reportAmbiguities=!1,this.userWantsCtxSensitive=!0,this._parser=e}getPredictionMode(){return this.predictionMode}setPredictionMode(t){this.predictionMode=t}reset(){}adaptivePredict(e,r,n,i){void 0===i&&(i=!1);let o,s=this.atn.decisionToDFA[r];if(this.optimize_ll1&&!s.isPrecedenceDfa&&!s.isEmpty){let t=e.LA(1);if(t>=0&&t<=65535){let e=(r<<16>>>0)+t,n=this.atn.LL1Table.get(e);if(null!=n)return n}}this.dfa=s,this.force_global_context?i=!0:this.always_try_local_context||(i=i||s.isContextSensitive),this.userWantsCtxSensitive=i||this.predictionMode!==w.PredictionMode.SLL&&null!=n&&!this.atn.decisionToState[r].sll,null==n&&(n=A.ParserRuleContext.emptyContext()),s.isEmpty||(o=this.getStartState(s,e,n,i)),null==o&&(null==n&&(n=A.ParserRuleContext.emptyContext()),t.debug&&console.log("ATN decision "+s.decision+" exec LA(1)=="+this.getLookaheadName(e)+", outerContext="+n.toString(this._parser)),o=this.computeStartState(s,n,i));let a=e.mark(),u=e.index;try{let r=this.execDFA(s,e,u,o);return t.debug&&console.log("DFA after predictATN: "+s.toString(this._parser.vocabulary,this._parser.ruleNames)),r}finally{this.dfa=void 0,e.seek(u),e.release(a)}}getStartState(t,e,r,n){if(!n){if(t.isPrecedenceDfa){let e=t.getPrecedenceStartState(this._parser.precedence,!1);if(null==e)return;return new D.SimulatorState(r,e,!1,r)}if(null==t.s0)return;return new D.SimulatorState(r,t.s0,!1,r)}if(!this.enable_global_context_dfa)return;let i,o=r;for(i=t.isPrecedenceDfa?t.getPrecedenceStartState(this._parser.precedence,!0):t.s0full;null!=o&&null!=i&&i.isContextSensitive;)o=this.skipTailCalls(o),i=i.getContextTarget(this.getReturnState(o)),o.isEmpty||(o=o.parent);return null!=i?new D.SimulatorState(r,i,n,o):void 0}execDFA(e,r,n,i){let o=i.outerContext;t.dfa_debug&&console.log("DFA decision "+e.decision+" exec LA(1)=="+this.getLookaheadName(r)+", outerContext="+o.toString(this._parser)),t.dfa_debug&&console.log(e.toString(this._parser.vocabulary,this._parser.ruleNames));let s=i.s0,a=r.LA(1),u=i.remainingOuterContext;for(;;){if(t.dfa_debug&&console.log("DFA state "+s.stateNumber+" LA(1)=="+this.getLookaheadName(r)),i.useContext)for(;s.isContextSymbol(a);){let t;if(null!=u&&(u=this.skipTailCalls(u),t=s.getContextTarget(this.getReturnState(u))),null==t){let t=new D.SimulatorState(i.outerContext,s,i.useContext,u);return this.execATN(e,r,n,t)}u=u.parent,s=t}if(this.isAcceptState(s,i.useContext)){null!=s.predicates?t.dfa_debug&&console.log("accept "+s):t.dfa_debug&&console.log("accept; predict "+s.prediction+" in state "+s.stateNumber);break}let l=this.getExistingTargetState(s,a);if(null==l){let l;if(t.dfa_debug&&a>=0&&console.log("no edge for "+this._parser.vocabulary.getDisplayName(a)),t.dfa_debug){let t=_.Interval.of(n,this._parser.inputStream.index);console.log("ATN exec upon "+this._parser.inputStream.getText(t)+" at DFA state "+s.stateNumber)}let c=new D.SimulatorState(o,s,i.useContext,u);return l=this.execATN(e,r,n,c),t.dfa_debug&&console.log("back from DFA update, alt="+l+", dfa=\n"+e.toString(this._parser.vocabulary,this._parser.ruleNames)),t.dfa_debug&&console.log("DFA decision "+e.decision+" predicts "+l),l}if(l===p.ATNSimulator.ERROR){let t=new D.SimulatorState(o,s,i.useContext,u);return this.handleNoViableAlt(r,n,t)}s=l,this.isAcceptState(s,i.useContext)||a===E.IntStream.EOF||(r.consume(),a=r.LA(1))}if(!i.useContext&&null!=s.configs.conflictInfo&&e.atnStartState instanceof g.DecisionState&&!(!this.userWantsCtxSensitive||!s.configs.dipsIntoOuterContext&&s.configs.isExactConflict||this.treat_sllk1_conflict_as_ambiguity&&r.index===n)){let t,a=s.predicates;if(null!=a){let e=r.index;if(e!==n&&r.seek(n),1===(t=this.evalSemanticContext(a,o,!0)).cardinality())return t.nextSetBit(0);e!==n&&r.seek(e)}if(this.reportAmbiguities){let a=new D.SimulatorState(o,s,i.useContext,u);this.reportAttemptingFullContext(e,t,a,n,r.index)}return r.seek(n),this.adaptivePredict(r,e.decision,o,!0)}let l=s.predicates;if(null!=l){let t=r.index;n!==t&&r.seek(n);let i=this.evalSemanticContext(l,o,this.reportAmbiguities&&this.predictionMode===w.PredictionMode.LL_EXACT_AMBIG_DETECTION);switch(i.cardinality()){case 0:throw this.noViableAlt(r,o,s.configs,n);case 1:return i.nextSetBit(0);default:return n!==t&&r.seek(t),this.reportAmbiguity(e,s,n,t,s.configs.isExactConflict,i,s.configs),i.nextSetBit(0)}}return t.dfa_debug&&console.log("DFA decision "+e.decision+" predicts "+s.prediction),s.prediction}isAcceptState(t,e){return!!t.isAcceptState&&(null==t.configs.conflictingAlts||!e||this.predictionMode!==w.PredictionMode.LL_EXACT_AMBIG_DETECTION||t.configs.isExactConflict)}execATN(e,r,n,i){t.debug&&console.log("execATN decision "+e.decision+" exec LA(1)=="+this.getLookaheadName(r));let o=i.outerContext,s=i.useContext,a=r.LA(1),u=i,c=new O.PredictionContextCache;for(;;){let i=this.computeReachSet(e,u,a,c);if(null==i)return this.setDFAEdge(u.s0,r.LA(1),p.ATNSimulator.ERROR),this.handleNoViableAlt(r,n,u);let h=i.s0;if(this.isAcceptState(h,s)){let u=h.configs.conflictingAlts,c=null==u?h.prediction:l.ATN.INVALID_ALT_NUMBER;if(c!==l.ATN.INVALID_ALT_NUMBER){if(this.optimize_ll1&&r.index===n&&!e.isPrecedenceDfa&&i.outerContext===i.remainingOuterContext&&e.decision>=0&&!h.configs.hasSemanticContext&&a>=0&&a<=65535){let t=(e.decision<<16>>>0)+a;this.atn.LL1Table.set(t,c)}s&&this.always_try_local_context&&this.reportContextSensitivity(e,c,i,n,r.index)}c=h.prediction;let p=null!=u&&this.userWantsCtxSensitive;if(p&&(p=!s&&(h.configs.dipsIntoOuterContext||!h.configs.isExactConflict)&&(!this.treat_sllk1_conflict_as_ambiguity||r.index!==n)),h.configs.hasSemanticContext){let t=h.predicates;if(null!=t){let e=r.index;switch(e!==n&&r.seek(n),(u=this.evalSemanticContext(t,o,p||this.reportAmbiguities)).cardinality()){case 0:throw this.noViableAlt(r,o,h.configs,n);case 1:return u.nextSetBit(0)}e!==n&&r.seek(e)}}if(p){t.debug&&console.log("RETRY with outerContext="+o);let s=this.computeStartState(e,o,!0);return this.reportAmbiguities&&this.reportAttemptingFullContext(e,u,i,n,r.index),r.seek(n),this.execATN(e,r,n,s)}return null!=u&&(this.reportAmbiguities&&u.cardinality()>1&&this.reportAmbiguity(e,h,n,r.index,h.configs.isExactConflict,u,h.configs),c=u.nextSetBit(0)),c}u=i,a!==E.IntStream.EOF&&(r.consume(),a=r.LA(1))}}handleNoViableAlt(t,e,r){if(null!=r.s0){let n=new y.BitSet,i=0;for(let t of r.s0.configs)(t.reachesIntoOuterContext||t.state instanceof R.RuleStopState)&&(n.set(t.alt),i=Math.max(i,t.alt));switch(n.cardinality()){case 0:break;case 1:return n.nextSetBit(0);default:if(!r.s0.configs.hasSemanticContext)return n.nextSetBit(0);let o=new h.ATNConfigSet;for(let t of r.s0.configs)(t.reachesIntoOuterContext||t.state instanceof R.RuleStopState)&&o.add(t);let s=this.getPredsForAmbigAlts(n,o,i);if(null!=s){let i=this.getPredicatePredictions(n,s);if(null!=i){let n=t.index;try{t.seek(e);let o=this.evalSemanticContext(i,r.outerContext,!1);if(!o.isEmpty)return o.nextSetBit(0)}finally{t.seek(n)}}}return n.nextSetBit(0)}}throw this.noViableAlt(t,r.outerContext,r.s0.configs,e)}computeReachSet(t,e,r,n){let i=e.useContext,o=e.remainingOuterContext,s=e.s0;if(i)for(;s.isContextSymbol(r);){let t;if(null!=o&&(o=this.skipTailCalls(o),t=s.getContextTarget(this.getReturnState(o))),null==t)break;o=o.parent,s=t}if(this.isAcceptState(s,i))return new D.SimulatorState(e.outerContext,s,i,o);let a=s,u=this.getExistingTargetState(a,r);if(null==u){let e=this.computeTargetState(t,a,o,r,i,n);u=e[0],o=e[1]}return u!==p.ATNSimulator.ERROR?new D.SimulatorState(e.outerContext,u,i,o):void 0}getExistingTargetState(t,e){return t.getTarget(e)}computeTargetState(e,r,n,i,o,s){let a,u,c=r.configs.toArray(),d=new h.ATNConfigSet;do{let e=!o||null!=n;e||(d.isOutermostConfigSet=!0);let r,p=new h.ATNConfigSet;for(let n of c){if(t.debug&&console.log("testing "+this.getTokenName(i)+" at "+n.toString()),n.state instanceof R.RuleStopState){(o&&!n.reachesIntoOuterContext||i===E.IntStream.EOF)&&(null==r&&(r=[]),r.push(n));continue}let e=n.state.numberOfOptimizedTransitions;for(let t=0;t<e;t++){let e=n.state.getOptimizedTransition(t),r=this.getReachableTarget(n,e,i);null!=r&&p.add(n.transform(r,!1),s)}}if(this.optimize_unique_closure&&null==r&&i!==U.Token.EOF&&p.uniqueAlt!==l.ATN.INVALID_ALT_NUMBER){p.isOutermostConfigSet=d.isOutermostConfigSet,d=p;break}let f=!1,y=i===U.Token.EOF;if(this.closure(p,d,f,e,s,y),u=d.dipsIntoOuterContext,i===E.IntStream.EOF&&(d=this.removeAllConfigsNotInRuleStopState(d,s)),!(null==r||o&&w.PredictionMode.hasConfigInRuleStopState(d)))for(let t of r)d.add(t,s);if(o&&u){d.clear(),n=n,n=this.skipTailCalls(n);let t=this.getReturnState(n);if(null==a&&(a=new T.IntegerList),n=n.isEmpty?void 0:n.parent,a.add(t),t!==N.PredictionContext.EMPTY_FULL_STATE_KEY)for(let e=0;e<c.length;e++)c[e]=c[e].appendContext(t,s)}}while(o&&u);return d.isEmpty?(this.setDFAEdge(r,i,p.ATNSimulator.ERROR),[p.ATNSimulator.ERROR,n]):[this.addDFAEdge(e,r,i,a,d,s),n]}removeAllConfigsNotInRuleStopState(t,e){if(w.PredictionMode.allConfigsInRuleStopStates(t))return t;let r=new h.ATNConfigSet;for(let n of t)n.state instanceof R.RuleStopState&&r.add(n,e);return r}computeStartState(t,e,r){let n=t.isPrecedenceDfa?t.getPrecedenceStartState(this._parser.precedence,r):r?t.s0full:t.s0;if(null!=n){if(!r)return new D.SimulatorState(e,n,r,e);n.setContextSensitive(this.atn)}t.decision;let i=t.atnStartState,o=0,s=e,a=r?N.PredictionContext.EMPTY_FULL:N.PredictionContext.EMPTY_LOCAL,u=new O.PredictionContextCache;if(r){if(!this.enable_global_context_dfa)for(;null!=s;)s.isEmpty?(o=N.PredictionContext.EMPTY_FULL_STATE_KEY,s=void 0):(o=this.getReturnState(s),a=a.appendSingleContext(o,u),s=s.parent);for(;null!=n&&n.isContextSensitive&&null!=s;){let t;if((s=this.skipTailCalls(s)).isEmpty?(t=n.getContextTarget(N.PredictionContext.EMPTY_FULL_STATE_KEY),o=N.PredictionContext.EMPTY_FULL_STATE_KEY,s=void 0):(o=this.getReturnState(s),t=n.getContextTarget(o),a=a.appendSingleContext(o,u),s=s.parent),null==t)break;n=t}}if(null!=n&&!n.isContextSensitive)return new D.SimulatorState(e,n,r,s);let l=new h.ATNConfigSet;for(;;){let p=new h.ATNConfigSet,d=i.numberOfTransitions;for(let t=0;t<d;t++){let e=i.transition(t).target;p.add(c.ATNConfig.create(e,t+1,a))}let f=null!=s;f||(l.isOutermostConfigSet=!0);let y=!0;this.closure(p,l,y,f,u,!1);let m,g=l.dipsIntoOuterContext;if(r&&!this.enable_global_context_dfa){n=this.addDFAState(t,l,u);break}if(null==n?t.isPrecedenceDfa?(l=this.applyPrecedenceFilter(l,e,u),m=this.addDFAState(t,l,u),t.setPrecedenceStartState(this._parser.precedence,r,m)):(m=this.addDFAState(t,l,u),r?t.s0full?m=t.s0full:t.s0full=m:t.s0?m=t.s0:t.s0=m):(t.isPrecedenceDfa&&(l=this.applyPrecedenceFilter(l,e,u)),m=this.addDFAState(t,l,u),n.setContextTarget(o,m)),n=m,!r||!g)break;m.setContextSensitive(this.atn),s=s,l.clear(),s=this.skipTailCalls(s);let v=this.getReturnState(s);s=s.isEmpty?void 0:s.parent,v!==N.PredictionContext.EMPTY_FULL_STATE_KEY&&(a=a.appendSingleContext(v,u)),o=v}return new D.SimulatorState(e,n,r,s)}applyPrecedenceFilter(t,e,r){let n=new Map,i=new h.ATNConfigSet;for(let o of t){if(1!==o.alt)continue;let t=o.semanticContext.evalPrecedence(this._parser,e);null!=t&&(n.set(o.state.stateNumber,o.context),t!==o.semanticContext?i.add(o.transform(o.state,!1,t),r):i.add(o,r))}for(let o of t)if(1!==o.alt){if(!o.isPrecedenceFilterSuppressed){let t=n.get(o.state.stateNumber);if(null!=t&&t.equals(o.context))continue}i.add(o,r)}return i}getReachableTarget(t,e,r){if(e.matches(r,0,this.atn.maxTokenType))return e.target}predicateDFAState(e,r,n){let i=this.getConflictingAltsFromConfigSet(r);if(!i)throw new Error("This unhandled scenario is intended to be unreachable, but I'm currently not sure of why we know that's the case.");t.debug&&console.log("predicateDFAState "+e);let o,s=this.getPredsForAmbigAlts(i,r,n);return null!=s&&(o=this.getPredicatePredictions(i,s),e.predicates=o),o}getPredsForAmbigAlts(e,r,n){let i=new Array(n+1),o=i.length;for(let t of r)e.get(t.alt)&&(i[t.alt]=P.SemanticContext.or(i[t.alt],t.semanticContext));let s=0;for(let t=0;t<o;t++)null==i[t]?i[t]=P.SemanticContext.NONE:i[t]!==P.SemanticContext.NONE&&s++;let a=i;return 0===s&&(a=void 0),t.debug&&console.log("getPredsForAmbigAlts result "+(a?u.Arrays.toString(a):"undefined")),a}getPredicatePredictions(t,e){let r=[],n=!1;for(let i=1;i<e.length;i++){let o=e[i];null!=t&&t.get(i)&&o===P.SemanticContext.NONE?r.push(new v.DFAState.PredPrediction(o,i)):o!==P.SemanticContext.NONE&&(n=!0,r.push(new v.DFAState.PredPrediction(o,i)))}if(n)return r}evalSemanticContext(e,r,n){let i=new y.BitSet;for(let o of e){if(o.pred===P.SemanticContext.NONE){if(i.set(o.alt),!n)break;continue}let e=this.evalSemanticContextImpl(o.pred,r,o.alt);if((t.debug||t.dfa_debug)&&console.log("eval pred "+o+"="+e),e&&((t.debug||t.dfa_debug)&&console.log("PREDICT "+o.alt),i.set(o.alt),!n))break}return i}evalSemanticContextImpl(t,e,r){return t.eval(this._parser,e)}closure(t,e,r,n,i,o){null==i&&(i=O.PredictionContextCache.UNCACHED);let s=t,u=new a.Array2DHashSet(C.ObjectEqualityComparator.INSTANCE);for(;s.size>0;){let t=new h.ATNConfigSet;for(let a of s)this.closureImpl(a,e,t,u,r,n,i,0,o);s=t}}closureImpl(e,r,n,i,o,a,u,l,h){if(t.debug&&console.log("closure("+e.toString(this._parser,!0)+")"),e.state instanceof R.RuleStopState)if(e.context.isEmpty){if(!a)return void r.add(e,u);t.debug&&console.log("FALLING off rule "+this.getRuleName(e.state.ruleIndex)),e.context===N.PredictionContext.EMPTY_FULL?e=e.transform(e.state,!1,N.PredictionContext.EMPTY_LOCAL):!e.reachesIntoOuterContext&&N.PredictionContext.isEmptyLocal(e.context)&&r.add(e,u)}else{let t=e.context.hasEmpty,s=e.context.size-(t?1:0);for(let p=0;p<s;p++){let t=e.context.getParent(p),s=this.atn.states[e.context.getReturnState(p)],d=c.ATNConfig.create(s,e.alt,t,e.semanticContext);d.outerContextDepth=e.outerContextDepth,d.isPrecedenceFilterSuppressed=e.isPrecedenceFilterSuppressed,this.closureImpl(d,r,n,i,o,a,u,l-1,h)}if(!t||!a)return;e=e.transform(e.state,!1,N.PredictionContext.EMPTY_LOCAL)}let p=e.state;p.onlyHasEpsilonTransitions||(r.add(e,u),t.debug&&console.log("added config "+r));for(let c=0;c<p.numberOfOptimizedTransitions;c++){if(0===c&&p.stateType===d.ATNStateType.STAR_LOOP_ENTRY&&p.precedenceRuleDecision&&!e.context.hasEmpty){let t=p,r=!0;for(let n=0;n<e.context.size;n++)if(!t.precedenceLoopbackStates.get(e.context.getReturnState(n))){r=!1;break}if(r)continue}let f=p.getOptimizedTransition(c),y=!(f instanceof s.ActionTransition)&&o,m=this.getEpsilonTarget(e,f,y,0===l,u,h);if(null!=m){if(f instanceof L.RuleTransition&&null!=n&&!o){n.add(m,u);continue}let s=l;if(e.state instanceof R.RuleStopState){if(null!=this.dfa&&this.dfa.isPrecedenceDfa&&f.outermostPrecedenceReturn===this.dfa.atnStartState.ruleIndex&&(m.isPrecedenceFilterSuppressed=!0),m.outerContextDepth=m.outerContextDepth+1,!i.add(m))continue;s--,t.debug&&console.log("dips into outer ctx: "+m)}else if(f instanceof L.RuleTransition)!this.optimize_tail_calls||!f.optimizedTailCall||this.tail_call_preserves_sll&&N.PredictionContext.isEmptyLocal(e.context)?s>=0&&s++:0===s&&(s--,!this.tail_call_preserves_sll&&N.PredictionContext.isEmptyLocal(e.context)&&(m.outerContextDepth=m.outerContextDepth+1));else if(!f.isEpsilon&&!i.add(m))continue;this.closureImpl(m,r,n,i,y,a,u,s,h)}}}getRuleName(t){return null!=this._parser&&t>=0?this._parser.ruleNames[t]:"<rule "+t+">"}getEpsilonTarget(t,e,r,n,i,o){switch(e.serializationType){case 3:return this.ruleTransition(t,e,i);case 10:return this.precedenceTransition(t,e,r,n);case 4:return this.predTransition(t,e,r,n);case 6:return this.actionTransition(t,e);case 1:return t.transform(e.target,!1);case 5:case 2:case 7:return o&&e.matches(U.Token.EOF,0,1)?t.transform(e.target,!1):void 0;default:return}}actionTransition(e,r){return t.debug&&console.log("ACTION edge "+r.ruleIndex+":"+r.actionIndex),e.transform(r.target,!1)}precedenceTransition(e,r,n,i){let o;if(t.debug&&(console.log("PRED (collectPredicates="+n+") "+r.precedence+">=_p, ctx dependent=true"),null!=this._parser&&console.log("context surrounding pred is "+this._parser.getRuleInvocationStack())),n&&i){let t=P.SemanticContext.and(e.semanticContext,r.predicate);o=e.transform(r.target,!1,t)}else o=e.transform(r.target,!1);return t.debug&&console.log("config from pred transition="+o),o}predTransition(e,r,n,i){let o;if(t.debug&&(console.log("PRED (collectPredicates="+n+") "+r.ruleIndex+":"+r.predIndex+", ctx dependent="+r.isCtxDependent),null!=this._parser&&console.log("context surrounding pred is "+this._parser.getRuleInvocationStack())),n&&(!r.isCtxDependent||r.isCtxDependent&&i)){let t=P.SemanticContext.and(e.semanticContext,r.predicate);o=e.transform(r.target,!1,t)}else o=e.transform(r.target,!1);return t.debug&&console.log("config from pred transition="+o),o}ruleTransition(e,r,n){t.debug&&console.log("CALL rule "+this.getRuleName(r.target.ruleIndex)+", ctx="+e.context);let i,o=r.followState;return i=!this.optimize_tail_calls||!r.optimizedTailCall||this.tail_call_preserves_sll&&N.PredictionContext.isEmptyLocal(e.context)?null!=n?n.getChild(e.context,o.stateNumber):e.context.getChild(o.stateNumber):e.context,e.transform(r.target,!1,i)}isConflicted(e,r){if(e.uniqueAlt!==l.ATN.INVALID_ALT_NUMBER||e.size<=1)return;let n=e.toArray();n.sort(t.STATE_ALT_SORT_COMPARATOR);let i=!e.dipsIntoOuterContext,o=new y.BitSet,s=n[0].alt;o.set(s);let a,u=n[0].state.nonStopStateNumber;for(let t of n){let e=t.state.nonStopStateNumber;if(e!==u){if(t.alt!==s)return;u=e}}if(i){u=n[0].state.nonStopStateNumber,a=new y.BitSet;let t=s;for(let r of n){if(r.state.nonStopStateNumber!==u)break;let e=r.alt;a.set(e),t=e}u=n[0].state.nonStopStateNumber;let e=s;for(let r of n){let n=r.state.nonStopStateNumber,o=r.alt;if(n!==u){if(e!==t){i=!1;break}u=n,e=s}else if(o!==e){if(o!==a.nextSetBit(e+1)){i=!1;break}e=o}}}u=n[0].state.nonStopStateNumber;let c=0,h=0,p=n[0].context;for(let t=1;t<n.length;t++){let e=n[t];if(e.alt!==s)break;if(e.state.nonStopStateNumber!==u)break;h=t,p=r.join(p,n[t].context)}for(let t=h+1;t<n.length;t++){let e=n[t],a=e.state;if(o.set(e.alt),a.nonStopStateNumber!==u){u=a.nonStopStateNumber,c=t,h=t,p=e.context;for(let t=c+1;t<n.length;t++){let e=n[t];if(e.alt!==s)break;if(e.state.nonStopStateNumber!==u)break;h=t,p=r.join(p,e.context)}t=h;continue}let l=e.context,d=e.alt,f=t;for(let t=f+1;t<n.length;t++){let e=n[t];if(e.alt!==d)break;if(e.state.nonStopStateNumber!==u)break;f=t,l=r.join(l,e.context)}t=f;let y=r.join(p,l);if(!p.equals(y))return;i=i&&p.equals(l)}return new m.ConflictInfo(o,i)}getConflictingAltsFromConfigSet(t){let e=t.conflictingAlts;return null==e&&t.uniqueAlt!==l.ATN.INVALID_ALT_NUMBER&&(e=new y.BitSet).set(t.uniqueAlt),e}getTokenName(t){if(t===U.Token.EOF)return"EOF";let e=(null!=this._parser?this._parser.vocabulary:M.VocabularyImpl.EMPTY_VOCABULARY).getDisplayName(t);return e===String(t)?e:e+"<"+t+">"}getLookaheadName(t){return this.getTokenName(t.LA(1))}dumpDeadEndConfigs(t){console.log("dead end configs: ");let e=t.deadEndConfigs;if(e)for(let r of e){let t="no edges";if(r.state.numberOfOptimizedTransitions>0){let e=r.state.getOptimizedTransition(0);e instanceof f.AtomTransition?t="Atom "+this.getTokenName(e._label):e instanceof I.SetTransition&&(t=(e instanceof S.NotSetTransition?"~":"")+"Set "+e.set.toString())}console.log(r.toString(this._parser,!0)+":"+t)}}noViableAlt(t,e,r,n){return new x.NoViableAltException(this._parser,t,t.get(n),t.LT(1),r,e)}getUniqueAlt(t){let e=l.ATN.INVALID_ALT_NUMBER;for(let r of t)if(e===l.ATN.INVALID_ALT_NUMBER)e=r.alt;else if(r.alt!==e)return l.ATN.INVALID_ALT_NUMBER;return e}configWithAltAtStopState(t,e){for(let r of t)if(r.alt===e&&r.state instanceof R.RuleStopState)return!0;return!1}addDFAEdge(e,r,n,i,o,s){let a=r,u=this.addDFAState(e,o,s);if(null!=i)for(let t of i.toArray()){if(t===N.PredictionContext.EMPTY_FULL_STATE_KEY&&a.configs.isOutermostConfigSet)continue;a.setContextSensitive(this.atn),a.setContextSymbol(n);let r=a.getContextTarget(t);null==r?(r=this.addDFAContextState(e,a.configs,t,s),a.setContextTarget(t,r),a=r):a=r}return t.debug&&console.log("EDGE "+a+" -> "+u+" upon "+this.getTokenName(n)),this.setDFAEdge(a,n,u),t.debug&&console.log("DFA=\n"+e.toString(null!=this._parser?this._parser.vocabulary:M.VocabularyImpl.EMPTY_VOCABULARY,null!=this._parser?this._parser.ruleNames:void 0)),u}setDFAEdge(t,e,r){null!=t&&t.setTarget(e,r)}addDFAContextState(t,e,r,n){if(r!==N.PredictionContext.EMPTY_FULL_STATE_KEY){let i=new h.ATNConfigSet;for(let t of e)i.add(t.appendContext(r,n));return this.addDFAState(t,i,n)}return(e=e.clone(!0)).isOutermostConfigSet=!0,this.addDFAState(t,e,n)}addDFAState(e,r,n){let i=this.enable_global_context_dfa||!r.isOutermostConfigSet;if(i){r.isReadOnly||r.optimizeConfigs(this);let t=this.createDFAState(e,r),n=e.states.get(t);if(null!=n)return n}r.isReadOnly||null==r.conflictInfo&&(r.conflictInfo=this.isConflicted(r,n));let s=this.createDFAState(e,r.clone(!0)),a=this.atn.getDecisionState(e.decision),u=this.getUniqueAlt(r);if(u!==l.ATN.INVALID_ALT_NUMBER)s.acceptStateInfo=new o.AcceptStateInfo(u);else if(null!=r.conflictingAlts){let t=r.conflictingAlts;t&&(s.acceptStateInfo=new o.AcceptStateInfo(t.nextSetBit(0)))}if(s.isAcceptState&&r.hasSemanticContext&&this.predicateDFAState(s,r,a.numberOfTransitions),!i)return s;let c=e.addState(s);return t.debug&&c===s&&console.log("adding new DFA state: "+s),c}createDFAState(t,e){return new v.DFAState(e)}reportAttemptingFullContext(e,r,n,i,o){if(t.debug||t.retry_debug){let t=_.Interval.of(i,o);console.log("reportAttemptingFullContext decision="+e.decision+":"+n.s0.configs+", input="+this._parser.inputStream.getText(t))}if(null!=this._parser){let t=this._parser.getErrorListenerDispatch();t.reportAttemptingFullContext&&t.reportAttemptingFullContext(this._parser,e,i,o,r,n)}}reportContextSensitivity(e,r,n,i,o){if(t.debug||t.retry_debug){let t=_.Interval.of(i,o);console.log("reportContextSensitivity decision="+e.decision+":"+n.s0.configs+", input="+this._parser.inputStream.getText(t))}if(null!=this._parser){let t=this._parser.getErrorListenerDispatch();t.reportContextSensitivity&&t.reportContextSensitivity(this._parser,e,i,o,r,n)}}reportAmbiguity(e,r,n,i,o,s,a){if(t.debug||t.retry_debug){let t=_.Interval.of(n,i);console.log("reportAmbiguity "+s+":"+a+", input="+this._parser.inputStream.getText(t))}if(null!=this._parser){let t=this._parser.getErrorListenerDispatch();t.reportAmbiguity&&t.reportAmbiguity(this._parser,e,n,i,o,s,a)}}getReturnState(t){return t.isEmpty?N.PredictionContext.EMPTY_FULL_STATE_KEY:this.atn.states[t.invokingState].transition(0).followState.stateNumber}skipTailCalls(t){if(!this.optimize_tail_calls)return t;for(;!t.isEmpty&&this.atn.states[t.invokingState].transition(0).tailCall;)t=t.parent;return t}get parser(){return this._parser}};k.debug=!1,k.dfa_debug=!1,k.retry_debug=!1,k.STATE_ALT_SORT_COMPARATOR=(t,e)=>{let r=t.state.nonStopStateNumber-e.state.nonStopStateNumber;return 0!==r||0!=(r=t.alt-e.alt)?r:0},n([b.NotNull],k.prototype,"predictionMode",void 0),n([b.NotNull],k.prototype,"getPredictionMode",null),n([i(0,b.NotNull)],k.prototype,"setPredictionMode",null),n([b.Override],k.prototype,"reset",null),n([i(0,b.NotNull)],k.prototype,"adaptivePredict",null),n([i(0,b.NotNull),i(1,b.NotNull),i(2,b.NotNull)],k.prototype,"getStartState",null),n([i(0,b.NotNull),i(1,b.NotNull),i(3,b.NotNull)],k.prototype,"execDFA",null),n([i(0,b.NotNull),i(1,b.NotNull),i(3,b.NotNull)],k.prototype,"execATN",null),n([i(0,b.NotNull),i(2,b.NotNull)],k.prototype,"handleNoViableAlt",null),n([i(0,b.NotNull)],k.prototype,"getExistingTargetState",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"computeTargetState",null),n([b.NotNull,i(0,b.NotNull)],k.prototype,"removeAllConfigsNotInRuleStopState",null),n([b.NotNull],k.prototype,"computeStartState",null),n([b.NotNull,i(0,b.NotNull)],k.prototype,"applyPrecedenceFilter",null),n([i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"getReachableTarget",null),n([i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"getPredsForAmbigAlts",null),n([i(0,b.NotNull)],k.prototype,"evalSemanticContext",null),n([i(0,b.NotNull)],k.prototype,"evalSemanticContextImpl",null),n([i(1,b.NotNull),i(4,b.Nullable)],k.prototype,"closure",null),n([i(0,b.NotNull),i(1,b.NotNull),i(2,b.Nullable),i(3,b.NotNull),i(6,b.NotNull)],k.prototype,"closureImpl",null),n([b.NotNull],k.prototype,"getRuleName",null),n([i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"getEpsilonTarget",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"actionTransition",null),n([b.Nullable,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"precedenceTransition",null),n([b.Nullable,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"predTransition",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull),i(2,b.Nullable)],k.prototype,"ruleTransition",null),n([i(0,b.NotNull)],k.prototype,"isConflicted",null),n([b.NotNull],k.prototype,"getTokenName",null),n([i(0,b.NotNull)],k.prototype,"dumpDeadEndConfigs",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull),i(2,b.NotNull)],k.prototype,"noViableAlt",null),n([i(0,b.NotNull)],k.prototype,"getUniqueAlt",null),n([i(0,b.NotNull)],k.prototype,"configWithAltAtStopState",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull),i(4,b.NotNull)],k.prototype,"addDFAEdge",null),n([i(0,b.Nullable),i(2,b.Nullable)],k.prototype,"setDFAEdge",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"addDFAContextState",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"addDFAState",null),n([b.NotNull,i(0,b.NotNull),i(1,b.NotNull)],k.prototype,"createDFAState",null),n([i(0,b.NotNull),i(2,b.NotNull)],k.prototype,"reportAttemptingFullContext",null),n([i(0,b.NotNull),i(2,b.NotNull)],k.prototype,"reportContextSensitivity",null),n([i(0,b.NotNull),i(5,b.NotNull),i(6,b.NotNull)],k.prototype,"reportAmbiguity",null),k=n([i(0,b.NotNull)],k),r.ParserATNSimulator=k},{252:252,258:258,264:264,267:267,276:276,278:278,279:279,280:280,281:281,284:284,286:286,288:288,290:290,295:295,299:299,317:317,326:326,327:327,328:328,332:332,333:333,334:334,335:335,336:336,343:343,346:346,350:350,352:352,353:353,356:356,358:358,362:362}],203:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n extends Array{static wrap(t){if(t instanceof n)return t;{const e=new n;return e.push(t),e}}getValue(t){if(0!==this.length)for(const e of Array.from(this).reverse())if(void 0!==e.getValue(t))return e.getValue(t)}setValue(t,e){throw new Error(`Can't set value to ${t}, stacked memory is read-only`)}version(){return"0"}}r.StackedMemory=n},{}],205:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(348),o=t(373),s=t(167),a=t(179),u=t(192),l=t(208),c=n(t(207)),h=t(210),p=t(196);class d{constructor(t){this.ExpressionTransformer=class extends o.AbstractParseTreeVisitor{constructor(t){super(),this.escapeRegex=new RegExp(/\\[^\r\n]?/g),this._lookupFunction=void 0,this.transform=t=>this.visit(t),this.visitParenthesisExp=t=>this.visit(t.expression()),this.defaultResult=()=>new s.Constant(""),this.makeExpression=(t,...e)=>{if(!this._lookupFunction(t))throw new Error(t+" does not have an evaluator, it's not a built-in function or a custom function.");return a.Expression.makeExpression(t,this._lookupFunction(t),...e)},this._lookupFunction=t}visitUnaryOpExp(t){const e=t.getChild(0).text,r=this.visit(t.expression());return e===u.ExpressionType.Subtract||e===u.ExpressionType.Add?this.makeExpression(e,new s.Constant(0),r):this.makeExpression(e,r)}visitBinaryOpExp(t){const e=t.getChild(1).text,r=this.visit(t.expression(0)),n=this.visit(t.expression(1));return this.makeExpression(e,r,n)}visitTripleOpExp(t){const e=this.visit(t.expression(0)),r=this.visit(t.expression(1)),n=this.visit(t.expression(2));return this.makeExpression(u.ExpressionType.If,e,r,n)}visitFuncInvokeExp(t){const e=this.processArgsList(t.argsList());let r=t.primaryExpression().text;return void 0!==t.NON()&&(r+=t.NON().text),this.makeExpression(r,...e)}visitIdAtom(t){const e=t.text;return"false"===e?new s.Constant(!1):"true"===e?new s.Constant(!0):"null"===e?new s.Constant(null):"undefined"===e?new s.Constant(void 0):this.makeExpression(u.ExpressionType.Accessor,new s.Constant(e))}visitIndexAccessExp(t){const e=this.visit(t.expression()),r=this.visit(t.primaryExpression());return this.makeExpression(u.ExpressionType.Element,r,e)}visitMemberAccessExp(t){const e=t.IDENTIFIER().text,r=this.visit(t.primaryExpression());return this.makeExpression(u.ExpressionType.Accessor,new s.Constant(e),r)}visitNumericAtom(t){const e=parseFloat(t.text);if(p.FunctionUtils.isNumber(e))return new s.Constant(e);throw new Error(t.text+" is not a number.")}visitArrayCreationExp(t){const e=this.processArgsList(t.argsList());return this.makeExpression(u.ExpressionType.CreateArray,...e)}visitStringAtom(t){let e=t.text;if(e.startsWith("'")&&e.endsWith("'"))e=e.substr(1,e.length-2).replace(/\\'/g,"'");else{if(!e.startsWith('"')||!e.endsWith('"'))throw new Error("Invalid string "+e);e=e.substr(1,e.length-2).replace(/\\"/g,'"')}return new s.Constant(this.evalEscape(e))}visitJsonCreationExp(t){let e=this.makeExpression(u.ExpressionType.Json,new s.Constant("{}"));if(t.keyValuePairList())for(const r of t.keyValuePairList().keyValuePair()){let t="";const n=r.key().children[0];n instanceof o.TerminalNode&&(t=n.symbol.type===c.ExpressionAntlrParser.IDENTIFIER?n.text:n.text.substring(1,n.text.length-1)),e=this.makeExpression(u.ExpressionType.SetProperty,e,new s.Constant(t),this.visit(r.expression()))}return e}visitStringInterpolationAtom(t){const e=[new s.Constant("")];for(const r of t.stringInterpolation().children)if(r instanceof o.TerminalNode)switch(r.symbol.type){case c.ExpressionAntlrParser.TEMPLATE:{const t=this.trimExpression(r.text);e.push(a.Expression.parse(t,this._lookupFunction));break}case c.ExpressionAntlrParser.ESCAPE_CHARACTER:e.push(new s.Constant(r.text.replace(/\\`/g,"`").replace(/\\\$/g,"$")))}else e.push(new s.Constant(r.text));return this.makeExpression(u.ExpressionType.Concat,...e)}processArgsList(t){const e=[];if(!t)return e;for(const r of t.children)if(r instanceof c.LambdaContext){const t=this.makeExpression(u.ExpressionType.Accessor,new s.Constant(r.IDENTIFIER().text)),n=this.visit(r.expression());e.push(t),e.push(n)}else r instanceof c.ExpressionContext&&e.push(this.visit(r));return e}trimExpression(t){let e=t.trim();return e.startsWith("$")&&(e=e.substr(1)),(e=e.trim()).startsWith("{")&&e.endsWith("}")&&(e=e.substr(1,e.length-2)),e.trim()}evalEscape(t){const e={"\\r":"\r","\\n":"\n","\\t":"\t","\\\\":"\\"};return t.replace(this.escapeRegex,t=>t in e?e[t]:t)}},this.EvaluatorLookup=t||a.Expression.lookup}static antlrParse(t){if(d.expressionDict.has(t))return d.expressionDict.get(t);const e=new i.ANTLRInputStream(t),r=new l.ExpressionAntlrLexer(e);r.removeErrorListeners();const n=new i.CommonTokenStream(r),o=new l.ExpressionAntlrParser(n);let s;o.removeErrorListeners(),o.addErrorListener(h.ParseErrorListener.Instance),o.buildParseTree=!0;const a=o.file();return void 0!==a&&(s=a.expression()),d.expressionDict.set(t,s),s}parse(t){return null==t||""===t?new s.Constant(""):new this.ExpressionTransformer(this.EvaluatorLookup).transform(d.antlrParse(t))}}d.expressionDict=new Map,r.ExpressionParser=d},{167:167,179:179,192:192,196:196,207:207,208:208,210:210,348:348,373:373}],210:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{syntaxError(t,e,r,n,i,o){throw Error(`syntax error at line ${r}:${n} Invalid expression format.`)}}n.Instance=new n,r.ParseErrorListener=n},{}],208:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(206)),n(t(207))},{206:206,207:207}],207:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(279),o=t(283),s=t(256),a=t(264),u=t(265),l=t(267),c=t(320),h=t(270),p=t(276),d=t(278),f=n(t(365));class y extends u.Parser{constructor(t){super(t),this._interp=new c.ParserATNSimulator(y._ATN,this)}get vocabulary(){return y.VOCABULARY}get grammarFileName(){return"ExpressionAntlrParser.g4"}get ruleNames(){return y.ruleNames}get serializedATN(){return y._serializedATN}file(){let t=new m(this._ctx,this.state);this.enterRule(t,0,y.RULE_file);try{this.enterOuterAlt(t,1),this.state=20,this.expression(0),this.state=21,this.match(y.EOF)}catch(e){if(!(e instanceof h.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}expression(t){void 0===t&&(t=0);let e,r=this._ctx,n=this.state,o=new g(this._ctx,n),u=o;this.enterRecursionRule(o,2,y.RULE_expression,t);try{let t;switch(this.enterOuterAlt(o,1),this.state=27,this._errHandler.sync(this),this._input.LA(1)){case y.PLUS:case y.SUBSTRACT:case y.NON:o=new v(o),this._ctx=o,u=o,this.state=24,0!=(-32&(e=this._input.LA(1)))||0==(1<<e&(1<<y.PLUS|1<<y.SUBSTRACT|1<<y.NON))?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=25,this.expression(12);break;case y.STRING_INTERPOLATION_START:case y.OPEN_BRACKET:case y.OPEN_SQUARE_BRACKET:case y.OPEN_CURLY_BRACKET:case y.NUMBER:case y.IDENTIFIER:case y.STRING:o=new E(o),this._ctx=o,u=o,this.state=26,this.primaryExpression(0);break;default:throw new a.NoViableAltException(this)}for(this._ctx._stop=this._input.tryLT(-1),this.state=64,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,2,this._ctx);2!==t&&t!==i.ATN.INVALID_ALT_NUMBER;){if(1===t)switch(null!=this._parseListeners&&this.triggerExitRuleEvent(),u=o,this.state=62,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,1,this._ctx)){case 1:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=29,!this.precpred(this._ctx,11))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 11)");this.state=30,this.match(y.XOR),this.state=31,this.expression(11);break;case 2:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=32,!this.precpred(this._ctx,10))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 10)");this.state=33,0!=(-32&(e=this._input.LA(1)))||0==(1<<e&(1<<y.ASTERISK|1<<y.SLASH|1<<y.PERCENT))?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=34,this.expression(11);break;case 3:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=35,!this.precpred(this._ctx,9))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 9)");this.state=36,(e=this._input.LA(1))!==y.PLUS&&e!==y.SUBSTRACT?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=37,this.expression(10);break;case 4:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=38,!this.precpred(this._ctx,8))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 8)");this.state=39,(e=this._input.LA(1))!==y.DOUBLE_EQUAL&&e!==y.NOT_EQUAL?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=40,this.expression(9);break;case 5:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=41,!this.precpred(this._ctx,7))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 7)");this.state=42,this.match(y.SINGLE_AND),this.state=43,this.expression(8);break;case 6:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=44,!this.precpred(this._ctx,6))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 6)");this.state=45,0!=(-32&(e=this._input.LA(1)))||0==(1<<e&(1<<y.LESS_THAN|1<<y.MORE_THAN|1<<y.LESS_OR_EQUAl|1<<y.MORE_OR_EQUAL))?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume()),this.state=46,this.expression(7);break;case 7:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=47,!this.precpred(this._ctx,5))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 5)");this.state=48,this.match(y.DOUBLE_AND),this.state=49,this.expression(6);break;case 8:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=50,!this.precpred(this._ctx,4))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 4)");this.state=51,this.match(y.DOUBLE_VERTICAL_CYLINDER),this.state=52,this.expression(5);break;case 9:if(o=new T(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=53,!this.precpred(this._ctx,3))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 3)");this.state=54,this.match(y.NULL_COALESCE),this.state=55,this.expression(4);break;case 10:if(o=new _(new g(r,n)),this.pushNewRecursionContext(o,2,y.RULE_expression),this.state=56,!this.precpred(this._ctx,2))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 2)");this.state=57,this.match(y.QUESTION_MARK),this.state=58,this.expression(0),this.state=59,this.match(y.COLON),this.state=60,this.expression(3)}this.state=66,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,2,this._ctx)}}catch(l){if(!(l instanceof h.RecognitionException))throw l;o.exception=l,this._errHandler.reportError(this,l),this._errHandler.recover(this,l)}finally{this.unrollRecursionContexts(r)}return o}primaryExpression(t){void 0===t&&(t=0);let e,r=this._ctx,n=this.state,o=new b(this._ctx,n),u=o;this.enterRecursionRule(o,4,y.RULE_primaryExpression,t);try{let t;switch(this.enterOuterAlt(o,1),this.state=86,this._errHandler.sync(this),this._input.LA(1)){case y.OPEN_BRACKET:o=new S(o),this._ctx=o,u=o,this.state=68,this.match(y.OPEN_BRACKET),this.state=69,this.expression(0),this.state=70,this.match(y.CLOSE_BRACKET);break;case y.OPEN_SQUARE_BRACKET:o=new x(o),this._ctx=o,u=o,this.state=72,this.match(y.OPEN_SQUARE_BRACKET),this.state=74,this._errHandler.sync(this),(0==(-32&(e=this._input.LA(1)))&&0!=(1<<e&(1<<y.STRING_INTERPOLATION_START|1<<y.PLUS|1<<y.SUBSTRACT|1<<y.NON|1<<y.OPEN_BRACKET|1<<y.OPEN_SQUARE_BRACKET|1<<y.OPEN_CURLY_BRACKET|1<<y.NUMBER))||e===y.IDENTIFIER||e===y.STRING)&&(this.state=73,this.argsList()),this.state=76,this.match(y.CLOSE_SQUARE_BRACKET);break;case y.OPEN_CURLY_BRACKET:o=new C(o),this._ctx=o,u=o,this.state=77,this.match(y.OPEN_CURLY_BRACKET),this.state=79,this._errHandler.sync(this),(e=this._input.LA(1))!==y.IDENTIFIER&&e!==y.STRING||(this.state=78,this.keyValuePairList()),this.state=81,this.match(y.CLOSE_CURLY_BRACKET);break;case y.NUMBER:o=new A(o),this._ctx=o,u=o,this.state=82,this.match(y.NUMBER);break;case y.STRING:o=new N(o),this._ctx=o,u=o,this.state=83,this.match(y.STRING);break;case y.IDENTIFIER:o=new O(o),this._ctx=o,u=o,this.state=84,this.match(y.IDENTIFIER);break;case y.STRING_INTERPOLATION_START:o=new w(o),this._ctx=o,u=o,this.state=85,this.stringInterpolation();break;default:throw new a.NoViableAltException(this)}for(this._ctx._stop=this._input.tryLT(-1),this.state=107,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,9,this._ctx);2!==t&&t!==i.ATN.INVALID_ALT_NUMBER;){if(1===t)switch(null!=this._parseListeners&&this.triggerExitRuleEvent(),u=o,this.state=105,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,8,this._ctx)){case 1:if(o=new R(new b(r,n)),this.pushNewRecursionContext(o,4,y.RULE_primaryExpression),this.state=88,!this.precpred(this._ctx,3))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 3)");this.state=89,this.match(y.DOT),this.state=90,this.match(y.IDENTIFIER);break;case 2:if(o=new L(new b(r,n)),this.pushNewRecursionContext(o,4,y.RULE_primaryExpression),this.state=91,!this.precpred(this._ctx,2))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 2)");this.state=93,this._errHandler.sync(this),(e=this._input.LA(1))===y.NON&&(this.state=92,this.match(y.NON)),this.state=95,this.match(y.OPEN_BRACKET),this.state=97,this._errHandler.sync(this),(0==(-32&(e=this._input.LA(1)))&&0!=(1<<e&(1<<y.STRING_INTERPOLATION_START|1<<y.PLUS|1<<y.SUBSTRACT|1<<y.NON|1<<y.OPEN_BRACKET|1<<y.OPEN_SQUARE_BRACKET|1<<y.OPEN_CURLY_BRACKET|1<<y.NUMBER))||e===y.IDENTIFIER||e===y.STRING)&&(this.state=96,this.argsList()),this.state=99,this.match(y.CLOSE_BRACKET);break;case 3:if(o=new P(new b(r,n)),this.pushNewRecursionContext(o,4,y.RULE_primaryExpression),this.state=100,!this.precpred(this._ctx,1))throw new s.FailedPredicateException(this,"this.precpred(this._ctx, 1)");this.state=101,this.match(y.OPEN_SQUARE_BRACKET),this.state=102,this.expression(0),this.state=103,this.match(y.CLOSE_SQUARE_BRACKET)}this.state=109,this._errHandler.sync(this),t=this.interpreter.adaptivePredict(this._input,9,this._ctx)}}catch(l){if(!(l instanceof h.RecognitionException))throw l;o.exception=l,this._errHandler.reportError(this,l),this._errHandler.recover(this,l)}finally{this.unrollRecursionContexts(r)}return o}stringInterpolation(){let t,e=new I(this._ctx,this.state);this.enterRule(e,6,y.RULE_stringInterpolation);try{for(this.enterOuterAlt(e,1),this.state=110,this.match(y.STRING_INTERPOLATION_START),this.state=116,this._errHandler.sync(this),t=this._input.LA(1);0==(t-36&-32)&&0!=(1<<t-36&(1<<y.TEMPLATE-36|1<<y.ESCAPE_CHARACTER-36|1<<y.TEXT_CONTENT-36));){switch(this.state=114,this._errHandler.sync(this),this._input.LA(1)){case y.ESCAPE_CHARACTER:this.state=111,this.match(y.ESCAPE_CHARACTER);break;case y.TEMPLATE:this.state=112,this.match(y.TEMPLATE);break;case y.TEXT_CONTENT:this.state=113,this.textContent();break;default:throw new a.NoViableAltException(this)}this.state=118,this._errHandler.sync(this),t=this._input.LA(1)}this.state=119,this.match(y.STRING_INTERPOLATION_START)}catch(r){if(!(r instanceof h.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}textContent(){let t=new D(this._ctx,this.state);this.enterRule(t,8,y.RULE_textContent);try{let e;this.enterOuterAlt(t,1),this.state=122,this._errHandler.sync(this),e=1;do{switch(e){case 1:this.state=121,this.match(y.TEXT_CONTENT);break;default:throw new a.NoViableAltException(this)}this.state=124,this._errHandler.sync(this),e=this.interpreter.adaptivePredict(this._input,12,this._ctx)}while(2!==e&&e!==i.ATN.INVALID_ALT_NUMBER)}catch(e){if(!(e instanceof h.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}argsList(){let t,e=new U(this._ctx,this.state);this.enterRule(e,10,y.RULE_argsList);try{switch(this.enterOuterAlt(e,1),this.state=128,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,13,this._ctx)){case 1:this.state=126,this.lambda();break;case 2:this.state=127,this.expression(0)}for(this.state=137,this._errHandler.sync(this),t=this._input.LA(1);t===y.COMMA;){switch(this.state=130,this.match(y.COMMA),this.state=133,this._errHandler.sync(this),this.interpreter.adaptivePredict(this._input,14,this._ctx)){case 1:this.state=131,this.lambda();break;case 2:this.state=132,this.expression(0)}this.state=139,this._errHandler.sync(this),t=this._input.LA(1)}}catch(r){if(!(r instanceof h.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}lambda(){let t=new M(this._ctx,this.state);this.enterRule(t,12,y.RULE_lambda);try{this.enterOuterAlt(t,1),this.state=140,this.match(y.IDENTIFIER),this.state=141,this.match(y.ARROW),this.state=142,this.expression(0)}catch(e){if(!(e instanceof h.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}keyValuePairList(){let t,e=new k(this._ctx,this.state);this.enterRule(e,14,y.RULE_keyValuePairList);try{for(this.enterOuterAlt(e,1),this.state=144,this.keyValuePair(),this.state=149,this._errHandler.sync(this),t=this._input.LA(1);t===y.COMMA;)this.state=145,this.match(y.COMMA),this.state=146,this.keyValuePair(),this.state=151,this._errHandler.sync(this),t=this._input.LA(1)}catch(r){if(!(r instanceof h.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}keyValuePair(){let t=new F(this._ctx,this.state);this.enterRule(t,16,y.RULE_keyValuePair);try{this.enterOuterAlt(t,1),this.state=152,this.key(),this.state=153,this.match(y.COLON),this.state=154,this.expression(0)}catch(e){if(!(e instanceof h.RecognitionException))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}key(){let t,e=new j(this._ctx,this.state);this.enterRule(e,18,y.RULE_key);try{this.enterOuterAlt(e,1),this.state=156,(t=this._input.LA(1))!==y.IDENTIFIER&&t!==y.STRING?this._errHandler.recoverInline(this):(this._input.LA(1)===p.Token.EOF&&(this.matchedEOF=!0),this._errHandler.reportMatch(this),this.consume())}catch(r){if(!(r instanceof h.RecognitionException))throw r;e.exception=r,this._errHandler.reportError(this,r),this._errHandler.recover(this,r)}finally{this.exitRule()}return e}sempred(t,e,r){switch(e){case 1:return this.expression_sempred(t,r);case 2:return this.primaryExpression_sempred(t,r)}return!0}expression_sempred(t,e){switch(e){case 0:return this.precpred(this._ctx,11);case 1:return this.precpred(this._ctx,10);case 2:return this.precpred(this._ctx,9);case 3:return this.precpred(this._ctx,8);case 4:return this.precpred(this._ctx,7);case 5:return this.precpred(this._ctx,6);case 6:return this.precpred(this._ctx,5);case 7:return this.precpred(this._ctx,4);case 8:return this.precpred(this._ctx,3);case 9:return this.precpred(this._ctx,2)}return!0}primaryExpression_sempred(t,e){switch(e){case 10:return this.precpred(this._ctx,3);case 11:return this.precpred(this._ctx,2);case 12:return this.precpred(this._ctx,1)}return!0}static get _ATN(){return y.__ATN||(y.__ATN=(new o.ATNDeserializer).deserialize(f.toCharArray(y._serializedATN))),y.__ATN}}y.STRING_INTERPOLATION_START=1,y.PLUS=2,y.SUBSTRACT=3,y.NON=4,y.XOR=5,y.ASTERISK=6,y.SLASH=7,y.PERCENT=8,y.DOUBLE_EQUAL=9,y.NOT_EQUAL=10,y.SINGLE_AND=11,y.DOUBLE_AND=12,y.DOUBLE_VERTICAL_CYLINDER=13,y.LESS_THAN=14,y.MORE_THAN=15,y.LESS_OR_EQUAl=16,y.MORE_OR_EQUAL=17,y.OPEN_BRACKET=18,y.CLOSE_BRACKET=19,y.DOT=20,y.OPEN_SQUARE_BRACKET=21,y.CLOSE_SQUARE_BRACKET=22,y.OPEN_CURLY_BRACKET=23,y.CLOSE_CURLY_BRACKET=24,y.COMMA=25,y.COLON=26,y.ARROW=27,y.NULL_COALESCE=28,y.QUESTION_MARK=29,y.NUMBER=30,y.WHITESPACE=31,y.IDENTIFIER=32,y.NEWLINE=33,y.STRING=34,y.INVALID_TOKEN_DEFAULT_MODE=35,y.TEMPLATE=36,y.ESCAPE_CHARACTER=37,y.TEXT_CONTENT=38,y.RULE_file=0,y.RULE_expression=1,y.RULE_primaryExpression=2,y.RULE_stringInterpolation=3,y.RULE_textContent=4,y.RULE_argsList=5,y.RULE_lambda=6,y.RULE_keyValuePairList=7,y.RULE_keyValuePair=8,y.RULE_key=9,y.ruleNames=["file","expression","primaryExpression","stringInterpolation","textContent","argsList","lambda","keyValuePairList","keyValuePair","key"],y._LITERAL_NAMES=[void 0,void 0,"'+'","'-'","'!'","'^'","'*'","'/'","'%'","'=='",void 0,"'&'","'&&'","'||'","'<'","'>'","'<='","'>='","'('","')'","'.'","'['","']'","'{'","'}'","','","':'","'=>'","'??'","'?'"],y._SYMBOLIC_NAMES=[void 0,"STRING_INTERPOLATION_START","PLUS","SUBSTRACT","NON","XOR","ASTERISK","SLASH","PERCENT","DOUBLE_EQUAL","NOT_EQUAL","SINGLE_AND","DOUBLE_AND","DOUBLE_VERTICAL_CYLINDER","LESS_THAN","MORE_THAN","LESS_OR_EQUAl","MORE_OR_EQUAL","OPEN_BRACKET","CLOSE_BRACKET","DOT","OPEN_SQUARE_BRACKET","CLOSE_SQUARE_BRACKET","OPEN_CURLY_BRACKET","CLOSE_CURLY_BRACKET","COMMA","COLON","ARROW","NULL_COALESCE","QUESTION_MARK","NUMBER","WHITESPACE","IDENTIFIER","NEWLINE","STRING","INVALID_TOKEN_DEFAULT_MODE","TEMPLATE","ESCAPE_CHARACTER","TEXT_CONTENT"],y.VOCABULARY=new d.VocabularyImpl(y._LITERAL_NAMES,y._SYMBOLIC_NAMES,[]),y._serializedATN='\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x03(\xa1\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\x1e\n\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03A\n\x03\f\x03\x0e\x03D\v\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04M\n\x04\x03\x04\x03\x04\x03\x04\x05\x04R\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04Y\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04`\n\x04\x03\x04\x03\x04\x05\x04d\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04l\n\x04\f\x04\x0e\x04o\v\x04\x03\x05\x03\x05\x03\x05\x03\x05\x07\x05u\n\x05\f\x05\x0e\x05x\v\x05\x03\x05\x03\x05\x03\x06\x06\x06}\n\x06\r\x06\x0e\x06~\x03\x07\x03\x07\x05\x07\x83\n\x07\x03\x07\x03\x07\x03\x07\x05\x07\x88\n\x07\x07\x07\x8a\n\x07\f\x07\x0e\x07\x8d\v\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x07\t\x96\n\t\f\t\x0e\t\x99\v\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x02\x02\x04\x04\x06\f\x02\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0e\x02\x10\x02\x12\x02\x14\x02\x02\b\x03\x02\x04\x06\x03\x02\b\n\x03\x02\x04\x05\x03\x02\v\f\x03\x02\x10\x13\x04\x02""$$\x02\xb6\x02\x16\x03\x02\x02\x02\x04\x1d\x03\x02\x02\x02\x06X\x03\x02\x02\x02\bp\x03\x02\x02\x02\n|\x03\x02\x02\x02\f\x82\x03\x02\x02\x02\x0e\x8e\x03\x02\x02\x02\x10\x92\x03\x02\x02\x02\x12\x9a\x03\x02\x02\x02\x14\x9e\x03\x02\x02\x02\x16\x17\x05\x04\x03\x02\x17\x18\x07\x02\x02\x03\x18\x03\x03\x02\x02\x02\x19\x1a\b\x03\x01\x02\x1a\x1b\t\x02\x02\x02\x1b\x1e\x05\x04\x03\x0e\x1c\x1e\x05\x06\x04\x02\x1d\x19\x03\x02\x02\x02\x1d\x1c\x03\x02\x02\x02\x1eB\x03\x02\x02\x02\x1f \f\r\x02\x02 !\x07\x07\x02\x02!A\x05\x04\x03\r"#\f\f\x02\x02#$\t\x03\x02\x02$A\x05\x04\x03\r%&\f\v\x02\x02&\'\t\x04\x02\x02\'A\x05\x04\x03\f()\f\n\x02\x02)*\t\x05\x02\x02*A\x05\x04\x03\v+,\f\t\x02\x02,-\x07\r\x02\x02-A\x05\x04\x03\n./\f\b\x02\x02/0\t\x06\x02\x020A\x05\x04\x03\t12\f\x07\x02\x0223\x07\x0e\x02\x023A\x05\x04\x03\b45\f\x06\x02\x0256\x07\x0f\x02\x026A\x05\x04\x03\x0778\f\x05\x02\x0289\x07\x1e\x02\x029A\x05\x04\x03\x06:;\f\x04\x02\x02;<\x07\x1f\x02\x02<=\x05\x04\x03\x02=>\x07\x1c\x02\x02>?\x05\x04\x03\x05?A\x03\x02\x02\x02@\x1f\x03\x02\x02\x02@"\x03\x02\x02\x02@%\x03\x02\x02\x02@(\x03\x02\x02\x02@+\x03\x02\x02\x02@.\x03\x02\x02\x02@1\x03\x02\x02\x02@4\x03\x02\x02\x02@7\x03\x02\x02\x02@:\x03\x02\x02\x02AD\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02\x02\x02C\x05\x03\x02\x02\x02DB\x03\x02\x02\x02EF\b\x04\x01\x02FG\x07\x14\x02\x02GH\x05\x04\x03\x02HI\x07\x15\x02\x02IY\x03\x02\x02\x02JL\x07\x17\x02\x02KM\x05\f\x07\x02LK\x03\x02\x02\x02LM\x03\x02\x02\x02MN\x03\x02\x02\x02NY\x07\x18\x02\x02OQ\x07\x19\x02\x02PR\x05\x10\t\x02QP\x03\x02\x02\x02QR\x03\x02\x02\x02RS\x03\x02\x02\x02SY\x07\x1a\x02\x02TY\x07 \x02\x02UY\x07$\x02\x02VY\x07"\x02\x02WY\x05\b\x05\x02XE\x03\x02\x02\x02XJ\x03\x02\x02\x02XO\x03\x02\x02\x02XT\x03\x02\x02\x02XU\x03\x02\x02\x02XV\x03\x02\x02\x02XW\x03\x02\x02\x02Ym\x03\x02\x02\x02Z[\f\x05\x02\x02[\\\x07\x16\x02\x02\\l\x07"\x02\x02]_\f\x04\x02\x02^`\x07\x06\x02\x02_^\x03\x02\x02\x02_`\x03\x02\x02\x02`a\x03\x02\x02\x02ac\x07\x14\x02\x02bd\x05\f\x07\x02cb\x03\x02\x02\x02cd\x03\x02\x02\x02de\x03\x02\x02\x02el\x07\x15\x02\x02fg\f\x03\x02\x02gh\x07\x17\x02\x02hi\x05\x04\x03\x02ij\x07\x18\x02\x02jl\x03\x02\x02\x02kZ\x03\x02\x02\x02k]\x03\x02\x02\x02kf\x03\x02\x02\x02lo\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02n\x07\x03\x02\x02\x02om\x03\x02\x02\x02pv\x07\x03\x02\x02qu\x07\'\x02\x02ru\x07&\x02\x02su\x05\n\x06\x02tq\x03\x02\x02\x02tr\x03\x02\x02\x02ts\x03\x02\x02\x02ux\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02wy\x03\x02\x02\x02xv\x03\x02\x02\x02yz\x07\x03\x02\x02z\t\x03\x02\x02\x02{}\x07(\x02\x02|{\x03\x02\x02\x02}~\x03\x02\x02\x02~|\x03\x02\x02\x02~\x7f\x03\x02\x02\x02\x7f\v\x03\x02\x02\x02\x80\x83\x05\x0e\b\x02\x81\x83\x05\x04\x03\x02\x82\x80\x03\x02\x02\x02\x82\x81\x03\x02\x02\x02\x83\x8b\x03\x02\x02\x02\x84\x87\x07\x1b\x02\x02\x85\x88\x05\x0e\b\x02\x86\x88\x05\x04\x03\x02\x87\x85\x03\x02\x02\x02\x87\x86\x03\x02\x02\x02\x88\x8a\x03\x02\x02\x02\x89\x84\x03\x02\x02\x02\x8a\x8d\x03\x02\x02\x02\x8b\x89\x03\x02\x02\x02\x8b\x8c\x03\x02\x02\x02\x8c\r\x03\x02\x02\x02\x8d\x8b\x03\x02\x02\x02\x8e\x8f\x07"\x02\x02\x8f\x90\x07\x1d\x02\x02\x90\x91\x05\x04\x03\x02\x91\x0f\x03\x02\x02\x02\x92\x97\x05\x12\n\x02\x93\x94\x07\x1b\x02\x02\x94\x96\x05\x12\n\x02\x95\x93\x03\x02\x02\x02\x96\x99\x03\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98\x11\x03\x02\x02\x02\x99\x97\x03\x02\x02\x02\x9a\x9b\x05\x14\v\x02\x9b\x9c\x07\x1c\x02\x02\x9c\x9d\x05\x04\x03\x02\x9d\x13\x03\x02\x02\x02\x9e\x9f\t\x07\x02\x02\x9f\x15\x03\x02\x02\x02\x13\x1d@BLQX_ckmtv~\x82\x87\x8b\x97',r.ExpressionAntlrParser=y;class m extends l.ParserRuleContext{expression(){return this.getRuleContext(0,g)}EOF(){return this.getToken(y.EOF,0)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_file}enterRule(t){t.enterFile&&t.enterFile(this)}exitRule(t){t.exitFile&&t.exitFile(this)}accept(t){return t.visitFile?t.visitFile(this):t.visitChildren(this)}}r.FileContext=m;class g extends l.ParserRuleContext{constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_expression}copyFrom(t){super.copyFrom(t)}}r.ExpressionContext=g;class v extends g{expression(){return this.getRuleContext(0,g)}NON(){return this.tryGetToken(y.NON,0)}SUBSTRACT(){return this.tryGetToken(y.SUBSTRACT,0)}PLUS(){return this.tryGetToken(y.PLUS,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterUnaryOpExp&&t.enterUnaryOpExp(this)}exitRule(t){t.exitUnaryOpExp&&t.exitUnaryOpExp(this)}accept(t){return t.visitUnaryOpExp?t.visitUnaryOpExp(this):t.visitChildren(this)}}r.UnaryOpExpContext=v;class T extends g{expression(t){return void 0===t?this.getRuleContexts(g):this.getRuleContext(t,g)}XOR(){return this.tryGetToken(y.XOR,0)}ASTERISK(){return this.tryGetToken(y.ASTERISK,0)}SLASH(){return this.tryGetToken(y.SLASH,0)}PERCENT(){return this.tryGetToken(y.PERCENT,0)}PLUS(){return this.tryGetToken(y.PLUS,0)}SUBSTRACT(){return this.tryGetToken(y.SUBSTRACT,0)}DOUBLE_EQUAL(){return this.tryGetToken(y.DOUBLE_EQUAL,0)}NOT_EQUAL(){return this.tryGetToken(y.NOT_EQUAL,0)}SINGLE_AND(){return this.tryGetToken(y.SINGLE_AND,0)}LESS_THAN(){return this.tryGetToken(y.LESS_THAN,0)}LESS_OR_EQUAl(){return this.tryGetToken(y.LESS_OR_EQUAl,0)}MORE_THAN(){return this.tryGetToken(y.MORE_THAN,0)}MORE_OR_EQUAL(){return this.tryGetToken(y.MORE_OR_EQUAL,0)}DOUBLE_AND(){return this.tryGetToken(y.DOUBLE_AND,0)}DOUBLE_VERTICAL_CYLINDER(){return this.tryGetToken(y.DOUBLE_VERTICAL_CYLINDER,0)}NULL_COALESCE(){return this.tryGetToken(y.NULL_COALESCE,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterBinaryOpExp&&t.enterBinaryOpExp(this)}exitRule(t){t.exitBinaryOpExp&&t.exitBinaryOpExp(this)}accept(t){return t.visitBinaryOpExp?t.visitBinaryOpExp(this):t.visitChildren(this)}}r.BinaryOpExpContext=T;class _ extends g{expression(t){return void 0===t?this.getRuleContexts(g):this.getRuleContext(t,g)}QUESTION_MARK(){return this.getToken(y.QUESTION_MARK,0)}COLON(){return this.getToken(y.COLON,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterTripleOpExp&&t.enterTripleOpExp(this)}exitRule(t){t.exitTripleOpExp&&t.exitTripleOpExp(this)}accept(t){return t.visitTripleOpExp?t.visitTripleOpExp(this):t.visitChildren(this)}}r.TripleOpExpContext=_;class E extends g{primaryExpression(){return this.getRuleContext(0,b)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterPrimaryExp&&t.enterPrimaryExp(this)}exitRule(t){t.exitPrimaryExp&&t.exitPrimaryExp(this)}accept(t){return t.visitPrimaryExp?t.visitPrimaryExp(this):t.visitChildren(this)}}r.PrimaryExpContext=E;class b extends l.ParserRuleContext{constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_primaryExpression}copyFrom(t){super.copyFrom(t)}}r.PrimaryExpressionContext=b;class S extends b{OPEN_BRACKET(){return this.getToken(y.OPEN_BRACKET,0)}expression(){return this.getRuleContext(0,g)}CLOSE_BRACKET(){return this.getToken(y.CLOSE_BRACKET,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterParenthesisExp&&t.enterParenthesisExp(this)}exitRule(t){t.exitParenthesisExp&&t.exitParenthesisExp(this)}accept(t){return t.visitParenthesisExp?t.visitParenthesisExp(this):t.visitChildren(this)}}r.ParenthesisExpContext=S;class x extends b{OPEN_SQUARE_BRACKET(){return this.getToken(y.OPEN_SQUARE_BRACKET,0)}CLOSE_SQUARE_BRACKET(){return this.getToken(y.CLOSE_SQUARE_BRACKET,0)}argsList(){return this.tryGetRuleContext(0,U)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterArrayCreationExp&&t.enterArrayCreationExp(this)}exitRule(t){t.exitArrayCreationExp&&t.exitArrayCreationExp(this)}accept(t){return t.visitArrayCreationExp?t.visitArrayCreationExp(this):t.visitChildren(this)}}r.ArrayCreationExpContext=x;class C extends b{OPEN_CURLY_BRACKET(){return this.getToken(y.OPEN_CURLY_BRACKET,0)}CLOSE_CURLY_BRACKET(){return this.getToken(y.CLOSE_CURLY_BRACKET,0)}keyValuePairList(){return this.tryGetRuleContext(0,k)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterJsonCreationExp&&t.enterJsonCreationExp(this)}exitRule(t){t.exitJsonCreationExp&&t.exitJsonCreationExp(this)}accept(t){return t.visitJsonCreationExp?t.visitJsonCreationExp(this):t.visitChildren(this)}}r.JsonCreationExpContext=C;class A extends b{NUMBER(){return this.getToken(y.NUMBER,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterNumericAtom&&t.enterNumericAtom(this)}exitRule(t){t.exitNumericAtom&&t.exitNumericAtom(this)}accept(t){return t.visitNumericAtom?t.visitNumericAtom(this):t.visitChildren(this)}}r.NumericAtomContext=A;class N extends b{STRING(){return this.getToken(y.STRING,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterStringAtom&&t.enterStringAtom(this)}exitRule(t){t.exitStringAtom&&t.exitStringAtom(this)}accept(t){return t.visitStringAtom?t.visitStringAtom(this):t.visitChildren(this)}}r.StringAtomContext=N;class O extends b{IDENTIFIER(){return this.getToken(y.IDENTIFIER,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterIdAtom&&t.enterIdAtom(this)}exitRule(t){t.exitIdAtom&&t.exitIdAtom(this)}accept(t){return t.visitIdAtom?t.visitIdAtom(this):t.visitChildren(this)}}r.IdAtomContext=O;class w extends b{stringInterpolation(){return this.getRuleContext(0,I)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterStringInterpolationAtom&&t.enterStringInterpolationAtom(this)}exitRule(t){t.exitStringInterpolationAtom&&t.exitStringInterpolationAtom(this)}accept(t){return t.visitStringInterpolationAtom?t.visitStringInterpolationAtom(this):t.visitChildren(this)}}r.StringInterpolationAtomContext=w;class R extends b{primaryExpression(){return this.getRuleContext(0,b)}DOT(){return this.getToken(y.DOT,0)}IDENTIFIER(){return this.getToken(y.IDENTIFIER,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterMemberAccessExp&&t.enterMemberAccessExp(this)}exitRule(t){t.exitMemberAccessExp&&t.exitMemberAccessExp(this)}accept(t){return t.visitMemberAccessExp?t.visitMemberAccessExp(this):t.visitChildren(this)}}r.MemberAccessExpContext=R;class L extends b{primaryExpression(){return this.getRuleContext(0,b)}OPEN_BRACKET(){return this.getToken(y.OPEN_BRACKET,0)}CLOSE_BRACKET(){return this.getToken(y.CLOSE_BRACKET,0)}NON(){return this.tryGetToken(y.NON,0)}argsList(){return this.tryGetRuleContext(0,U)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterFuncInvokeExp&&t.enterFuncInvokeExp(this)}exitRule(t){t.exitFuncInvokeExp&&t.exitFuncInvokeExp(this)}accept(t){return t.visitFuncInvokeExp?t.visitFuncInvokeExp(this):t.visitChildren(this)}}r.FuncInvokeExpContext=L;class P extends b{primaryExpression(){return this.getRuleContext(0,b)}OPEN_SQUARE_BRACKET(){return this.getToken(y.OPEN_SQUARE_BRACKET,0)}expression(){return this.getRuleContext(0,g)}CLOSE_SQUARE_BRACKET(){return this.getToken(y.CLOSE_SQUARE_BRACKET,0)}constructor(t){super(t.parent,t.invokingState),this.copyFrom(t)}enterRule(t){t.enterIndexAccessExp&&t.enterIndexAccessExp(this)}exitRule(t){t.exitIndexAccessExp&&t.exitIndexAccessExp(this)}accept(t){return t.visitIndexAccessExp?t.visitIndexAccessExp(this):t.visitChildren(this)}}r.IndexAccessExpContext=P;class I extends l.ParserRuleContext{STRING_INTERPOLATION_START(t){return void 0===t?this.getTokens(y.STRING_INTERPOLATION_START):this.getToken(y.STRING_INTERPOLATION_START,t)}ESCAPE_CHARACTER(t){return void 0===t?this.getTokens(y.ESCAPE_CHARACTER):this.getToken(y.ESCAPE_CHARACTER,t)}TEMPLATE(t){return void 0===t?this.getTokens(y.TEMPLATE):this.getToken(y.TEMPLATE,t)}textContent(t){return void 0===t?this.getRuleContexts(D):this.getRuleContext(t,D)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_stringInterpolation}enterRule(t){t.enterStringInterpolation&&t.enterStringInterpolation(this)}exitRule(t){t.exitStringInterpolation&&t.exitStringInterpolation(this)}accept(t){return t.visitStringInterpolation?t.visitStringInterpolation(this):t.visitChildren(this)}}r.StringInterpolationContext=I;class D extends l.ParserRuleContext{TEXT_CONTENT(t){return void 0===t?this.getTokens(y.TEXT_CONTENT):this.getToken(y.TEXT_CONTENT,t)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_textContent}enterRule(t){t.enterTextContent&&t.enterTextContent(this)}exitRule(t){t.exitTextContent&&t.exitTextContent(this)}accept(t){return t.visitTextContent?t.visitTextContent(this):t.visitChildren(this)}}r.TextContentContext=D;class U extends l.ParserRuleContext{lambda(t){return void 0===t?this.getRuleContexts(M):this.getRuleContext(t,M)}expression(t){return void 0===t?this.getRuleContexts(g):this.getRuleContext(t,g)}COMMA(t){return void 0===t?this.getTokens(y.COMMA):this.getToken(y.COMMA,t)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_argsList}enterRule(t){t.enterArgsList&&t.enterArgsList(this)}exitRule(t){t.exitArgsList&&t.exitArgsList(this)}accept(t){return t.visitArgsList?t.visitArgsList(this):t.visitChildren(this)}}r.ArgsListContext=U;class M extends l.ParserRuleContext{IDENTIFIER(){return this.getToken(y.IDENTIFIER,0)}ARROW(){return this.getToken(y.ARROW,0)}expression(){return this.getRuleContext(0,g)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_lambda}enterRule(t){t.enterLambda&&t.enterLambda(this)}exitRule(t){t.exitLambda&&t.exitLambda(this)}accept(t){return t.visitLambda?t.visitLambda(this):t.visitChildren(this)}}r.LambdaContext=M;class k extends l.ParserRuleContext{keyValuePair(t){return void 0===t?this.getRuleContexts(F):this.getRuleContext(t,F)}COMMA(t){return void 0===t?this.getTokens(y.COMMA):this.getToken(y.COMMA,t)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_keyValuePairList}enterRule(t){t.enterKeyValuePairList&&t.enterKeyValuePairList(this)}exitRule(t){t.exitKeyValuePairList&&t.exitKeyValuePairList(this)}accept(t){return t.visitKeyValuePairList?t.visitKeyValuePairList(this):t.visitChildren(this)}}r.KeyValuePairListContext=k;class F extends l.ParserRuleContext{key(){return this.getRuleContext(0,j)}COLON(){return this.getToken(y.COLON,0)}expression(){return this.getRuleContext(0,g)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_keyValuePair}enterRule(t){t.enterKeyValuePair&&t.enterKeyValuePair(this)}exitRule(t){t.exitKeyValuePair&&t.exitKeyValuePair(this)}accept(t){return t.visitKeyValuePair?t.visitKeyValuePair(this):t.visitChildren(this)}}r.KeyValuePairContext=F;class j extends l.ParserRuleContext{IDENTIFIER(){return this.tryGetToken(y.IDENTIFIER,0)}STRING(){return this.tryGetToken(y.STRING,0)}constructor(t,e){super(t,e)}get ruleIndex(){return y.RULE_key}enterRule(t){t.enterKey&&t.enterKey(this)}exitRule(t){t.exitKey&&t.exitKey(this)}accept(t){return t.visitKey?t.visitKey(this):t.visitChildren(this)}}r.KeyContext=j},{256:256,264:264,265:265,267:267,270:270,276:276,278:278,279:279,283:283,320:320,365:365}],373:[function(t,e,r){"use strict";function n(t){for(var e in t)r.hasOwnProperty(e)||(r[e]=t[e])}Object.defineProperty(r,"__esModule",{value:!0}),n(t(366)),n(t(367)),n(t(368)),n(t(369)),n(t(370)),n(t(371)),n(t(372))},{366:366,367:367,368:368,369:369,370:370,371:371,372:372}],206:[function(t,e,r){"use strict";var n=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(r,"__esModule",{value:!0});const i=t(283),o=t(260),s=t(304),a=t(278),u=n(t(365));class l extends o.Lexer{constructor(t){super(t),this.ignoreWS=!0,this._interp=new s.LexerATNSimulator(l._ATN,this)}get vocabulary(){return l.VOCABULARY}get grammarFileName(){return"ExpressionAntlrLexer.g4"}get ruleNames(){return l.ruleNames}get serializedATN(){return l._serializedATN}get channelNames(){return l.channelNames}get modeNames(){return l.modeNames}action(t,e,r){switch(e){case 3:this.STRING_INTERPOLATION_START_action(t,r);break;case 38:this.STRING_INTERPOLATION_END_action(t,r)}}STRING_INTERPOLATION_START_action(t,e){switch(e){case 0:this.ignoreWS=!1}}STRING_INTERPOLATION_END_action(t,e){switch(e){case 1:this.ignoreWS=!0}}sempred(t,e,r){switch(e){case 33:return this.WHITESPACE_sempred(t,r)}return!0}WHITESPACE_sempred(t,e){switch(e){case 0:return this.ignoreWS}return!0}static get _ATN(){return l.__ATN||(l.__ATN=(new i.ATNDeserializer).deserialize(u.toCharArray(l._serializedATN))),l.__ATN}}l.STRING_INTERPOLATION_START=1,l.PLUS=2,l.SUBSTRACT=3,l.NON=4,l.XOR=5,l.ASTERISK=6,l.SLASH=7,l.PERCENT=8,l.DOUBLE_EQUAL=9,l.NOT_EQUAL=10,l.SINGLE_AND=11,l.DOUBLE_AND=12,l.DOUBLE_VERTICAL_CYLINDER=13,l.LESS_THAN=14,l.MORE_THAN=15,l.LESS_OR_EQUAl=16,l.MORE_OR_EQUAL=17,l.OPEN_BRACKET=18,l.CLOSE_BRACKET=19,l.DOT=20,l.OPEN_SQUARE_BRACKET=21,l.CLOSE_SQUARE_BRACKET=22,l.OPEN_CURLY_BRACKET=23,l.CLOSE_CURLY_BRACKET=24,l.COMMA=25,l.COLON=26,l.ARROW=27,l.NULL_COALESCE=28,l.QUESTION_MARK=29,l.NUMBER=30,l.WHITESPACE=31,l.IDENTIFIER=32,l.NEWLINE=33,l.STRING=34,l.INVALID_TOKEN_DEFAULT_MODE=35,l.TEMPLATE=36,l.ESCAPE_CHARACTER=37,l.TEXT_CONTENT=38,l.STRING_INTERPOLATION_MODE=1,l.channelNames=["DEFAULT_TOKEN_CHANNEL","HIDDEN"],l.modeNames=["DEFAULT_MODE","STRING_INTERPOLATION_MODE"],l.ruleNames=["LETTER","DIGIT","OBJECT_DEFINITION","STRING_INTERPOLATION_START","PLUS","SUBSTRACT","NON","XOR","ASTERISK","SLASH","PERCENT","DOUBLE_EQUAL","NOT_EQUAL","SINGLE_AND","DOUBLE_AND","DOUBLE_VERTICAL_CYLINDER","LESS_THAN","MORE_THAN","LESS_OR_EQUAl","MORE_OR_EQUAL","OPEN_BRACKET","CLOSE_BRACKET","DOT","OPEN_SQUARE_BRACKET","CLOSE_SQUARE_BRACKET","OPEN_CURLY_BRACKET","CLOSE_CURLY_BRACKET","COMMA","COLON","ARROW","NULL_COALESCE","QUESTION_MARK","NUMBER","WHITESPACE","IDENTIFIER","NEWLINE","STRING","INVALID_TOKEN_DEFAULT_MODE","STRING_INTERPOLATION_END","TEMPLATE","ESCAPE_CHARACTER","TEXT_CONTENT"],l._LITERAL_NAMES=[void 0,void 0,"'+'","'-'","'!'","'^'","'*'","'/'","'%'","'=='",void 0,"'&'","'&&'","'||'","'<'","'>'","'<='","'>='","'('","')'","'.'","'['","']'","'{'","'}'","','","':'","'=>'","'??'","'?'"],l._SYMBOLIC_NAMES=[void 0,"STRING_INTERPOLATION_START","PLUS","SUBSTRACT","NON","XOR","ASTERISK","SLASH","PERCENT","DOUBLE_EQUAL","NOT_EQUAL","SINGLE_AND","DOUBLE_AND","DOUBLE_VERTICAL_CYLINDER","LESS_THAN","MORE_THAN","LESS_OR_EQUAl","MORE_OR_EQUAL","OPEN_BRACKET","CLOSE_BRACKET","DOT","OPEN_SQUARE_BRACKET","CLOSE_SQUARE_BRACKET","OPEN_CURLY_BRACKET","CLOSE_CURLY_BRACKET","COMMA","COLON","ARROW","NULL_COALESCE","QUESTION_MARK","NUMBER","WHITESPACE","IDENTIFIER","NEWLINE","STRING","INVALID_TOKEN_DEFAULT_MODE","TEMPLATE","ESCAPE_CHARACTER","TEXT_CONTENT"],l.VOCABULARY=new a.VocabularyImpl(l._LITERAL_NAMES,l._SYMBOLIC_NAMES,[]),l._serializedATN='\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x02(\u010f\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04\x0e\t\x0e\x04\x0f\t\x0f\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1a\t\x1a\x04\x1b\t\x1b\x04\x1c\t\x1c\x04\x1d\t\x1d\x04\x1e\t\x1e\x04\x1f\t\x1f\x04 \t \x04!\t!\x04"\t"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t+\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04a\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x06\x04g\n\x04\r\x04\x0e\x04h\x07\x04k\n\x04\f\x04\x0e\x04n\v\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0e\x03\x0e\x03\x0e\x03\x0e\x05\x0e\x8c\n\x0e\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x1f\x03 \x03 \x03 \x03!\x03!\x03"\x06"\xbb\n"\r"\x0e"\xbc\x03"\x03"\x06"\xc1\n"\r"\x0e"\xc2\x05"\xc5\n"\x03#\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03$\x03$\x05$\xd1\n$\x03$\x03$\x03$\x07$\xd6\n$\f$\x0e$\xd9\v$\x03%\x05%\xdc\n%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x07&\xe6\n&\f&\x0e&\xe9\v&\x03&\x03&\x03&\x03&\x03&\x07&\xf0\n&\f&\x0e&\xf3\v&\x03&\x05&\xf6\n&\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x06)\u0105\n)\r)\x0e)\u0106\x03)\x03)\x03*\x03*\x03*\x03+\x03+\x04\xe7\xf1\x02\x02,\x04\x02\x02\x06\x02\x02\b\x02\x02\n\x02\x03\f\x02\x04\x0e\x02\x05\x10\x02\x06\x12\x02\x07\x14\x02\b\x16\x02\t\x18\x02\n\x1a\x02\v\x1c\x02\f\x1e\x02\r \x02\x0e"\x02\x0f$\x02\x10&\x02\x11(\x02\x12*\x02\x13,\x02\x14.\x02\x150\x02\x162\x02\x174\x02\x186\x02\x198\x02\x1a:\x02\x1b<\x02\x1c>\x02\x1d@\x02\x1eB\x02\x1fD\x02 F\x02!H\x02"J\x02#L\x02$N\x02%P\x02\x02R\x02&T\x02\'V\x02(\x04\x02\x03\f\x04\x02C\\c|\x03\x022;\t\x02\f\f\x0f\x0f$$))bb}}\x7f\x7f\x06\x02\v\v""\xa2\xa2\uff01\uff01\x05\x02%%BBaa\x04\x02))^^\x03\x02))\x04\x02$$^^\x03\x02$$\x04\x02&&bb\x02\u0123\x02\n\x03\x02\x02\x02\x02\f\x03\x02\x02\x02\x02\x0e\x03\x02\x02\x02\x02\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02\x16\x03\x02\x02\x02\x02\x18\x03\x02\x02\x02\x02\x1a\x03\x02\x02\x02\x02\x1c\x03\x02\x02\x02\x02\x1e\x03\x02\x02\x02\x02 \x03\x02\x02\x02\x02"\x03\x02\x02\x02\x02$\x03\x02\x02\x02\x02&\x03\x02\x02\x02\x02(\x03\x02\x02\x02\x02*\x03\x02\x02\x02\x02,\x03\x02\x02\x02\x02.\x03\x02\x02\x02\x020\x03\x02\x02\x02\x022\x03\x02\x02\x02\x024\x03\x02\x02\x02\x026\x03\x02\x02\x02\x028\x03\x02\x02\x02\x02:\x03\x02\x02\x02\x02<\x03\x02\x02\x02\x02>\x03\x02\x02\x02\x02@\x03\x02\x02\x02\x02B\x03\x02\x02\x02\x02D\x03\x02\x02\x02\x02F\x03\x02\x02\x02\x02H\x03\x02\x02\x02\x02J\x03\x02\x02\x02\x02L\x03\x02\x02\x02\x02N\x03\x02\x02\x02\x03P\x03\x02\x02\x02\x03R\x03\x02\x02\x02\x03T\x03\x02\x02\x02\x03V\x03\x02\x02\x02\x04X\x03\x02\x02\x02\x06Z\x03\x02\x02\x02\b\\\x03\x02\x02\x02\nq\x03\x02\x02\x02\fv\x03\x02\x02\x02\x0ex\x03\x02\x02\x02\x10z\x03\x02\x02\x02\x12|\x03\x02\x02\x02\x14~\x03\x02\x02\x02\x16\x80\x03\x02\x02\x02\x18\x82\x03\x02\x02\x02\x1a\x84\x03\x02\x02\x02\x1c\x8b\x03\x02\x02\x02\x1e\x8d\x03\x02\x02\x02 \x8f\x03\x02\x02\x02"\x92\x03\x02\x02\x02$\x95\x03\x02\x02\x02&\x97\x03\x02\x02\x02(\x99\x03\x02\x02\x02*\x9c\x03\x02\x02\x02,\x9f\x03\x02\x02\x02.\xa1\x03\x02\x02\x020\xa3\x03\x02\x02\x022\xa5\x03\x02\x02\x024\xa7\x03\x02\x02\x026\xa9\x03\x02\x02\x028\xab\x03\x02\x02\x02:\xad\x03\x02\x02\x02<\xaf\x03\x02\x02\x02>\xb1\x03\x02\x02\x02@\xb4\x03\x02\x02\x02B\xb7\x03\x02\x02\x02D\xba\x03\x02\x02\x02F\xc6\x03\x02\x02\x02H\xd0\x03\x02\x02\x02J\xdb\x03\x02\x02\x02L\xf5\x03\x02\x02\x02N\xf7\x03\x02\x02\x02P\xf9\x03\x02\x02\x02R\xff\x03\x02\x02\x02T\u010a\x03\x02\x02\x02V\u010d\x03\x02\x02\x02XY\t\x02\x02\x02Y\x05\x03\x02\x02\x02Z[\t\x03\x02\x02[\x07\x03\x02\x02\x02\\l\x07}\x02\x02]k\x05F#\x02^a\x05H$\x02_a\x05L&\x02`^\x03\x02\x02\x02`_\x03\x02\x02\x02ab\x03\x02\x02\x02bf\x07<\x02\x02cg\x05L&\x02dg\n\x04\x02\x02eg\x05\b\x04\x02fc\x03\x02\x02\x02fd\x03\x02\x02\x02fe\x03\x02\x02\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03\x02\x02\x02ik\x03\x02\x02\x02j]\x03\x02\x02\x02j`\x03\x02\x02\x02kn\x03\x02\x02\x02lj\x03\x02\x02\x02lm\x03\x02\x02\x02mo\x03\x02\x02\x02nl\x03\x02\x02\x02op\x07\x7f\x02\x02p\t\x03\x02\x02\x02qr\x07b\x02\x02rs\b\x05\x02\x02st\x03\x02\x02\x02tu\b\x05\x03\x02u\v\x03\x02\x02\x02vw\x07-\x02\x02w\r\x03\x02\x02\x02xy\x07/\x02\x02y\x0f\x03\x02\x02\x02z{\x07#\x02\x02{\x11\x03\x02\x02\x02|}\x07`\x02\x02}\x13\x03\x02\x02\x02~\x7f\x07,\x02\x02\x7f\x15\x03\x02\x02\x02\x80\x81\x071\x02\x02\x81\x17\x03\x02\x02\x02\x82\x83\x07\'\x02\x02\x83\x19\x03\x02\x02\x02\x84\x85\x07?\x02\x02\x85\x86\x07?\x02\x02\x86\x1b\x03\x02\x02\x02\x87\x88\x07#\x02\x02\x88\x8c\x07?\x02\x02\x89\x8a\x07>\x02\x02\x8a\x8c\x07@\x02\x02\x8b\x87\x03\x02\x02\x02\x8b\x89\x03\x02\x02\x02\x8c\x1d\x03\x02\x02\x02\x8d\x8e\x07(\x02\x02\x8e\x1f\x03\x02\x02\x02\x8f\x90\x07(\x02\x02\x90\x91\x07(\x02\x02\x91!\x03\x02\x02\x02\x92\x93\x07~\x02\x02\x93\x94\x07~\x02\x02\x94#\x03\x02\x02\x02\x95\x96\x07>\x02\x02\x96%\x03\x02\x02\x02\x97\x98\x07@\x02\x02\x98\'\x03\x02\x02\x02\x99\x9a\x07>\x02\x02\x9a\x9b\x07?\x02\x02\x9b)\x03\x02\x02\x02\x9c\x9d\x07@\x02\x02\x9d\x9e\x07?\x02\x02\x9e+\x03\x02\x02\x02\x9f\xa0\x07*\x02\x02\xa0-\x03\x02\x02\x02\xa1\xa2\x07+\x02\x02\xa2/\x03\x02\x02\x02\xa3\xa4\x070\x02\x02\xa41\x03\x02\x02\x02\xa5\xa6\x07]\x02\x02\xa63\x03\x02\x02\x02\xa7\xa8\x07_\x02\x02\xa85\x03\x02\x02\x02\xa9\xaa\x07}\x02\x02\xaa7\x03\x02\x02\x02\xab\xac\x07\x7f\x02\x02\xac9\x03\x02\x02\x02\xad\xae\x07.\x02\x02\xae;\x03\x02\x02\x02\xaf\xb0\x07<\x02\x02\xb0=\x03\x02\x02\x02\xb1\xb2\x07?\x02\x02\xb2\xb3\x07@\x02\x02\xb3?\x03\x02\x02\x02\xb4\xb5\x07A\x02\x02\xb5\xb6\x07A\x02\x02\xb6A\x03\x02\x02\x02\xb7\xb8\x07A\x02\x02\xb8C\x03\x02\x02\x02\xb9\xbb\x05\x06\x03\x02\xba\xb9\x03\x02\x02\x02\xbb\xbc\x03\x02\x02\x02\xbc\xba\x03\x02\x02\x02\xbc\xbd\x03\x02\x02\x02\xbd\xc4\x03\x02\x02\x02\xbe\xc0\x070\x02\x02\xbf\xc1\x05\x06\x03\x02\xc0\xbf\x03\x02\x02\x02\xc1\xc2\x03\x02\x02\x02\xc2\xc0\x03\x02\x02\x02\xc2\xc3\x03\x02\x02\x02\xc3\xc5\x03\x02\x02\x02\xc4\xbe\x03\x02\x02\x02\xc4\xc5\x03\x02\x02\x02\xc5E\x03\x02\x02\x02\xc6\xc7\t\x05\x02\x02\xc7\xc8\x06#\x02\x02\xc8\xc9\x03\x02\x02\x02\xc9\xca\b#\x04\x02\xcaG\x03\x02\x02\x02\xcb\xd1\x05\x04\x02\x02\xcc\xd1\t\x06\x02\x02\xcd\xce\x07B\x02\x02\xce\xd1\x07B\x02\x02\xcf\xd1\x04&\'\x02\xd0\xcb\x03\x02\x02\x02\xd0\xcc\x03\x02\x02\x02\xd0\xcd\x03\x02\x02\x02\xd0\xcf\x03\x02\x02\x02\xd1\xd7\x03\x02\x02\x02\xd2\xd6\x05\x04\x02\x02\xd3\xd6\x05\x06\x03\x02\xd4\xd6\x07a\x02\x02\xd5\xd2\x03\x02\x02\x02\xd5\xd3\x03\x02\x02\x02\xd5\xd4\x03\x02\x02\x02\xd6\xd9\x03\x02\x02\x02\xd7\xd5\x03\x02\x02\x02\xd7\xd8\x03\x02\x02\x02\xd8I\x03\x02\x02\x02\xd9\xd7\x03\x02\x02\x02\xda\xdc\x07\x0f\x02\x02\xdb\xda\x03\x02\x02\x02\xdb\xdc\x03\x02\x02\x02\xdc\xdd\x03\x02\x02\x02\xdd\xde\x07\f\x02\x02\xde\xdf\x03\x02\x02\x02\xdf\xe0\b%\x04\x02\xe0K\x03\x02\x02\x02\xe1\xe7\x07)\x02\x02\xe2\xe3\x07^\x02\x02\xe3\xe6\t\x07\x02\x02\xe4\xe6\n\b\x02\x02\xe5\xe2\x03\x02\x02\x02\xe5\xe4\x03\x02\x02\x02\xe6\xe9\x03\x02\x02\x02\xe7\xe8\x03\x02\x02\x02\xe7\xe5\x03\x02\x02\x02\xe8\xea\x03\x02\x02\x02\xe9\xe7\x03\x02\x02\x02\xea\xf6\x07)\x02\x02\xeb\xf1\x07$\x02\x02\xec\xed\x07^\x02\x02\xed\xf0\t\t\x02\x02\xee\xf0\n\n\x02\x02\xef\xec\x03\x02\x02\x02\xef\xee\x03\x02\x02\x02\xf0\xf3\x03\x02\x02\x02\xf1\xf2\x03\x02\x02\x02\xf1\xef\x03\x02\x02\x02\xf2\xf4\x03\x02\x02\x02\xf3\xf1\x03\x02\x02\x02\xf4\xf6\x07$\x02\x02\xf5\xe1\x03\x02\x02\x02\xf5\xeb\x03\x02\x02\x02\xf6M\x03\x02\x02\x02\xf7\xf8\v\x02\x02\x02\xf8O\x03\x02\x02\x02\xf9\xfa\x07b\x02\x02\xfa\xfb\b(\x05\x02\xfb\xfc\x03\x02\x02\x02\xfc\xfd\b(\x06\x02\xfd\xfe\b(\x07\x02\xfeQ\x03\x02\x02\x02\xff\u0100\x07&\x02\x02\u0100\u0104\x07}\x02\x02\u0101\u0105\x05L&\x02\u0102\u0105\x05\b\x04\x02\u0103\u0105\n\x04\x02\x02\u0104\u0101\x03\x02\x02\x02\u0104\u0102\x03\x02\x02\x02\u0104\u0103\x03\x02\x02\x02\u0105\u0106\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u0108\u0109\x07\x7f\x02\x02\u0109S\x03\x02\x02\x02\u010a\u010b\x07^\x02\x02\u010b\u010c\t\v\x02\x02\u010cU\x03\x02\x02\x02\u010d\u010e\v\x02\x02\x02\u010eW\x03\x02\x02\x02\x18\x02\x03`fhjl\x8b\xbc\xc2\xc4\xd0\xd5\xd7\xdb\xe5\xe7\xef\xf1\xf5\u0104\u0106\b\x03\x05\x02\x07\x03\x02\b\x02\x02\x03(\x03\t\x03\x02\x06\x02\x02',r.ExpressionAntlrLexer=l},{260:260,278:278,283:283,304:304,365:365}],256:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(270),s=t(252),a=t(325);let u=class t extends o.RecognitionException{constructor(e,r,n){super(e,e.inputStream,e.context,t.formatMessage(r,n));let i=e.interpreter.atn.states[e.state].transition(0);i instanceof a.PredicateTransition?(this._ruleIndex=i.ruleIndex,this._predicateIndex=i.predIndex):(this._ruleIndex=0,this._predicateIndex=0),this._predicate=r,super.setOffendingToken(e,e.currentToken)}get ruleIndex(){return this._ruleIndex}get predicateIndex(){return this._predicateIndex}get predicate(){return this._predicate}static formatMessage(t,e){return e||`failed predicate: {${t}}?`}};n([s.NotNull],u,"formatMessage",null),u=n([i(0,s.NotNull)],u),r.FailedPredicateException=u},{252:252,270:270,325:325}],279:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(349),s=t(344),a=t(359),u=t(302),l=t(303),c=t(252),h=t(362),p=t(326),d=t(276);let f=class{constructor(t,e){this.states=[],this.decisionToState=[],this.modeNameToStartState=new Map,this.modeToStartState=[],this.contextCache=new o.Array2DHashMap(h.ObjectEqualityComparator.INSTANCE),this.decisionToDFA=[],this.modeToDFA=[],this.LL1Table=new Map,this.grammarType=t,this.maxTokenType=e}clearDFA(){this.decisionToDFA=new Array(this.decisionToState.length);for(let t=0;t<this.decisionToDFA.length;t++)this.decisionToDFA[t]=new s.DFA(this.decisionToState[t],t);this.modeToDFA=new Array(this.modeToStartState.length);for(let t=0;t<this.modeToDFA.length;t++)this.modeToDFA[t]=new s.DFA(this.modeToStartState[t]);this.contextCache.clear(),this.LL1Table.clear()}get contextCacheSize(){return this.contextCache.size}getCachedContext(t){return p.PredictionContext.getCachedContext(t,this.contextCache,new p.PredictionContext.IdentityHashMap)}getDecisionToDFA(){return this.decisionToDFA}nextTokens(t,e){return e?new l.LL1Analyzer(this).LOOK(t,e):(t.nextTokenWithinRule||(t.nextTokenWithinRule=this.nextTokens(t,p.PredictionContext.EMPTY_LOCAL),t.nextTokenWithinRule.setReadonly(!0)),t.nextTokenWithinRule)}addState(t){t.atn=this,t.stateNumber=this.states.length,this.states.push(t)}removeState(t){let e=new u.InvalidState;e.atn=this,e.stateNumber=t.stateNumber,this.states[t.stateNumber]=e}defineMode(t,e){this.modeNameToStartState.set(t,e),this.modeToStartState.push(e),this.modeToDFA.push(new s.DFA(e)),this.defineDecisionState(e)}defineDecisionState(t){return this.decisionToState.push(t),t.decision=this.decisionToState.length-1,this.decisionToDFA.push(new s.DFA(t,t.decision)),t.decision}getDecisionState(t){if(this.decisionToState.length>0)return this.decisionToState[t]}get numberOfDecisions(){return this.decisionToState.length}getExpectedTokens(t,e){if(t<0||t>=this.states.length)throw new RangeError("Invalid state number.");let r=e,n=this.states[t],i=this.nextTokens(n);if(!i.contains(d.Token.EPSILON))return i;let o=new a.IntervalSet;for(o.addAll(i),o.remove(d.Token.EPSILON);null!=r&&r.invokingState>=0&&i.contains(d.Token.EPSILON);){let t=this.states[r.invokingState].transition(0);i=this.nextTokens(t.followState),o.addAll(i),o.remove(d.Token.EPSILON),r=r._parent}return i.contains(d.Token.EPSILON)&&o.add(d.Token.EOF),o}};n([c.NotNull],f.prototype,"states",void 0),n([c.NotNull],f.prototype,"decisionToState",void 0),n([c.NotNull],f.prototype,"modeNameToStartState",void 0),n([c.NotNull],f.prototype,"modeToStartState",void 0),n([c.NotNull],f.prototype,"decisionToDFA",void 0),n([c.NotNull],f.prototype,"modeToDFA",void 0),n([c.NotNull],f.prototype,"nextTokens",null),n([i(0,c.NotNull)],f.prototype,"removeState",null),n([i(0,c.NotNull),i(1,c.NotNull)],f.prototype,"defineMode",null),n([i(0,c.NotNull)],f.prototype,"defineDecisionState",null),n([c.NotNull],f.prototype,"getExpectedTokens",null),f=n([i(0,c.NotNull)],f),r.ATN=f,function(t){t.INVALID_ALT_NUMBER=0}(f=r.ATN||(r.ATN={})),r.ATN=f},{252:252,276:276,302:302,303:303,326:326,344:344,349:349,359:359,362:362}],211:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Util=class{static trim(t,e){return void 0!==e?t.replace(new RegExp("".concat("^\\",e,"+|\\",e,"+$"),"g"),""):t.trim()}}},{}],215:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179),i=t(192),o=t(219);class s extends n.Expression{constructor(t){if(super(i.ExpressionType.And,void 0),this.anyBindings=new Map,this.subsumed=!1,t)if(Array.isArray(t)){const e=t;this.children=e}else if(t instanceof s){const e=t;this.children=[...e.children];for(const[t,r]of e.anyBindings.entries())this.anyBindings.set(t,r)}else if(t instanceof n.Expression){const e=t;this.children.push(e)}}toString(t=[],e=0){t.push(" ".repeat(e)),this.subsumed&&t.push("*"),t.push("(");let r=!0;for(const n of this.children)r?r=!1:t.push(" && "),t.push(n.toString());return t.push(")"),this._ignored&&(t.push(" ignored("),t.push(this._ignored.toString()),t.push(")")),this.anyBindings.forEach((e,r)=>{t.push(` ${r}->${e}`)}),t.join("")}relationship(t,e){let r=o.RelationshipType.incomparable,n=this,i=n.children.length,s=t,a=s.children.length,u=!1;if(a<i){s=this,n=t;const e=a;a=i,i=e,u=!0}if(0===i)r=0===a?o.RelationshipType.equal:o.RelationshipType.generalizes;else{for(const t of n.children){let n=o.RelationshipType.incomparable;for(const r of s.children)if((n=this._relationship(t,r,e))!==o.RelationshipType.incomparable)break;if(n===o.RelationshipType.incomparable){r=o.RelationshipType.incomparable;break}if(r===o.RelationshipType.incomparable&&(r=n),r===o.RelationshipType.equal){if(n!==o.RelationshipType.generalizes&&(n!==o.RelationshipType.specializes||i!==a)&&n!==o.RelationshipType.equal)break;r=n}else if(r!=n)break}if(i!==a)switch(r){case o.RelationshipType.equal:case o.RelationshipType.generalizes:r=o.RelationshipType.generalizes;break;default:r=o.RelationshipType.incomparable}r=this._bindingRelationship(r,n,s)}return this._swap(r,u)}matches(t,e){let r=!1;if(t.deepEquals(this)&&(r=!0,this._ignored)){const{value:t,error:n}=this._ignored.tryEvaluate(e);r=!n&&t}return r}splitIgnores(){const t=[],e=[];for(let r=0;r<this.children.length;r++){const n=this.children[r];n.type===i.ExpressionType.Ignore?e.push(n):t.push(n)}this.children=t,e.length>0&&(this._ignored=n.Expression.andExpression(...e))}_bindingRelationship(t,e,r){if(t===o.RelationshipType.equal){let n=!1,i=e.anyBindings,s=r.anyBindings;e.anyBindings.size>r.anyBindings.size&&(i=r.anyBindings,s=e.anyBindings,n=!0);for(const[e,r]of i.entries()){let n=!1;for(const[t,i]of s.entries())if(e===t&&r===i){n=!0;break}n||(t=o.RelationshipType.incomparable)}t===o.RelationshipType.equal&&i.size<s.size&&(t=o.RelationshipType.specializes),t=this._swap(t,n)}return t}_swap(t,e){let r=t;if(e)switch(t){case o.RelationshipType.specializes:r=o.RelationshipType.generalizes;break;case o.RelationshipType.generalizes:r=o.RelationshipType.specializes}return r}_relationship(t,e,r){o.RelationshipType.incomparable;let n,s=t,a=e;return t.type===i.ExpressionType.Not&&e.type===i.ExpressionType.Not&&(s=t.children[0],a=e.children[0]),s.type===e.type&&(n=r[s.type]),n?n.relationship(s,a):t.deepEquals(e)?o.RelationshipType.equal:o.RelationshipType.incomparable}}r.Clause=s},{179:179,192:192,219:219}],219:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.RelationshipType||(r.RelationshipType={})).specializes="specializes",n.equal="equal",n.generalizes="generalizes",n.incomparable="incomparable"},{}],218:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.QuantifierType||(r.QuantifierType={})).all="all",n.any="any",r.Quantifier=class{constructor(t,e,r){this.variable=t,this.type=e,this.bindings=r}toString(){return`${this.type} ${this.variable} ${this.bindings.length}`}}},{}],217:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(215),i=t(219);var o;!function(t){t.none="none",t.found="found",t.added="added",t.removed="removed",t.inserted="inserted"}(o||(o={})),r.Node=class{constructor(t,e,r){this._allTriggers=[],this._triggers=[],this._specializations=[],this.clause=new n.Clause(t),this.tree=e,r&&(this._allTriggers.push(r),this._triggers.push(r))}get triggers(){return this._triggers}get allTriggers(){return this._allTriggers}get specializations(){return this._specializations}toString(t=[],e=0){return this.clause.toString(t,e)}relationship(t){return this.clause.relationship(t.clause,this.tree.comparers)}matches(t){const e=new Set;return this._matches(t,e,new Map),Array.from(e)}addNode(t){return this._addNode(t,new Map)===o.added}removeTrigger(t){return this._removeTrigger(t,new Set)}_addNode(t,e){if(e.has(this))return o.none;let r=o.none;const n=t.triggers[0];switch(this.relationship(t)){case i.RelationshipType.equal:const s=void 0!==this._allTriggers.find(t=>null!=n.action&&n.action===t.action);if(r=o.found,!s){this._allTriggers.push(n);let t=!0;for(let e=0;e<this._triggers.length;){const r=this._triggers[e],o=n.relationship(r,this.tree.comparers);if(o===i.RelationshipType.generalizes){t=!1;break}o===i.RelationshipType.specializes?this._triggers.splice(e,1):++e}t&&this._triggers.push(n),r=o.added}break;case i.RelationshipType.incomparable:for(const r of this._specializations)r._addNode(t,e);break;case i.RelationshipType.specializes:t._addSpecialization(this),r=o.inserted;break;case i.RelationshipType.generalizes:let a,u=!1;for(let n=0;n<this._specializations.length;n++){const i=this._specializations[n],s=i._addNode(t,e);s!=o.none&&(u=!0,s===o.inserted?(a||(a=[]),a.push(i),r=o.added):r=s)}if(a){for(const t of a){const e=this._specializations.findIndex(e=>e===t);e>=0&&this._specializations.splice(e,1)}this._specializations.push(t)}u||(this._specializations.push(t),r=o.added)}return e.set(this,r),r}_matches(t,e,r){let n=r.get(this);if(n)return!0;n=!1;for(const i of this._specializations)i._matches(t,e,r)&&(n=!0);if(!n){const{value:r,error:i}=this.clause.tryEvaluate(t);if(!i&&r)for(const o of this.triggers)o.matches(this.clause,t)&&(e.add(o),n=!0)}return r.set(this,n),n}_removeTrigger(t,e){if(e.has(this))return!1;e.add(this);let r=!1;const n=this._allTriggers.findIndex(e=>e===t);if(n>=0){this._allTriggers.splice(n,1),r=!0;const e=this._triggers.findIndex(e=>e===t);if(e>=0){this._triggers.splice(e,1);for(const t of this._allTriggers){let e=!0;for(const r of this._triggers){const n=t.relationship(r,this.tree.comparers);if(n===i.RelationshipType.equal||n===i.RelationshipType.generalizes){e=!1;break}}e&&this._triggers.push(t)}}}let o;for(let i=0;i<this._specializations.length;i++){const n=this._specializations[i];n._removeTrigger(t,e)&&(r=!0),0===n.triggers.length&&(o||(o=[]),o.push(n))}if(o)for(const s of o){const t=this._specializations.findIndex(t=>t===s);if(t>=0){this._specializations.splice(t,1);for(const t of s.specializations){let e=!0;for(const r of this._specializations)if(r.relationship(t)===i.RelationshipType.generalizes){e=!1;break}e&&this._specializations.push(t)}}}return r}_addSpecialization(t){let e,r=!1,n=!1;for(let o=0;o<this._specializations.length;o++){const r=this._specializations[o],s=t.relationship(r);if(s===i.RelationshipType.equal){n=!0;break}if(s===i.RelationshipType.generalizes)e||(e=[]),e.push(r);else if(s===i.RelationshipType.specializes){n=!0;break}}if(!n){if(e)for(const r of e){const e=this._specializations.findIndex(t=>t===r);e>=0&&(t._addSpecialization(this._specializations[e]),this._specializations.splice(e,1))}this._specializations.push(t),r=!0}return r}}},{215:215,219:219}],220:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(215),i=t(167),o=t(179),s=t(192),a=t(218),u=t(219),l=(t,e=!1)=>{let r=t;const n=t.evaluator.negation;switch(t.type){case s.ExpressionType.And:case s.ExpressionType.Or:const i=t.children.map(t=>l(t,e));r=1===i.length?i[0]:o.Expression.makeExpression(t.type===s.ExpressionType.And?e?s.ExpressionType.Or:s.ExpressionType.And:e?s.ExpressionType.And:s.ExpressionType.Or,void 0,...i);break;case s.ExpressionType.Not:r=l(t.children[0],!e);break;default:e&&(r=n?t.type===n.type?o.Expression.makeExpression(void 0,n,...t.children.map(t=>l(t,!0))):o.Expression.makeExpression(void 0,n,...t.children):o.Expression.makeExpression(s.ExpressionType.Not,void 0,t))}return r};r.Trigger=class{constructor(t,e,r,...n){if(this._tree=t,this.action=r,this.originalExpression=e,this._quantifiers=n,e){const t=l(e);this._clauses=this._generateClauses(t),this._removeDuplicatedPredicates(),this._optimizeClauses(),this._expandQuantifiers(),this._removeDuplicates(),this._markSubsumedClauses(),this._splitIgnores()}else this._clauses=[]}get clauses(){return this._clauses}relationship(t,e){const r=this._relationship(this,t,e),n=this._relationship(t,this,e);return r===u.RelationshipType.equal?n===u.RelationshipType.equal?u.RelationshipType.equal:u.RelationshipType.specializes:r===u.RelationshipType.specializes?u.RelationshipType.specializes:n===u.RelationshipType.equal||n===u.RelationshipType.specializes?u.RelationshipType.generalizes:u.RelationshipType.incomparable}matches(t,e){return void 0!==this.clauses.find(r=>r.matches(t,e))}toString(t=[],e=0){if(t.push(" ".repeat(e)),this._clauses.length>0){let r=!0;for(const n of this._clauses)r?r=!1:(t.push("\n"),t.push(" ".repeat(e)),t.push("|| ")),t.push(n.toString())}else t.push("<Empty>");return t.join("")}_relationship(t,e,r){let n=u.RelationshipType.incomparable;for(const i of t.clauses)if(!i.subsumed){let t=u.RelationshipType.incomparable;for(const n of e.clauses)if(!n.subsumed){const e=i.relationship(n,r);if(e===u.RelationshipType.equal||e===u.RelationshipType.specializes){t=e;break}}if(t===u.RelationshipType.incomparable){n=u.RelationshipType.incomparable;break}t===u.RelationshipType.equal?n===u.RelationshipType.incomparable&&(n=t):t===u.RelationshipType.specializes&&(n=t)}return n}_generateClauses(t){switch(t.type){case s.ExpressionType.And:let e=[],r=!0;for(let i=0;i<t.children.length;i++){const o=t.children[i],s=this._generateClauses(o);if(0===s.length){e=[];break}if(r)e.push(...s),r=!1;else{const t=[];for(const r of e)for(const e of s){const i=[];i.push(...r.children),i.push(...e.children),t.push(new n.Clause(i))}e=t}}return e;case s.ExpressionType.Or:const o=[];for(let n=0;n<t.children.length;n++){const e=t.children[n];o.push(...this._generateClauses(e))}return o;case s.ExpressionType.Optional:return[new n.Clause,...this._generateClauses(t.children[0])];default:return t instanceof i.Constant&&"boolean"==typeof t.value?t.value?[new n.Clause]:[]:[new n.Clause(t)]}}_removeDuplicatedPredicates(){for(let t=0;t<this._clauses.length;++t){const e=this._clauses[t],r=[];for(let t=0;t<e.children.length;++t){const n=e.children[t];let i=!1;for(let r=t+1;r<e.children.length;++r)if(n.deepEquals(e.children[r])){i=!0;break}i||r.push(n)}this._clauses[t]=new n.Clause(r)}}_markSubsumedClauses(){for(let t=0;t<this._clauses.length;++t){const e=this._clauses[t];if(!e.subsumed)for(let r=t+1;r<this._clauses.length;++r){const t=this._clauses[r];if(!t.subsumed){const n=e.relationship(t,this._tree.comparers);if(n===u.RelationshipType.equal)this._clauses.splice(r,1),--r;else{if(n===u.RelationshipType.specializes){e.subsumed=!0;break}n===u.RelationshipType.generalizes&&(t.subsumed=!0)}}}}}_splitIgnores(){for(let t=0;t<this._clauses.length;t++)this._clauses[t].splitIgnores()}_optimizeClauses(){this._clauses.forEach(t=>{this._tree.optimizers.forEach(e=>{e.optimize(t)})})}_expandQuantifiers(){if(this._quantifiers&&this._quantifiers.length>0)for(let t=0;t<this._quantifiers.length;t++){const e=this._quantifiers[t],r=[];for(let t=0;t<this._clauses.length;t++){const n=this._clauses[t];r.push(...this._expandQuantifiersWithClause(e,n))}this._clauses=r}}_expandQuantifiersWithClause(t,e){const r=[];if(t.type===a.QuantifierType.all){const i=[];if(t.bindings.length>0)for(let r=0;r<e.children.length;r++){const n=e.children[r];for(let e=0;e<t.bindings.length;e++){const r=t.bindings[e],{expression:o,changed:s}=this._substituteVariable(t.variable,r,n);if(i.push(o),!s)break}}else for(let r=0;r<e.children.length;r++){const n=e.children[r],{changed:o}=this._substituteVariable(t.variable,"",n);o||i.push(n)}r.push(new n.Clause(i))}else if(t.bindings.length>0){let i=!1;for(let o=0;o<t.bindings.length;o++){const s=t.bindings[o],a=new n.Clause(e),u=[];for(let r=0;r<e.children.length;r++){const n=e.children[r],{expression:o,changed:a}=this._substituteVariable(t.variable,s,n);i=i||a,u.push(o)}if(i&&a.anyBindings.set(t.variable,s),a.children=[...u],r.push(a),!i)break}}else{let n=!1;for(let r=0;r<e.children.length;r++){const i=e.children[r],{changed:o}=this._substituteVariable(t.variable,"",i);if(o){n=!0;break}}n||r.push(e)}return r}_substituteVariable(t,e,r){let n=r,a=!1;if(r.type===s.ExpressionType.Accessor&&1===r.children.length&&r.children[0]instanceof i.Constant&&"string"==typeof r.children[0].value&&r.children[0].value===t)n=o.Expression.makeExpression(s.ExpressionType.Accessor,void 0,new i.Constant(e)),a=!0;else{const i=[];for(let n=0;n<r.children.length;n++){const o=r.children[n],{expression:s,changed:u}=this._substituteVariable(t,e,o);i.push(s),a=a||u}a&&(n=new o.Expression(void 0,r.evaluator,...i))}return{expression:n,changed:a}}_removeDuplicates(){for(const t of this._clauses){const e=[...t.children];for(let t=0;t<e.length;++t){const r=e[t];for(let n=t+1;n<e.length;){const t=e[n];r.deepEquals(t)?e.splice(n,1):++n}}t.children=[...e]}}}},{167:167,179:179,192:192,215:215,218:218,219:219}],221:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(179),i=t(215),o=t(217),s=t(219),a=t(220);r.TriggerTree=class{constructor(){this.optimizers=[],this.comparers={},this.totalTriggers=0,this.root=new o.Node(new i.Clause,this)}toString(){return`TriggerTree with ${this.totalTriggers} triggers`}addTrigger(t,e,...r){const i="string"==typeof t?n.Expression.parse(t):t,s=new a.Trigger(this,i,e,...r);let u=!1;if(s.clauses.length)for(const n of s.clauses){const t=new o.Node(n,this,s);this.root.addNode(t)&&(u=!0)}return u&&++this.totalTriggers,s}removeTrigger(t){const e=this.root.removeTrigger(t);return e&&--this.totalTriggers,e}treeToString(t=0){const e=[];return this._treeToString(e,this.root,t),e.join("")}matches(t){return this.root.matches(t)}verifyTree(){return this._verifyTree(this.root,new Set)}_verifyTree(t,e){let r;if(!e.has(t)){e.add(t);for(let n=0;!r&&n<t.specializations.length;++n){const i=t.specializations[n];if(t.relationship(i)!==s.RelationshipType.generalizes)r=t;else{this._verifyTree(t.specializations[n],e);for(let e=n+1;e<t.specializations.length;++e){const n=t.specializations[e];if(i.relationship(n)!==s.RelationshipType.incomparable){r=t;break}}}}}return r}_treeToString(t,e,r){e.toString(t,r),t.push(` [${e.triggers.length}]`),t.push("\n");for(const n of e.specializations)this._treeToString(t,n,r+2)}}},{179:179,215:215,217:217,219:219,220:220}],225:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0,r.default="00000000-0000-0000-0000-000000000000"},{}],234:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(t(228)),i=o(t(230));function o(t){return t&&t.__esModule?t:{default:t}}r.default=function(t,e,r){const o=(t=t||{}).random||(t.rng||n.default)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){r=r||0;for(let t=0;t<16;++t)e[r+t]=o[t];return e}return(0,i.default)(o)}},{228:228,230:230}],237:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=t(236))&&n.__esModule?n:{default:n};r.default=function(t){if(!(0,i.default)(t))throw TypeError("Invalid UUID");return parseInt(t.substr(14,1),16)}},{236:236}],230:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=t(236))&&n.__esModule?n:{default:n};const o=[];for(let s=0;s<256;++s)o.push((s+256).toString(16).substr(1));r.default=function(t,e=0){const r=(o[t[e+0]]+o[t[e+1]]+o[t[e+2]]+o[t[e+3]]+"-"+o[t[e+4]]+o[t[e+5]]+"-"+o[t[e+6]]+o[t[e+7]]+"-"+o[t[e+8]]+o[t[e+9]]+"-"+o[t[e+10]]+o[t[e+11]]+o[t[e+12]]+o[t[e+13]]+o[t[e+14]]+o[t[e+15]]).toLowerCase();if(!(0,i.default)(r))throw TypeError("Stringified UUID is invalid");return r}},{236:236}],226:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=t(236))&&n.__esModule?n:{default:n};r.default=function(t){if(!(0,i.default)(t))throw TypeError("Invalid UUID");let e;const r=new Uint8Array(16);return r[0]=(e=parseInt(t.slice(0,8),16))>>>24,r[1]=e>>>16&255,r[2]=e>>>8&255,r[3]=255&e,r[4]=(e=parseInt(t.slice(9,13),16))>>>8,r[5]=255&e,r[6]=(e=parseInt(t.slice(14,18),16))>>>8,r[7]=255&e,r[8]=(e=parseInt(t.slice(19,23),16))>>>8,r[9]=255&e,r[10]=(e=parseInt(t.slice(24,36),16))/1099511627776&255,r[11]=e/4294967296&255,r[12]=e>>>24&255,r[13]=e>>>16&255,r[14]=e>>>8&255,r[15]=255&e,r}},{236:236}],231:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(t(228)),i=o(t(230));function o(t){return t&&t.__esModule?t:{default:t}}let s,a,u=0,l=0;r.default=function(t,e,r){let o=e&&r||0;const c=e||new Array(16);let h=(t=t||{}).node||s,p=void 0!==t.clockseq?t.clockseq:a;if(null==h||null==p){const e=t.random||(t.rng||n.default)();null==h&&(h=s=[1|e[0],e[1],e[2],e[3],e[4],e[5]]),null==p&&(p=a=16383&(e[6]<<8|e[7]))}let d=void 0!==t.msecs?t.msecs:Date.now(),f=void 0!==t.nsecs?t.nsecs:l+1;const y=d-u+(f-l)/1e4;if(y<0&&void 0===t.clockseq&&(p=p+1&16383),(y<0||d>u)&&void 0===t.nsecs&&(f=0),f>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");u=d,l=f,a=p;const m=(1e4*(268435455&(d+=122192928e5))+f)%4294967296;c[o++]=m>>>24&255,c[o++]=m>>>16&255,c[o++]=m>>>8&255,c[o++]=255&m;const g=d/4294967296*1e4&268435455;c[o++]=g>>>8&255,c[o++]=255&g,c[o++]=g>>>24&15|16,c[o++]=g>>>16&255,c[o++]=p>>>8|128,c[o++]=255&p;for(let n=0;n<6;++n)c[o+n]=h[n];return e||(0,i.default)(c)}},{228:228,230:230}],235:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(t(233)),i=o(t(229));function o(t){return t&&t.__esModule?t:{default:t}}var s=(0,n.default)("v5",80,i.default);r.default=s},{229:229,233:233}],236:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,i=(n=t(227))&&n.__esModule?n:{default:n};r.default=function(t){return"string"==typeof t&&i.default.test(t)}},{227:227}],232:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(t(233)),i=o(t(224));function o(t){return t&&t.__esModule?t:{default:t}}var s=(0,n.default)("v3",48,i.default);r.default=s},{224:224,233:233}],224:[function(t,e,r){"use strict";function n(t){return 14+(t+64>>>9<<4)+1}function i(t,e){const r=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(r>>16)<<16|65535&r}function o(t,e,r,n,o,s){return i((a=i(i(e,t),i(n,s)))<<(u=o)|a>>>32-u,r);var a,u}function s(t,e,r,n,i,s,a){return o(e&r|~e&n,t,e,i,s,a)}function a(t,e,r,n,i,s,a){return o(e&n|r&~n,t,e,i,s,a)}function u(t,e,r,n,i,s,a){return o(e^r^n,t,e,i,s,a)}function l(t,e,r,n,i,s,a){return o(r^(e|~n),t,e,i,s,a)}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(t){if("string"==typeof t){const e=unescape(encodeURIComponent(t));t=new Uint8Array(e.length);for(let r=0;r<e.length;++r)t[r]=e.charCodeAt(r)}return function(t){const e=[],r=32*t.length;for(let n=0;n<r;n+=8){const r=t[n>>5]>>>n%32&255,i=parseInt("0123456789abcdef".charAt(r>>>4&15)+"0123456789abcdef".charAt(15&r),16);e.push(i)}return e}(function(t,e){t[e>>5]|=128<<e%32,t[n(e)-1]=e;let r=1732584193,o=-271733879,c=-1732584194,h=271733878;for(let n=0;n<t.length;n+=16){const e=r,p=o,d=c,f=h;r=s(r,o,c,h,t[n],7,-680876936),h=s(h,r,o,c,t[n+1],12,-389564586),c=s(c,h,r,o,t[n+2],17,606105819),o=s(o,c,h,r,t[n+3],22,-1044525330),r=s(r,o,c,h,t[n+4],7,-176418897),h=s(h,r,o,c,t[n+5],12,1200080426),c=s(c,h,r,o,t[n+6],17,-1473231341),o=s(o,c,h,r,t[n+7],22,-45705983),r=s(r,o,c,h,t[n+8],7,1770035416),h=s(h,r,o,c,t[n+9],12,-1958414417),c=s(c,h,r,o,t[n+10],17,-42063),o=s(o,c,h,r,t[n+11],22,-1990404162),r=s(r,o,c,h,t[n+12],7,1804603682),h=s(h,r,o,c,t[n+13],12,-40341101),c=s(c,h,r,o,t[n+14],17,-1502002290),o=s(o,c,h,r,t[n+15],22,1236535329),r=a(r,o,c,h,t[n+1],5,-165796510),h=a(h,r,o,c,t[n+6],9,-1069501632),c=a(c,h,r,o,t[n+11],14,643717713),o=a(o,c,h,r,t[n],20,-373897302),r=a(r,o,c,h,t[n+5],5,-701558691),h=a(h,r,o,c,t[n+10],9,38016083),c=a(c,h,r,o,t[n+15],14,-660478335),o=a(o,c,h,r,t[n+4],20,-405537848),r=a(r,o,c,h,t[n+9],5,568446438),h=a(h,r,o,c,t[n+14],9,-1019803690),c=a(c,h,r,o,t[n+3],14,-187363961),o=a(o,c,h,r,t[n+8],20,1163531501),r=a(r,o,c,h,t[n+13],5,-1444681467),h=a(h,r,o,c,t[n+2],9,-51403784),c=a(c,h,r,o,t[n+7],14,1735328473),o=a(o,c,h,r,t[n+12],20,-1926607734),r=u(r,o,c,h,t[n+5],4,-378558),h=u(h,r,o,c,t[n+8],11,-2022574463),c=u(c,h,r,o,t[n+11],16,1839030562),o=u(o,c,h,r,t[n+14],23,-35309556),r=u(r,o,c,h,t[n+1],4,-1530992060),h=u(h,r,o,c,t[n+4],11,1272893353),c=u(c,h,r,o,t[n+7],16,-155497632),o=u(o,c,h,r,t[n+10],23,-1094730640),r=u(r,o,c,h,t[n+13],4,681279174),h=u(h,r,o,c,t[n],11,-358537222),c=u(c,h,r,o,t[n+3],16,-722521979),o=u(o,c,h,r,t[n+6],23,76029189),r=u(r,o,c,h,t[n+9],4,-640364487),h=u(h,r,o,c,t[n+12],11,-421815835),c=u(c,h,r,o,t[n+15],16,530742520),o=u(o,c,h,r,t[n+2],23,-995338651),r=l(r,o,c,h,t[n],6,-198630844),h=l(h,r,o,c,t[n+7],10,1126891415),c=l(c,h,r,o,t[n+14],15,-1416354905),o=l(o,c,h,r,t[n+5],21,-57434055),r=l(r,o,c,h,t[n+12],6,1700485571),h=l(h,r,o,c,t[n+3],10,-1894986606),c=l(c,h,r,o,t[n+10],15,-1051523),o=l(o,c,h,r,t[n+1],21,-2054922799),r=l(r,o,c,h,t[n+8],6,1873313359),h=l(h,r,o,c,t[n+15],10,-30611744),c=l(c,h,r,o,t[n+6],15,-1560198380),o=l(o,c,h,r,t[n+13],21,1309151649),r=l(r,o,c,h,t[n+4],6,-145523070),h=l(h,r,o,c,t[n+11],10,-1120210379),c=l(c,h,r,o,t[n+2],15,718787259),o=l(o,c,h,r,t[n+9],21,-343485551),r=i(r,e),o=i(o,p),c=i(c,d),h=i(h,f)}return[r,o,c,h]}(function(t){if(0===t.length)return[];const e=8*t.length,r=new Uint32Array(n(e));for(let n=0;n<e;n+=8)r[n>>5]|=(255&t[n/8])<<n%32;return r}(t),8*t.length))}},{}],227:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0,r.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},{}],228:[function(t,e,r){"use strict";let n;Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(){if(!n&&!(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(i)};const i=new Uint8Array(16)},{}],229:[function(t,e,r){"use strict";function n(t,e,r,n){switch(t){case 0:return e&r^~e&n;case 1:return e^r^n;case 2:return e&r^e&n^r&n;case 3:return e^r^n}}function i(t,e){return t<<e|t>>>32-e}Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default=function(t){const e=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof t){const e=unescape(encodeURIComponent(t));t=[];for(let r=0;r<e.length;++r)t.push(e.charCodeAt(r))}else Array.isArray(t)||(t=Array.prototype.slice.call(t));t.push(128);const o=t.length/4+2,s=Math.ceil(o/16),a=new Array(s);for(let n=0;n<s;++n){const e=new Uint32Array(16);for(let r=0;r<16;++r)e[r]=t[64*n+4*r]<<24|t[64*n+4*r+1]<<16|t[64*n+4*r+2]<<8|t[64*n+4*r+3];a[n]=e}a[s-1][14]=8*(t.length-1)/Math.pow(2,32),a[s-1][14]=Math.floor(a[s-1][14]),a[s-1][15]=8*(t.length-1)&4294967295;for(let u=0;u<s;++u){const t=new Uint32Array(80);for(let e=0;e<16;++e)t[e]=a[u][e];for(let e=16;e<80;++e)t[e]=i(t[e-3]^t[e-8]^t[e-14]^t[e-16],1);let o=r[0],s=r[1],l=r[2],c=r[3],h=r[4];for(let r=0;r<80;++r){const a=Math.floor(r/20),u=i(o,5)+n(a,s,l,c)+h+e[a]+t[r]>>>0;h=c,c=l,l=i(s,30)>>>0,s=o,o=u}r[0]=r[0]+o>>>0,r[1]=r[1]+s>>>0,r[2]=r[2]+l>>>0,r[3]=r[3]+c>>>0,r[4]=r[4]+h>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]}},{}],233:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(t,e,r){function o(t,o,s,a){if("string"==typeof t&&(t=function(t){t=unescape(encodeURIComponent(t));const e=[];for(let r=0;r<t.length;++r)e.push(t.charCodeAt(r));return e}(t)),"string"==typeof o&&(o=(0,i.default)(o)),16!==o.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let u=new Uint8Array(16+t.length);if(u.set(o),u.set(t,o.length),(u=r(u))[6]=15&u[6]|e,u[8]=63&u[8]|128,s){a=a||0;for(let t=0;t<16;++t)s[a+t]=u[t];return s}return(0,n.default)(u)}try{o.name=t}catch(u){}return o.DNS=s,o.URL=a,o},r.URL=r.DNS=void 0;var n=o(t(230)),i=o(t(226));function o(t){return t&&t.__esModule?t:{default:t}}const s="6ba7b810-9dad-11d1-80b4-00c04fd430c8";r.DNS=s;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";r.URL=a},{226:226,230:230}],240:[function(t,e,r){r.entityMap={lt:"<",gt:">",amp:"&",quot:'"',apos:"'",Agrave:"\xc0",Aacute:"\xc1",Acirc:"\xc2",Atilde:"\xc3",Auml:"\xc4",Aring:"\xc5",AElig:"\xc6",Ccedil:"\xc7",Egrave:"\xc8",Eacute:"\xc9",Ecirc:"\xca",Euml:"\xcb",Igrave:"\xcc",Iacute:"\xcd",Icirc:"\xce",Iuml:"\xcf",ETH:"\xd0",Ntilde:"\xd1",Ograve:"\xd2",Oacute:"\xd3",Ocirc:"\xd4",Otilde:"\xd5",Ouml:"\xd6",Oslash:"\xd8",Ugrave:"\xd9",Uacute:"\xda",Ucirc:"\xdb",Uuml:"\xdc",Yacute:"\xdd",THORN:"\xde",szlig:"\xdf",agrave:"\xe0",aacute:"\xe1",acirc:"\xe2",atilde:"\xe3",auml:"\xe4",aring:"\xe5",aelig:"\xe6",ccedil:"\xe7",egrave:"\xe8",eacute:"\xe9",ecirc:"\xea",euml:"\xeb",igrave:"\xec",iacute:"\xed",icirc:"\xee",iuml:"\xef",eth:"\xf0",ntilde:"\xf1",ograve:"\xf2",oacute:"\xf3",ocirc:"\xf4",otilde:"\xf5",ouml:"\xf6",oslash:"\xf8",ugrave:"\xf9",uacute:"\xfa",ucirc:"\xfb",uuml:"\xfc",yacute:"\xfd",thorn:"\xfe",yuml:"\xff",nbsp:"\xa0",iexcl:"\xa1",cent:"\xa2",pound:"\xa3",curren:"\xa4",yen:"\xa5",brvbar:"\xa6",sect:"\xa7",uml:"\xa8",copy:"\xa9",ordf:"\xaa",laquo:"\xab",not:"\xac",shy:"\xad\xad",reg:"\xae",macr:"\xaf",deg:"\xb0",plusmn:"\xb1",sup2:"\xb2",sup3:"\xb3",acute:"\xb4",micro:"\xb5",para:"\xb6",middot:"\xb7",cedil:"\xb8",sup1:"\xb9",ordm:"\xba",raquo:"\xbb",frac14:"\xbc",frac12:"\xbd",frac34:"\xbe",iquest:"\xbf",times:"\xd7",divide:"\xf7",forall:"\u2200",part:"\u2202",exist:"\u2203",empty:"\u2205",nabla:"\u2207",isin:"\u2208",notin:"\u2209",ni:"\u220b",prod:"\u220f",sum:"\u2211",minus:"\u2212",lowast:"\u2217",radic:"\u221a",prop:"\u221d",infin:"\u221e",ang:"\u2220",and:"\u2227",or:"\u2228",cap:"\u2229",cup:"\u222a",int:"\u222b",there4:"\u2234",sim:"\u223c",cong:"\u2245",asymp:"\u2248",ne:"\u2260",equiv:"\u2261",le:"\u2264",ge:"\u2265",sub:"\u2282",sup:"\u2283",nsub:"\u2284",sube:"\u2286",supe:"\u2287",oplus:"\u2295",otimes:"\u2297",perp:"\u22a5",sdot:"\u22c5",Alpha:"\u0391",Beta:"\u0392",Gamma:"\u0393",Delta:"\u0394",Epsilon:"\u0395",Zeta:"\u0396",Eta:"\u0397",Theta:"\u0398",Iota:"\u0399",Kappa:"\u039a",Lambda:"\u039b",Mu:"\u039c",Nu:"\u039d",Xi:"\u039e",Omicron:"\u039f",Pi:"\u03a0",Rho:"\u03a1",Sigma:"\u03a3",Tau:"\u03a4",Upsilon:"\u03a5",Phi:"\u03a6",Chi:"\u03a7",Psi:"\u03a8",Omega:"\u03a9",alpha:"\u03b1",beta:"\u03b2",gamma:"\u03b3",delta:"\u03b4",epsilon:"\u03b5",zeta:"\u03b6",eta:"\u03b7",theta:"\u03b8",iota:"\u03b9",kappa:"\u03ba",lambda:"\u03bb",mu:"\u03bc",nu:"\u03bd",xi:"\u03be",omicron:"\u03bf",pi:"\u03c0",rho:"\u03c1",sigmaf:"\u03c2",sigma:"\u03c3",tau:"\u03c4",upsilon:"\u03c5",phi:"\u03c6",chi:"\u03c7",psi:"\u03c8",omega:"\u03c9",thetasym:"\u03d1",upsih:"\u03d2",piv:"\u03d6",OElig:"\u0152",oelig:"\u0153",Scaron:"\u0160",scaron:"\u0161",Yuml:"\u0178",fnof:"\u0192",circ:"\u02c6",tilde:"\u02dc",ensp:"\u2002",emsp:"\u2003",thinsp:"\u2009",zwnj:"\u200c",zwj:"\u200d",lrm:"\u200e",rlm:"\u200f",ndash:"\u2013",mdash:"\u2014",lsquo:"\u2018",rsquo:"\u2019",sbquo:"\u201a",ldquo:"\u201c",rdquo:"\u201d",bdquo:"\u201e",dagger:"\u2020",Dagger:"\u2021",bull:"\u2022",hellip:"\u2026",permil:"\u2030",prime:"\u2032",Prime:"\u2033",lsaquo:"\u2039",rsaquo:"\u203a",oline:"\u203e",euro:"\u20ac",trade:"\u2122",larr:"\u2190",uarr:"\u2191",rarr:"\u2192",darr:"\u2193",harr:"\u2194",crarr:"\u21b5",lceil:"\u2308",rceil:"\u2309",lfloor:"\u230a",rfloor:"\u230b",loz:"\u25ca",spades:"\u2660",clubs:"\u2663",hearts:"\u2665",diams:"\u2666"}},{}],241:[function(t,e,r){var n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,i=new RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),o=new RegExp("^"+n.source+i.source+"*(?::"+n.source+i.source+"*)?$");function s(t,e){this.message=t,this.locator=e,Error.captureStackTrace&&Error.captureStackTrace(this,s)}function a(){}function u(t,e){return e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber,e}function l(t,e,r,n,i,o){function s(t,e,n){t in r.attributeNames&&o.fatalError("Attribute "+t+" redefined"),r.addValue(t,e,n)}for(var a,u=++e,l=0;;){var c=t.charAt(u);switch(c){case"=":if(1===l)a=t.slice(e,u),l=3;else{if(2!==l)throw new Error("attribute equal must after attrName");l=3}break;case"'":case'"':if(3===l||1===l){if(1===l&&(o.warning('attribute value must after "="'),a=t.slice(e,u)),e=u+1,!((u=t.indexOf(c,e))>0))throw new Error("attribute value no end '"+c+"' match");s(a,h=t.slice(e,u).replace(/&#?\w+;/g,i),e-1),l=5}else{if(4!=l)throw new Error('attribute value must after "="');s(a,h=t.slice(e,u).replace(/&#?\w+;/g,i),e),o.warning('attribute "'+a+'" missed start quot('+c+")!!"),e=u+1,l=5}break;case"/":switch(l){case 0:r.setTagName(t.slice(e,u));case 5:case 6:case 7:l=7,r.closed=!0;case 4:case 1:case 2:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return o.error("unexpected end of input"),0==l&&r.setTagName(t.slice(e,u)),u;case">":switch(l){case 0:r.setTagName(t.slice(e,u));case 5:case 6:case 7:break;case 4:case 1:"/"===(h=t.slice(e,u)).slice(-1)&&(r.closed=!0,h=h.slice(0,-1));case 2:2===l&&(h=a),4==l?(o.warning('attribute "'+h+'" missed quot(")!'),s(a,h.replace(/&#?\w+;/g,i),e)):("http://www.w3.org/1999/xhtml"===n[""]&&h.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+h+'" missed value!! "'+h+'" instead!!'),s(h,h,e));break;case 3:throw new Error("attribute value missed!!")}return u;case"\x80":c=" ";default:if(c<=" ")switch(l){case 0:r.setTagName(t.slice(e,u)),l=6;break;case 1:a=t.slice(e,u),l=2;break;case 4:var h=t.slice(e,u).replace(/&#?\w+;/g,i);o.warning('attribute "'+h+'" missed quot(")!!'),s(a,h,e);case 5:l=6}else switch(l){case 2:r.tagName,"http://www.w3.org/1999/xhtml"===n[""]&&a.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+a+'" missed value!! "'+a+'" instead2!!'),s(a,a,e),e=u,l=1;break;case 5:o.warning('attribute space is required"'+a+'"!!');case 6:l=1,e=u;break;case 3:l=4,e=u;break;case 7:throw new Error("elements closed character '/' and '>' must be connected to")}}u++}}function c(t,e,r){for(var n=t.tagName,i=null,o=t.length;o--;){var s=t[o],a=s.qName,u=s.value;if((p=a.indexOf(":"))>0)var l=s.prefix=a.slice(0,p),c=a.slice(p+1),h="xmlns"===l&&c;else c=a,l=null,h="xmlns"===a&&"";s.localName=c,!1!==h&&(null==i&&(i={},d(r,r={})),r[h]=i[h]=u,s.uri="http://www.w3.org/2000/xmlns/",e.startPrefixMapping(h,u))}for(o=t.length;o--;)(l=(s=t[o]).prefix)&&("xml"===l&&(s.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==l&&(s.uri=r[l||""]));var p;(p=n.indexOf(":"))>0?(l=t.prefix=n.slice(0,p),c=t.localName=n.slice(p+1)):(l=null,c=t.localName=n);var f=t.uri=r[l||""];if(e.startElement(f,c,n,t),!t.closed)return t.currentNSMap=r,t.localNSMap=i,!0;if(e.endElement(f,c,n),i)for(l in i)e.endPrefixMapping(l)}function h(t,e,r,n,i){if(/^(?:script|textarea)$/i.test(r)){var o=t.indexOf("</"+r+">",e),s=t.substring(e+1,o);if(/[&<]/.test(s))return/^script$/i.test(r)?(i.characters(s,0,s.length),o):(s=s.replace(/&#?\w+;/g,n),i.characters(s,0,s.length),o)}return e+1}function p(t,e,r,n){var i=n[r];return null==i&&((i=t.lastIndexOf("</"+r+">"))<e&&(i=t.lastIndexOf("</"+r)),n[r]=i),i<e}function d(t,e){for(var r in t)e[r]=t[r]}function f(t,e,r,n){switch(t.charAt(e+2)){case"-":return"-"===t.charAt(e+3)?(i=t.indexOf("--\x3e",e+4))>e?(r.comment(t,e+4,i-e-4),i+3):(n.error("Unclosed comment"),-1):-1;default:if("CDATA["==t.substr(e+3,6)){var i=t.indexOf("]]>",e+9);return r.startCDATA(),r.characters(t,e+9,i-e-9),r.endCDATA(),i+3}var o=function(t,e){var r,n=[],i=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;for(i.lastIndex=e,i.exec(t);r=i.exec(t);)if(n.push(r),r[1])return n}(t,e),s=o.length;if(s>1&&/!doctype/i.test(o[0][0])){var a=o[1][0],u=!1,l=!1;s>3&&(/^public$/i.test(o[2][0])?(u=o[3][0],l=s>4&&o[4][0]):/^system$/i.test(o[2][0])&&(l=o[3][0]));var c=o[s-1];return r.startDTD(a,u,l),r.endDTD(),c.index+c[0].length}}return-1}function y(t,e,r){var n=t.indexOf("?>",e);if(n){var i=t.substring(e,n).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);return i?(i[0].length,r.processingInstruction(i[1],i[2]),n+2):-1}return-1}function m(){this.attributeNames={}}s.prototype=new Error,s.prototype.name=s.name,a.prototype={parse:function(t,e,r){var n=this.domBuilder;n.startDocument(),d(e,e={}),function(t,e,r,n,i){function o(t){var e=t.slice(1,-1);return e in r?r[e]:"#"===e.charAt(0)?function(t){if(t>65535){var e=55296+((t-=65536)>>10),r=56320+(1023&t);return String.fromCharCode(e,r)}return String.fromCharCode(t)}(parseInt(e.substr(1).replace("x","0x"))):(i.error("entity not found:"+t),t)}function a(e){if(e>S){var r=t.substring(S,e).replace(/&#?\w+;/g,o);_&&d(S),n.characters(r,0,e-S),S=e}}function d(e,r){for(;e>=v&&(r=T.exec(t));)g=r.index,v=g+r[0].length,_.lineNumber++;_.columnNumber=e-g+1}for(var g=0,v=0,T=/.*(?:\r\n?|\n)|.*$/g,_=n.locator,E=[{currentNSMap:e}],b={},S=0;;){try{var x=t.indexOf("<",S);if(x<0){if(!t.substr(S).match(/^\s*$/)){var C=n.doc,A=C.createTextNode(t.substr(S));C.appendChild(A),n.currentElement=A}return}switch(x>S&&a(x),t.charAt(x+1)){case"/":var N=t.indexOf(">",x+3),O=t.substring(x+2,N),w=E.pop();N<0?(O=t.substring(x+2).replace(/[\s<].*/,""),i.error("end tag name: "+O+" is not complete:"+w.tagName),N=x+1+O.length):O.match(/\s</)&&(O=O.replace(/[\s<].*/,""),i.error("end tag name: "+O+" maybe not complete"),N=x+1+O.length);var R=w.localNSMap,L=w.tagName==O;if(L||w.tagName&&w.tagName.toLowerCase()==O.toLowerCase()){if(n.endElement(w.uri,w.localName,O),R)for(var P in R)n.endPrefixMapping(P);L||i.fatalError("end tag name: "+O+" is not match the current start tagName:"+w.tagName)}else E.push(w);N++;break;case"?":_&&d(x),N=y(t,x,n);break;case"!":_&&d(x),N=f(t,x,n,i);break;default:_&&d(x);var I=new m,D=E[E.length-1].currentNSMap,U=(N=l(t,x,I,D,o,i),I.length);if(!I.closed&&p(t,N,I.tagName,b)&&(I.closed=!0,r.nbsp||i.warning("unclosed xml attribute")),_&&U){for(var M=u(_,{}),k=0;k<U;k++){var F=I[k];d(F.offset),F.locator=u(_,{})}n.locator=M,c(I,n,D)&&E.push(I),n.locator=_}else c(I,n,D)&&E.push(I);"http://www.w3.org/1999/xhtml"!==I.uri||I.closed?N++:N=h(t,N,I.tagName,o,n)}}catch(j){if(j instanceof s)throw j;i.error("element parse error: "+j),N=-1}N>S?S=N:a(Math.max(x,S)+1)}}(t,e,r,n,this.errorHandler),n.endDocument()}},m.prototype={setTagName:function(t){if(!o.test(t))throw new Error("invalid tagName:"+t);this.tagName=t},addValue:function(t,e,r){if(!o.test(t))throw new Error("invalid attribute:"+t);this.attributeNames[t]=this.length,this[this.length++]={qName:t,value:e,offset:r}},length:0,getLocalName:function(t){return this[t].localName},getLocator:function(t){return this[t].locator},getQName:function(t){return this[t].qName},getURI:function(t){return this[t].uri},getValue:function(t){return this[t].value}},r.XMLReader=a,r.ParseError=s},{}],239:[function(t,e,r){function n(t,e){for(var r in t)e[r]=t[r]}function i(t,e){var r=t.prototype;if(!(r instanceof e)){function i(){}i.prototype=e.prototype,n(r,i=new i),t.prototype=r=i}r.constructor!=t&&("function"!=typeof t&&console.error("unknow Class:"+t),r.constructor=t)}var o={},s=o.ELEMENT_NODE=1,a=o.ATTRIBUTE_NODE=2,u=o.TEXT_NODE=3,l=o.CDATA_SECTION_NODE=4,c=o.ENTITY_REFERENCE_NODE=5,h=o.ENTITY_NODE=6,p=o.PROCESSING_INSTRUCTION_NODE=7,d=o.COMMENT_NODE=8,f=o.DOCUMENT_NODE=9,y=o.DOCUMENT_TYPE_NODE=10,m=o.DOCUMENT_FRAGMENT_NODE=11,g=o.NOTATION_NODE=12,v={},T={},_=(v.INDEX_SIZE_ERR=(T[1]="Index size error",1),v.DOMSTRING_SIZE_ERR=(T[2]="DOMString size error",2),v.HIERARCHY_REQUEST_ERR=(T[3]="Hierarchy request error",3)),E=(v.WRONG_DOCUMENT_ERR=(T[4]="Wrong document",4),v.INVALID_CHARACTER_ERR=(T[5]="Invalid character",5),v.NO_DATA_ALLOWED_ERR=(T[6]="No data allowed",6),v.NO_MODIFICATION_ALLOWED_ERR=(T[7]="No modification allowed",7),v.NOT_FOUND_ERR=(T[8]="Not found",8)),b=(v.NOT_SUPPORTED_ERR=(T[9]="Not supported",9),v.INUSE_ATTRIBUTE_ERR=(T[10]="Attribute in use",10));function S(t,e){if(e instanceof Error)var r=e;else r=this,Error.call(this,T[t]),this.message=T[t],Error.captureStackTrace&&Error.captureStackTrace(this,S);return r.code=t,e&&(this.message=this.message+": "+e),r}function x(){}function C(t,e){this._node=t,this._refresh=e,A(this)}function A(t){var e=t._node._inc||t._node.ownerDocument._inc;if(t._inc!=e){var r=t._refresh(t._node);rt(t,"length",r.length),n(r,t),t._inc=e}}function N(){}function O(t,e){for(var r=t.length;r--;)if(t[r]===e)return r}function w(t,e,r,n){if(n?e[O(e,n)]=r:e[e.length++]=r,t){r.ownerElement=t;var i=t.ownerDocument;i&&(n&&M(i,t,n),function(t,e,r){t&&t._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&(e._nsMap[r.prefix?r.localName:""]=r.value)}(i,t,r))}}function R(t,e,r){var n=O(e,r);if(!(n>=0))throw S(E,new Error(t.tagName+"@"+r));for(var i=e.length-1;n<i;)e[n]=e[++n];if(e.length=i,t){var o=t.ownerDocument;o&&(M(o,t,r),r.ownerElement=null)}}function L(t){if(this._features={},t)for(var e in t)this._features=t[e]}function P(){}function I(t){return("<"==t?"&lt;":">"==t&&"&gt;")||"&"==t&&"&amp;"||'"'==t&&"&quot;"||"&#"+t.charCodeAt()+";"}function D(t,e){if(e(t))return!0;if(t=t.firstChild)do{if(D(t,e))return!0}while(t=t.nextSibling)}function U(){}function M(t,e,r,n){t&&t._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&delete e._nsMap[r.prefix?r.localName:""]}function k(t,e,r){if(t&&t._inc){t._inc++;var n=e.childNodes;if(r)n[n.length++]=r;else{for(var i=e.firstChild,o=0;i;)n[o++]=i,i=i.nextSibling;n.length=o}}}function F(t,e){var r=e.previousSibling,n=e.nextSibling;return r?r.nextSibling=n:t.firstChild=n,n?n.previousSibling=r:t.lastChild=r,k(t.ownerDocument,t),e}function j(t,e,r){var n=e.parentNode;if(n&&n.removeChild(e),e.nodeType===m){var i=e.firstChild;if(null==i)return e;var o=e.lastChild}else i=o=e;var s=r?r.previousSibling:t.lastChild;i.previousSibling=s,o.nextSibling=r,s?s.nextSibling=i:t.firstChild=i,null==r?t.lastChild=o:r.previousSibling=o;do{i.parentNode=t}while(i!==o&&(i=i.nextSibling));return k(t.ownerDocument||t,t),e.nodeType==m&&(e.firstChild=e.lastChild=null),e}function B(){this._nsMap={}}function H(){}function G(){}function z(){}function W(){}function V(){}function $(){}function q(){}function Y(){}function K(){}function X(){}function Q(){}function Z(){}function J(t,e){var r=[],n=9==this.nodeType&&this.documentElement||this,i=n.prefix,o=n.namespaceURI;if(o&&null==i&&null==(i=n.lookupPrefix(o)))var s=[{namespace:o,prefix:null}];return et(this,r,t,e,s),r.join("")}function tt(t,e,r){var n=t.prefix||"",i=t.namespaceURI;if(!n&&!i)return!1;if("xml"===n&&"http://www.w3.org/XML/1998/namespace"===i||"http://www.w3.org/2000/xmlns/"==i)return!1;for(var o=r.length;o--;){var s=r[o];if(s.prefix==n)return s.namespace!=i}return!0}function et(t,e,r,n,i){if(n){if(!(t=n(t)))return;if("string"==typeof t)return void e.push(t)}switch(t.nodeType){case s:i||(i=[]),i.length;var o=t.attributes,h=o.length,g=t.firstChild,v=t.tagName;r="http://www.w3.org/1999/xhtml"===t.namespaceURI||r,e.push("<",v);for(var T=0;T<h;T++)"xmlns"==(_=o.item(T)).prefix?i.push({prefix:_.localName,namespace:_.value}):"xmlns"==_.nodeName&&i.push({prefix:"",namespace:_.value});for(T=0;T<h;T++){var _;if(tt(_=o.item(T),0,i)){var E=_.prefix||"",b=_.namespaceURI,S=E?" xmlns:"+E:" xmlns";e.push(S,'="',b,'"'),i.push({prefix:E,namespace:b})}et(_,e,r,n,i)}if(tt(t,0,i)&&(E=t.prefix||"",b=t.namespaceURI,S=E?" xmlns:"+E:" xmlns",e.push(S,'="',b,'"'),i.push({prefix:E,namespace:b})),g||r&&!/^(?:meta|link|img|br|hr|input)$/i.test(v)){if(e.push(">"),r&&/^script$/i.test(v))for(;g;)g.data?e.push(g.data):et(g,e,r,n,i),g=g.nextSibling;else for(;g;)et(g,e,r,n,i),g=g.nextSibling;e.push("</",v,">")}else e.push("/>");return;case f:case m:for(g=t.firstChild;g;)et(g,e,r,n,i),g=g.nextSibling;return;case a:return e.push(" ",t.name,'="',t.value.replace(/[&"]/g,I),'"');case u:return e.push(t.data.replace(/[<&]/g,I).replace(/]]>/g,"]]&gt;"));case l:return e.push("<![CDATA[",t.data,"]]>");case d:return e.push("\x3c!--",t.data,"--\x3e");case y:var x=t.publicId,C=t.systemId;if(e.push("<!DOCTYPE ",t.name),x)e.push(" PUBLIC ",x),C&&"."!=C&&e.push(" ",C),e.push(">");else if(C&&"."!=C)e.push(" SYSTEM ",C,">");else{var A=t.internalSubset;A&&e.push(" [",A,"]"),e.push(">")}return;case p:return e.push("<?",t.target," ",t.data,"?>");case c:return e.push("&",t.nodeName,";");default:e.push("??",t.nodeName)}}function rt(t,e,r){t[e]=r}v.INVALID_STATE_ERR=(T[11]="Invalid state",11),v.SYNTAX_ERR=(T[12]="Syntax error",12),v.INVALID_MODIFICATION_ERR=(T[13]="Invalid modification",13),v.NAMESPACE_ERR=(T[14]="Invalid namespace",14),v.INVALID_ACCESS_ERR=(T[15]="Invalid access",15),S.prototype=Error.prototype,n(v,S),x.prototype={length:0,item:function(t){return this[t]||null},toString:function(t,e){for(var r=[],n=0;n<this.length;n++)et(this[n],r,t,e);return r.join("")}},C.prototype.item=function(t){return A(this),this[t]},i(C,x),N.prototype={length:0,item:x.prototype.item,getNamedItem:function(t){for(var e=this.length;e--;){var r=this[e];if(r.nodeName==t)return r}},setNamedItem:function(t){var e=t.ownerElement;if(e&&e!=this._ownerElement)throw new S(b);var r=this.getNamedItem(t.nodeName);return w(this._ownerElement,this,t,r),r},setNamedItemNS:function(t){var e,r=t.ownerElement;if(r&&r!=this._ownerElement)throw new S(b);return e=this.getNamedItemNS(t.namespaceURI,t.localName),w(this._ownerElement,this,t,e),e},removeNamedItem:function(t){var e=this.getNamedItem(t);return R(this._ownerElement,this,e),e},removeNamedItemNS:function(t,e){var r=this.getNamedItemNS(t,e);return R(this._ownerElement,this,r),r},getNamedItemNS:function(t,e){for(var r=this.length;r--;){var n=this[r];if(n.localName==e&&n.namespaceURI==t)return n}return null}},L.prototype={hasFeature:function(t,e){var r=this._features[t.toLowerCase()];return!(!r||e&&!(e in r))},createDocument:function(t,e,r){var n=new U;if(n.implementation=this,n.childNodes=new x,n.doctype=r,r&&n.appendChild(r),e){var i=n.createElementNS(t,e);n.appendChild(i)}return n},createDocumentType:function(t,e,r){var n=new $;return n.name=t,n.nodeName=t,n.publicId=e,n.systemId=r,n}},P.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(t,e){return j(this,t,e)},replaceChild:function(t,e){this.insertBefore(t,e),e&&this.removeChild(e)},removeChild:function(t){return F(this,t)},appendChild:function(t){return this.insertBefore(t,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(t){return function t(e,r,n){var i=new r.constructor;for(var o in r){var u=r[o];"object"!=typeof u&&u!=i[o]&&(i[o]=u)}switch(r.childNodes&&(i.childNodes=new x),i.ownerDocument=e,i.nodeType){case s:var l=r.attributes,c=i.attributes=new N,h=l.length;c._ownerElement=i;for(var p=0;p<h;p++)i.setAttributeNode(t(e,l.item(p),!0));break;case a:n=!0}if(n)for(var d=r.firstChild;d;)i.appendChild(t(e,d,n)),d=d.nextSibling;return i}(this.ownerDocument||this,this,t)},normalize:function(){for(var t=this.firstChild;t;){var e=t.nextSibling;e&&e.nodeType==u&&t.nodeType==u?(this.removeChild(e),t.appendData(e.data)):(t.normalize(),t=e)}},isSupported:function(t,e){return this.ownerDocument.implementation.hasFeature(t,e)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(t){for(var e=this;e;){var r=e._nsMap;if(r)for(var n in r)if(r[n]==t)return n;e=e.nodeType==a?e.ownerDocument:e.parentNode}return null},lookupNamespaceURI:function(t){for(var e=this;e;){var r=e._nsMap;if(r&&t in r)return r[t];e=e.nodeType==a?e.ownerDocument:e.parentNode}return null},isDefaultNamespace:function(t){return null==this.lookupPrefix(t)}},n(o,P),n(o,P.prototype),U.prototype={nodeName:"#document",nodeType:f,doctype:null,documentElement:null,_inc:1,insertBefore:function(t,e){if(t.nodeType==m){for(var r=t.firstChild;r;){var n=r.nextSibling;this.insertBefore(r,e),r=n}return t}return null==this.documentElement&&t.nodeType==s&&(this.documentElement=t),j(this,t,e),t.ownerDocument=this,t},removeChild:function(t){return this.documentElement==t&&(this.documentElement=null),F(this,t)},importNode:function(t,e){return function t(e,r,n){var i;switch(r.nodeType){case s:(i=r.cloneNode(!1)).ownerDocument=e;case m:break;case a:n=!0}if(i||(i=r.cloneNode(!1)),i.ownerDocument=e,i.parentNode=null,n)for(var o=r.firstChild;o;)i.appendChild(t(e,o,n)),o=o.nextSibling;return i}(this,t,e)},getElementById:function(t){var e=null;return D(this.documentElement,(function(r){if(r.nodeType==s&&r.getAttribute("id")==t)return e=r,!0})),e},getElementsByClassName:function(t){var e=new RegExp("(^|\\s)"+t+"(\\s|$)");return new C(this,(function(t){var r=[];return D(t.documentElement,(function(n){n!==t&&n.nodeType==s&&e.test(n.getAttribute("class"))&&r.push(n)})),r}))},createElement:function(t){var e=new B;return e.ownerDocument=this,e.nodeName=t,e.tagName=t,e.childNodes=new x,(e.attributes=new N)._ownerElement=e,e},createDocumentFragment:function(){var t=new X;return t.ownerDocument=this,t.childNodes=new x,t},createTextNode:function(t){var e=new z;return e.ownerDocument=this,e.appendData(t),e},createComment:function(t){var e=new W;return e.ownerDocument=this,e.appendData(t),e},createCDATASection:function(t){var e=new V;return e.ownerDocument=this,e.appendData(t),e},createProcessingInstruction:function(t,e){var r=new Q;return r.ownerDocument=this,r.tagName=r.target=t,r.nodeValue=r.data=e,r},createAttribute:function(t){var e=new H;return e.ownerDocument=this,e.name=t,e.nodeName=t,e.localName=t,e.specified=!0,e},createEntityReference:function(t){var e=new K;return e.ownerDocument=this,e.nodeName=t,e},createElementNS:function(t,e){var r=new B,n=e.split(":"),i=r.attributes=new N;return r.childNodes=new x,r.ownerDocument=this,r.nodeName=e,r.tagName=e,r.namespaceURI=t,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=e,i._ownerElement=r,r},createAttributeNS:function(t,e){var r=new H,n=e.split(":");return r.ownerDocument=this,r.nodeName=e,r.name=e,r.namespaceURI=t,r.specified=!0,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=e,r}},i(U,P),B.prototype={nodeType:s,hasAttribute:function(t){return null!=this.getAttributeNode(t)},getAttribute:function(t){var e=this.getAttributeNode(t);return e&&e.value||""},getAttributeNode:function(t){return this.attributes.getNamedItem(t)},setAttribute:function(t,e){var r=this.ownerDocument.createAttribute(t);r.value=r.nodeValue=""+e,this.setAttributeNode(r)},removeAttribute:function(t){var e=this.getAttributeNode(t);e&&this.removeAttributeNode(e)},appendChild:function(t){return t.nodeType===m?this.insertBefore(t,null):function(t,e){var r=e.parentNode;if(r){var n=t.lastChild;r.removeChild(e),n=t.lastChild}return n=t.lastChild,e.parentNode=t,e.previousSibling=n,e.nextSibling=null,n?n.nextSibling=e:t.firstChild=e,t.lastChild=e,k(t.ownerDocument,t,e),e}(this,t)},setAttributeNode:function(t){return this.attributes.setNamedItem(t)},setAttributeNodeNS:function(t){return this.attributes.setNamedItemNS(t)},removeAttributeNode:function(t){return this.attributes.removeNamedItem(t.nodeName)},removeAttributeNS:function(t,e){var r=this.getAttributeNodeNS(t,e);r&&this.removeAttributeNode(r)},hasAttributeNS:function(t,e){return null!=this.getAttributeNodeNS(t,e)},getAttributeNS:function(t,e){var r=this.getAttributeNodeNS(t,e);return r&&r.value||""},setAttributeNS:function(t,e,r){var n=this.ownerDocument.createAttributeNS(t,e);n.value=n.nodeValue=""+r,this.setAttributeNode(n)},getAttributeNodeNS:function(t,e){return this.attributes.getNamedItemNS(t,e)},getElementsByTagName:function(t){return new C(this,(function(e){var r=[];return D(e,(function(n){n===e||n.nodeType!=s||"*"!==t&&n.tagName!=t||r.push(n)})),r}))},getElementsByTagNameNS:function(t,e){return new C(this,(function(r){var n=[];return D(r,(function(i){i===r||i.nodeType!==s||"*"!==t&&i.namespaceURI!==t||"*"!==e&&i.localName!=e||n.push(i)})),n}))}},U.prototype.getElementsByTagName=B.prototype.getElementsByTagName,U.prototype.getElementsByTagNameNS=B.prototype.getElementsByTagNameNS,i(B,P),H.prototype.nodeType=a,i(H,P),G.prototype={data:"",substringData:function(t,e){return this.data.substring(t,t+e)},appendData:function(t){t=this.data+t,this.nodeValue=this.data=t,this.length=t.length},insertData:function(t,e){this.replaceData(t,0,e)},appendChild:function(t){throw new Error(T[_])},deleteData:function(t,e){this.replaceData(t,e,"")},replaceData:function(t,e,r){r=this.data.substring(0,t)+r+this.data.substring(t+e),this.nodeValue=this.data=r,this.length=r.length}},i(G,P),z.prototype={nodeName:"#text",nodeType:u,splitText:function(t){var e=this.data,r=e.substring(t);e=e.substring(0,t),this.data=this.nodeValue=e,this.length=e.length;var n=this.ownerDocument.createTextNode(r);return this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling),n}},i(z,G),W.prototype={nodeName:"#comment",nodeType:d},i(W,G),V.prototype={nodeName:"#cdata-section",nodeType:l},i(V,G),$.prototype.nodeType=y,i($,P),q.prototype.nodeType=g,i(q,P),Y.prototype.nodeType=h,i(Y,P),K.prototype.nodeType=c,i(K,P),X.prototype.nodeName="#document-fragment",X.prototype.nodeType=m,i(X,P),Q.prototype.nodeType=p,i(Q,P),Z.prototype.serializeToString=function(t,e,r){return J.call(t,e,r)},P.prototype.toString=J;try{Object.defineProperty&&(Object.defineProperty(C.prototype,"length",{get:function(){return A(this),this.$$length}}),Object.defineProperty(P.prototype,"textContent",{get:function(){return function t(e){switch(e.nodeType){case s:case m:var r=[];for(e=e.firstChild;e;)7!==e.nodeType&&8!==e.nodeType&&r.push(t(e)),e=e.nextSibling;return r.join("");default:return e.nodeValue}}(this)},set:function(t){switch(this.nodeType){case s:case m:for(;this.firstChild;)this.removeChild(this.firstChild);(t||String(t))&&this.appendChild(this.ownerDocument.createTextNode(t));break;default:this.data=t,this.value=t,this.nodeValue=t}}}),rt=function(t,e,r){t["$$"+e]=r})}catch(nt){}},{}],242:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(258);class s{constructor(t){this.p=0,this.data=t,this.n=t.length}reset(){this.p=0}consume(){if(this.p>=this.n)throw new Error("cannot consume EOF");this.p<this.n&&this.p++}LA(t){return 0===t?0:t<0&&(t++,this.p+t-1<0)||this.p+t-1>=this.n?o.IntStream.EOF:this.data.charCodeAt(this.p+t-1)}LT(t){return this.LA(t)}get index(){return this.p}get size(){return this.n}mark(){return-1}release(t){}seek(t){if(t<=this.p)this.p=t;else for(t=Math.min(t,this.n);this.p<t;)this.consume()}getText(t){let e=t.a,r=t.b;r>=this.n&&(r=this.n-1);let n=r-e+1;return e>=this.n?"":this.data.substr(e,n)}get sourceName(){return this.name?this.name:o.IntStream.UNKNOWN_SOURCE_NAME}toString(){return this.data}}n([i.Override],s.prototype,"consume",null),n([i.Override],s.prototype,"LA",null),n([i.Override],s.prototype,"index",null),n([i.Override],s.prototype,"size",null),n([i.Override],s.prototype,"mark",null),n([i.Override],s.prototype,"release",null),n([i.Override],s.prototype,"seek",null),n([i.Override],s.prototype,"getText",null),n([i.Override],s.prototype,"sourceName",null),n([i.Override],s.prototype,"toString",null),r.ANTLRInputStream=s},{252:252,258:258}],258:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.IntStream||(r.IntStream={})).EOF=-1,n.UNKNOWN_SOURCE_NAME="<unknown>"},{}],252:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.NotNull=function(t,e,r){},r.Nullable=function(t,e,r){},r.Override=function(t,e,r){},r.SuppressWarnings=function(t){return(t,e,r)=>{}}},{}],243:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(253),o=t(257),s=t(252),a=t(363);class u extends i.DefaultErrorStrategy{recover(t,e){for(let r=t.context;r;r=r.parent)r.exception=e;throw new a.ParseCancellationException(e)}recoverInline(t){let e=new o.InputMismatchException(t);for(let r=t.context;r;r=r.parent)r.exception=e;throw new a.ParseCancellationException(e)}sync(t){}}n([s.Override],u.prototype,"recover",null),n([s.Override],u.prototype,"recoverInline",null),n([s.Override],u.prototype,"sync",null),r.BailErrorStrategy=u},{252:252,253:253,257:257,363:363}],253:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(285),s=t(286),a=t(256),u=t(257),l=t(359),c=t(264),h=t(326),p=t(276),d=t(252);class f{constructor(){this.errorRecoveryMode=!1,this.lastErrorIndex=-1,this.nextTokensState=o.ATNState.INVALID_STATE_NUMBER}reset(t){this.endErrorCondition(t)}beginErrorCondition(t){this.errorRecoveryMode=!0}inErrorRecoveryMode(t){return this.errorRecoveryMode}endErrorCondition(t){this.errorRecoveryMode=!1,this.lastErrorStates=void 0,this.lastErrorIndex=-1}reportMatch(t){this.endErrorCondition(t)}reportError(t,e){this.inErrorRecoveryMode(t)||(this.beginErrorCondition(t),e instanceof c.NoViableAltException?this.reportNoViableAlternative(t,e):e instanceof u.InputMismatchException?this.reportInputMismatch(t,e):e instanceof a.FailedPredicateException?this.reportFailedPredicate(t,e):(console.error("unknown recognition error type: "+e),this.notifyErrorListeners(t,e.toString(),e)))}notifyErrorListeners(t,e,r){let n=r.getOffendingToken(t);void 0===n&&(n=null),t.notifyErrorListeners(e,n,r)}recover(t,e){this.lastErrorIndex===t.inputStream.index&&this.lastErrorStates&&this.lastErrorStates.contains(t.state)&&t.consume(),this.lastErrorIndex=t.inputStream.index,this.lastErrorStates||(this.lastErrorStates=new l.IntervalSet),this.lastErrorStates.add(t.state);let r=this.getErrorRecoverySet(t);this.consumeUntil(t,r)}sync(t){let e=t.interpreter.atn.states[t.state];if(this.inErrorRecoveryMode(t))return;let r=t.inputStream.LA(1),n=t.atn.nextTokens(e);if(n.contains(r))return this.nextTokensContext=void 0,void(this.nextTokensState=o.ATNState.INVALID_STATE_NUMBER);if(n.contains(p.Token.EPSILON))void 0===this.nextTokensContext&&(this.nextTokensContext=t.context,this.nextTokensState=t.state);else switch(e.stateType){case s.ATNStateType.BLOCK_START:case s.ATNStateType.STAR_BLOCK_START:case s.ATNStateType.PLUS_BLOCK_START:case s.ATNStateType.STAR_LOOP_ENTRY:if(this.singleTokenDeletion(t))return;throw new u.InputMismatchException(t);case s.ATNStateType.PLUS_LOOP_BACK:case s.ATNStateType.STAR_LOOP_BACK:this.reportUnwantedToken(t);let e=t.getExpectedTokens().or(this.getErrorRecoverySet(t));this.consumeUntil(t,e)}}reportNoViableAlternative(t,e){let r,n=t.inputStream;r=n?e.startToken.type===p.Token.EOF?"<EOF>":n.getTextFromRange(e.startToken,e.getOffendingToken()):"<unknown input>";let i="no viable alternative at input "+this.escapeWSAndQuote(r);this.notifyErrorListeners(t,i,e)}reportInputMismatch(t,e){let r=e.expectedTokens,n=r?r.toStringVocabulary(t.vocabulary):"",i="mismatched input "+this.getTokenErrorDisplay(e.getOffendingToken(t))+" expecting "+n;this.notifyErrorListeners(t,i,e)}reportFailedPredicate(t,e){let r="rule "+t.ruleNames[t.context.ruleIndex]+" "+e.message;this.notifyErrorListeners(t,r,e)}reportUnwantedToken(t){if(this.inErrorRecoveryMode(t))return;this.beginErrorCondition(t);let e=t.currentToken,r="extraneous input "+this.getTokenErrorDisplay(e)+" expecting "+this.getExpectedTokens(t).toStringVocabulary(t.vocabulary);t.notifyErrorListeners(r,e,void 0)}reportMissingToken(t){if(this.inErrorRecoveryMode(t))return;this.beginErrorCondition(t);let e=t.currentToken,r="missing "+this.getExpectedTokens(t).toStringVocabulary(t.vocabulary)+" at "+this.getTokenErrorDisplay(e);t.notifyErrorListeners(r,e,void 0)}recoverInline(t){let e=this.singleTokenDeletion(t);if(e)return t.consume(),e;if(this.singleTokenInsertion(t))return this.getMissingSymbol(t);throw void 0===this.nextTokensContext?new u.InputMismatchException(t):new u.InputMismatchException(t,this.nextTokensState,this.nextTokensContext)}singleTokenInsertion(t){let e=t.inputStream.LA(1),r=t.interpreter.atn.states[t.state].transition(0).target,n=t.interpreter.atn;return!!n.nextTokens(r,h.PredictionContext.fromRuleContext(n,t.context)).contains(e)&&(this.reportMissingToken(t),!0)}singleTokenDeletion(t){let e=t.inputStream.LA(2);if(this.getExpectedTokens(t).contains(e)){this.reportUnwantedToken(t),t.consume();let e=t.currentToken;return this.reportMatch(t),e}}getMissingSymbol(t){let e,r=t.currentToken,n=this.getExpectedTokens(t),i=p.Token.INVALID_TYPE;n.isNil||(i=n.minElement),e=i===p.Token.EOF?"<missing EOF>":"<missing "+t.vocabulary.getDisplayName(i)+">";let o=r,s=t.inputStream.tryLT(-1);return o.type===p.Token.EOF&&null!=s&&(o=s),this.constructToken(t.inputStream.tokenSource,i,e,o)}constructToken(t,e,r,n){let i=t.tokenFactory,o=n.tokenSource,s=o?o.inputStream:void 0;return i.create({source:t,stream:s},e,r,p.Token.DEFAULT_CHANNEL,-1,-1,n.line,n.charPositionInLine)}getExpectedTokens(t){return t.getExpectedTokens()}getTokenErrorDisplay(t){if(!t)return"<no token>";let e=this.getSymbolText(t);return e||(e=this.getSymbolType(t)===p.Token.EOF?"<EOF>":`<${this.getSymbolType(t)}>`),this.escapeWSAndQuote(e)}getSymbolText(t){return t.text}getSymbolType(t){return t.type}escapeWSAndQuote(t){return"'"+(t=(t=(t=t.replace("\n","\\n")).replace("\r","\\r")).replace("\t","\\t"))+"'"}getErrorRecoverySet(t){let e=t.interpreter.atn,r=t.context,n=new l.IntervalSet;for(;r&&r.invokingState>=0;){let t=e.states[r.invokingState].transition(0),i=e.nextTokens(t.followState);n.addAll(i),r=r._parent}return n.remove(p.Token.EPSILON),n}consumeUntil(t,e){let r=t.inputStream.LA(1);for(;r!==p.Token.EOF&&!e.contains(r);)t.consume(),r=t.inputStream.LA(1)}}n([d.Override],f.prototype,"reset",null),n([i(0,d.NotNull)],f.prototype,"beginErrorCondition",null),n([d.Override],f.prototype,"inErrorRecoveryMode",null),n([i(0,d.NotNull)],f.prototype,"endErrorCondition",null),n([d.Override],f.prototype,"reportMatch",null),n([d.Override],f.prototype,"reportError",null),n([i(0,d.NotNull)],f.prototype,"notifyErrorListeners",null),n([d.Override],f.prototype,"recover",null),n([d.Override],f.prototype,"sync",null),n([i(0,d.NotNull),i(1,d.NotNull)],f.prototype,"reportNoViableAlternative",null),n([i(0,d.NotNull),i(1,d.NotNull)],f.prototype,"reportInputMismatch",null),n([i(0,d.NotNull),i(1,d.NotNull)],f.prototype,"reportFailedPredicate",null),n([i(0,d.NotNull)],f.prototype,"reportUnwantedToken",null),n([i(0,d.NotNull)],f.prototype,"reportMissingToken",null),n([d.Override],f.prototype,"recoverInline",null),n([i(0,d.NotNull)],f.prototype,"singleTokenInsertion",null),n([i(0,d.NotNull)],f.prototype,"singleTokenDeletion",null),n([d.NotNull,i(0,d.NotNull)],f.prototype,"getMissingSymbol",null),n([d.NotNull,i(0,d.NotNull)],f.prototype,"getExpectedTokens",null),n([i(0,d.NotNull)],f.prototype,"getSymbolText",null),n([i(0,d.NotNull)],f.prototype,"getSymbolType",null),n([d.NotNull,i(0,d.NotNull)],f.prototype,"escapeWSAndQuote",null),n([d.NotNull,i(0,d.NotNull)],f.prototype,"getErrorRecoverySet",null),n([i(0,d.NotNull),i(1,d.NotNull)],f.prototype,"consumeUntil",null),r.DefaultErrorStrategy=f},{252:252,256:256,257:257,264:264,276:276,285:285,286:286,326:326,359:359}],257:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(270);let s=class extends o.RecognitionException{constructor(t,e,r){void 0===r&&(r=t.context),super(t,t.inputStream,r),void 0!==e&&this.setOffendingState(e),this.setOffendingToken(t,t.currentToken)}};s=n([i(0,t(252).NotNull)],s),r.InputMismatchException=s},{252:252,270:270}],363:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.ParseCancellationException=class extends Error{constructor(t){super(t.message),this.cause=t,this.stack=t.stack}getCause(){return this.cause}}},{}],244:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(248),s=t(358),a=t(260),u=t(252),l=t(276);let c=class{constructor(t){if(this.tokens=[],this.p=-1,this.fetchedEOF=!1,null==t)throw new Error("tokenSource cannot be null");this._tokenSource=t}get tokenSource(){return this._tokenSource}set tokenSource(t){this._tokenSource=t,this.tokens.length=0,this.p=-1,this.fetchedEOF=!1}get index(){return this.p}mark(){return 0}release(t){}seek(t){this.lazyInit(),this.p=this.adjustSeekIndex(t)}get size(){return this.tokens.length}consume(){let t;if(!(t=this.p>=0&&(this.fetchedEOF?this.p<this.tokens.length-1:this.p<this.tokens.length))&&this.LA(1)===l.Token.EOF)throw new Error("cannot consume EOF");this.sync(this.p+1)&&(this.p=this.adjustSeekIndex(this.p+1))}sync(t){let e=t-this.tokens.length+1;return!(e>0)||this.fetch(e)>=e}fetch(t){if(this.fetchedEOF)return 0;for(let e=0;e<t;e++){let t=this.tokenSource.nextToken();if(this.isWritableToken(t)&&(t.tokenIndex=this.tokens.length),this.tokens.push(t),t.type===l.Token.EOF)return this.fetchedEOF=!0,e+1}return t}get(t){if(t<0||t>=this.tokens.length)throw new RangeError("token index "+t+" out of range 0.."+(this.tokens.length-1));return this.tokens[t]}getRange(t,e){if(t<0||e<0)return[];this.lazyInit();let r=new Array;e>=this.tokens.length&&(e=this.tokens.length-1);for(let n=t;n<=e;n++){let t=this.tokens[n];if(t.type===l.Token.EOF)break;r.push(t)}return r}LA(t){let e=this.LT(t);return e?e.type:l.Token.INVALID_TYPE}tryLB(t){if(!(this.p-t<0))return this.tokens[this.p-t]}LT(t){let e=this.tryLT(t);if(void 0===e)throw new RangeError("requested lookback index out of range");return e}tryLT(t){if(this.lazyInit(),0===t)throw new RangeError("0 is not a valid lookahead index");if(t<0)return this.tryLB(-t);let e=this.p+t-1;return this.sync(e),e>=this.tokens.length?this.tokens[this.tokens.length-1]:this.tokens[e]}adjustSeekIndex(t){return t}lazyInit(){-1===this.p&&this.setup()}setup(){this.sync(0),this.p=this.adjustSeekIndex(0)}getTokens(t,e,r){if(this.lazyInit(),void 0===t)return this.tokens;if(void 0===e&&(e=this.tokens.length-1),t<0||e>=this.tokens.length||e<0||t>=this.tokens.length)throw new RangeError("start "+t+" or stop "+e+" not in 0.."+(this.tokens.length-1));if(t>e)return[];if(void 0===r)return this.tokens.slice(t,e+1);"number"==typeof r&&(r=(new Set).add(r));let n=r,i=this.tokens.slice(t,e+1);return i.filter(t=>n.has(t.type))}nextTokenOnChannel(t,e){if(this.sync(t),t>=this.size)return this.size-1;let r=this.tokens[t];for(;r.channel!==e;){if(r.type===l.Token.EOF)return t;t++,this.sync(t),r=this.tokens[t]}return t}previousTokenOnChannel(t,e){if(this.sync(t),t>=this.size)return this.size-1;for(;t>=0;){let r=this.tokens[t];if(r.type===l.Token.EOF||r.channel===e)return t;t--}return t}getHiddenTokensToRight(t,e=-1){if(this.lazyInit(),t<0||t>=this.tokens.length)throw new RangeError(t+" not in 0.."+(this.tokens.length-1));let r,n=this.nextTokenOnChannel(t+1,a.Lexer.DEFAULT_TOKEN_CHANNEL),i=t+1;return r=-1===n?this.size-1:n,this.filterForChannel(i,r,e)}getHiddenTokensToLeft(t,e=-1){if(this.lazyInit(),t<0||t>=this.tokens.length)throw new RangeError(t+" not in 0.."+(this.tokens.length-1));if(0===t)return[];let r=this.previousTokenOnChannel(t-1,a.Lexer.DEFAULT_TOKEN_CHANNEL);if(r===t-1)return[];let n=r+1,i=t-1;return this.filterForChannel(n,i,e)}filterForChannel(t,e,r){let n=new Array;for(let i=t;i<=e;i++){let t=this.tokens[i];-1===r?t.channel!==a.Lexer.DEFAULT_TOKEN_CHANNEL&&n.push(t):t.channel===r&&n.push(t)}return n}get sourceName(){return this.tokenSource.sourceName}getText(t){void 0===t?t=s.Interval.of(0,this.size-1):t instanceof s.Interval||(t=t.sourceInterval);let e=t.a,r=t.b;if(e<0||r<0)return"";this.fill(),r>=this.tokens.length&&(r=this.tokens.length-1);let n="";for(let i=e;i<=r;i++){let t=this.tokens[i];if(t.type===l.Token.EOF)break;n+=t.text}return n.toString()}getTextFromRange(t,e){return this.isToken(t)&&this.isToken(e)?this.getText(s.Interval.of(t.tokenIndex,e.tokenIndex)):""}fill(){for(this.lazyInit();;)if(this.fetch(1e3)<1e3)return}isWritableToken(t){return t instanceof o.CommonToken}isToken(t){return t instanceof o.CommonToken}};n([u.NotNull],c.prototype,"_tokenSource",void 0),n([u.Override],c.prototype,"tokenSource",null),n([u.Override],c.prototype,"index",null),n([u.Override],c.prototype,"mark",null),n([u.Override],c.prototype,"release",null),n([u.Override],c.prototype,"seek",null),n([u.Override],c.prototype,"size",null),n([u.Override],c.prototype,"consume",null),n([u.Override],c.prototype,"get",null),n([u.Override],c.prototype,"LA",null),n([u.NotNull,u.Override],c.prototype,"LT",null),n([u.Override],c.prototype,"sourceName",null),n([u.NotNull,u.Override],c.prototype,"getText",null),n([u.NotNull,u.Override],c.prototype,"getTextFromRange",null),c=n([i(0,u.NotNull)],c),r.BufferedTokenStream=c},{248:248,252:252,260:260,276:276,358:358}],248:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(358),s=t(252),a=t(276);let u=class t{constructor(e,r,n=t.EMPTY_SOURCE,i=a.Token.DEFAULT_CHANNEL,o=0,s=0){this._line=0,this._charPositionInLine=-1,this._channel=a.Token.DEFAULT_CHANNEL,this.index=-1,this._text=r,this._type=e,this.source=n,this._channel=i,this.start=o,this.stop=s,null!=n.source&&(this._line=n.source.line,this._charPositionInLine=n.source.charPositionInLine)}static fromToken(e){let r=new t(e.type,void 0,t.EMPTY_SOURCE,e.channel,e.startIndex,e.stopIndex);return r._line=e.line,r.index=e.tokenIndex,r._charPositionInLine=e.charPositionInLine,e instanceof t?(r._text=e.text,r.source=e.source):(r._text=e.text,r.source={source:e.tokenSource,stream:e.inputStream}),r}get type(){return this._type}set type(t){this._type=t}get line(){return this._line}set line(t){this._line=t}get text(){if(null!=this._text)return this._text;let t=this.inputStream;if(null==t)return;let e=t.size;return this.start<e&&this.stop<e?t.getText(o.Interval.of(this.start,this.stop)):"<EOF>"}set text(t){this._text=t}get charPositionInLine(){return this._charPositionInLine}set charPositionInLine(t){this._charPositionInLine=t}get channel(){return this._channel}set channel(t){this._channel=t}get startIndex(){return this.start}set startIndex(t){this.start=t}get stopIndex(){return this.stop}set stopIndex(t){this.stop=t}get tokenIndex(){return this.index}set tokenIndex(t){this.index=t}get tokenSource(){return this.source.source}get inputStream(){return this.source.stream}toString(t){let e="";this._channel>0&&(e=",channel="+this._channel);let r=this.text;r=null!=r?(r=(r=r.replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/\t/g,"\\t"):"<no text>";let n=String(this._type);return t&&(n=t.vocabulary.getDisplayName(this._type)),"[@"+this.tokenIndex+","+this.start+":"+this.stop+"='"+r+"',<"+n+">"+e+","+this._line+":"+this.charPositionInLine+"]"}};u.EMPTY_SOURCE={source:void 0,stream:void 0},n([s.NotNull],u.prototype,"source",void 0),n([s.Override],u.prototype,"type",null),n([s.Override],u.prototype,"line",null),n([s.Override],u.prototype,"text",null),n([s.Override],u.prototype,"charPositionInLine",null),n([s.Override],u.prototype,"channel",null),n([s.Override],u.prototype,"startIndex",null),n([s.Override],u.prototype,"stopIndex",null),n([s.Override],u.prototype,"tokenIndex",null),n([s.Override],u.prototype,"tokenSource",null),n([s.Override],u.prototype,"inputStream",null),n([s.Override],u.prototype,"toString",null),n([i(0,s.NotNull)],u,"fromToken",null),u=n([i(2,s.NotNull)],u),r.CommonToken=u},{252:252,276:276,358:358}],358:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252);class o{constructor(t,e){this.a=t,this.b=e}static get INVALID(){return o._INVALID}static of(t,e){return t!==e||t<0||t>1e3?new o(t,e):(null==o.cache[t]&&(o.cache[t]=new o(t,t)),o.cache[t])}get length(){return this.b<this.a?0:this.b-this.a+1}equals(t){return t===this||t instanceof o&&this.a===t.a&&this.b===t.b}hashCode(){let t=23;return 31*(t=31*t+this.a)+this.b}startsBeforeDisjoint(t){return this.a<t.a&&this.b<t.a}startsBeforeNonDisjoint(t){return this.a<=t.a&&this.b>=t.a}startsAfter(t){return this.a>t.a}startsAfterDisjoint(t){return this.a>t.b}startsAfterNonDisjoint(t){return this.a>t.a&&this.a<=t.b}disjoint(t){return this.startsBeforeDisjoint(t)||this.startsAfterDisjoint(t)}adjacent(t){return this.a===t.b+1||this.b===t.a-1}properlyContains(t){return t.a>=this.a&&t.b<=this.b}union(t){return o.of(Math.min(this.a,t.a),Math.max(this.b,t.b))}intersection(t){return o.of(Math.max(this.a,t.a),Math.min(this.b,t.b))}differenceNotProperlyContained(t){let e;return t.startsBeforeNonDisjoint(this)?e=o.of(Math.max(this.a,t.b+1),this.b):t.startsAfterNonDisjoint(this)&&(e=o.of(this.a,t.a-1)),e}toString(){return this.a+".."+this.b}}o._INVALID=new o(-1,-2),o.cache=new Array(1001),n([i.Override],o.prototype,"equals",null),n([i.Override],o.prototype,"hashCode",null),n([i.Override],o.prototype,"toString",null),r.Interval=o},{252:252}],245:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(246),i=t(247),o=t(258);(r.CharStreams||(r.CharStreams={})).fromString=function(t,e){void 0!==e&&0!==e.length||(e=o.IntStream.UNKNOWN_SOURCE_NAME);let r=n.CodePointBuffer.builder(t.length),s=new Uint16Array(t.length);for(let n=0;n<t.length;n++)s[n]=t.charCodeAt(n);return r.append(s),i.CodePointCharStream.fromBuffer(r.build(),e)}},{246:246,247:247,258:258}],246:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(354);class i{constructor(t,e){this.buffer=t,this._position=0,this._size=e}static withArray(t){return new i(t,t.length)}get position(){return this._position}set position(t){if(t<0||t>this._size)throw new RangeError;this._position=t}get remaining(){return this._size-this.position}get(t){return this.buffer[t]}array(){return this.buffer.slice(0,this._size)}static builder(t){return new i.Builder(t)}}r.CodePointBuffer=i,function(t){let e;!function(t){t[t.BYTE=0]="BYTE",t[t.CHAR=1]="CHAR",t[t.INT=2]="INT"}(e||(e={}));class r{constructor(t){this.type=0,this.buffer=new Uint8Array(t),this.prevHighSurrogate=-1,this.position=0}build(){return new t(this.buffer,this.position)}static roundUpToNextPowerOfTwo(t){let e=32-Math.clz32(t-1);return Math.pow(2,e)}ensureRemaining(t){switch(this.type){case 0:if(this.buffer.length-this.position<t){let e=r.roundUpToNextPowerOfTwo(this.buffer.length+t),n=new Uint8Array(e);n.set(this.buffer.subarray(0,this.position),0),this.buffer=n}break;case 1:if(this.buffer.length-this.position<t){let e=r.roundUpToNextPowerOfTwo(this.buffer.length+t),n=new Uint16Array(e);n.set(this.buffer.subarray(0,this.position),0),this.buffer=n}break;case 2:if(this.buffer.length-this.position<t){let e=r.roundUpToNextPowerOfTwo(this.buffer.length+t),n=new Int32Array(e);n.set(this.buffer.subarray(0,this.position),0),this.buffer=n}}}append(t){this.ensureRemaining(t.length),this.appendArray(t)}appendArray(t){switch(this.type){case 0:this.appendArrayByte(t);break;case 1:this.appendArrayChar(t);break;case 2:this.appendArrayInt(t)}}appendArrayByte(t){let e=t,r=0,i=t.length,o=this.buffer,s=this.position;for(;r<i;){let a=e[r];if(!(a<=255))return t=t.subarray(r,i),this.position=s,n.isHighSurrogate(a)?(this.byteToIntBuffer(t.length),void this.appendArrayInt(t)):(this.byteToCharBuffer(t.length),void this.appendArrayChar(t));o[s]=a,r++,s++}this.position=s}appendArrayChar(t){let e=t,r=0,i=t.length,o=this.buffer,s=this.position;for(;r<i;){let a=e[r];if(n.isHighSurrogate(a))return t=t.subarray(r,i),this.position=s,this.charToIntBuffer(t.length),void this.appendArrayInt(t);o[s]=a,r++,s++}this.position=s}appendArrayInt(t){let e=t,r=0,i=t.length,o=this.buffer,s=this.position;for(;r<i;){let t=e[r];r++,-1!==this.prevHighSurrogate?n.isLowSurrogate(t)?(o[s]=String.fromCharCode(this.prevHighSurrogate,t).codePointAt(0),s++,this.prevHighSurrogate=-1):(o[s]=this.prevHighSurrogate,s++,n.isHighSurrogate(t)?this.prevHighSurrogate=t:(o[s]=t,s++,this.prevHighSurrogate=-1)):n.isHighSurrogate(t)?this.prevHighSurrogate=t:(o[s]=t,s++)}-1!==this.prevHighSurrogate&&(o[s]=this.prevHighSurrogate,s++),this.position=s}byteToCharBuffer(t){let e=new Uint16Array(Math.max(this.position+t,this.buffer.length>>1));e.set(this.buffer.subarray(0,this.position),0),this.type=1,this.buffer=e}byteToIntBuffer(t){let e=new Int32Array(Math.max(this.position+t,this.buffer.length>>2));e.set(this.buffer.subarray(0,this.position),0),this.type=2,this.buffer=e}charToIntBuffer(t){let e=new Int32Array(Math.max(this.position+t,this.buffer.length>>1));e.set(this.buffer.subarray(0,this.position),0),this.type=2,this.buffer=e}}t.Builder=r}(i=r.CodePointBuffer||(r.CodePointBuffer={}))},{354:354}],247:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(258),o=t(358),s=t(252);class a{constructor(t,e,r,n){this._array=t,this._size=r,this._name=n,this._position=0}get internalStorage(){return this._array}static fromBuffer(t,e){return void 0!==e&&0!==e.length||(e=i.IntStream.UNKNOWN_SOURCE_NAME),new a(t.array(),t.position,t.remaining,e)}consume(){if(this._size-this._position==0)throw new RangeError("cannot consume EOF");this._position++}get index(){return this._position}get size(){return this._size}mark(){return-1}release(t){}seek(t){this._position=t}get sourceName(){return this._name}toString(){return this.getText(o.Interval.of(0,this.size-1))}LA(t){let e;switch(Math.sign(t)){case-1:return(e=this.index+t)<0?i.IntStream.EOF:this._array[e];case 0:return 0;case 1:return(e=this.index+t-1)>=this.size?i.IntStream.EOF:this._array[e]}throw new RangeError("Not reached")}getText(t){const e=Math.min(t.a,this.size),r=Math.min(t.b-t.a+1,this.size-e);return this._array instanceof Int32Array?String.fromCodePoint(...Array.from(this._array.subarray(e,e+r))):String.fromCharCode(...Array.from(this._array.subarray(e,e+r)))}}n([s.Override],a.prototype,"consume",null),n([s.Override],a.prototype,"index",null),n([s.Override],a.prototype,"size",null),n([s.Override],a.prototype,"mark",null),n([s.Override],a.prototype,"release",null),n([s.Override],a.prototype,"seek",null),n([s.Override],a.prototype,"sourceName",null),n([s.Override],a.prototype,"toString",null),n([s.Override],a.prototype,"LA",null),n([s.Override],a.prototype,"getText",null),r.CodePointCharStream=a},{252:252,258:258,358:358}],354:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.isHighSurrogate=function(t){return t>=55296&&t<=56319},r.isLowSurrogate=function(t){return t>=56320&&t<=57343}},{}],249:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(248),o=t(358),s=t(252);class a{constructor(t=!1){this.copyText=t}create(t,e,r,n,s,a,u,l){let c=new i.CommonToken(e,r,t,n,s,a);return c.line=u,c.charPositionInLine=l,null==r&&this.copyText&&null!=t.stream&&(c.text=t.stream.getText(o.Interval.of(s,a))),c}createSimple(t,e){return new i.CommonToken(t,e)}}n([s.Override],a.prototype,"create",null),n([s.Override],a.prototype,"createSimple",null),r.CommonTokenFactory=a,function(t){t.DEFAULT=new t}(a=r.CommonTokenFactory||(r.CommonTokenFactory={}))},{248:248,252:252,358:358}],250:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(244),s=t(252),a=t(276);let u=class extends o.BufferedTokenStream{constructor(t,e=a.Token.DEFAULT_CHANNEL){super(t),this.channel=e}adjustSeekIndex(t){return this.nextTokenOnChannel(t,this.channel)}tryLB(t){if(this.p-t<0)return;let e=this.p,r=1;for(;r<=t&&e>0;)e=this.previousTokenOnChannel(e-1,this.channel),r++;return e<0?void 0:this.tokens[e]}tryLT(t){if(this.lazyInit(),0===t)throw new RangeError("0 is not a valid lookahead index");if(t<0)return this.tryLB(-t);let e=this.p,r=1;for(;r<t;)this.sync(e+1)&&(e=this.nextTokenOnChannel(e+1,this.channel)),r++;return this.tokens[e]}getNumberOfOnChannelTokens(){let t=0;this.fill();for(let e of this.tokens)if(e.channel===this.channel&&t++,e.type===a.Token.EOF)break;return t}};n([s.Override],u.prototype,"adjustSeekIndex",null),n([s.Override],u.prototype,"tryLB",null),n([s.Override],u.prototype,"tryLT",null),u=n([i(0,s.NotNull)],u),r.CommonTokenStream=u},{244:244,252:252,276:276}],251:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});class n{syntaxError(t,e,r,n,i,o){console.error(`line ${r}:${n} ${i}`)}}n.INSTANCE=new n,r.ConsoleErrorListener=n},{}],286:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.ATNStateType||(r.ATNStateType={}))[n.INVALID_TYPE=0]="INVALID_TYPE",n[n.BASIC=1]="BASIC",n[n.RULE_START=2]="RULE_START",n[n.BLOCK_START=3]="BLOCK_START",n[n.PLUS_BLOCK_START=4]="PLUS_BLOCK_START",n[n.STAR_BLOCK_START=5]="STAR_BLOCK_START",n[n.TOKEN_START=6]="TOKEN_START",n[n.RULE_STOP=7]="RULE_STOP",n[n.BLOCK_END=8]="BLOCK_END",n[n.STAR_LOOP_BACK=9]="STAR_LOOP_BACK",n[n.STAR_LOOP_ENTRY=10]="STAR_LOOP_ENTRY",n[n.PLUS_LOOP_BACK=11]="PLUS_LOOP_BACK",n[n.LOOP_END=12]="LOOP_END"},{}],285:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252);class o{constructor(){this.stateNumber=o.INVALID_STATE_NUMBER,this.ruleIndex=0,this.epsilonOnlyTransitions=!1,this.transitions=[],this.optimizedTransitions=this.transitions}getStateNumber(){return this.stateNumber}get nonStopStateNumber(){return this.getStateNumber()}hashCode(){return this.stateNumber}equals(t){return t instanceof o&&this.stateNumber===t.stateNumber}get isNonGreedyExitState(){return!1}toString(){return String(this.stateNumber)}getTransitions(){return this.transitions.slice(0)}get numberOfTransitions(){return this.transitions.length}addTransition(t,e){if(0===this.transitions.length)this.epsilonOnlyTransitions=t.isEpsilon;else if(this.epsilonOnlyTransitions!==t.isEpsilon)throw this.epsilonOnlyTransitions=!1,new Error("ATN state "+this.stateNumber+" has both epsilon and non-epsilon transitions.");this.transitions.splice(void 0!==e?e:this.transitions.length,0,t)}transition(t){return this.transitions[t]}setTransition(t,e){this.transitions[t]=e}removeTransition(t){return this.transitions.splice(t,1)[0]}get onlyHasEpsilonTransitions(){return this.epsilonOnlyTransitions}setRuleIndex(t){this.ruleIndex=t}get isOptimized(){return this.optimizedTransitions!==this.transitions}get numberOfOptimizedTransitions(){return this.optimizedTransitions.length}getOptimizedTransition(t){return this.optimizedTransitions[t]}addOptimizedTransition(t){this.isOptimized||(this.optimizedTransitions=new Array),this.optimizedTransitions.push(t)}setOptimizedTransition(t,e){if(!this.isOptimized)throw new Error("This ATNState is not optimized.");this.optimizedTransitions[t]=e}removeOptimizedTransition(t){if(!this.isOptimized)throw new Error("This ATNState is not optimized.");this.optimizedTransitions.splice(t,1)}}n([i.Override],o.prototype,"hashCode",null),n([i.Override],o.prototype,"equals",null),n([i.Override],o.prototype,"toString",null),r.ATNState=o,function(t){t.INVALID_STATE_NUMBER=-1}(o=r.ATNState||(r.ATNState={}))},{252:252}],359:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(351),s=t(356),a=t(358),u=t(260),l=t(361),c=t(252),h=t(276);class p{constructor(t){this.readonly=!1,this._intervals=null!=t?t.slice(0):[]}static get COMPLETE_CHAR_SET(){return void 0===p._COMPLETE_CHAR_SET&&(p._COMPLETE_CHAR_SET=p.of(u.Lexer.MIN_CHAR_VALUE,u.Lexer.MAX_CHAR_VALUE),p._COMPLETE_CHAR_SET.setReadonly(!0)),p._COMPLETE_CHAR_SET}static get EMPTY_SET(){return null==p._EMPTY_SET&&(p._EMPTY_SET=new p,p._EMPTY_SET.setReadonly(!0)),p._EMPTY_SET}static of(t,e=t){let r=new p;return r.add(t,e),r}clear(){if(this.readonly)throw new Error("can't alter readonly IntervalSet");this._intervals.length=0}add(t,e=t){this.addRange(a.Interval.of(t,e))}addRange(t){if(this.readonly)throw new Error("can't alter readonly IntervalSet");if(!(t.b<t.a)){for(let e=0;e<this._intervals.length;e++){let r=this._intervals[e];if(t.equals(r))return;if(t.adjacent(r)||!t.disjoint(r)){let n=t.union(r);for(this._intervals[e]=n;e<this._intervals.length-1;){e++;let t=this._intervals[e];if(!n.adjacent(t)&&n.disjoint(t))break;this._intervals.splice(e,1),e--,this._intervals[e]=n.union(t)}return}if(t.startsBeforeDisjoint(r))return void this._intervals.splice(e,0,t)}this._intervals.push(t)}}static or(t){let e=new p;for(let r of t)e.addAll(r);return e}addAll(t){if(null==t)return this;if(t instanceof p){let e=t,r=e._intervals.length;for(let t=0;t<r;t++){let r=e._intervals[t];this.add(r.a,r.b)}}else for(let e of t.toArray())this.add(e);return this}complementRange(t,e){return this.complement(p.of(t,e))}complement(t){if(t.isNil)return p.EMPTY_SET;let e;return t instanceof p?e=t:(e=new p).addAll(t),e.subtract(this)}subtract(t){if(null==t||t.isNil)return new p(this._intervals);if(t instanceof p)return p.subtract(this,t);let e=new p;return e.addAll(t),p.subtract(this,e)}static subtract(t,e){if(t.isNil)return new p;let r=new p(t._intervals);if(e.isNil)return r;let n=0,i=0;for(;n<r._intervals.length&&i<e._intervals.length;){let t,o,s=r._intervals[n],u=e._intervals[i];if(u.b<s.a)i++;else if(u.a>s.b)n++;else if(u.a>s.a&&(t=new a.Interval(s.a,u.a-1)),u.b<s.b&&(o=new a.Interval(u.b+1,s.b)),t){if(o){r._intervals[n]=t,r._intervals.splice(n+1,0,o),n++,i++;continue}r._intervals[n]=t,n++}else o?(r._intervals[n]=o,i++):r._intervals.splice(n,1)}return r}or(t){let e=new p;return e.addAll(this),e.addAll(t),e}and(t){if(t.isNil)return new p;let e,r=this._intervals,n=t._intervals,i=r.length,o=n.length,s=0,a=0;for(;s<i&&a<o;){let t=r[s],i=n[a];t.startsBeforeDisjoint(i)?s++:i.startsBeforeDisjoint(t)?a++:t.properlyContains(i)?(e||(e=new p),e.addRange(t.intersection(i)),a++):i.properlyContains(t)?(e||(e=new p),e.addRange(t.intersection(i)),s++):t.disjoint(i)||(e||(e=new p),e.addRange(t.intersection(i)),t.startsAfterNonDisjoint(i)?a++:i.startsAfterNonDisjoint(t)&&s++)}return e||new p}contains(t){let e=0,r=this._intervals.length-1;for(;e<=r;){let n=e+r>>1,i=this._intervals[n],o=i.a;if(i.b<t)e=n+1;else{if(!(o>t))return!0;r=n-1}}return!1}get isNil(){return null==this._intervals||0===this._intervals.length}get maxElement(){if(this.isNil)throw new RangeError("set is empty");return this._intervals[this._intervals.length-1].b}get minElement(){if(this.isNil)throw new RangeError("set is empty");return this._intervals[0].a}get intervals(){return this._intervals}hashCode(){let t=l.MurmurHash.initialize();for(let e of this._intervals)t=l.MurmurHash.update(t,e.a),t=l.MurmurHash.update(t,e.b);return l.MurmurHash.finish(t,2*this._intervals.length)}equals(t){return null!=t&&t instanceof p&&o.ArrayEqualityComparator.INSTANCE.equals(this._intervals,t._intervals)}toString(t=!1){let e="";if(null==this._intervals||0===this._intervals.length)return"{}";this.size>1&&(e+="{");let r=!0;for(let n of this._intervals){r?r=!1:e+=", ";let i=n.a,o=n.b;i===o?i===h.Token.EOF?e+="<EOF>":e+=t?"'"+String.fromCodePoint(i)+"'":i:e+=t?"'"+String.fromCodePoint(i)+"'..'"+String.fromCodePoint(o)+"'":i+".."+o}return this.size>1&&(e+="}"),e}toStringVocabulary(t){if(null==this._intervals||0===this._intervals.length)return"{}";let e="";this.size>1&&(e+="{");let r=!0;for(let n of this._intervals){r?r=!1:e+=", ";let i=n.a,o=n.b;if(i===o)e+=this.elementName(t,i);else for(let r=i;r<=o;r++)r>i&&(e+=", "),e+=this.elementName(t,r)}return this.size>1&&(e+="}"),e}elementName(t,e){return e===h.Token.EOF?"<EOF>":e===h.Token.EPSILON?"<EPSILON>":t.getDisplayName(e)}get size(){let t=0,e=this._intervals.length;if(1===e){let t=this._intervals[0];return t.b-t.a+1}for(let r=0;r<e;r++){let e=this._intervals[r];t+=e.b-e.a+1}return t}toIntegerList(){let t=new s.IntegerList(this.size),e=this._intervals.length;for(let r=0;r<e;r++){let e=this._intervals[r],n=e.a,i=e.b;for(let r=n;r<=i;r++)t.add(r)}return t}toSet(){let t=new Set;for(let e of this._intervals){let r=e.a,n=e.b;for(let e=r;e<=n;e++)t.add(e)}return t}toArray(){let t=new Array,e=this._intervals.length;for(let r=0;r<e;r++){let e=this._intervals[r],n=e.a,i=e.b;for(let r=n;r<=i;r++)t.push(r)}return t}remove(t){if(this.readonly)throw new Error("can't alter readonly IntervalSet");let e=this._intervals.length;for(let r=0;r<e;r++){let e=this._intervals[r],n=e.a,i=e.b;if(t<n)break;if(t===n&&t===i){this._intervals.splice(r,1);break}if(t===n){this._intervals[r]=a.Interval.of(e.a+1,e.b);break}if(t===i){this._intervals[r]=a.Interval.of(e.a,e.b-1);break}if(t>n&&t<i){let n=e.b;this._intervals[r]=a.Interval.of(e.a,t-1),this.add(t+1,n)}}}get isReadonly(){return this.readonly}setReadonly(t){if(this.readonly&&!t)throw new Error("can't alter readonly IntervalSet");this.readonly=t}}n([c.Override],p.prototype,"addAll",null),n([c.Override],p.prototype,"complement",null),n([c.Override],p.prototype,"subtract",null),n([c.Override],p.prototype,"or",null),n([c.Override],p.prototype,"and",null),n([c.Override],p.prototype,"contains",null),n([c.Override],p.prototype,"isNil",null),n([c.Override],p.prototype,"hashCode",null),n([c.Override],p.prototype,"equals",null),n([i(0,c.NotNull)],p.prototype,"toStringVocabulary",null),n([c.NotNull,i(0,c.NotNull)],p.prototype,"elementName",null),n([c.Override],p.prototype,"size",null),n([c.Override],p.prototype,"remove",null),n([c.NotNull],p,"of",null),n([c.NotNull],p,"subtract",null),r.IntervalSet=p},{252:252,260:260,276:276,351:351,356:356,358:358,361:361}],326:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(349),s=t(350),a=t(352),u=t(361),l=t(252),c=t(327);class h{constructor(t){this.cachedHashCode=t}static calculateEmptyHashCode(){let t=u.MurmurHash.initialize(1);return u.MurmurHash.finish(t,0)}static calculateSingleHashCode(t,e){let r=u.MurmurHash.initialize(1);return r=u.MurmurHash.update(r,t),r=u.MurmurHash.update(r,e),u.MurmurHash.finish(r,2)}static calculateHashCode(t,e){let r=u.MurmurHash.initialize(1);for(let n of t)r=u.MurmurHash.update(r,n);for(let n of e)r=u.MurmurHash.update(r,n);return u.MurmurHash.finish(r,2*t.length)}static fromRuleContext(t,e,r=!0){if(e.isEmpty)return r?h.EMPTY_FULL:h.EMPTY_LOCAL;let n;n=e._parent?h.fromRuleContext(t,e._parent,r):r?h.EMPTY_FULL:h.EMPTY_LOCAL;let i=t.states[e.invokingState].transition(0);return n.getChild(i.followState.stateNumber)}static addEmptyContext(t){return t.addEmptyContext()}static removeEmptyContext(t){return t.removeEmptyContext()}static join(t,e,r=c.PredictionContextCache.UNCACHED){if(t===e)return t;if(t.isEmpty)return h.isEmptyLocal(t)?t:h.addEmptyContext(e);if(e.isEmpty)return h.isEmptyLocal(e)?e:h.addEmptyContext(t);let n=t.size,i=e.size;if(1===n&&1===i&&t.getReturnState(0)===e.getReturnState(0)){let n=r.join(t.getParent(0),e.getParent(0));return n===t.getParent(0)?t:n===e.getParent(0)?e:n.getChild(t.getReturnState(0))}let o=0,s=new Array(n+i),a=new Array(s.length),u=0,l=0,p=!0,y=!0;for(;u<n&&l<i;)t.getReturnState(u)===e.getReturnState(l)?(s[o]=r.join(t.getParent(u),e.getParent(l)),a[o]=t.getReturnState(u),p=p&&s[o]===t.getParent(u),y=y&&s[o]===e.getParent(l),u++,l++):t.getReturnState(u)<e.getReturnState(l)?(s[o]=t.getParent(u),a[o]=t.getReturnState(u),y=!1,u++):(s[o]=e.getParent(l),a[o]=e.getReturnState(l),p=!1,l++),o++;for(;u<n;)s[o]=t.getParent(u),a[o]=t.getReturnState(u),u++,y=!1,o++;for(;l<i;)s[o]=e.getParent(l),a[o]=e.getReturnState(l),l++,p=!1,o++;return p?t:y?e:(o<s.length&&(s=s.slice(0,o),a=a.slice(0,o)),0===s.length?h.EMPTY_FULL:1===s.length?new f(s[0],a[0]):new d(s,a))}static isEmptyLocal(t){return t===h.EMPTY_LOCAL}static getCachedContext(t,e,r){if(t.isEmpty)return t;let n=r.get(t);if(n)return n;if(n=e.get(t))return r.put(t,n),n;let i,o=!1,s=new Array(t.size);for(let a=0;a<s.length;a++){let n=h.getCachedContext(t.getParent(a),e,r);if(o||n!==t.getParent(a)){if(!o){s=new Array(t.size);for(let e=0;e<t.size;e++)s[e]=t.getParent(e);o=!0}s[a]=n}}if(!o)return n=e.putIfAbsent(t,t),r.put(t,null!=n?n:t),t;if(1===s.length)i=new f(s[0],t.getReturnState(0));else{let e=new Array(t.size);for(let r=0;r<t.size;r++)e[r]=t.getReturnState(r);i=new d(s,e,t.hashCode())}return n=e.putIfAbsent(i,i),r.put(i,n||i),r.put(t,n||i),i}appendSingleContext(t,e){return this.appendContext(h.EMPTY_FULL.getChild(t),e)}getChild(t){return new f(this,t)}hashCode(){return this.cachedHashCode}toStrings(t,e,r=h.EMPTY_FULL){let n=[];t:for(let i=0;;i++){let o=0,s=!0,a=this,u=e,l="";for(l+="[";!a.isEmpty&&a!==r;){let e=0;if(a.size>0){let t=1;for(;1<<t>>>0<a.size;)t++;if(e=i>>o&(1<<t>>>0)-1,s=s&&e>=a.size-1,e>=a.size)continue t;o+=t}if(t){l.length>1&&(l+=" ");let e=t.atn.states[u];l+=t.ruleNames[e.ruleIndex]}else a.getReturnState(e)!==h.EMPTY_FULL_STATE_KEY&&(a.isEmpty||(l.length>1&&(l+=" "),l+=a.getReturnState(e)));u=a.getReturnState(e),a=a.getParent(e)}if(l+="]",n.push(l),s)break}return n}}n([l.Override],h.prototype,"hashCode",null),n([i(0,l.NotNull),i(1,l.NotNull),i(2,l.NotNull)],h,"join",null),n([i(0,l.NotNull),i(1,l.NotNull),i(2,l.NotNull)],h,"getCachedContext",null),r.PredictionContext=h;class p extends h{constructor(t){super(h.calculateEmptyHashCode()),this.fullContext=t}get isFullContext(){return this.fullContext}addEmptyContext(){return this}removeEmptyContext(){throw new Error("Cannot remove the empty context from itself.")}getParent(t){throw new Error("index out of bounds")}getReturnState(t){throw new Error("index out of bounds")}findReturnState(t){return-1}get size(){return 0}appendSingleContext(t,e){return e.getChild(this,t)}appendContext(t,e){return t}get isEmpty(){return!0}get hasEmpty(){return!0}equals(t){return this===t}toStrings(t,e,r){return["[]"]}}n([l.Override],p.prototype,"addEmptyContext",null),n([l.Override],p.prototype,"removeEmptyContext",null),n([l.Override],p.prototype,"getParent",null),n([l.Override],p.prototype,"getReturnState",null),n([l.Override],p.prototype,"findReturnState",null),n([l.Override],p.prototype,"size",null),n([l.Override],p.prototype,"appendSingleContext",null),n([l.Override],p.prototype,"appendContext",null),n([l.Override],p.prototype,"isEmpty",null),n([l.Override],p.prototype,"hasEmpty",null),n([l.Override],p.prototype,"equals",null),n([l.Override],p.prototype,"toStrings",null);let d=class t extends h{constructor(t,e,r){super(r||h.calculateHashCode(t,e)),this.parents=t,this.returnStates=e}getParent(t){return this.parents[t]}getReturnState(t){return this.returnStates[t]}findReturnState(t){return a.Arrays.binarySearch(this.returnStates,t)}get size(){return this.returnStates.length}get isEmpty(){return!1}get hasEmpty(){return this.returnStates[this.returnStates.length-1]===h.EMPTY_FULL_STATE_KEY}addEmptyContext(){if(this.hasEmpty)return this;let e=this.parents.slice(0),r=this.returnStates.slice(0);return e.push(h.EMPTY_FULL),r.push(h.EMPTY_FULL_STATE_KEY),new t(e,r)}removeEmptyContext(){if(!this.hasEmpty)return this;if(2===this.returnStates.length)return new f(this.parents[0],this.returnStates[0]);{let e=this.parents.slice(0,this.parents.length-1),r=this.returnStates.slice(0,this.returnStates.length-1);return new t(e,r)}}appendContext(e,r){return t.appendContextImpl(this,e,new h.IdentityHashMap)}static appendContextImpl(e,r,n){if(r.isEmpty){if(h.isEmptyLocal(r)){if(e.hasEmpty)return h.EMPTY_LOCAL;throw new Error("what to do here?")}return e}if(1!==r.size)throw new Error("Appending a tree suffix is not yet supported.");let i=n.get(e);if(!i){if(e.isEmpty)i=r;else{let o=e.size;e.hasEmpty&&o--;let s=new Array(o),a=new Array(o);for(let t=0;t<o;t++)a[t]=e.getReturnState(t);for(let i=0;i<o;i++)s[i]=t.appendContextImpl(e.getParent(i),r,n);i=1===s.length?new f(s[0],a[0]):new t(s,a),e.hasEmpty&&(i=h.join(i,r))}n.put(e,i)}return i}equals(e){if(this===e)return!0;if(!(e instanceof t))return!1;if(this.hashCode()!==e.hashCode())return!1;let r=e;return this.equalsImpl(r,new s.Array2DHashSet)}equalsImpl(t,e){let r=[],n=[];for(r.push(this),n.push(t);;){let t=r.pop(),i=n.pop();if(!t||!i)break;let o=new c.PredictionContextCache.IdentityCommutativePredictionContextOperands(t,i);if(!e.add(o))continue;let s=o.x.size;if(0!==s){if(s!==o.y.size)return!1;for(let t=0;t<s;t++){if(o.x.getReturnState(t)!==o.y.getReturnState(t))return!1;let e=o.x.getParent(t),i=o.y.getParent(t);if(e.hashCode()!==i.hashCode())return!1;e!==i&&(r.push(e),n.push(i))}}else if(!o.x.equals(o.y))return!1}return!0}};n([l.NotNull],d.prototype,"parents",void 0),n([l.NotNull],d.prototype,"returnStates",void 0),n([l.Override],d.prototype,"getParent",null),n([l.Override],d.prototype,"getReturnState",null),n([l.Override],d.prototype,"findReturnState",null),n([l.Override],d.prototype,"size",null),n([l.Override],d.prototype,"isEmpty",null),n([l.Override],d.prototype,"hasEmpty",null),n([l.Override],d.prototype,"addEmptyContext",null),n([l.Override],d.prototype,"removeEmptyContext",null),n([l.Override],d.prototype,"appendContext",null),n([l.Override],d.prototype,"equals",null),d=n([i(0,l.NotNull)],d);let f=class t extends h{constructor(t,e){super(h.calculateSingleHashCode(t,e)),this.parent=t,this.returnState=e}getParent(t){return this.parent}getReturnState(t){return this.returnState}findReturnState(t){return this.returnState===t?0:-1}get size(){return 1}get isEmpty(){return!1}get hasEmpty(){return!1}appendContext(t,e){return e.getChild(this.parent.appendContext(t,e),this.returnState)}addEmptyContext(){let t=[this.parent,h.EMPTY_FULL],e=[this.returnState,h.EMPTY_FULL_STATE_KEY];return new d(t,e)}removeEmptyContext(){return this}equals(e){if(e===this)return!0;if(!(e instanceof t))return!1;let r=e;return this.hashCode()===r.hashCode()&&this.returnState===r.returnState&&this.parent.equals(r.parent)}};n([l.NotNull],f.prototype,"parent",void 0),n([l.Override],f.prototype,"getParent",null),n([l.Override],f.prototype,"getReturnState",null),n([l.Override],f.prototype,"findReturnState",null),n([l.Override],f.prototype,"size",null),n([l.Override],f.prototype,"isEmpty",null),n([l.Override],f.prototype,"hasEmpty",null),n([l.Override],f.prototype,"appendContext",null),n([l.Override],f.prototype,"addEmptyContext",null),n([l.Override],f.prototype,"removeEmptyContext",null),n([l.Override],f.prototype,"equals",null),f=n([i(0,l.NotNull)],f),function(t){t.EMPTY_LOCAL=new p(!1),t.EMPTY_FULL=new p(!0),t.EMPTY_LOCAL_STATE_KEY=-2147483648,t.EMPTY_FULL_STATE_KEY=2147483647,t.IdentityHashMap=class extends o.Array2DHashMap{constructor(){super(e.INSTANCE)}};class e{IdentityEqualityComparator(){}hashCode(t){return t.hashCode()}equals(t,e){return t===e}}e.INSTANCE=new e,n([l.Override],e.prototype,"hashCode",null),n([l.Override],e.prototype,"equals",null),t.IdentityEqualityComparator=e}(h=r.PredictionContext||(r.PredictionContext={}))},{252:252,327:327,349:349,350:350,352:352,361:361}],254:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.Dependents||(r.Dependents={}))[n.SELF=0]="SELF",n[n.PARENTS=1]="PARENTS",n[n.CHILDREN=2]="CHILDREN",n[n.ANCESTORS=3]="ANCESTORS",n[n.DESCENDANTS=4]="DESCENDANTS",n[n.SIBLINGS=5]="SIBLINGS",n[n.PRECEEDING_SIBLINGS=6]="PRECEEDING_SIBLINGS",n[n.FOLLOWING_SIBLINGS=7]="FOLLOWING_SIBLINGS",n[n.PRECEEDING=8]="PRECEEDING",n[n.FOLLOWING=9]="FOLLOWING"},{}],255:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(353),s=t(252),a=t(358);class u{constructor(t=!0){this.exactOnly=t,this.exactOnly=t}syntaxError(t,e,r,n,i,o){}reportAmbiguity(t,e,r,n,i,o,s){if(this.exactOnly&&!i)return;let u=`reportAmbiguity d=${this.getDecisionDescription(t,e)}: ambigAlts=${this.getConflictingAlts(o,s)}, input='${t.inputStream.getText(a.Interval.of(r,n))}'`;t.notifyErrorListeners(u)}reportAttemptingFullContext(t,e,r,n,i,o){let s=`reportAttemptingFullContext d=${this.getDecisionDescription(t,e)}, input='${t.inputStream.getText(a.Interval.of(r,n))}'`;t.notifyErrorListeners(s)}reportContextSensitivity(t,e,r,n,i,o){let s=`reportContextSensitivity d=${this.getDecisionDescription(t,e)}, input='${t.inputStream.getText(a.Interval.of(r,n))}'`;t.notifyErrorListeners(s)}getDecisionDescription(t,e){let r=e.decision,n=e.atnStartState.ruleIndex,i=t.ruleNames;if(n<0||n>=i.length)return r.toString();let o=i[n];return o?`${r} (${o})`:r.toString()}getConflictingAlts(t,e){if(null!=t)return t;let r=new o.BitSet;for(let n of e)r.set(n.alt);return r}}n([s.Override],u.prototype,"syntaxError",null),n([s.Override,i(0,s.NotNull),i(1,s.NotNull),i(6,s.NotNull)],u.prototype,"reportAmbiguity",null),n([s.Override,i(0,s.NotNull),i(1,s.NotNull),i(5,s.NotNull)],u.prototype,"reportAttemptingFullContext",null),n([s.Override,i(0,s.NotNull),i(1,s.NotNull),i(5,s.NotNull)],u.prototype,"reportContextSensitivity",null),n([i(0,s.NotNull),i(1,s.NotNull)],u.prototype,"getDecisionDescription",null),n([s.NotNull,i(1,s.NotNull)],u.prototype,"getConflictingAlts",null),r.DiagnosticErrorListener=u},{252:252,353:353,358:358}],353:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(451),i=t(361),o=new Uint16Array(0);function s(t){return t>>>4}function a(t){return 16*t}function u(t){let e=1;for(let r=0;r<16;r++){if(0!=(t&e))return r;e=e<<1>>>0}throw new RangeError("No specified bit found")}function l(t){let e=32768;for(let r=15;r>=0;r--){if(0!=(t&e))return r;e>>>=1}throw new RangeError("No specified bit found")}function c(t,e){return(t&=15)==(e&=15)?1<<t>>>0:65535>>>15-e^65535>>>16-t}const h=new Uint8Array(65536);for(let f=0;f<16;f++){const t=1<<f>>>0;let e=0;for(;e<h.length;){e+=t;for(let r=0;r<t;r++)h[e]++,e++}}class p{constructor(t){if(t)if("number"==typeof t){if(t<0)throw new RangeError("nbits cannot be negative");this.data=new Uint16Array(s(t-1)+1)}else if(t instanceof p)this.data=t.data.slice(0);else{let e=-1;for(let r of t)e<r&&(e=r);this.data=new Uint16Array(s(e-1)+1);for(let r of t)this.set(r)}else this.data=o}and(t){const e=this.data,r=t.data,n=Math.min(e.length,r.length);let i=-1;for(let o=0;o<n;o++)0!=(e[o]&=r[o])&&(i=o);-1===i&&(this.data=o),i<e.length-1&&(this.data=e.slice(0,i+1))}andNot(t){const e=this.data,r=t.data,n=Math.min(e.length,r.length);let i=-1;for(let o=0;o<n;o++)0!=(e[o]&=65535^r[o])&&(i=o);-1===i&&(this.data=o),i<e.length-1&&(this.data=e.slice(0,i+1))}cardinality(){if(this.isEmpty)return 0;const t=this.data,e=t.length;let r=0;for(let n=0;n<e;n++)r+=h[t[n]];return r}clear(t,e){null==t?this.data.fill(0):null==e?this.set(t,!1):this.set(t,e,!1)}flip(t,e){if(null==e&&(e=t),t<0||e<t)throw new RangeError;let r=s(t);const n=s(e);if(r===n)this.data[r]^=c(t,e);else{for(this.data[r++]^=c(t,15);r<n;)this.data[r++]^=65535;this.data[r++]^=c(0,e)}}get(t,e){if(void 0===e)return!!(this.data[s(t)]&c(t,t));{let r=new p(e+1);for(let n=t;n<=e;n++)r.set(n,this.get(n));return r}}intersects(t){let e=Math.min(this.length(),t.length());if(0===e)return!1;let r=s(e-1);for(let n=0;n<=r;n++)if(0!=(this.data[n]&t.data[n]))return!0;return!1}get isEmpty(){return 0===this.length()}length(){return this.data.length?this.previousSetBit(a(this.data.length)-1)+1:0}nextClearBit(t){if(t<0)throw new RangeError("fromIndex cannot be negative");const e=this.data,r=e.length;let n=s(t);if(n>r)return-1;let i=65535^c(t,15);if(65535==(e[n]|i)){for(n++,i=0;n<r&&65535===e[n];n++);if(n===r)return-1}return a(n)+u(65535^(e[n]|i))}nextSetBit(t){if(t<0)throw new RangeError("fromIndex cannot be negative");const e=this.data,r=e.length;let n=s(t);if(n>r)return-1;let i=c(t,15);if(0==(e[n]&i)){for(n++,i=65535;n<r&&0===e[n];n++);if(n>=r)return-1}return a(n)+u(e[n]&i)}or(t){const e=this.data,r=t.data,n=Math.min(e.length,r.length),i=Math.max(e.length,r.length),s=e.length===i?e:new Uint16Array(i);let a=-1;for(let o=0;o<n;o++)0!=(s[o]=e[o]|r[o])&&(a=o);const u=e.length>r.length?e:r;for(let o=n;o<i;o++)0!==(s[o]=u[o])&&(a=o);-1===a?this.data=o:s.length===a+1?this.data=s:this.data=s.slice(0,a)}previousClearBit(t){if(t<0)throw new RangeError("fromIndex cannot be negative");const e=this.data,r=e.length;let n=s(t);n>=r&&(n=r-1);let i=65535^c(0,t);if(65535==(e[n]|i)){for(i=0,n--;n>=0&&65535===e[n];n--);if(n<0)return-1}return a(n)+l(65535^(e[n]|i))}previousSetBit(t){if(t<0)throw new RangeError("fromIndex cannot be negative");const e=this.data,r=e.length;let n=s(t);n>=r&&(n=r-1);let i=c(0,t);if(0==(e[n]&i)){for(n--,i=65535;n>=0&&0===e[n];n--);if(n<0)return-1}return a(n)+l(e[n]&i)}set(t,e,r){if(void 0===e?(e=t,r=!0):"boolean"==typeof e&&(r=e,e=t),void 0===r&&(r=!0),t<0||t>e)throw new RangeError;let n=s(t),i=s(e);if(r&&i>=this.data.length){let t=new Uint16Array(i+1);this.data.forEach((e,r)=>t[r]=e),this.data=t}else if(!r){if(n>=this.data.length)return;i>=this.data.length&&(i=this.data.length-1,e=16*this.data.length-1)}if(n===i)this._setBits(n,r,c(t,e));else{for(this._setBits(n++,r,c(t,15));n<i;)this.data[n++]=r?65535:0;this._setBits(n,r,c(0,e))}}_setBits(t,e,r){e?this.data[t]|=r:this.data[t]&=65535^r}get size(){return 8*this.data.byteLength}hashCode(){return i.MurmurHash.hashCode(this.data,22)}equals(t){if(t===this)return!0;if(!(t instanceof p))return!1;const e=this.length();if(e!==t.length())return!1;if(0===e)return!0;let r=s(e-1);for(let n=0;n<=r;n++)if(this.data[n]!==t.data[n])return!1;return!0}toString(){let t="{",e=!0;for(let r=this.nextSetBit(0);r>=0;r=this.nextSetBit(r+1))e?e=!1:t+=", ",t+=r;return t+"}"}xor(t){const e=this.data,r=t.data,n=Math.min(e.length,r.length),i=Math.max(e.length,r.length),s=e.length===i?e:new Uint16Array(i);let a=-1;for(let o=0;o<n;o++)0!=(s[o]=e[o]^r[o])&&(a=o);const u=e.length>r.length?e:r;for(let o=n;o<i;o++)0!==(s[o]=u[o])&&(a=o);-1===a?this.data=o:s.length===a+1?this.data=s:this.data=s.slice(0,a+1)}clone(){return new p(this)}[Symbol.iterator](){return new d(this.data)}[n.inspect.custom](){return"BitSet "+this.toString()}}r.BitSet=p;class d{constructor(t){this.data=t,this.index=0,this.mask=65535}next(){for(;this.index<this.data.length;){const t=this.data[this.index]&this.mask;if(0!==t){const e=a(this.index)+u(t);return this.mask=c(e+1,15),{done:!1,value:e}}this.index++,this.mask=65535}return{done:!0,value:-1}}[Symbol.iterator](){return this}}},{361:361,451:451}],325:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(287),s=t(252),a=t(334);let u=class extends o.AbstractPredicateTransition{constructor(t,e,r,n){super(t),this.ruleIndex=e,this.predIndex=r,this.isCtxDependent=n}get serializationType(){return 4}get isEpsilon(){return!0}matches(t,e,r){return!1}get predicate(){return new a.SemanticContext.Predicate(this.ruleIndex,this.predIndex,this.isCtxDependent)}toString(){return"pred_"+this.ruleIndex+":"+this.predIndex}};n([s.Override],u.prototype,"serializationType",null),n([s.Override],u.prototype,"isEpsilon",null),n([s.Override],u.prototype,"matches",null),n([s.Override,s.NotNull],u.prototype,"toString",null),u=n([i(0,s.NotNull)],u),r.PredicateTransition=u},{252:252,287:287,334:334}],259:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(267);class s extends o.ParserRuleContext{constructor(t,e,r){void 0!==r?super(e,r):super(),this._ruleIndex=t}get ruleIndex(){return this._ruleIndex}}n([i.Override],s.prototype,"ruleIndex",null),r.InterpreterRuleContext=s},{252:252,267:267}],262:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(270),s=t(252),a=t(358),u=t(365);let l=class extends o.RecognitionException{constructor(t,e,r,n){super(t,e),this._startIndex=r,this._deadEndConfigs=n}get startIndex(){return this._startIndex}get deadEndConfigs(){return this._deadEndConfigs}get inputStream(){return super.inputStream}toString(){let t="";return this._startIndex>=0&&this._startIndex<this.inputStream.size&&(t=this.inputStream.getText(a.Interval.of(this._startIndex,this._startIndex)),t=u.escapeWhitespace(t,!1)),`LexerNoViableAltException('${t}')`}};n([s.Override],l.prototype,"inputStream",null),n([s.Override],l.prototype,"toString",null),l=n([i(1,s.NotNull)],l),r.LexerNoViableAltException=l},{252:252,270:270,358:358,365:365}],271:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(251),s=t(268),a=t(252),u=t(276),l=t(365);class c{constructor(){this._listeners=[o.ConsoleErrorListener.INSTANCE],this._stateNumber=-1}getTokenTypeMap(){let t=this.vocabulary,e=c.tokenTypeMapCache.get(t);if(null==e){let r=new Map;for(let e=0;e<=this.atn.maxTokenType;e++){let n=t.getLiteralName(e);null!=n&&r.set(n,e);let i=t.getSymbolicName(e);null!=i&&r.set(i,e)}r.set("EOF",u.Token.EOF),e=r,c.tokenTypeMapCache.set(t,e)}return e}getRuleIndexMap(){let t=this.ruleNames;if(null==t)throw new Error("The current recognizer does not provide a list of rule names.");let e=c.ruleIndexMapCache.get(t);return null==e&&(e=l.toMap(t),c.ruleIndexMapCache.set(t,e)),e}getTokenType(t){let e=this.getTokenTypeMap().get(t);return null!=e?e:u.Token.INVALID_TYPE}get serializedATN(){throw new Error("there is no serialized ATN")}get atn(){return this._interp.atn}get interpreter(){return this._interp}set interpreter(t){this._interp=t}get parseInfo(){return Promise.resolve(void 0)}getErrorHeader(t){let e=t.getOffendingToken();return e?"line "+e.line+":"+e.charPositionInLine:""}addErrorListener(t){if(!t)throw new TypeError("listener must not be null");this._listeners.push(t)}removeErrorListener(t){let e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}removeErrorListeners(){this._listeners.length=0}getErrorListeners(){return this._listeners.slice(0)}getErrorListenerDispatch(){return new s.ProxyErrorListener(this.getErrorListeners())}sempred(t,e,r){return!0}precpred(t,e){return!0}action(t,e,r){}get state(){return this._stateNumber}set state(t){this._stateNumber=t}}c.EOF=-1,c.tokenTypeMapCache=new WeakMap,c.ruleIndexMapCache=new WeakMap,n([a.SuppressWarnings("serial"),a.NotNull],c.prototype,"_listeners",void 0),n([a.NotNull],c.prototype,"getTokenTypeMap",null),n([a.NotNull],c.prototype,"getRuleIndexMap",null),n([a.NotNull],c.prototype,"serializedATN",null),n([a.NotNull],c.prototype,"atn",null),n([a.NotNull,i(0,a.NotNull)],c.prototype,"interpreter",null),n([a.NotNull,i(0,a.NotNull)],c.prototype,"getErrorHeader",null),n([i(0,a.NotNull)],c.prototype,"addErrorListener",null),n([i(0,a.NotNull)],c.prototype,"removeErrorListener",null),n([a.NotNull],c.prototype,"getErrorListeners",null),r.Recognizer=c},{251:251,252:252,268:268,276:276,365:365}],357:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(356);r.IntegerStack=class extends n.IntegerList{constructor(t){super(t)}push(t){this.add(t)}pop(){return this.removeAt(this.size-1)}peek(){return this.get(this.size-1)}}},{356:356}],261:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(260),s=t(304),a=t(252),u=t(252);let l=class extends o.Lexer{constructor(t,e,r,n,i,o,a){if(super(a),0!==o.grammarType)throw new Error("IllegalArgumentException: The ATN must be a lexer ATN.");this._grammarFileName=t,this._atn=o,this._ruleNames=r.slice(0),this._channelNames=n.slice(0),this._modeNames=i.slice(0),this._vocabulary=e,this._interp=new s.LexerATNSimulator(o,this)}get atn(){return this._atn}get grammarFileName(){return this._grammarFileName}get ruleNames(){return this._ruleNames}get channelNames(){return this._channelNames}get modeNames(){return this._modeNames}get vocabulary(){return this._vocabulary}};n([a.NotNull],l.prototype,"_vocabulary",void 0),n([u.Override],l.prototype,"atn",null),n([u.Override],l.prototype,"grammarFileName",null),n([u.Override],l.prototype,"ruleNames",null),n([u.Override],l.prototype,"channelNames",null),n([u.Override],l.prototype,"modeNames",null),n([u.Override],l.prototype,"vocabulary",null),l=n([i(1,a.NotNull)],l),r.LexerInterpreter=l},{252:252,260:260,304:304}],263:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(249),s=t(252),a=t(276);let u=class{constructor(t,e){if(this.i=0,this._factory=o.CommonTokenFactory.DEFAULT,null==t)throw new Error("tokens cannot be null");this.tokens=t,this._sourceName=e}get charPositionInLine(){if(this.i<this.tokens.length)return this.tokens[this.i].charPositionInLine;if(null!=this.eofToken)return this.eofToken.charPositionInLine;if(this.tokens.length>0){let t=this.tokens[this.tokens.length-1],e=t.text;if(null!=e){let t=e.lastIndexOf("\n");if(t>=0)return e.length-t-1}return t.charPositionInLine+t.stopIndex-t.startIndex+1}return 0}nextToken(){if(this.i>=this.tokens.length){if(null==this.eofToken){let t=-1;if(this.tokens.length>0){let e=this.tokens[this.tokens.length-1].stopIndex;-1!==e&&(t=e+1)}let e=Math.max(-1,t-1);this.eofToken=this._factory.create({source:this,stream:this.inputStream},a.Token.EOF,"EOF",a.Token.DEFAULT_CHANNEL,t,e,this.line,this.charPositionInLine)}return this.eofToken}let t=this.tokens[this.i];return this.i===this.tokens.length-1&&t.type===a.Token.EOF&&(this.eofToken=t),this.i++,t}get line(){if(this.i<this.tokens.length)return this.tokens[this.i].line;if(null!=this.eofToken)return this.eofToken.line;if(this.tokens.length>0){let t=this.tokens[this.tokens.length-1],e=t.line,r=t.text;if(null!=r)for(let n=0;n<r.length;n++)"\n"===r.charAt(n)&&e++;return e}return 1}get inputStream(){return this.i<this.tokens.length?this.tokens[this.i].inputStream:null!=this.eofToken?this.eofToken.inputStream:this.tokens.length>0?this.tokens[this.tokens.length-1].inputStream:void 0}get sourceName(){if(this._sourceName)return this._sourceName;let t=this.inputStream;return null!=t?t.sourceName:"List"}set tokenFactory(t){this._factory=t}get tokenFactory(){return this._factory}};n([s.Override],u.prototype,"charPositionInLine",null),n([s.Override],u.prototype,"nextToken",null),n([s.Override],u.prototype,"line",null),n([s.Override],u.prototype,"inputStream",null),n([s.Override],u.prototype,"sourceName",null),n([s.Override,s.NotNull,i(0,s.NotNull)],u.prototype,"tokenFactory",null),u=n([i(0,s.NotNull)],u),r.ListTokenSource=u},{249:249,252:252,276:276}],269:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(268),o=t(252);class s extends i.ProxyErrorListener{constructor(t){super(t)}reportAmbiguity(t,e,r,n,i,o,s){this.getDelegates().forEach(a=>{a.reportAmbiguity&&a.reportAmbiguity(t,e,r,n,i,o,s)})}reportAttemptingFullContext(t,e,r,n,i,o){this.getDelegates().forEach(s=>{s.reportAttemptingFullContext&&s.reportAttemptingFullContext(t,e,r,n,i,o)})}reportContextSensitivity(t,e,r,n,i,o){this.getDelegates().forEach(s=>{s.reportContextSensitivity&&s.reportContextSensitivity(t,e,r,n,i,o)})}}n([o.Override],s.prototype,"reportAmbiguity",null),n([o.Override],s.prototype,"reportAttemptingFullContext",null),n([o.Override],s.prototype,"reportContextSensitivity",null),r.ProxyParserErrorListener=s},{252:252,268:268}],428:[function(t,e,r){var n,i,o=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(t){n=s}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(t){i=a}}();var l,c=[],h=!1,p=-1;function d(){h&&l&&(h=!1,l.length?c=l.concat(c):p=-1,c.length&&f())}function f(){if(!h){var t=u(d);h=!0;for(var e=c.length;e;){for(l=c,c=[];++p<e;)l&&l[p].run();p=-1,e=c.length}l=null,h=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function m(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new y(t,e)),1!==c.length||h||u(f)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],282:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});class i{constructor(t){this.readOnly=!1,t?(this.verifyATN=t.verifyATN,this.generateRuleBypassTransitions=t.generateRuleBypassTransitions,this.optimize=t.optimize):(this.verifyATN=!0,this.generateRuleBypassTransitions=!1,this.optimize=!0)}static get defaultOptions(){return null==i._defaultOptions&&(i._defaultOptions=new i,i._defaultOptions.makeReadOnly()),i._defaultOptions}get isReadOnly(){return this.readOnly}makeReadOnly(){this.readOnly=!0}get isVerifyATN(){return this.verifyATN}set isVerifyATN(t){this.throwIfReadOnly(),this.verifyATN=t}get isGenerateRuleBypassTransitions(){return this.generateRuleBypassTransitions}set isGenerateRuleBypassTransitions(t){this.throwIfReadOnly(),this.generateRuleBypassTransitions=t}get isOptimize(){return this.optimize}set isOptimize(t){this.throwIfReadOnly(),this.optimize=t}throwIfReadOnly(){if(this.isReadOnly)throw new Error("The object is read only.")}}n([t(252).NotNull],i,"defaultOptions",null),r.ATNDeserializationOptions=i},{252:252}],319:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);let s=class{constructor(t){this.atnSimulator=t}getDecisionInfo(){return this.atnSimulator.getDecisionInfo()}getLLDecisions(){let t=this.atnSimulator.getDecisionInfo(),e=[];for(let r=0;r<t.length;r++)t[r].LL_Fallback>0&&e.push(r);return e}getTotalTimeInPrediction(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.timeInPrediction;return e}getTotalSLLLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.SLL_TotalLook;return e}getTotalLLLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.LL_TotalLook;return e}getTotalSLLATNLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.SLL_ATNTransitions;return e}getTotalLLATNLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.LL_ATNTransitions;return e}getTotalATNLookaheadOps(){let t=this.atnSimulator.getDecisionInfo(),e=0;for(let r of t)e+=r.SLL_ATNTransitions,e+=r.LL_ATNTransitions;return e}getDFASize(t){if(t)return this.atnSimulator.atn.decisionToDFA[t].states.size;{let t=0,e=this.atnSimulator.atn.decisionToDFA;for(let r=0;r<e.length;r++)t+=this.getDFASize(r);return t}}};n([o.NotNull],s.prototype,"getDecisionInfo",null),n([o.NotNull],s.prototype,"getLLDecisions",null),s=n([i(0,o.NotNull)],s),r.ParseInfo=s},{252:252}],367:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(371);class s extends o.TerminalNode{constructor(t){super(t)}accept(t){return t.visitErrorNode(this)}}n([i.Override],s.prototype,"accept",null),r.ErrorNode=s},{252:252,371:371}],371:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(358),o=t(252),s=t(276);class a{constructor(t){this._symbol=t}getChild(t){throw new RangeError("Terminal Node has no children.")}get symbol(){return this._symbol}get parent(){return this._parent}setParent(t){this._parent=t}get payload(){return this._symbol}get sourceInterval(){let t=this._symbol.tokenIndex;return new i.Interval(t,t)}get childCount(){return 0}accept(t){return t.visitTerminal(this)}get text(){return this._symbol.text||""}toStringTree(t){return this.toString()}toString(){return this._symbol.type===s.Token.EOF?"<EOF>":this._symbol.text||""}}n([o.Override],a.prototype,"getChild",null),n([o.Override],a.prototype,"parent",null),n([o.Override],a.prototype,"setParent",null),n([o.Override],a.prototype,"payload",null),n([o.Override],a.prototype,"sourceInterval",null),n([o.Override],a.prototype,"childCount",null),n([o.Override],a.prototype,"accept",null),n([o.Override],a.prototype,"text",null),n([o.Override],a.prototype,"toStringTree",null),n([o.Override],a.prototype,"toString",null),r.TerminalNode=a},{252:252,276:276,358:358}],329:[function(t,e,r){(function(e){(function(){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(289),s=t(279),a=t(284),u=t(296),l=t(298),c=t(301),h=t(252),p=t(315),d=t(320),f=t(324),y=t(334),m=t(336);class g extends d.ParserATNSimulator{constructor(t){super(t.interpreter.atn,t),this._startIndex=0,this._sllStopIndex=0,this._llStopIndex=0,this.currentDecision=0,this.conflictingAltResolvedBySLL=0,this.optimize_ll1=!1,this.reportAmbiguities=!0,this.numDecisions=this.atn.decisionToState.length,this.decisions=[];for(let e=0;e<this.numDecisions;e++)this.decisions.push(new l.DecisionInfo(e))}adaptivePredict(t,r,n,i){if(void 0!==i)return super.adaptivePredict(t,r,n,i);try{this._input=t,this._startIndex=t.index,this._sllStopIndex=this._startIndex-1,this._llStopIndex=-1,this.currentDecision=r,this.currentState=void 0,this.conflictingAltResolvedBySLL=s.ATN.INVALID_ALT_NUMBER;let i=e.hrtime(),o=super.adaptivePredict(t,r,n),a=e.hrtime(),u=1e9*(a[0]-i[0]);0===u?u=a[1]-i[1]:u+=1e9-i[1]+a[1],this.decisions[r].timeInPrediction+=u,this.decisions[r].invocations++;let l=this._sllStopIndex-this._startIndex+1;if(this.decisions[r].SLL_TotalLook+=l,this.decisions[r].SLL_MinLook=0===this.decisions[r].SLL_MinLook?l:Math.min(this.decisions[r].SLL_MinLook,l),l>this.decisions[r].SLL_MaxLook&&(this.decisions[r].SLL_MaxLook=l,this.decisions[r].SLL_MaxLookEvent=new p.LookaheadEventInfo(r,void 0,o,t,this._startIndex,this._sllStopIndex,!1)),this._llStopIndex>=0){let e=this._llStopIndex-this._startIndex+1;this.decisions[r].LL_TotalLook+=e,this.decisions[r].LL_MinLook=0===this.decisions[r].LL_MinLook?e:Math.min(this.decisions[r].LL_MinLook,e),e>this.decisions[r].LL_MaxLook&&(this.decisions[r].LL_MaxLook=e,this.decisions[r].LL_MaxLookEvent=new p.LookaheadEventInfo(r,void 0,o,t,this._startIndex,this._llStopIndex,!0))}return o}finally{this._input=void 0,this.currentDecision=-1}}getStartState(t,e,r,n){let i=super.getStartState(t,e,r,n);return this.currentState=i,i}computeStartState(t,e,r){let n=super.computeStartState(t,e,r);return this.currentState=n,n}computeReachSet(t,e,r,n){if(void 0===this._input)throw new Error("Invalid state");let i=super.computeReachSet(t,e,r,n);return null==i&&this.decisions[this.currentDecision].errors.push(new c.ErrorInfo(this.currentDecision,e,this._input,this._startIndex,this._input.index)),this.currentState=i,i}getExistingTargetState(t,e){if(void 0===this.currentState||void 0===this._input)throw new Error("Invalid state");this.currentState.useContext?this._llStopIndex=this._input.index:this._sllStopIndex=this._input.index;let r=super.getExistingTargetState(t,e);if(null!=r&&(this.currentState=new m.SimulatorState(this.currentState.outerContext,r,this.currentState.useContext,this.currentState.remainingOuterContext),this.currentState.useContext?this.decisions[this.currentDecision].LL_DFATransitions++:this.decisions[this.currentDecision].SLL_DFATransitions++,r===a.ATNSimulator.ERROR)){let e=new m.SimulatorState(this.currentState.outerContext,t,this.currentState.useContext,this.currentState.remainingOuterContext);this.decisions[this.currentDecision].errors.push(new c.ErrorInfo(this.currentDecision,e,this._input,this._startIndex,this._input.index))}return r}computeTargetState(t,e,r,n,i,o){let s=super.computeTargetState(t,e,r,n,i,o);return i?this.decisions[this.currentDecision].LL_ATNTransitions++:this.decisions[this.currentDecision].SLL_ATNTransitions++,s}evalSemanticContextImpl(t,e,r){if(void 0===this.currentState||void 0===this._input)throw new Error("Invalid state");let n=super.evalSemanticContextImpl(t,e,r);if(!(t instanceof y.SemanticContext.PrecedencePredicate)){let e=this._llStopIndex>=0?this._llStopIndex:this._sllStopIndex;this.decisions[this.currentDecision].predicateEvals.push(new f.PredicateEvalInfo(this.currentState,this.currentDecision,this._input,this._startIndex,e,t,n,r))}return n}reportContextSensitivity(t,e,r,n,i){if(void 0===this._input)throw new Error("Invalid state");e!==this.conflictingAltResolvedBySLL&&this.decisions[this.currentDecision].contextSensitivities.push(new u.ContextSensitivityInfo(this.currentDecision,r,this._input,n,i)),super.reportContextSensitivity(t,e,r,n,i)}reportAttemptingFullContext(t,e,r,n,i){this.conflictingAltResolvedBySLL=null!=e?e.nextSetBit(0):r.s0.configs.getRepresentedAlternatives().nextSetBit(0),this.decisions[this.currentDecision].LL_Fallback++,super.reportAttemptingFullContext(t,e,r,n,i)}reportAmbiguity(t,e,r,n,i,a,l){if(void 0===this.currentState||void 0===this._input)throw new Error("Invalid state");let c;c=null!=a?a.nextSetBit(0):l.getRepresentedAlternatives().nextSetBit(0),this.conflictingAltResolvedBySLL!==s.ATN.INVALID_ALT_NUMBER&&c!==this.conflictingAltResolvedBySLL&&this.decisions[this.currentDecision].contextSensitivities.push(new u.ContextSensitivityInfo(this.currentDecision,this.currentState,this._input,r,n)),this.decisions[this.currentDecision].ambiguities.push(new o.AmbiguityInfo(this.currentDecision,this.currentState,a,this._input,r,n)),super.reportAmbiguity(t,e,r,n,i,a,l)}getDecisionInfo(){return this.decisions}getCurrentState(){return this.currentState}}n([h.Override,i(0,h.NotNull)],g.prototype,"adaptivePredict",null),n([h.Override],g.prototype,"getStartState",null),n([h.Override],g.prototype,"computeStartState",null),n([h.Override],g.prototype,"computeReachSet",null),n([h.Override],g.prototype,"getExistingTargetState",null),n([h.Override],g.prototype,"computeTargetState",null),n([h.Override],g.prototype,"evalSemanticContextImpl",null),n([h.Override],g.prototype,"reportContextSensitivity",null),n([h.Override],g.prototype,"reportAttemptingFullContext",null),n([h.Override,i(0,h.NotNull),i(5,h.NotNull),i(6,h.NotNull)],g.prototype,"reportAmbiguity",null),r.ProfilingATNSimulator=g}).call(this)}).call(this,t(428))},{252:252,279:279,284:284,289:289,296:296,298:298,301:301,315:315,320:320,324:324,334:334,336:336,428:428}],377:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(243),s=t(245),a=t(250),u=t(263),l=t(360),c=t(252),h=t(363),p=t(266),d=t(267),f=t(375),y=t(376),m=t(270),g=t(370),v=t(378),T=t(379),_=t(371),E=t(380),b=t(276),S=t(381);class x{constructor(t,e){this.start="<",this.stop=">",this.escape="\\",this.escapeRE=/\\/g,this._lexer=t,this._parser=e}setDelimiters(t,e,r){if(!t)throw new Error("start cannot be null or empty");if(!e)throw new Error("stop cannot be null or empty");this.start=t,this.stop=e,this.escape=r,this.escapeRE=new RegExp(r.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"g")}matches(t,e,r=0){if("string"==typeof e){let n=this.compile(e,r);return this.matches(t,n)}{let r=new l.MultiMap;return!this.matchImpl(t,e.patternTree,r)}}match(t,e,r=0){if("string"==typeof e){let n=this.compile(e,r);return this.match(t,n)}{let r=new l.MultiMap,n=this.matchImpl(t,e.patternTree,r);return new f.ParseTreeMatch(t,e,r,n)}}compile(t,e){let r=this.tokenize(t),n=new u.ListTokenSource(r),i=new a.CommonTokenStream(n);const s=this._parser;let l,c=new p.ParserInterpreter(s.grammarFileName,s.vocabulary,s.ruleNames,s.getATNWithBypassAlts(),i);try{c.errorHandler=new o.BailErrorStrategy,l=c.parse(e)}catch(d){throw d instanceof h.ParseCancellationException?d.getCause():d instanceof m.RecognitionException?d:d instanceof Error?new x.CannotInvokeStartRule(d):d}if(i.LA(1)!==b.Token.EOF)throw new x.StartRuleDoesNotConsumeFullPattern;return new y.ParseTreePattern(this,t,e,l)}get lexer(){return this._lexer}get parser(){return this._parser}matchImpl(t,e,r){if(!t)throw new TypeError("tree cannot be null");if(!e)throw new TypeError("patternTree cannot be null");if(t instanceof _.TerminalNode&&e instanceof _.TerminalNode){let n;if(t.symbol.type===e.symbol.type)if(e.symbol instanceof S.TokenTagToken){let n=e.symbol;r.map(n.tokenName,t);const i=n.label;i&&r.map(i,t)}else t.text===e.text||n||(n=t);else n||(n=t);return n}if(t instanceof d.ParserRuleContext&&e instanceof d.ParserRuleContext){let n,i=this.getRuleTagToken(e);if(i){if(t.ruleContext.ruleIndex===e.ruleContext.ruleIndex){r.map(i.ruleName,t);const e=i.label;e&&r.map(e,t)}else n||(n=t);return n}if(t.childCount!==e.childCount)return n||(n=t),n;let o=t.childCount;for(let s=0;s<o;s++){let n=this.matchImpl(t.getChild(s),e.getChild(s),r);if(n)return n}return n}return t}getRuleTagToken(t){if(t instanceof g.RuleNode&&1===t.childCount&&t.getChild(0)instanceof _.TerminalNode){let e=t.getChild(0);if(e.symbol instanceof v.RuleTagToken)return e.symbol}}tokenize(t){let e=this.split(t),r=[];for(let n of e)if(n instanceof T.TagChunk){let e=n;const i=e.tag.substr(0,1);if(i===i.toUpperCase()){let n=this._parser.getTokenType(e.tag);if(n===b.Token.INVALID_TYPE)throw new Error("Unknown token "+e.tag+" in pattern: "+t);let i=new S.TokenTagToken(e.tag,n,e.label);r.push(i)}else{if(i!==i.toLowerCase())throw new Error("invalid tag: "+e.tag+" in pattern: "+t);{let n=this._parser.getRuleIndex(e.tag);if(-1===n)throw new Error("Unknown rule "+e.tag+" in pattern: "+t);let i=this._parser.getATNWithBypassAlts().ruleToTokenType[n];r.push(new v.RuleTagToken(e.tag,i,e.label))}}}else{let t=n;this._lexer.inputStream=s.CharStreams.fromString(t.text);let e=this._lexer.nextToken();for(;e.type!==b.Token.EOF;)r.push(e),e=this._lexer.nextToken()}return r}split(t){let e=0,r=t.length,n=[],i=[],o=[];for(;e<r;)e===t.indexOf(this.escape+this.start,e)?e+=this.escape.length+this.start.length:e===t.indexOf(this.escape+this.stop,e)?e+=this.escape.length+this.stop.length:e===t.indexOf(this.start,e)?(i.push(e),e+=this.start.length):e===t.indexOf(this.stop,e)?(o.push(e),e+=this.stop.length):e++;if(i.length>o.length)throw new Error("unterminated tag in pattern: "+t);if(i.length<o.length)throw new Error("missing start tag in pattern: "+t);let s=i.length;for(let a=0;a<s;a++)if(i[a]>=o[a])throw new Error("tag delimiters out of order in pattern: "+t);if(0===s){let e=t.substring(0,r);n.push(new E.TextChunk(e))}if(s>0&&i[0]>0){let e=t.substring(0,i[0]);n.push(new E.TextChunk(e))}for(let a=0;a<s;a++){let e,r=t.substring(i[a]+this.start.length,o[a]),u=r,l=r.indexOf(":");if(l>=0&&(e=r.substring(0,l),u=r.substring(l+1,r.length)),n.push(new T.TagChunk(u,e)),a+1<s){let e=t.substring(o[a]+this.stop.length,i[a+1]);n.push(new E.TextChunk(e))}}if(s>0){let e=o[s-1]+this.stop.length;if(e<r){let i=t.substring(e,r);n.push(new E.TextChunk(i))}}for(let a=0;a<n.length;a++){let t=n[a];if(t instanceof E.TextChunk){let e=t.text.replace(this.escapeRE,"");e.length<t.text.length&&(n[a]=new E.TextChunk(e))}}return n}}n([c.NotNull,i(1,c.NotNull)],x.prototype,"match",null),n([c.NotNull],x.prototype,"lexer",null),n([c.NotNull],x.prototype,"parser",null),n([i(0,c.NotNull),i(1,c.NotNull),i(2,c.NotNull)],x.prototype,"matchImpl",null),r.ParseTreePatternMatcher=x,function(t){t.CannotInvokeStartRule=class extends Error{constructor(t){super("CannotInvokeStartRule: "+t),this.error=t}},t.StartRuleDoesNotConsumeFullPattern=class extends Error{constructor(){super("StartRuleDoesNotConsumeFullPattern")}}}(x=r.ParseTreePatternMatcher||(r.ParseTreePatternMatcher={}))},{243:243,245:245,250:250,252:252,263:263,266:266,267:267,270:270,276:276,360:360,363:363,370:370,371:371,375:375,376:376,378:378,379:379,380:380,381:381}],266:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(285),s=t(286),a=t(353),u=t(256),l=t(257),c=t(259),h=t(316),p=t(252),d=t(252),f=t(265),y=t(320),m=t(270),g=t(338),v=t(276);let T=class t extends f.Parser{constructor(e,r,n,i,o){if(super(e instanceof t?e.inputStream:o),this._parentContextStack=[],this.overrideDecision=-1,this.overrideDecisionInputIndex=-1,this.overrideDecisionAlt=-1,this.overrideDecisionReached=!1,this._overrideDecisionRoot=void 0,e instanceof t){let t=e;this._grammarFileName=t._grammarFileName,this._atn=t._atn,this.pushRecursionContextStates=t.pushRecursionContextStates,this._ruleNames=t._ruleNames,this._vocabulary=t._vocabulary,this.interpreter=new y.ParserATNSimulator(this._atn,this)}else{r=r,n=n,i=i,this._grammarFileName=e,this._atn=i,this._ruleNames=n.slice(0),this._vocabulary=r,this.pushRecursionContextStates=new a.BitSet(i.states.length);for(let t of i.states)t instanceof g.StarLoopEntryState&&t.precedenceRuleDecision&&this.pushRecursionContextStates.set(t.stateNumber);this.interpreter=new y.ParserATNSimulator(i,this)}}reset(t){void 0===t?super.reset():super.reset(t),this.overrideDecisionReached=!1,this._overrideDecisionRoot=void 0}get atn(){return this._atn}get vocabulary(){return this._vocabulary}get ruleNames(){return this._ruleNames}get grammarFileName(){return this._grammarFileName}parse(t){let e=this._atn.ruleToStartState[t];for(this._rootContext=this.createInterpreterRuleContext(void 0,o.ATNState.INVALID_STATE_NUMBER,t),e.isPrecedenceRule?this.enterRecursionRule(this._rootContext,e.stateNumber,t,0):this.enterRule(this._rootContext,e.stateNumber,t);;){let t=this.atnState;switch(t.stateType){case s.ATNStateType.RULE_STOP:if(this._ctx.isEmpty){if(e.isPrecedenceRule){let t=this._ctx,e=this._parentContextStack.pop();return this.unrollRecursionContexts(e[0]),t}return this.exitRule(),this._rootContext}this.visitRuleStopState(t);break;default:try{this.visitState(t)}catch(r){if(!(r instanceof m.RecognitionException))throw r;this.state=this._atn.ruleToStopState[t.ruleIndex].stateNumber,this.context.exception=r,this.errorHandler.reportError(this,r),this.recover(r)}}}}enterRecursionRule(t,e,r,n){this._parentContextStack.push([this._ctx,t.invokingState]),super.enterRecursionRule(t,e,r,n)}get atnState(){return this._atn.states[this.state]}visitState(t){let e=1;t.numberOfTransitions>1&&(e=this.visitDecisionState(t));let r=t.transition(e-1);switch(r.serializationType){case 1:if(this.pushRecursionContextStates.get(t.stateNumber)&&!(r.target instanceof h.LoopEndState)){let e=this._parentContextStack[this._parentContextStack.length-1],r=this.createInterpreterRuleContext(e[0],e[1],this._ctx.ruleIndex);this.pushNewRecursionContext(r,this._atn.ruleToStartState[t.ruleIndex].stateNumber,this._ctx.ruleIndex)}break;case 5:this.match(r._label);break;case 2:case 7:case 8:r.matches(this._input.LA(1),v.Token.MIN_USER_TOKEN_TYPE,65535)||this.recoverInline(),this.matchWildcard();break;case 9:this.matchWildcard();break;case 3:let e=r.target,n=e.ruleIndex,i=this.createInterpreterRuleContext(this._ctx,t.stateNumber,n);e.isPrecedenceRule?this.enterRecursionRule(i,e.stateNumber,n,r.precedence):this.enterRule(i,r.target.stateNumber,n);break;case 4:let o=r;if(!this.sempred(this._ctx,o.ruleIndex,o.predIndex))throw new u.FailedPredicateException(this);break;case 6:let s=r;this.action(this._ctx,s.ruleIndex,s.actionIndex);break;case 10:if(!this.precpred(this._ctx,r.precedence)){let t=r.precedence;throw new u.FailedPredicateException(this,`precpred(_ctx, ${t})`)}break;default:throw new Error("UnsupportedOperationException: Unrecognized ATN transition type.")}this.state=r.target.stateNumber}visitDecisionState(t){let e;this.errorHandler.sync(this);let r=t.decision;return r!==this.overrideDecision||this._input.index!==this.overrideDecisionInputIndex||this.overrideDecisionReached?e=this.interpreter.adaptivePredict(this._input,r,this._ctx):(e=this.overrideDecisionAlt,this.overrideDecisionReached=!0),e}createInterpreterRuleContext(t,e,r){return new c.InterpreterRuleContext(r,t,e)}visitRuleStopState(t){if(this._atn.ruleToStartState[t.ruleIndex].isPrecedenceRule){let t=this._parentContextStack.pop();this.unrollRecursionContexts(t[0]),this.state=t[1]}else this.exitRule();let e=this._atn.states[this.state].transition(0);this.state=e.followState.stateNumber}addDecisionOverride(t,e,r){this.overrideDecision=t,this.overrideDecisionInputIndex=e,this.overrideDecisionAlt=r}get overrideDecisionRoot(){return this._overrideDecisionRoot}recover(t){let e=this._input.index;if(this.errorHandler.recover(this,t),this._input.index===e){let e=t.getOffendingToken();if(!e)throw new Error("Expected exception to have an offending token");let r=e.tokenSource,n={source:r,stream:void 0!==r?r.inputStream:void 0};if(t instanceof l.InputMismatchException){let r=t.expectedTokens;if(void 0===r)throw new Error("Expected the exception to provide expected tokens");let i=v.Token.INVALID_TYPE;r.isNil||(i=r.minElement);let o=this.tokenFactory.create(n,i,e.text,v.Token.DEFAULT_CHANNEL,-1,-1,e.line,e.charPositionInLine);this._ctx.addErrorNode(this.createErrorNode(this._ctx,o))}else{e.tokenSource;let t=this.tokenFactory.create(n,v.Token.INVALID_TYPE,e.text,v.Token.DEFAULT_CHANNEL,-1,-1,e.line,e.charPositionInLine);this._ctx.addErrorNode(this.createErrorNode(this._ctx,t))}}}recoverInline(){return this._errHandler.recoverInline(this)}get rootContext(){return this._rootContext}};n([p.NotNull],T.prototype,"_vocabulary",void 0),n([d.Override],T.prototype,"reset",null),n([d.Override],T.prototype,"atn",null),n([d.Override],T.prototype,"vocabulary",null),n([d.Override],T.prototype,"ruleNames",null),n([d.Override],T.prototype,"grammarFileName",null),n([d.Override],T.prototype,"enterRecursionRule",null),T=n([i(1,p.NotNull)],T),r.ParserInterpreter=T},{252:252,256:256,257:257,259:259,265:265,270:270,276:276,285:285,286:286,316:316,320:320,338:338,353:353}],316:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{get stateType(){return o.ATNStateType.LOOP_END}}n([t(252).Override],s.prototype,"stateType",null),r.LoopEndState=s},{252:252,285:285,286:286}],338:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(353),s=t(299);class a extends s.DecisionState{constructor(){super(...arguments),this.precedenceRuleDecision=!1,this.precedenceLoopbackStates=new o.BitSet}get stateType(){return i.ATNStateType.STAR_LOOP_ENTRY}}n([t(252).Override],a.prototype,"stateType",null),r.StarLoopEntryState=a},{252:252,286:286,299:299,353:353}],272:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(279),o=t(271),s=t(370),a=t(358),u=t(252),l=t(372),c=t(267);class h extends s.RuleNode{constructor(t,e){super(),this._parent=t,this.invokingState=null!=e?e:-1}static getChildContext(t,e){return new h(t,e)}depth(){let t=0,e=this;for(;e;)e=e._parent,t++;return t}get isEmpty(){return-1===this.invokingState}get sourceInterval(){return a.Interval.INVALID}get ruleContext(){return this}get parent(){return this._parent}setParent(t){this._parent=t}get payload(){return this}get text(){if(0===this.childCount)return"";let t="";for(let e=0;e<this.childCount;e++)t+=this.getChild(e).text;return t.toString()}get ruleIndex(){return-1}get altNumber(){return i.ATN.INVALID_ALT_NUMBER}set altNumber(t){}getChild(t){throw new RangeError("i must be greater than or equal to 0 and less than childCount")}get childCount(){return 0}accept(t){return t.visitChildren(this)}toStringTree(t){return l.Trees.toStringTree(this,t)}toString(t,e){const r=t instanceof o.Recognizer?t.ruleNames:t;e=e||c.ParserRuleContext.emptyContext();let n="",i=this;for(n+="[";i&&i!==e;){if(r){let t=i.ruleIndex;n+=t>=0&&t<r.length?r[t]:t.toString()}else i.isEmpty||(n+=i.invokingState);!i._parent||!r&&i._parent.isEmpty||(n+=" "),i=i._parent}return(n+="]").toString()}}n([u.Override],h.prototype,"sourceInterval",null),n([u.Override],h.prototype,"ruleContext",null),n([u.Override],h.prototype,"parent",null),n([u.Override],h.prototype,"setParent",null),n([u.Override],h.prototype,"payload",null),n([u.Override],h.prototype,"text",null),n([u.Override],h.prototype,"getChild",null),n([u.Override],h.prototype,"childCount",null),n([u.Override],h.prototype,"accept",null),n([u.Override],h.prototype,"toStringTree",null),r.RuleContext=h},{252:252,267:267,271:271,279:279,358:358,370:370,372:372}],268:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);class s{constructor(t){if(this.delegates=t,!t)throw new Error("Invalid delegates")}getDelegates(){return this.delegates}syntaxError(t,e,r,n,i,o){this.delegates.forEach(s=>{s.syntaxError&&s.syntaxError(t,e,r,n,i,o)})}}n([o.Override,i(0,o.NotNull),i(4,o.NotNull)],s.prototype,"syntaxError",null),r.ProxyErrorListener=s},{252:252}],370:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.RuleNode=class{}},{}],372:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(279),s=t(248),a=t(367),u=t(252),l=t(265),c=t(267),h=t(370),p=t(371),d=t(276),f=t(365);class y{static toStringTree(t,e){let r;r=e instanceof l.Parser?e.ruleNames:e;let n=f.escapeWhitespace(this.getNodeText(t,r),!1);if(0===t.childCount)return n;let i="";i+="(",i+=n=f.escapeWhitespace(this.getNodeText(t,r),!1),i+=" ";for(let o=0;o<t.childCount;o++)o>0&&(i+=" "),i+=this.toStringTree(t.getChild(o),r);return i+")"}static getNodeText(t,e){let r;if(e instanceof l.Parser)r=e.ruleNames;else{if(!e){let e=t.payload;return"string"==typeof e.text?e.text:t.payload.toString()}r=e}if(t instanceof h.RuleNode){let e=t.ruleContext,n=r[e.ruleIndex],i=e.altNumber;return i!==o.ATN.INVALID_ALT_NUMBER?n+":"+i:n}if(t instanceof a.ErrorNode)return t.toString();if(t instanceof p.TerminalNode)return t.symbol.text||"";throw new TypeError("Unexpected node type")}static getChildren(t){let e=[];for(let r=0;r<t.childCount;r++)e.push(t.getChild(r));return e}static getAncestors(t){let e=[],r=t.parent;for(;r;)e.unshift(r),r=r.parent;return e}static isAncestorOf(t,e){if(!t||!e||!t.parent)return!1;let r=e.parent;for(;r;){if(t===r)return!0;r=r.parent}return!1}static findAllTokenNodes(t,e){return y.findAllNodes(t,e,!0)}static findAllRuleNodes(t,e){return y.findAllNodes(t,e,!1)}static findAllNodes(t,e,r){let n=[];return y._findAllNodes(t,e,r,n),n}static _findAllNodes(t,e,r,n){r&&t instanceof p.TerminalNode?t.symbol.type===e&&n.push(t):!r&&t instanceof c.ParserRuleContext&&t.ruleIndex===e&&n.push(t);for(let i=0;i<t.childCount;i++)y._findAllNodes(t.getChild(i),e,r,n)}static getDescendants(t){let e=[];return function t(r){e.push(r);const n=r.childCount;for(let e=0;e<n;e++)t(r.getChild(e))}(t),e}static getRootOfSubtreeEnclosingRegion(t,e,r){let n=t.childCount;for(let i=0;i<n;i++){let n=t.getChild(i),o=y.getRootOfSubtreeEnclosingRegion(n,e,r);if(o)return o}if(t instanceof c.ParserRuleContext){let n=t.stop;if(e>=t.start.tokenIndex&&(null==n||r<=n.tokenIndex))return t}}static stripChildrenOutOfRange(t,e,r,n){if(!t)return;let i=t.childCount;for(let o=0;o<i;o++){let i=t.getChild(o),a=i.sourceInterval;if(i instanceof c.ParserRuleContext&&(a.b<r||a.a>n)&&y.isAncestorOf(i,e)){let e=new s.CommonToken(d.Token.INVALID_TYPE,"...");t.children[o]=new p.TerminalNode(e)}}}static findNodeSuchThat(t,e){if(e(t))return t;let r=t.childCount;for(let n=0;n<r;n++){let r=y.findNodeSuchThat(t.getChild(n),e);if(void 0!==r)return r}}}n([i(0,u.NotNull)],y,"toStringTree",null),n([u.NotNull,i(0,u.NotNull)],y,"getAncestors",null),n([i(0,u.NotNull)],y,"getRootOfSubtreeEnclosingRegion",null),r.Trees=y},{248:248,252:252,265:265,267:267,276:276,279:279,365:365,367:367,370:370,371:371}],273:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(279),o=t(252),s=t(267);class a extends s.ParserRuleContext{constructor(t,e){void 0!==e?super(t,e):super(),this._altNumber=i.ATN.INVALID_ALT_NUMBER}get altNumber(){return this._altNumber}set altNumber(t){this._altNumber=t}}n([o.Override],a.prototype,"altNumber",null),r.RuleContextWithAltNum=a},{252:252,267:267,279:279}],274:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.RuleDependency=function(t){return(t,e,r)=>{}}},{}],275:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.RuleVersion=function(t){return(t,e,r)=>{}}},{}],277:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(358),o=t(252),s=t(276);class a{constructor(t){this.tokens=t,this.programs=new Map,this.programs.set(a.DEFAULT_PROGRAM_NAME,[]),this.lastRewriteTokenIndexes=new Map}getTokenStream(){return this.tokens}rollback(t,e=a.DEFAULT_PROGRAM_NAME){let r=this.programs.get(e);null!=r&&this.programs.set(e,r.slice(a.MIN_TOKEN_INDEX,t))}deleteProgram(t=a.DEFAULT_PROGRAM_NAME){this.rollback(a.MIN_TOKEN_INDEX,t)}insertAfter(t,e,r=a.DEFAULT_PROGRAM_NAME){let n;n="number"==typeof t?t:t.tokenIndex;let i=new c(this.tokens,n,e),o=this.getProgram(r);i.instructionIndex=o.length,o.push(i)}insertBefore(t,e,r=a.DEFAULT_PROGRAM_NAME){let n;n="number"==typeof t?t:t.tokenIndex;let i=new l(this.tokens,n,e),o=this.getProgram(r);i.instructionIndex=o.length,o.push(i)}replaceSingle(t,e){this.replace(t,t,e)}replace(t,e,r,n=a.DEFAULT_PROGRAM_NAME){if("number"!=typeof t&&(t=t.tokenIndex),"number"!=typeof e&&(e=e.tokenIndex),t>e||t<0||e<0||e>=this.tokens.size)throw new RangeError(`replace: range invalid: ${t}..${e}(size=${this.tokens.size})`);let i=new h(this.tokens,t,e,r),o=this.getProgram(n);i.instructionIndex=o.length,o.push(i)}delete(t,e,r=a.DEFAULT_PROGRAM_NAME){void 0===e&&(e=t),this.replace(t,e,"",r)}getLastRewriteTokenIndex(t=a.DEFAULT_PROGRAM_NAME){let e=this.lastRewriteTokenIndexes.get(t);return null==e?-1:e}setLastRewriteTokenIndex(t,e){this.lastRewriteTokenIndexes.set(t,e)}getProgram(t){let e=this.programs.get(t);return null==e&&(e=this.initializeProgram(t)),e}initializeProgram(t){let e=[];return this.programs.set(t,e),e}getText(t,e=a.DEFAULT_PROGRAM_NAME){let r;r=t instanceof i.Interval?t:i.Interval.of(0,this.tokens.size-1),"string"==typeof t&&(e=t);let n=this.programs.get(e),o=r.a,u=r.b;if(u>this.tokens.size-1&&(u=this.tokens.size-1),o<0&&(o=0),null==n||0===n.length)return this.tokens.getText(r);let l=[],c=this.reduceToSingleOperationPerIndex(n),h=o;for(;h<=u&&h<this.tokens.size;){let t=c.get(h);c.delete(h);let e=this.tokens.get(h);null==t?(e.type!==s.Token.EOF&&l.push(String(e.text)),h++):h=t.execute(l)}if(u===this.tokens.size-1)for(let i of c.values())i.index>=this.tokens.size-1&&l.push(i.text.toString());return l.join("")}reduceToSingleOperationPerIndex(t){for(let r=0;r<t.length;r++){let e=t[r];if(null==e)continue;if(!(e instanceof h))continue;let n=e,i=this.getKindOfOps(t,l,r);for(let r of i)r.index===n.index?(t[r.instructionIndex]=void 0,n.text=r.text.toString()+(null!=n.text?n.text.toString():"")):r.index>n.index&&r.index<=n.lastIndex&&(t[r.instructionIndex]=void 0);let o=this.getKindOfOps(t,h,r);for(let r of o){if(r.index>=n.index&&r.lastIndex<=n.lastIndex){t[r.instructionIndex]=void 0;continue}let e=r.lastIndex<n.index||r.index>n.lastIndex;if(null!=r.text||null!=n.text||e){if(!e)throw new Error(`replace op boundaries of ${n} overlap with previous ${r}`)}else t[r.instructionIndex]=void 0,n.index=Math.min(r.index,n.index),n.lastIndex=Math.max(r.lastIndex,n.lastIndex)}}for(let r=0;r<t.length;r++){let e=t[r];if(null==e)continue;if(!(e instanceof l))continue;let n=e,i=this.getKindOfOps(t,l,r);for(let r of i)r.index===n.index&&(r instanceof c?(n.text=this.catOpText(r.text,n.text),t[r.instructionIndex]=void 0):r instanceof l&&(n.text=this.catOpText(n.text,r.text),t[r.instructionIndex]=void 0));let o=this.getKindOfOps(t,h,r);for(let s of o)if(n.index!==s.index){if(n.index>=s.index&&n.index<=s.lastIndex)throw new Error(`insert op ${n} within boundaries of previous ${s}`)}else s.text=this.catOpText(n.text,s.text),t[r]=void 0}let e=new Map;for(let r of t)if(null!=r){if(null!=e.get(r.index))throw new Error("should only be one op per index");e.set(r.index,r)}return e}catOpText(t,e){let r="",n="";return null!=t&&(r=t.toString()),null!=e&&(n=e.toString()),r+n}getKindOfOps(t,e,r){let n=[];for(let i=0;i<r&&i<t.length;i++){let r=t[i];null!=r&&r instanceof e&&n.push(r)}return n}}a.DEFAULT_PROGRAM_NAME="default",a.PROGRAM_INIT_SIZE=100,a.MIN_TOKEN_INDEX=0,r.TokenStreamRewriter=a;class u{constructor(t,e,r){this.tokens=t,this.index=e,this.text=void 0===r?"":r}execute(t){return this.index}toString(){let t=this.constructor.name,e=t.indexOf("$");return"<"+(t=t.substring(e+1,t.length))+"@"+this.tokens.get(this.index)+':"'+this.text+'">'}}n([o.Override],u.prototype,"toString",null),r.RewriteOperation=u;class l extends u{constructor(t,e,r){super(t,e,r)}execute(t){return t.push(this.text.toString()),this.tokens.get(this.index).type!==s.Token.EOF&&t.push(String(this.tokens.get(this.index).text)),this.index+1}}n([o.Override],l.prototype,"execute",null);class c extends l{constructor(t,e,r){super(t,e+1,r)}}class h extends u{constructor(t,e,r,n){super(t,e,n),this.lastIndex=r}execute(t){return null!=this.text&&t.push(this.text.toString()),this.lastIndex+1}toString(){return null==this.text?"<DeleteOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+">":"<ReplaceOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+':"'+this.text+'">'}}n([o.Override],h.prototype,"execute",null),n([o.Override],h.prototype,"toString",null)},{252:252,276:276,358:358}],349:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(350);class i{constructor(t){this.keyComparator=t}hashCode(t){return this.keyComparator.hashCode(t.key)}equals(t,e){return this.keyComparator.equals(t.key,e.key)}}class o{constructor(t){this.backingStore=t instanceof o?new n.Array2DHashSet(t.backingStore):new n.Array2DHashSet(new i(t))}clear(){this.backingStore.clear()}containsKey(t){return this.backingStore.contains({key:t})}get(t){let e=this.backingStore.get({key:t});if(e)return e.value}get isEmpty(){return this.backingStore.isEmpty}put(t,e){let r,n=this.backingStore.get({key:t,value:e});return n?(r=n.value,n.value=e):this.backingStore.add({key:t,value:e}),r}putIfAbsent(t,e){let r,n=this.backingStore.get({key:t,value:e});return n?r=n.value:this.backingStore.add({key:t,value:e}),r}get size(){return this.backingStore.size}hashCode(){return this.backingStore.hashCode()}equals(t){return t instanceof o&&this.backingStore.equals(t.backingStore)}}r.Array2DHashMap=o},{350:350}],344:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(350),s=t(281),a=t(345),u=t(346),l=t(347),c=t(252),h=t(362),p=t(338),d=t(278);let f=class{constructor(t,e=0){if(this.states=new o.Array2DHashSet(h.ObjectEqualityComparator.INSTANCE),this.nextStateNumber=0,!t.atn)throw new Error("The ATNState must be associated with an ATN");this.atnStartState=t,this.atn=t.atn,this.decision=e;let r=!1;t instanceof p.StarLoopEntryState&&t.precedenceRuleDecision&&(r=!0,this.s0=new u.DFAState(new s.ATNConfigSet),this.s0full=new u.DFAState(new s.ATNConfigSet)),this.precedenceDfa=r}get isPrecedenceDfa(){return this.precedenceDfa}getPrecedenceStartState(t,e){if(!this.isPrecedenceDfa)throw new Error("Only precedence DFAs may contain a precedence start state.");return e?this.s0full.getTarget(t):this.s0.getTarget(t)}setPrecedenceStartState(t,e,r){if(!this.isPrecedenceDfa)throw new Error("Only precedence DFAs may contain a precedence start state.");t<0||(e?this.s0full.setTarget(t,r):this.s0.setTarget(t,r))}get isEmpty(){return this.isPrecedenceDfa?0===this.s0.getEdgeMap().size&&0===this.s0full.getEdgeMap().size:null==this.s0&&null==this.s0full}get isContextSensitive(){return this.isPrecedenceDfa?this.s0full.getEdgeMap().size>0:null!=this.s0full}addState(t){return t.stateNumber=this.nextStateNumber++,this.states.getOrAdd(t)}toString(t,e){if(t||(t=d.VocabularyImpl.EMPTY_VOCABULARY),!this.s0)return"";let r;return(r=e?new a.DFASerializer(this,t,e,this.atnStartState.atn):new a.DFASerializer(this,t)).toString()}toLexerString(){return this.s0?new l.LexerDFASerializer(this).toString():""}};n([c.NotNull],f.prototype,"states",void 0),n([c.NotNull],f.prototype,"atnStartState",void 0),n([c.NotNull],f.prototype,"atn",void 0),f=n([i(0,c.NotNull)],f),r.DFA=f},{252:252,278:278,281:281,338:338,345:345,346:346,347:347,350:350,362:362}],302:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(292);class s extends o.BasicState{get stateType(){return i.ATNStateType.INVALID_TYPE}}n([t(252).Override],s.prototype,"stateType",null),r.InvalidState=s},{252:252,286:286,292:292}],362:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252);class o{hashCode(t){return null==t?0:t.hashCode()}equals(t,e){return null==t?null==e:t.equals(e)}}o.INSTANCE=new o,n([i.Override],o.prototype,"hashCode",null),n([i.Override],o.prototype,"equals",null),r.ObjectEqualityComparator=o},{252:252}],303:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(287),s=t(350),a=t(280),u=t(353),l=t(359),c=t(252),h=t(317),p=t(362),d=t(326),f=t(332),y=t(333),m=t(276),g=t(342);let v=class t{constructor(t){this.atn=t}getDecisionLookahead(e){if(null==e)return;let r=new Array(e.numberOfTransitions);for(let n=0;n<e.numberOfTransitions;n++){let i=new l.IntervalSet;r[n]=i;let o=new s.Array2DHashSet(p.ObjectEqualityComparator.INSTANCE),a=!1;this._LOOK(e.transition(n).target,void 0,d.PredictionContext.EMPTY_LOCAL,i,o,new u.BitSet,a,!1),(0===i.size||i.contains(t.HIT_PRED))&&(i=void 0,r[n]=i)}return r}LOOK(t,e,r){if(void 0===r){if(null==t.atn)throw new Error("Illegal state");r=t.atn.ruleToStopState[t.ruleIndex]}else null===r&&(r=void 0);let n=new l.IntervalSet;return this._LOOK(t,r,e,n,new s.Array2DHashSet,new u.BitSet,!0,!0),n}_LOOK(e,r,n,i,s,u,c,p){let v=a.ATNConfig.create(e,0,n);if(!s.add(v))return;if(e===r){if(d.PredictionContext.isEmptyLocal(n))return void i.add(m.Token.EPSILON);if(n.isEmpty)return void(p&&i.add(m.Token.EOF))}if(e instanceof f.RuleStopState){if(n.isEmpty&&!d.PredictionContext.isEmptyLocal(n))return void(p&&i.add(m.Token.EOF));let t=u.get(e.ruleIndex);try{u.clear(e.ruleIndex);for(let t=0;t<n.size;t++){if(n.getReturnState(t)===d.PredictionContext.EMPTY_FULL_STATE_KEY)continue;let e=this.atn.states[n.getReturnState(t)];this._LOOK(e,r,n.getParent(t),i,s,u,c,p)}}finally{t&&u.set(e.ruleIndex)}}let T=e.numberOfTransitions;for(let a=0;a<T;a++){let d=e.transition(a);if(d instanceof y.RuleTransition){if(u.get(d.ruleIndex))continue;let t=n.getChild(d.followState.stateNumber);try{u.set(d.ruleIndex),this._LOOK(d.target,r,t,i,s,u,c,p)}finally{u.clear(d.ruleIndex)}}else if(d instanceof o.AbstractPredicateTransition)c?this._LOOK(d.target,r,n,i,s,u,c,p):i.add(t.HIT_PRED);else if(d.isEpsilon)this._LOOK(d.target,r,n,i,s,u,c,p);else if(d instanceof g.WildcardTransition)i.addAll(l.IntervalSet.of(m.Token.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType));else{let t=d.label;null!=t&&(d instanceof h.NotSetTransition&&(t=t.complement(l.IntervalSet.of(m.Token.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType))),i.addAll(t))}}}};v.HIT_PRED=m.Token.INVALID_TYPE,n([c.NotNull],v.prototype,"atn",void 0),n([c.NotNull,i(0,c.NotNull),i(1,c.NotNull)],v.prototype,"LOOK",null),n([i(0,c.NotNull),i(2,c.NotNull),i(3,c.NotNull),i(4,c.NotNull),i(5,c.NotNull)],v.prototype,"_LOOK",null),v=n([i(0,c.NotNull)],v),r.LL1Analyzer=v},{252:252,276:276,280:280,287:287,317:317,326:326,332:332,333:333,342:342,350:350,353:353,359:359,362:362}],280:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(349),s=t(299),a=t(361),u=t(252),l=t(362),c=t(326),h=t(334);let p=class t{constructor(t,e,r){"number"==typeof e?(this._state=t,this.altAndOuterContextDepth=e,this._context=r):(this._state=t,this.altAndOuterContextDepth=e.altAndOuterContextDepth,this._context=r)}static create(e,r,n,i=h.SemanticContext.NONE,o){return i!==h.SemanticContext.NONE?null!=o?new y(o,i,e,r,n,!1):new d(i,e,r,n):null!=o?new f(o,e,r,n,!1):new t(e,r,n)}get state(){return this._state}get alt(){return 16777215&this.altAndOuterContextDepth}get context(){return this._context}set context(t){this._context=t}get reachesIntoOuterContext(){return 0!==this.outerContextDepth}get outerContextDepth(){return this.altAndOuterContextDepth>>>24&127}set outerContextDepth(t){t=Math.min(t,127),this.altAndOuterContextDepth=t<<24|(-2130706433&this.altAndOuterContextDepth)>>>0}get lexerActionExecutor(){}get semanticContext(){return h.SemanticContext.NONE}get hasPassedThroughNonGreedyDecision(){return!1}clone(){return this.transform(this.state,!1)}transform(t,e,r){return null==r?this.transformImpl(t,this._context,this.semanticContext,e,this.lexerActionExecutor):r instanceof c.PredictionContext?this.transformImpl(t,r,this.semanticContext,e,this.lexerActionExecutor):r instanceof h.SemanticContext?this.transformImpl(t,this._context,r,e,this.lexerActionExecutor):this.transformImpl(t,this._context,this.semanticContext,e,r)}transformImpl(e,r,n,i,o){let s=i&&t.checkNonGreedyDecision(this,e);return n!==h.SemanticContext.NONE?null!=o||s?new y(o,n,e,this,r,s):new d(n,e,this,r):null!=o||s?new f(o,e,this,r,s):new t(e,this,r)}static checkNonGreedyDecision(t,e){return t.hasPassedThroughNonGreedyDecision||e instanceof s.DecisionState&&e.nonGreedy}appendContext(t,e){if("number"==typeof t){let r=this.context.appendSingleContext(t,e);return this.transform(this.state,!1,r)}{let r=this.context.appendContext(t,e);return this.transform(this.state,!1,r)}}contains(t){if(this.state.stateNumber!==t.state.stateNumber||this.alt!==t.alt||!this.semanticContext.equals(t.semanticContext))return!1;let e=[],r=[];for(e.push(this.context),r.push(t.context);;){let t=e.pop(),n=r.pop();if(!t||!n)break;if(t===n)return!0;if(t.size<n.size)return!1;if(n.isEmpty)return t.hasEmpty;for(let i=0;i<n.size;i++){let o=t.findReturnState(n.getReturnState(i));if(o<0)return!1;e.push(t.getParent(o)),r.push(n.getParent(i))}}return!1}get isPrecedenceFilterSuppressed(){return 0!=(2147483648&this.altAndOuterContextDepth)}set isPrecedenceFilterSuppressed(t){t?this.altAndOuterContextDepth|=2147483648:this.altAndOuterContextDepth&=2147483647}equals(e){return this===e||e instanceof t&&this.state.stateNumber===e.state.stateNumber&&this.alt===e.alt&&this.reachesIntoOuterContext===e.reachesIntoOuterContext&&this.context.equals(e.context)&&this.semanticContext.equals(e.semanticContext)&&this.isPrecedenceFilterSuppressed===e.isPrecedenceFilterSuppressed&&this.hasPassedThroughNonGreedyDecision===e.hasPassedThroughNonGreedyDecision&&l.ObjectEqualityComparator.INSTANCE.equals(this.lexerActionExecutor,e.lexerActionExecutor)}hashCode(){let t=a.MurmurHash.initialize(7);return t=a.MurmurHash.update(t,this.state.stateNumber),t=a.MurmurHash.update(t,this.alt),t=a.MurmurHash.update(t,this.reachesIntoOuterContext?1:0),t=a.MurmurHash.update(t,this.context),t=a.MurmurHash.update(t,this.semanticContext),t=a.MurmurHash.update(t,this.hasPassedThroughNonGreedyDecision?1:0),t=a.MurmurHash.update(t,this.lexerActionExecutor),a.MurmurHash.finish(t,7)}toDotString(){let t="";t+="digraph G {\n",t+="rankdir=LR;\n";let e=new o.Array2DHashMap(c.PredictionContext.IdentityEqualityComparator.INSTANCE),r=[];function n(t){let n=e.size,i=e.putIfAbsent(t,n);return null!=i?i:(r.push(t),n)}for(r.push(this.context),e.put(this.context,0);;){let e=r.pop();if(!e)break;for(let r=0;r<e.size;r++)t+="  s"+n(e),t+="->",t+="s"+n(e.getParent(r)),t+='[label="'+e.getReturnState(r)+'"];\n'}return(t+="}\n").toString()}toString(t,e,r){null==r&&(r=null!=e),null==e&&(e=!0);let n,i="";n=r?this.context.toStrings(t,this.state.stateNumber):["?"];let o=!0;for(let s of n)o?o=!1:i+=", ",i+="(",i+=this.state,e&&(i+=",",i+=this.alt),this.context&&(i+=",",i+=s),this.semanticContext!==h.SemanticContext.NONE&&(i+=",",i+=this.semanticContext),this.reachesIntoOuterContext&&(i+=",up="+this.outerContextDepth),i+=")";return i.toString()}};n([u.NotNull],p.prototype,"_state",void 0),n([u.NotNull],p.prototype,"_context",void 0),n([u.NotNull],p.prototype,"state",null),n([u.NotNull,i(0,u.NotNull)],p.prototype,"context",null),n([u.NotNull],p.prototype,"semanticContext",null),n([u.Override],p.prototype,"clone",null),n([i(0,u.NotNull),i(2,u.NotNull)],p.prototype,"transformImpl",null),n([u.Override],p.prototype,"equals",null),n([u.Override],p.prototype,"hashCode",null),n([i(0,u.NotNull),i(3,u.NotNull)],p,"create",null),p=n([i(0,u.NotNull),i(2,u.NotNull)],p),r.ATNConfig=p;let d=class extends p{constructor(t,e,r,n){super(e,r,n),this._semanticContext=t}get semanticContext(){return this._semanticContext}};n([u.NotNull],d.prototype,"_semanticContext",void 0),n([u.Override],d.prototype,"semanticContext",null),d=n([i(1,u.NotNull),i(2,u.NotNull)],d);let f=class extends p{constructor(t,e,r,n,i){if("number"==typeof r)super(e,r,n);else if(super(e,r,n),r.semanticContext!==h.SemanticContext.NONE)throw new Error("Not supported");this._lexerActionExecutor=t,this.passedThroughNonGreedyDecision=i}get lexerActionExecutor(){return this._lexerActionExecutor}get hasPassedThroughNonGreedyDecision(){return this.passedThroughNonGreedyDecision}};n([u.Override],f.prototype,"lexerActionExecutor",null),n([u.Override],f.prototype,"hasPassedThroughNonGreedyDecision",null),f=n([i(1,u.NotNull),i(2,u.NotNull)],f);let y=class extends d{constructor(t,e,r,n,i,o){super(e,r,n,i),this._lexerActionExecutor=t,this.passedThroughNonGreedyDecision=o}get lexerActionExecutor(){return this._lexerActionExecutor}get hasPassedThroughNonGreedyDecision(){return this.passedThroughNonGreedyDecision}};n([u.Override],y.prototype,"lexerActionExecutor",null),n([u.Override],y.prototype,"hasPassedThroughNonGreedyDecision",null),y=n([i(1,u.NotNull),i(2,u.NotNull)],y)},{252:252,299:299,326:326,334:334,349:349,361:361,362:362}],299:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(285);r.DecisionState=class extends n.ATNState{constructor(){super(...arguments),this.decision=-1,this.nonGreedy=!1,this.sll=!1}}},{285:285}],361:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),function(t){function e(t=0){return t}function r(t,e){null==e?e=0:"string"==typeof e?e=function(t){let e=t.length;if(0===e)return 0;let r=0;for(let n=0;n<e;n++){r=(r<<5>>>0)-r+t.charCodeAt(n),r|=0}return r}(e):"object"==typeof e&&(e=e.hashCode());let r=e;return r=(r=Math.imul(r,3432918353))<<15|r>>>17,t=(t^=r=Math.imul(r,461845907))<<13|t>>>19,4294967295&Math.imul(t,5)+3864292196}function n(t,e){return t^=4*e,t^=t>>>16,t=Math.imul(t,2246822507),t^=t>>>13,(t=Math.imul(t,3266489909))^t>>>16}t.initialize=e,t.update=r,t.finish=n,t.hashCode=function(t,i=0){let o=e(i),s=0;for(let e of t)o=r(o,e),s++;return n(o,s)}}(r.MurmurHash||(r.MurmurHash={}))},{}],334:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(350),s=t(351),a=t(361),u=t(252),l=t(362),c=t(365);class h{static get NONE(){return void 0===h._NONE&&(h._NONE=new h.Predicate),h._NONE}evalPrecedence(t,e){return this}static and(t,e){if(!t||t===h.NONE)return e;if(e===h.NONE)return t;let r=new h.AND(t,e);return 1===r.opnds.length?r.opnds[0]:r}static or(t,e){if(!t)return e;if(t===h.NONE||e===h.NONE)return h.NONE;let r=new h.OR(t,e);return 1===r.opnds.length?r.opnds[0]:r}}r.SemanticContext=h,function(t){function e(e){let r=[];for(let n=0;n<e.length;n++){let i=e[n];i instanceof t.PrecedencePredicate&&(r.push(i),e.splice(n,1),n--)}return r}class r extends t{constructor(t=-1,e=-1,r=!1){super(),this.ruleIndex=t,this.predIndex=e,this.isCtxDependent=r}eval(t,e){let r=this.isCtxDependent?e:void 0;return t.sempred(r,this.ruleIndex,this.predIndex)}hashCode(){let t=a.MurmurHash.initialize();return t=a.MurmurHash.update(t,this.ruleIndex),t=a.MurmurHash.update(t,this.predIndex),t=a.MurmurHash.update(t,this.isCtxDependent?1:0),a.MurmurHash.finish(t,3)}equals(t){return t instanceof r&&(this===t||this.ruleIndex===t.ruleIndex&&this.predIndex===t.predIndex&&this.isCtxDependent===t.isCtxDependent)}toString(){return"{"+this.ruleIndex+":"+this.predIndex+"}?"}}n([u.Override],r.prototype,"eval",null),n([u.Override],r.prototype,"hashCode",null),n([u.Override],r.prototype,"equals",null),n([u.Override],r.prototype,"toString",null),t.Predicate=r;class h extends t{constructor(t){super(),this.precedence=t}eval(t,e){return t.precpred(e,this.precedence)}evalPrecedence(e,r){return e.precpred(r,this.precedence)?t.NONE:void 0}compareTo(t){return this.precedence-t.precedence}hashCode(){let t=1;return 31*t+this.precedence}equals(t){return t instanceof h&&(this===t||this.precedence===t.precedence)}toString(){return"{"+this.precedence+">=prec}?"}}n([u.Override],h.prototype,"eval",null),n([u.Override],h.prototype,"evalPrecedence",null),n([u.Override],h.prototype,"compareTo",null),n([u.Override],h.prototype,"hashCode",null),n([u.Override],h.prototype,"equals",null),n([u.Override],h.prototype,"toString",null),t.PrecedencePredicate=h;class p extends t{}t.Operator=p;let d=class r extends p{constructor(t,n){super();let i=new o.Array2DHashSet(l.ObjectEqualityComparator.INSTANCE);t instanceof r?i.addAll(t.opnds):i.add(t),n instanceof r?i.addAll(n.opnds):i.add(n),this.opnds=i.toArray();let s=function(t){let e;for(let r of t)void 0!==e?e.compareTo(r)>0&&(e=r):e=r;return e}(e(this.opnds));s&&this.opnds.push(s)}get operands(){return this.opnds}equals(t){return this===t||t instanceof r&&s.ArrayEqualityComparator.INSTANCE.equals(this.opnds,t.opnds)}hashCode(){return a.MurmurHash.hashCode(this.opnds,40363613)}eval(t,e){for(let r of this.opnds)if(!r.eval(t,e))return!1;return!0}evalPrecedence(e,r){let n=!1,i=[];for(let s of this.opnds){let o=s.evalPrecedence(e,r);if(n=n||o!==s,null==o)return;o!==t.NONE&&i.push(o)}if(!n)return this;if(0===i.length)return t.NONE;let o=i[0];for(let s=1;s<i.length;s++)o=t.and(o,i[s]);return o}toString(){return c.join(this.opnds,"&&")}};n([u.Override],d.prototype,"operands",null),n([u.Override],d.prototype,"equals",null),n([u.Override],d.prototype,"hashCode",null),n([u.Override],d.prototype,"eval",null),n([u.Override],d.prototype,"evalPrecedence",null),n([u.Override],d.prototype,"toString",null),d=n([i(0,u.NotNull),i(1,u.NotNull)],d),t.AND=d;let f=class r extends p{constructor(t,n){super();let i=new o.Array2DHashSet(l.ObjectEqualityComparator.INSTANCE);t instanceof r?i.addAll(t.opnds):i.add(t),n instanceof r?i.addAll(n.opnds):i.add(n),this.opnds=i.toArray();let s=function(t){let e;for(let r of t)void 0!==e?e.compareTo(r)<0&&(e=r):e=r;return e}(e(this.opnds));s&&this.opnds.push(s)}get operands(){return this.opnds}equals(t){return this===t||t instanceof r&&s.ArrayEqualityComparator.INSTANCE.equals(this.opnds,t.opnds)}hashCode(){return a.MurmurHash.hashCode(this.opnds,486279973)}eval(t,e){for(let r of this.opnds)if(r.eval(t,e))return!0;return!1}evalPrecedence(e,r){let n=!1,i=[];for(let s of this.opnds){let o=s.evalPrecedence(e,r);if(n=n||o!==s,o===t.NONE)return t.NONE;o&&i.push(o)}if(!n)return this;if(0===i.length)return;let o=i[0];for(let s=1;s<i.length;s++)o=t.or(o,i[s]);return o}toString(){return c.join(this.opnds,"||")}};n([u.Override],f.prototype,"operands",null),n([u.Override],f.prototype,"equals",null),n([u.Override],f.prototype,"hashCode",null),n([u.Override],f.prototype,"eval",null),n([u.Override],f.prototype,"evalPrecedence",null),n([u.Override],f.prototype,"toString",null),f=n([i(0,u.NotNull),i(1,u.NotNull)],f),t.OR=f}(h=r.SemanticContext||(r.SemanticContext={}))},{252:252,350:350,351:351,361:361,362:362,365:365}],281:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(349),o=t(350),s=t(351),a=t(279),u=t(280),l=t(353),c=t(252),h=t(362),p=t(326),d=t(327),f=t(334),y=t(365);class m{hashCode(t){return t.state^t.alt}equals(t,e){return t.state===e.state&&t.alt===e.alt}}function g(t){return t?new i.Array2DHashMap(t):new i.Array2DHashMap(m.INSTANCE)}m.INSTANCE=new m;class v{constructor(t,e){this._uniqueAlt=0,this._hasSemanticContext=!1,this._dipsIntoOuterContext=!1,this.outermostConfigSet=!1,this.cachedHashCode=-1,t?(e?(this.mergedConfigs=void 0,this.unmerged=void 0):t.isReadOnly?(this.mergedConfigs=g(),this.unmerged=[]):(this.mergedConfigs=g(t.mergedConfigs),this.unmerged=t.unmerged.slice(0)),this.configs=t.configs.slice(0),this._dipsIntoOuterContext=t._dipsIntoOuterContext,this._hasSemanticContext=t._hasSemanticContext,this.outermostConfigSet=t.outermostConfigSet,!e&&t.isReadOnly||(this._uniqueAlt=t._uniqueAlt,this._conflictInfo=t._conflictInfo)):(this.mergedConfigs=g(),this.unmerged=[],this.configs=[],this._uniqueAlt=a.ATN.INVALID_ALT_NUMBER)}getRepresentedAlternatives(){if(null!=this._conflictInfo)return this._conflictInfo.conflictedAlts.clone();let t=new l.BitSet;for(let e of this)t.set(e.alt);return t}get isReadOnly(){return null==this.mergedConfigs}get isOutermostConfigSet(){return this.outermostConfigSet}set isOutermostConfigSet(t){if(this.outermostConfigSet&&!t)throw new Error("IllegalStateException");this.outermostConfigSet=t}getStates(){let t=new o.Array2DHashSet(h.ObjectEqualityComparator.INSTANCE);for(let e of this.configs)t.add(e.state);return t}optimizeConfigs(t){if(0!==this.configs.length)for(let e of this.configs)e.context=t.atn.getCachedContext(e.context)}clone(t){let e=new v(this,t);return!t&&this.isReadOnly&&e.addAll(this.configs),e}get size(){return this.configs.length}get isEmpty(){return 0===this.configs.length}contains(t){if(!(t instanceof u.ATNConfig))return!1;if(this.mergedConfigs&&this.unmerged){let e=t,r=this.getKey(e),n=this.mergedConfigs.get(r);if(null!=n&&this.canMerge(e,r,n))return n.contains(e);for(let i of this.unmerged)if(i.contains(t))return!0}else for(let e of this.configs)if(e.contains(t))return!0;return!1}*[Symbol.iterator](){yield*this.configs}toArray(){return this.configs}add(t,e){if(this.ensureWritable(),!this.mergedConfigs||!this.unmerged)throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");let r;null==e&&(e=d.PredictionContextCache.UNCACHED);let n=this.getKey(t),i=this.mergedConfigs.get(n);if(r=null==i,null!=i&&this.canMerge(t,n,i)){i.outerContextDepth=Math.max(i.outerContextDepth,t.outerContextDepth),t.isPrecedenceFilterSuppressed&&(i.isPrecedenceFilterSuppressed=!0);let r=p.PredictionContext.join(i.context,t.context,e);return this.updatePropertiesForMergedConfig(t),i.context!==r&&(i.context=r,!0)}for(let o=0;o<this.unmerged.length;o++){let i=this.unmerged[o];if(this.canMerge(t,n,i)){i.outerContextDepth=Math.max(i.outerContextDepth,t.outerContextDepth),t.isPrecedenceFilterSuppressed&&(i.isPrecedenceFilterSuppressed=!0);let s=p.PredictionContext.join(i.context,t.context,e);return this.updatePropertiesForMergedConfig(t),i.context!==s&&(i.context=s,r&&(this.mergedConfigs.put(n,i),this.unmerged.splice(o,1)),!0)}}return this.configs.push(t),r?this.mergedConfigs.put(n,t):this.unmerged.push(t),this.updatePropertiesForAddedConfig(t),!0}updatePropertiesForMergedConfig(t){this._dipsIntoOuterContext=this._dipsIntoOuterContext||t.reachesIntoOuterContext}updatePropertiesForAddedConfig(t){1===this.configs.length?this._uniqueAlt=t.alt:this._uniqueAlt!==t.alt&&(this._uniqueAlt=a.ATN.INVALID_ALT_NUMBER),this._hasSemanticContext=this._hasSemanticContext||!f.SemanticContext.NONE.equals(t.semanticContext),this._dipsIntoOuterContext=this._dipsIntoOuterContext||t.reachesIntoOuterContext}canMerge(t,e,r){return t.state.stateNumber===r.state.stateNumber&&e.alt===r.alt&&t.semanticContext.equals(r.semanticContext)}getKey(t){return{state:t.state.stateNumber,alt:t.alt}}containsAll(t){for(let e of t){if(!(e instanceof u.ATNConfig))return!1;if(!this.contains(e))return!1}return!0}addAll(t,e){this.ensureWritable();let r=!1;for(let n of t)this.add(n,e)&&(r=!0);return r}clear(){if(this.ensureWritable(),!this.mergedConfigs||!this.unmerged)throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");this.mergedConfigs.clear(),this.unmerged.length=0,this.configs.length=0,this._dipsIntoOuterContext=!1,this._hasSemanticContext=!1,this._uniqueAlt=a.ATN.INVALID_ALT_NUMBER,this._conflictInfo=void 0}equals(t){return this===t||t instanceof v&&this.outermostConfigSet===t.outermostConfigSet&&y.equals(this._conflictInfo,t._conflictInfo)&&s.ArrayEqualityComparator.INSTANCE.equals(this.configs,t.configs)}hashCode(){if(this.isReadOnly&&-1!==this.cachedHashCode)return this.cachedHashCode;let t=1;return t=5*(t=5*t^(this.outermostConfigSet?1:0))^s.ArrayEqualityComparator.INSTANCE.hashCode(this.configs),this.isReadOnly&&(this.cachedHashCode=t),t}toString(t){null==t&&(t=!1);let e="",r=this.configs.slice(0);r.sort((t,e)=>t.alt!==e.alt?t.alt-e.alt:t.state.stateNumber!==e.state.stateNumber?t.state.stateNumber-e.state.stateNumber:t.semanticContext.toString().localeCompare(e.semanticContext.toString())),e+="[";for(let n=0;n<r.length;n++)n>0&&(e+=", "),e+=r[n].toString(void 0,!0,t);return e+="]",this._hasSemanticContext&&(e+=",hasSemanticContext="+this._hasSemanticContext),this._uniqueAlt!==a.ATN.INVALID_ALT_NUMBER&&(e+=",uniqueAlt="+this._uniqueAlt),null!=this._conflictInfo&&(e+=",conflictingAlts="+this._conflictInfo.conflictedAlts,this._conflictInfo.isExact||(e+="*")),this._dipsIntoOuterContext&&(e+=",dipsIntoOuterContext"),e.toString()}get uniqueAlt(){return this._uniqueAlt}get hasSemanticContext(){return this._hasSemanticContext}set hasSemanticContext(t){this.ensureWritable(),this._hasSemanticContext=t}get conflictInfo(){return this._conflictInfo}set conflictInfo(t){this.ensureWritable(),this._conflictInfo=t}get conflictingAlts(){if(null!=this._conflictInfo)return this._conflictInfo.conflictedAlts}get isExactConflict(){return null!=this._conflictInfo&&this._conflictInfo.isExact}get dipsIntoOuterContext(){return this._dipsIntoOuterContext}get(t){return this.configs[t]}ensureWritable(){if(this.isReadOnly)throw new Error("This ATNConfigSet is read only.")}}n([c.NotNull],v.prototype,"getRepresentedAlternatives",null),n([c.Override],v.prototype,"size",null),n([c.Override],v.prototype,"isEmpty",null),n([c.Override],v.prototype,"contains",null),n([c.Override],v.prototype,Symbol.iterator,null),n([c.Override],v.prototype,"toArray",null),n([c.Override],v.prototype,"containsAll",null),n([c.Override],v.prototype,"clear",null),n([c.Override],v.prototype,"equals",null),n([c.Override],v.prototype,"hashCode",null),r.ATNConfigSet=v},{252:252,279:279,280:280,326:326,327:327,334:334,349:349,350:350,351:351,353:353,362:362,365:365}],350:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(355),s=t(252),a=t(361);class u{constructor(t,e=16){if(this.n=0,this.threshold=Math.floor(12),t instanceof u){this.comparator=t.comparator,this.buckets=t.buckets.slice(0);for(let t=0;t<this.buckets.length;t++){let e=this.buckets[t];e&&(this.buckets[t]=e.slice(0))}this.n=t.n,this.threshold=t.threshold}else this.comparator=t||o.DefaultEqualityComparator.INSTANCE,this.buckets=this.createBuckets(e)}getOrAdd(t){return this.n>this.threshold&&this.expand(),this.getOrAddImpl(t)}getOrAddImpl(t){let e=this.getBucket(t),r=this.buckets[e];if(!r)return r=[t],this.buckets[e]=r,this.n++,t;for(let n of r)if(this.comparator.equals(n,t))return n;return r.push(t),this.n++,t}get(t){if(null==t)return t;let e=this.getBucket(t),r=this.buckets[e];if(r)for(let n of r)if(this.comparator.equals(n,t))return n}getBucket(t){return this.comparator.hashCode(t)&this.buckets.length-1}hashCode(){let t=a.MurmurHash.initialize();for(let e of this.buckets)if(null!=e)for(let r of e){if(null==r)break;t=a.MurmurHash.update(t,this.comparator.hashCode(r))}return a.MurmurHash.finish(t,this.size)}equals(t){return t===this||t instanceof u&&(t.size===this.size&&this.containsAll(t))}expand(){let t=this.buckets,e=2*this.buckets.length,r=this.createBuckets(e);this.buckets=r,this.threshold=Math.floor(.75*e),this.size;for(let n of t)if(n)for(let t of n){let e=this.getBucket(t),r=this.buckets[e];r||(r=[],this.buckets[e]=r),r.push(t)}}add(t){return this.getOrAdd(t)===t}get size(){return this.n}get isEmpty(){return 0===this.n}contains(t){return this.containsFast(this.asElementType(t))}containsFast(t){return null!=t&&null!=this.get(t)}*[Symbol.iterator](){yield*this.toArray()}toArray(){const t=new Array(this.size);let e=0;for(let r of this.buckets)if(null!=r)for(let n of r){if(null==n)break;t[e++]=n}return t}containsAll(t){if(t instanceof u){let e=t;for(let t of e.buckets)if(null!=t)for(let e of t){if(null==e)break;if(!this.containsFast(this.asElementType(e)))return!1}}else for(let e of t)if(!this.containsFast(this.asElementType(e)))return!1;return!0}addAll(t){let e=!1;for(let r of t)this.getOrAdd(r)!==r&&(e=!0);return e}clear(){this.buckets=this.createBuckets(16),this.n=0,this.threshold=Math.floor(12)}toString(){if(0===this.size)return"{}";let t="{",e=!0;for(let r of this.buckets)if(null!=r)for(let n of r){if(null==n)break;e?e=!1:t+=", ",t+=n.toString()}return t+"}"}toTableString(){let t="";for(let e of this.buckets){if(null==e){t+="null\n";continue}t+="[";let r=!0;for(let n of e)r?r=!1:t+=" ",t+=null==n?"_":n.toString();t+="]\n"}return t}asElementType(t){return t}createBuckets(t){return new Array(t)}}n([s.NotNull],u.prototype,"comparator",void 0),n([s.Override],u.prototype,"hashCode",null),n([s.Override],u.prototype,"equals",null),n([s.Override],u.prototype,"add",null),n([s.Override],u.prototype,"size",null),n([s.Override],u.prototype,"isEmpty",null),n([s.Override],u.prototype,"contains",null),n([i(0,s.Nullable)],u.prototype,"containsFast",null),n([s.Override],u.prototype,Symbol.iterator,null),n([s.Override],u.prototype,"toArray",null),n([s.Override],u.prototype,"containsAll",null),n([s.Override],u.prototype,"addAll",null),n([s.Override],u.prototype,"clear",null),n([s.Override],u.prototype,"toString",null),n([s.SuppressWarnings("unchecked")],u.prototype,"asElementType",null),n([s.SuppressWarnings("unchecked")],u.prototype,"createBuckets",null),r.Array2DHashSet=u},{252:252,355:355,361:361}],351:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(361),s=t(362);class a{hashCode(t){return null==t?0:o.MurmurHash.hashCode(t,0)}equals(t,e){if(null==t)return null==e;if(null==e)return!1;if(t.length!==e.length)return!1;for(let r=0;r<t.length;r++)if(!s.ObjectEqualityComparator.INSTANCE.equals(t[r],e[r]))return!1;return!0}}a.INSTANCE=new a,n([i.Override],a.prototype,"hashCode",null),n([i.Override],a.prototype,"equals",null),r.ArrayEqualityComparator=a},{252:252,361:361,362:362}],327:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(349),o=t(252),s=t(362),a=t(326);class u{constructor(t=!0){this.contexts=new i.Array2DHashMap(s.ObjectEqualityComparator.INSTANCE),this.childContexts=new i.Array2DHashMap(s.ObjectEqualityComparator.INSTANCE),this.joinContexts=new i.Array2DHashMap(s.ObjectEqualityComparator.INSTANCE),this.enableCache=t}getAsCached(t){if(!this.enableCache)return t;let e=this.contexts.get(t);return e||(e=t,this.contexts.put(t,t)),e}getChild(t,e){if(!this.enableCache)return t.getChild(e);let r=new u.PredictionContextAndInt(t,e),n=this.childContexts.get(r);return n||(n=t.getChild(e),n=this.getAsCached(n),this.childContexts.put(r,n)),n}join(t,e){if(!this.enableCache)return a.PredictionContext.join(t,e,this);let r=new u.IdentityCommutativePredictionContextOperands(t,e),n=this.joinContexts.get(r);return n||(n=a.PredictionContext.join(t,e,this),n=this.getAsCached(n),this.joinContexts.put(r,n),n)}}u.UNCACHED=new u(!1),r.PredictionContextCache=u,function(t){class e{constructor(t,e){this.obj=t,this.value=e}equals(t){if(!(t instanceof e))return!1;if(t===this)return!0;let r=t;return this.value===r.value&&(this.obj===r.obj||null!=this.obj&&this.obj.equals(r.obj))}hashCode(){let t=5;return 7*(t=7*t+(null!=this.obj?this.obj.hashCode():0))+this.value}}n([o.Override],e.prototype,"equals",null),n([o.Override],e.prototype,"hashCode",null),t.PredictionContextAndInt=e;class r{constructor(t,e){this._x=t,this._y=e}get x(){return this._x}get y(){return this._y}equals(t){if(!(t instanceof r))return!1;if(this===t)return!0;let e=t;return this._x===e._x&&this._y===e._y||this._x===e._y&&this._y===e._x}hashCode(){return this._x.hashCode()^this._y.hashCode()}}n([o.Override],r.prototype,"equals",null),n([o.Override],r.prototype,"hashCode",null),t.IdentityCommutativePredictionContextOperands=r}(u=r.PredictionContextCache||(r.PredictionContextCache={}))},{252:252,326:326,349:349,362:362}],291:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(294);class s extends o.BlockStartState{get stateType(){return i.ATNStateType.BLOCK_START}}n([t(252).Override],s.prototype,"stateType",null),r.BasicBlockStartState=s},{252:252,286:286,294:294}],292:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{get stateType(){return o.ATNStateType.BASIC}}n([t(252).Override],s.prototype,"stateType",null),r.BasicState=s},{252:252,285:285,286:286}],293:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{get stateType(){return o.ATNStateType.BLOCK_END}}n([t(252).Override],s.prototype,"stateType",null),r.BlockEndState=s},{252:252,285:285,286:286}],294:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(299);r.BlockStartState=class extends n.DecisionState{}},{299:299}],300:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(341);let a=class extends s.Transition{constructor(t,e=-1){super(t),this._outermostPrecedenceReturn=e}get outermostPrecedenceReturn(){return this._outermostPrecedenceReturn}get serializationType(){return 1}get isEpsilon(){return!0}matches(t,e,r){return!1}toString(){return"epsilon"}};n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"isEpsilon",null),n([o.Override],a.prototype,"matches",null),n([o.Override,o.NotNull],a.prototype,"toString",null),a=n([i(0,o.NotNull)],a),r.EpsilonTransition=a},{252:252,341:341}],306:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t){this._channel=t}get channel(){return this._channel}get actionType(){return 0}get isPositionDependent(){return!1}execute(t){t.channel=this._channel}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._channel),o.MurmurHash.finish(t,2)}equals(t){return t===this||t instanceof a&&this._channel===t._channel}toString(){return`channel(${this._channel})`}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerChannelAction=a},{252:252,361:361}],307:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t,e){this._ruleIndex=t,this._actionIndex=e}get ruleIndex(){return this._ruleIndex}get actionIndex(){return this._actionIndex}get actionType(){return 1}get isPositionDependent(){return!0}execute(t){t.action(void 0,this._ruleIndex,this._actionIndex)}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._ruleIndex),t=o.MurmurHash.update(t,this._actionIndex),o.MurmurHash.finish(t,3)}equals(t){return t===this||t instanceof a&&this._ruleIndex===t._ruleIndex&&this._actionIndex===t._actionIndex}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),r.LexerCustomAction=a},{252:252,361:361}],309:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t){this._mode=t}get mode(){return this._mode}get actionType(){return 2}get isPositionDependent(){return!1}execute(t){t.mode(this._mode)}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._mode),o.MurmurHash.finish(t,2)}equals(t){return t===this||t instanceof a&&this._mode===t._mode}toString(){return`mode(${this._mode})`}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerModeAction=a},{252:252,361:361}],310:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(){}get actionType(){return 3}get isPositionDependent(){return!1}execute(t){t.more()}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),o.MurmurHash.finish(t,1)}equals(t){return t===this}toString(){return"more"}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerMoreAction=a,function(t){t.INSTANCE=new t}(a=r.LexerMoreAction||(r.LexerMoreAction={}))},{252:252,361:361}],311:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(){}get actionType(){return 4}get isPositionDependent(){return!1}execute(t){t.popMode()}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),o.MurmurHash.finish(t,1)}equals(t){return t===this}toString(){return"popMode"}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerPopModeAction=a,function(t){t.INSTANCE=new t}(a=r.LexerPopModeAction||(r.LexerPopModeAction={}))},{252:252,361:361}],312:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t){this._mode=t}get mode(){return this._mode}get actionType(){return 5}get isPositionDependent(){return!1}execute(t){t.pushMode(this._mode)}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._mode),o.MurmurHash.finish(t,2)}equals(t){return t===this||t instanceof a&&this._mode===t._mode}toString(){return`pushMode(${this._mode})`}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerPushModeAction=a},{252:252,361:361}],313:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(){}get actionType(){return 6}get isPositionDependent(){return!1}execute(t){t.skip()}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),o.MurmurHash.finish(t,1)}equals(t){return t===this}toString(){return"skip"}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerSkipAction=a,function(t){t.INSTANCE=new t}(a=r.LexerSkipAction||(r.LexerSkipAction={}))},{252:252,361:361}],314:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);class a{constructor(t){this._type=t}get type(){return this._type}get actionType(){return 7}get isPositionDependent(){return!1}execute(t){t.type=this._type}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this.actionType),t=o.MurmurHash.update(t,this._type),o.MurmurHash.finish(t,2)}equals(t){return t===this||t instanceof a&&this._type===t._type}toString(){return`type(${this._type})`}}n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override,i(0,s.NotNull)],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),n([s.Override],a.prototype,"toString",null),r.LexerTypeAction=a},{252:252,361:361}],317:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(335);let a=class extends s.SetTransition{constructor(t,e){super(t,e)}get serializationType(){return 8}matches(t,e,r){return t>=e&&t<=r&&!super.matches(t,e,r)}toString(){return"~"+super.toString()}};n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"matches",null),n([o.Override],a.prototype,"toString",null),a=n([i(0,o.NotNull),i(1,o.Nullable)],a),r.NotSetTransition=a},{252:252,335:335}],321:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(294);class s extends o.BlockStartState{get stateType(){return i.ATNStateType.PLUS_BLOCK_START}}n([t(252).Override],s.prototype,"stateType",null),r.PlusBlockStartState=s},{252:252,286:286,294:294}],322:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(299);class s extends o.DecisionState{get stateType(){return i.ATNStateType.PLUS_LOOP_BACK}}n([t(252).Override],s.prototype,"stateType",null),r.PlusLoopbackState=s},{252:252,286:286,299:299}],323:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(287),s=t(252),a=t(334);let u=class extends o.AbstractPredicateTransition{constructor(t,e){super(t),this.precedence=e}get serializationType(){return 10}get isEpsilon(){return!0}matches(t,e,r){return!1}get predicate(){return new a.SemanticContext.PrecedencePredicate(this.precedence)}toString(){return this.precedence+" >= _p"}};n([s.Override],u.prototype,"serializationType",null),n([s.Override],u.prototype,"isEpsilon",null),n([s.Override],u.prototype,"matches",null),n([s.Override],u.prototype,"toString",null),u=n([i(0,s.NotNull)],u),r.PrecedencePredicateTransition=u},{252:252,287:287,334:334}],330:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(359),s=t(252),a=t(341);let u=class extends a.Transition{constructor(t,e,r){super(t),this.from=e,this.to=r}get serializationType(){return 2}get label(){return o.IntervalSet.of(this.from,this.to)}matches(t,e,r){return t>=this.from&&t<=this.to}toString(){return"'"+String.fromCodePoint(this.from)+"'..'"+String.fromCodePoint(this.to)+"'"}};n([s.Override],u.prototype,"serializationType",null),n([s.Override,s.NotNull],u.prototype,"label",null),n([s.Override],u.prototype,"matches",null),n([s.Override,s.NotNull],u.prototype,"toString",null),u=n([i(0,s.NotNull)],u),r.RangeTransition=u},{252:252,341:341,359:359}],331:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{constructor(){super(...arguments),this.isPrecedenceRule=!1,this.leftFactored=!1}get stateType(){return o.ATNStateType.RULE_START}}n([t(252).Override],s.prototype,"stateType",null),r.RuleStartState=s},{252:252,285:285,286:286}],332:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286),s=t(252);class a extends i.ATNState{get nonStopStateNumber(){return-1}get stateType(){return o.ATNStateType.RULE_STOP}}n([s.Override],a.prototype,"nonStopStateNumber",null),n([s.Override],a.prototype,"stateType",null),r.RuleStopState=a},{252:252,285:285,286:286}],333:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(341);let a=class extends s.Transition{constructor(t,e,r,n){super(t),this.tailCall=!1,this.optimizedTailCall=!1,this.ruleIndex=e,this.precedence=r,this.followState=n}get serializationType(){return 3}get isEpsilon(){return!0}matches(t,e,r){return!1}};n([o.NotNull],a.prototype,"followState",void 0),n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"isEpsilon",null),n([o.Override],a.prototype,"matches",null),a=n([i(0,o.NotNull),i(3,o.NotNull)],a),r.RuleTransition=a},{252:252,341:341}],335:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(359),s=t(252),a=t(276),u=t(341);let l=class extends u.Transition{constructor(t,e){super(t),null==e&&(e=o.IntervalSet.of(a.Token.INVALID_TYPE)),this.set=e}get serializationType(){return 7}get label(){return this.set}matches(t,e,r){return this.set.contains(t)}toString(){return this.set.toString()}};n([s.NotNull],l.prototype,"set",void 0),n([s.Override],l.prototype,"serializationType",null),n([s.Override,s.NotNull],l.prototype,"label",null),n([s.Override],l.prototype,"matches",null),n([s.Override,s.NotNull],l.prototype,"toString",null),l=n([i(0,s.NotNull),i(1,s.Nullable)],l),r.SetTransition=l},{252:252,276:276,341:341,359:359}],337:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(294);class s extends o.BlockStartState{get stateType(){return i.ATNStateType.STAR_BLOCK_START}}n([t(252).Override],s.prototype,"stateType",null),r.StarBlockStartState=s},{252:252,286:286,294:294}],339:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(285),o=t(286);class s extends i.ATNState{get loopEntryState(){return this.transition(0).target}get stateType(){return o.ATNStateType.STAR_LOOP_BACK}}n([t(252).Override],s.prototype,"stateType",null),r.StarLoopbackState=s},{252:252,285:285,286:286}],340:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(286),o=t(299);class s extends o.DecisionState{get stateType(){return i.ATNStateType.TOKEN_START}}n([t(252).Override],s.prototype,"stateType",null),r.TokensStartState=s},{252:252,286:286,299:299}],364:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(361);class i{constructor(t,e,r,n){this.data=new Uint32Array(4),this.data[0]=t,this.data[1]=e,this.data[2]=r,this.data[3]=n}static fromString(t){if(!/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(t))throw new Error("Incorrectly formatted UUID");let e=t.split("-"),r=parseInt(e[0],16),n=(parseInt(e[1],16)<<16>>>0)+parseInt(e[2],16),o=(parseInt(e[3],16)<<16>>>0)+parseInt(e[4].substr(0,4),16),s=parseInt(e[4].substr(-8),16);return new i(r,n,o,s)}hashCode(){return n.MurmurHash.hashCode([this.data[0],this.data[1],this.data[2],this.data[3]])}equals(t){return t===this||t instanceof i&&this.data[0]===t.data[0]&&this.data[1]===t.data[1]&&this.data[2]===t.data[2]&&this.data[3]===t.data[3]}toString(){return("00000000"+this.data[0].toString(16)).substr(-8)+"-"+("0000"+(this.data[1]>>>16).toString(16)).substr(-4)+"-"+("0000"+this.data[1].toString(16)).substr(-4)+"-"+("0000"+(this.data[2]>>>16).toString(16)).substr(-4)+"-"+("0000"+this.data[2].toString(16)).substr(-4)+("00000000"+this.data[3].toString(16)).substr(-8)}}r.UUID=i},{361:361}],342:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(341);let a=class extends s.Transition{constructor(t){super(t)}get serializationType(){return 9}matches(t,e,r){return t>=e&&t<=r}toString(){return"."}};n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"matches",null),n([o.Override,o.NotNull],a.prototype,"toString",null),a=n([i(0,o.NotNull)],a),r.WildcardTransition=a},{252:252,341:341}],288:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(341);let a=class extends s.Transition{constructor(t,e,r=-1,n=!1){super(t),this.ruleIndex=e,this.actionIndex=r,this.isCtxDependent=n}get serializationType(){return 6}get isEpsilon(){return!0}matches(t,e,r){return!1}toString(){return"action_"+this.ruleIndex+":"+this.actionIndex}};n([o.Override],a.prototype,"serializationType",null),n([o.Override],a.prototype,"isEpsilon",null),n([o.Override],a.prototype,"matches",null),n([o.Override],a.prototype,"toString",null),a=n([i(0,o.NotNull)],a),r.ActionTransition=a},{252:252,341:341}],290:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(359),s=t(252),a=t(341);let u=class extends a.Transition{constructor(t,e){super(t),this._label=e}get serializationType(){return 5}get label(){return o.IntervalSet.of(this._label)}matches(t,e,r){return this._label===t}toString(){return String(this.label)}};n([s.Override],u.prototype,"serializationType",null),n([s.Override,s.NotNull],u.prototype,"label",null),n([s.Override],u.prototype,"matches",null),n([s.Override,s.NotNull],u.prototype,"toString",null),u=n([i(0,s.NotNull)],u),r.AtomTransition=u},{252:252,341:341,359:359}],284:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(281),s=t(346),a=t(252),u=t(326);let l=class t{constructor(t){this.atn=t}static get ERROR(){return t._ERROR||(t._ERROR=new s.DFAState(new o.ATNConfigSet),t._ERROR.stateNumber=u.PredictionContext.EMPTY_FULL_STATE_KEY),t._ERROR}clearDFA(){this.atn.clearDFA()}};n([a.NotNull],l.prototype,"atn",void 0),n([a.NotNull],l,"ERROR",null),l=n([i(0,a.NotNull)],l),r.ATNSimulator=l,l=r.ATNSimulator||(r.ATNSimulator={}),r.ATNSimulator=l},{252:252,281:281,326:326,346:346}],346:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(279),s=t(353),a=t(361),u=t(252),l=t(326);class c{constructor(t){this.stateNumber=-1,this.configs=t,this.edges=new Map,this.contextEdges=new Map}get isContextSensitive(){return!!this.contextSymbols}isContextSymbol(t){return!!this.isContextSensitive&&this.contextSymbols.get(t)}setContextSymbol(t){this.contextSymbols.set(t)}setContextSensitive(t){this.isContextSensitive||this.contextSymbols||(this.contextSymbols=new s.BitSet)}get acceptStateInfo(){return this._acceptStateInfo}set acceptStateInfo(t){this._acceptStateInfo=t}get isAcceptState(){return!!this._acceptStateInfo}get prediction(){return this._acceptStateInfo?this._acceptStateInfo.prediction:o.ATN.INVALID_ALT_NUMBER}get lexerActionExecutor(){if(this._acceptStateInfo)return this._acceptStateInfo.lexerActionExecutor}getTarget(t){return this.edges.get(t)}setTarget(t,e){this.edges.set(t,e)}getEdgeMap(){return this.edges}getContextTarget(t){return t===l.PredictionContext.EMPTY_FULL_STATE_KEY&&(t=-1),this.contextEdges.get(t)}setContextTarget(t,e){if(!this.isContextSensitive)throw new Error("The state is not context sensitive.");t===l.PredictionContext.EMPTY_FULL_STATE_KEY&&(t=-1),this.contextEdges.set(t,e)}getContextEdgeMap(){let t=new Map(this.contextEdges),e=t.get(-1);if(void 0!==e){if(1===t.size){let t=new Map;return t.set(l.PredictionContext.EMPTY_FULL_STATE_KEY,e),t}t.delete(-1),t.set(l.PredictionContext.EMPTY_FULL_STATE_KEY,e)}return t}hashCode(){let t=a.MurmurHash.initialize(7);return t=a.MurmurHash.update(t,this.configs.hashCode()),a.MurmurHash.finish(t,1)}equals(t){if(this===t)return!0;if(!(t instanceof c))return!1;let e=t;return this.configs.equals(e.configs)}toString(){let t="";return t+=this.stateNumber+":"+this.configs,this.isAcceptState&&(t+="=>",this.predicates?t+=this.predicates:t+=this.prediction),t.toString()}}n([u.NotNull],c.prototype,"configs",void 0),n([u.NotNull],c.prototype,"edges",void 0),n([u.NotNull],c.prototype,"contextEdges",void 0),n([u.Override],c.prototype,"hashCode",null),n([u.Override],c.prototype,"equals",null),n([u.Override],c.prototype,"toString",null),r.DFAState=c,function(t){let e=class{constructor(t,e){this.alt=e,this.pred=t}toString(){return"("+this.pred+", "+this.alt+")"}};n([u.NotNull],e.prototype,"pred",void 0),n([u.Override],e.prototype,"toString",null),e=n([i(0,u.NotNull)],e),t.PredPrediction=e}(c=r.DFAState||(r.DFAState={}))},{252:252,279:279,326:326,353:353,361:361}],287:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(341);r.AbstractPredicateTransition=class extends n.Transition{constructor(t){super(t)}}},{341:341}],341:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);let s=class{constructor(t){if(null==t)throw new Error("target cannot be null.");this.target=t}get isEpsilon(){return!1}get label(){}};s.serializationNames=["INVALID","EPSILON","RANGE","RULE","PREDICATE","ATOM","ACTION","SET","NOT_SET","WILDCARD","PRECEDENCE"],n([o.NotNull],s.prototype,"target",void 0),s=n([i(0,o.NotNull)],s),r.Transition=s},{252:252}],289:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297),s=t(252);let a=class extends o.DecisionEventInfo{constructor(t,e,r,n,i,o){super(t,e,n,i,o,e.useContext),this.ambigAlts=r}get ambiguousAlternatives(){return this.ambigAlts}};n([s.NotNull],a.prototype,"ambigAlts",void 0),n([s.NotNull],a.prototype,"ambiguousAlternatives",null),a=n([i(1,s.NotNull),i(2,s.NotNull),i(3,s.NotNull)],a),r.AmbiguityInfo=a},{252:252,297:297}],297:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);let s=class{constructor(t,e,r,n,i,o){this.decision=t,this.fullCtx=o,this.stopIndex=i,this.input=r,this.startIndex=n,this.state=e}};n([o.NotNull],s.prototype,"input",void 0),s=n([i(2,o.NotNull)],s),r.DecisionEventInfo=s},{252:252}],295:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(365);class s{constructor(t,e){this._conflictedAlts=t,this.exact=e}get conflictedAlts(){return this._conflictedAlts}get isExact(){return this.exact}equals(t){return t===this||t instanceof s&&this.isExact===t.isExact&&o.equals(this.conflictedAlts,t.conflictedAlts)}hashCode(){return this.conflictedAlts.hashCode()}}n([i.Override],s.prototype,"equals",null),n([i.Override],s.prototype,"hashCode",null),r.ConflictInfo=s},{252:252,365:365}],296:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297),s=t(252);let a=class extends o.DecisionEventInfo{constructor(t,e,r,n,i){super(t,e,r,n,i,!0)}};a=n([i(1,s.NotNull),i(2,s.NotNull)],a),r.ContextSensitivityInfo=a},{252:252,297:297}],298:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});class i{constructor(t){this.invocations=0,this.timeInPrediction=0,this.SLL_TotalLook=0,this.SLL_MinLook=0,this.SLL_MaxLook=0,this.LL_TotalLook=0,this.LL_MinLook=0,this.LL_MaxLook=0,this.contextSensitivities=[],this.errors=[],this.ambiguities=[],this.predicateEvals=[],this.SLL_ATNTransitions=0,this.SLL_DFATransitions=0,this.LL_Fallback=0,this.LL_ATNTransitions=0,this.LL_DFATransitions=0,this.decision=t}toString(){return"{decision="+this.decision+", contextSensitivities="+this.contextSensitivities.length+", errors="+this.errors.length+", ambiguities="+this.ambiguities.length+", SLL_lookahead="+this.SLL_TotalLook+", SLL_ATNTransitions="+this.SLL_ATNTransitions+", SLL_DFATransitions="+this.SLL_DFATransitions+", LL_Fallback="+this.LL_Fallback+", LL_lookahead="+this.LL_TotalLook+", LL_ATNTransitions="+this.LL_ATNTransitions+"}"}}n([t(252).Override],i.prototype,"toString",null),r.DecisionInfo=i},{252:252}],301:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297),s=t(252);let a=class extends o.DecisionEventInfo{constructor(t,e,r,n,i){super(t,e,r,n,i,e.useContext)}};a=n([i(1,s.NotNull),i(2,s.NotNull)],a),r.ErrorInfo=a},{252:252,297:297}],343:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.AcceptStateInfo=class{constructor(t,e){this._prediction=t,this._lexerActionExecutor=e}get prediction(){return this._prediction}get lexerActionExecutor(){return this._lexerActionExecutor}}},{}],318:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(281),o=t(252);class s extends i.ATNConfigSet{constructor(t,e){null!=t&&null!=e?super(t,e):super()}clone(t){let e=new s(this,t);return!t&&this.isReadOnly&&e.addAll(this),e}getKey(t){return{state:0,alt:t.hashCode()}}canMerge(t,e,r){return t.equals(r)}}n([o.Override],s.prototype,"clone",null),n([o.Override],s.prototype,"getKey",null),n([o.Override],s.prototype,"canMerge",null),r.OrderedATNConfigSet=s},{252:252,281:281}],305:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(351),s=t(308),a=t(361),u=t(252);let l=class t{constructor(t){this._lexerActions=t;let e=a.MurmurHash.initialize();for(let r of t)e=a.MurmurHash.update(e,r);this.cachedHashCode=a.MurmurHash.finish(e,t.length)}static append(e,r){if(!e)return new t([r]);let n=e._lexerActions.slice(0);return n.push(r),new t(n)}fixOffsetBeforeMatch(e){let r;for(let t=0;t<this._lexerActions.length;t++)!this._lexerActions[t].isPositionDependent||this._lexerActions[t]instanceof s.LexerIndexedCustomAction||(r||(r=this._lexerActions.slice(0)),r[t]=new s.LexerIndexedCustomAction(e,this._lexerActions[t]));return r?new t(r):this}get lexerActions(){return this._lexerActions}execute(t,e,r){let n=!1,i=e.index;try{for(let o of this._lexerActions){if(o instanceof s.LexerIndexedCustomAction){let t=o.offset;e.seek(r+t),o=o.action,n=r+t!==i}else o.isPositionDependent&&(e.seek(i),n=!1);o.execute(t)}}finally{n&&e.seek(i)}}hashCode(){return this.cachedHashCode}equals(e){return e===this||e instanceof t&&this.cachedHashCode===e.cachedHashCode&&o.ArrayEqualityComparator.INSTANCE.equals(this._lexerActions,e._lexerActions)}};n([u.NotNull],l.prototype,"_lexerActions",void 0),n([u.NotNull],l.prototype,"lexerActions",null),n([i(0,u.NotNull)],l.prototype,"execute",null),n([u.Override],l.prototype,"hashCode",null),n([u.Override],l.prototype,"equals",null),n([u.NotNull,i(1,u.NotNull)],l,"append",null),l=n([i(0,u.NotNull)],l),r.LexerActionExecutor=l},{252:252,308:308,351:351,361:361}],308:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(361),s=t(252);let a=class t{constructor(t,e){this._offset=t,this._action=e}get offset(){return this._offset}get action(){return this._action}get actionType(){return this._action.actionType}get isPositionDependent(){return!0}execute(t){this._action.execute(t)}hashCode(){let t=o.MurmurHash.initialize();return t=o.MurmurHash.update(t,this._offset),t=o.MurmurHash.update(t,this._action),o.MurmurHash.finish(t,2)}equals(e){return e===this||e instanceof t&&this._offset===e._offset&&this._action.equals(e._action)}};n([s.NotNull],a.prototype,"action",null),n([s.Override],a.prototype,"actionType",null),n([s.Override],a.prototype,"isPositionDependent",null),n([s.Override],a.prototype,"execute",null),n([s.Override],a.prototype,"hashCode",null),n([s.Override],a.prototype,"equals",null),a=n([i(1,s.NotNull)],a),r.LexerIndexedCustomAction=a},{252:252,361:361}],315:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297);let s=class extends o.DecisionEventInfo{constructor(t,e,r,n,i,o,s){super(t,e,n,i,o,s),this.predictedAlt=r}};s=n([i(3,t(252).NotNull)],s),r.LookaheadEventInfo=s},{252:252,297:297}],352:[function(t,e,r){"use strict";var n;Object.defineProperty(r,"__esModule",{value:!0}),(n=r.Arrays||(r.Arrays={})).binarySearch=function(t,e,r,n){return function(t,e,r,n){let i=e,o=r-1;for(;i<=o;){let e=i+o>>>1,r=t[e];if(r<n)i=e+1;else{if(!(r>n))return e;o=e-1}}return-(i+1)}(t,void 0!==r?r:0,void 0!==n?n:t.length,e)},n.toString=function(t){let e="[",r=!0;for(let n of t)r?r=!1:e+=", ",e+=null===n?"null":void 0===n?"undefined":n;return e+"]"}},{}],336:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(267);let a=class{constructor(t,e,r,n){this.outerContext=null!=t?t:s.ParserRuleContext.emptyContext(),this.s0=e,this.useContext=r,this.remainingOuterContext=n}};a=n([i(1,o.NotNull)],a),r.SimulatorState=a},{252:252,267:267}],356:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(352),o=t(252),s=new Int32Array(0);class a{constructor(t){if(t)if(t instanceof a)this._data=t._data.slice(0),this._size=t._size;else if("number"==typeof t)0===t?(this._data=s,this._size=0):(this._data=new Int32Array(t),this._size=0);else{this._data=s,this._size=0;for(let e of t)this.add(e)}else this._data=s,this._size=0}add(t){this._data.length===this._size&&this.ensureCapacity(this._size+1),this._data[this._size]=t,this._size++}addAll(t){if(Array.isArray(t))this.ensureCapacity(this._size+t.length),this._data.subarray(this._size,this._size+t.length).set(t),this._size+=t.length;else if(t instanceof a)this.ensureCapacity(this._size+t._size),this._data.subarray(this._size,this._size+t.size).set(t._data),this._size+=t._size;else{this.ensureCapacity(this._size+t.size);let e=0;for(let r of t)this._data[this._size+e]=r,e++;this._size+=t.size}}get(t){if(t<0||t>=this._size)throw RangeError();return this._data[t]}contains(t){for(let e=0;e<this._size;e++)if(this._data[e]===t)return!0;return!1}set(t,e){if(t<0||t>=this._size)throw RangeError();let r=this._data[t];return this._data[t]=e,r}removeAt(t){let e=this.get(t);return this._data.copyWithin(t,t+1,this._size),this._data[this._size-1]=0,this._size--,e}removeRange(t,e){if(t<0||e<0||t>this._size||e>this._size)throw RangeError();if(t>e)throw RangeError();this._data.copyWithin(e,t,this._size),this._data.fill(0,this._size-(e-t),this._size),this._size-=e-t}get isEmpty(){return 0===this._size}get size(){return this._size}trimToSize(){this._data.length!==this._size&&(this._data=this._data.slice(0,this._size))}clear(){this._data.fill(0,0,this._size),this._size=0}toArray(){return 0===this._size?[]:Array.from(this._data.subarray(0,this._size))}sort(){this._data.subarray(0,this._size).sort()}equals(t){if(t===this)return!0;if(!(t instanceof a))return!1;if(this._size!==t._size)return!1;for(let e=0;e<this._size;e++)if(this._data[e]!==t._data[e])return!1;return!0}hashCode(){let t=1;for(let e=0;e<this._size;e++)t=31*t+this._data[e];return t}toString(){return this._data.toString()}binarySearch(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this._size),e<0||r<0||e>this._size||r>this._size)throw new RangeError;if(e>r)throw new RangeError;return i.Arrays.binarySearch(this._data,t,e,r)}ensureCapacity(t){if(t<0||t>2147483639)throw new RangeError;let e;for(e=0===this._data.length?4:this._data.length;e<t;)((e*=2)<0||e>2147483639)&&(e=2147483639);let r=new Int32Array(e);r.set(this._data),this._data=r}toCharArray(){let t=new Uint16Array(this._size),e=0,r=!1;for(let n=0;n<this._size;n++){let i=this._data[n];if(i>=0&&i<65536){t[e]=i,e++;continue}if(!r){let e=new Uint16Array(this.charArraySize());e.set(t,0),t=e,r=!0}let o=String.fromCodePoint(i);t[e]=o.charCodeAt(0),t[e+1]=o.charCodeAt(1),e+=2}return t}charArraySize(){let t=0;for(let e=0;e<this._size;e++)t+=this._data[e]>=65536?2:1;return t}}n([o.NotNull],a.prototype,"_data",void 0),n([o.Override],a.prototype,"equals",null),n([o.Override],a.prototype,"hashCode",null),n([o.Override],a.prototype,"toString",null),r.IntegerList=a},{252:252,352:352}],328:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0}),t(349);const i=t(361),o=t(252),s=t(332);var a;(a=r.PredictionMode||(r.PredictionMode={}))[a.SLL=0]="SLL",a[a.LL=1]="LL",a[a.LL_EXACT_AMBIG_DETECTION=2]="LL_EXACT_AMBIG_DETECTION",function(t){class e{AltAndContextConfigEqualityComparator(){}hashCode(t){let e=i.MurmurHash.initialize(7);return e=i.MurmurHash.update(e,t.state.stateNumber),e=i.MurmurHash.update(e,t.context),i.MurmurHash.finish(e,2)}equals(t,e){return t===e||null!=t&&null!=e&&t.state.stateNumber===e.state.stateNumber&&t.context.equals(e.context)}}e.INSTANCE=new e,n([o.Override],e.prototype,"hashCode",null),n([o.Override],e.prototype,"equals",null),t.hasConfigInRuleStopState=function(t){for(let e of t)if(e.state instanceof s.RuleStopState)return!0;return!1},t.allConfigsInRuleStopStates=function(t){for(let e of t)if(!(e.state instanceof s.RuleStopState))return!1;return!0}}(r.PredictionMode||(r.PredictionMode={}))},{252:252,332:332,349:349,361:361}],324:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(297),s=t(252);let a=class extends o.DecisionEventInfo{constructor(t,e,r,n,i,o,s,a){super(e,t,r,n,i,t.useContext),this.semctx=o,this.evalResult=s,this.predictedAlt=a}};a=n([i(0,s.NotNull),i(2,s.NotNull),i(5,s.NotNull)],a),r.PredicateEvalInfo=a},{252:252,297:297}],345:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(284),o=t(252),s=t(326),a=t(271),u=t(278);class l{constructor(t,e,r,n){e instanceof a.Recognizer?(r=e.ruleNames,n=e.atn,e=e.vocabulary):e||(e=u.VocabularyImpl.EMPTY_VOCABULARY),this.dfa=t,this.vocabulary=e,this.ruleNames=r,this.atn=n}toString(){if(!this.dfa.s0)return"";let t="";if(this.dfa.states){let e=new Array(...this.dfa.states.toArray());e.sort((t,e)=>t.stateNumber-e.stateNumber);for(let r of e){let e=r.getEdgeMap(),n=[...e.keys()].sort((t,e)=>t-e),o=r.getContextEdgeMap(),s=[...o.keys()].sort((t,e)=>t-e);for(let a of n){let n=e.get(a);if((null==n||n===i.ATNSimulator.ERROR)&&!r.isContextSymbol(a))continue;let o=!1;t+=this.getStateString(r)+"-"+this.getEdgeLabel(a)+"->",r.isContextSymbol(a)&&(t+="!",o=!0);let s=n;s&&s.stateNumber!==i.ATNSimulator.ERROR.stateNumber?t+=this.getStateString(s)+"\n":o&&(t+="ctx\n")}if(r.isContextSensitive)for(let i of s)t+=this.getStateString(r)+"-"+this.getContextLabel(i)+"->"+this.getStateString(o.get(i))+"\n"}}let e=t;return 0===e.length?"":e}getContextLabel(t){if(t===s.PredictionContext.EMPTY_FULL_STATE_KEY)return"ctx:EMPTY_FULL";if(t===s.PredictionContext.EMPTY_LOCAL_STATE_KEY)return"ctx:EMPTY_LOCAL";if(this.atn&&t>0&&t<=this.atn.states.length){let e=this.atn.states[t].ruleIndex;if(this.ruleNames&&e>=0&&e<this.ruleNames.length)return"ctx:"+String(t)+"("+this.ruleNames[e]+")"}return"ctx:"+String(t)}getEdgeLabel(t){return this.vocabulary.getDisplayName(t)}getStateString(t){if(t===i.ATNSimulator.ERROR)return"ERROR";let e=t.stateNumber,r="s"+e;if(t.isAcceptState&&(r=t.predicates?":s"+e+"=>"+t.predicates:":s"+e+"=>"+t.prediction),t.isContextSensitive){r+="*";for(let e of t.configs)if(e.reachesIntoOuterContext){r+="*";break}}return r}}n([o.NotNull],l.prototype,"dfa",void 0),n([o.NotNull],l.prototype,"vocabulary",void 0),n([o.Override],l.prototype,"toString",null),r.DFASerializer=l},{252:252,271:271,278:278,284:284,326:326}],347:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(345),s=t(252),a=t(278);let u=class extends o.DFASerializer{constructor(t){super(t,a.VocabularyImpl.EMPTY_VOCABULARY)}getEdgeLabel(t){return"'"+String.fromCodePoint(t)+"'"}};n([s.Override,s.NotNull],u.prototype,"getEdgeLabel",null),u=n([i(0,s.NotNull)],u),r.LexerDFASerializer=u},{252:252,278:278,345:345}],355:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(361),s=t(362);class a{hashCode(t){return null==t?0:"string"==typeof t||"number"==typeof t?o.MurmurHash.hashCode([t]):s.ObjectEqualityComparator.INSTANCE.hashCode(t)}equals(t,e){return null==t?null==e:"string"==typeof t||"number"==typeof t?t===e:s.ObjectEqualityComparator.INSTANCE.equals(t,e)}}a.INSTANCE=new a,n([i.Override],a.prototype,"hashCode",null),n([i.Override],a.prototype,"equals",null),r.DefaultEqualityComparator=a},{252:252,361:361,362:362}],360:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.MultiMap=class extends Map{constructor(){super()}map(t,e){let r=super.get(t);r||(r=[],super.set(t,r)),r.push(e)}getPairs(){let t=[];return this.forEach((e,r)=>{e.forEach(e=>{t.push([r,e])})}),t}}},{}],366:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);class s{visit(t){return t.accept(this)}visitChildren(t){let e=this.defaultResult(),r=t.childCount;for(let n=0;n<r&&this.shouldVisitNextChild(t,e);n++){let r=t.getChild(n).accept(this);e=this.aggregateResult(e,r)}return e}visitTerminal(t){return this.defaultResult()}visitErrorNode(t){return this.defaultResult()}aggregateResult(t,e){return e}shouldVisitNextChild(t,e){return!0}}n([o.Override,i(0,o.NotNull)],s.prototype,"visit",null),n([o.Override,i(0,o.NotNull)],s.prototype,"visitChildren",null),n([o.Override,i(0,o.NotNull)],s.prototype,"visitTerminal",null),n([o.Override,i(0,o.NotNull)],s.prototype,"visitErrorNode",null),n([i(0,o.NotNull)],s.prototype,"shouldVisitNextChild",null),r.AbstractParseTreeVisitor=s},{252:252}],368:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.ParseTreeProperty=class{constructor(t="ParseTreeProperty"){this._symbol=Symbol(t)}get(t){return t[this._symbol]}set(t,e){t[this._symbol]=e}removeFrom(t){let e=t[this._symbol];return delete t[this._symbol],e}}},{}],369:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(367),i=t(371),o=t(370);class s{walk(t,e){let r=[],s=[],a=e,u=0;for(;a;)if(a instanceof n.ErrorNode?t.visitErrorNode&&t.visitErrorNode(a):a instanceof i.TerminalNode?t.visitTerminal&&t.visitTerminal(a):this.enterRule(t,a),a.childCount>0)r.push(a),s.push(u),u=0,a=a.getChild(0);else do{if(a instanceof o.RuleNode&&this.exitRule(t,a),0===r.length){a=void 0,u=0;break}let e=r[r.length-1];if(a=++u<e.childCount?e.getChild(u):void 0)break;a=r.pop(),u=s.pop()}while(a)}enterRule(t,e){let r=e.ruleContext;t.enterEveryRule&&t.enterEveryRule(r),r.enterRule(t)}exitRule(t,e){let r=e.ruleContext;r.exitRule(t),t.exitEveryRule&&t.exitEveryRule(r)}}r.ParseTreeWalker=s,function(t){t.DEFAULT=new t}(s=r.ParseTreeWalker||(r.ParseTreeWalker={}))},{367:367,370:370,371:371}],374:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Chunk=class{}},{}],375:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252);let s=class{constructor(t,e,r,n){if(!t)throw new Error("tree cannot be null");if(!e)throw new Error("pattern cannot be null");if(!r)throw new Error("labels cannot be null");this._tree=t,this._pattern=e,this._labels=r,this._mismatchedNode=n}get(t){let e=this._labels.get(t);if(e&&0!==e.length)return e[e.length-1]}getAll(t){return this._labels.get(t)||[]}get labels(){return this._labels}get mismatchedNode(){return this._mismatchedNode}get succeeded(){return!this._mismatchedNode}get pattern(){return this._pattern}get tree(){return this._tree}toString(){return`Match ${this.succeeded?"succeeded":"failed"}; found ${this.labels.size} labels`}};n([o.NotNull,i(0,o.NotNull)],s.prototype,"getAll",null),n([o.NotNull],s.prototype,"labels",null),n([o.NotNull],s.prototype,"pattern",null),n([o.NotNull],s.prototype,"tree",null),n([o.Override],s.prototype,"toString",null),s=n([i(0,o.NotNull),i(1,o.NotNull),i(2,o.NotNull)],s),r.ParseTreeMatch=s},{252:252}],376:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(382);let a=class{constructor(t,e,r,n){this._matcher=t,this._patternRuleIndex=r,this._pattern=e,this._patternTree=n}match(t){return this._matcher.match(t,this)}matches(t){return this._matcher.match(t,this).succeeded}findAll(t,e){let r=s.XPath.findAll(t,e,this._matcher.parser),n=[];for(let i of r){let t=this.match(i);t.succeeded&&n.push(t)}return n}get matcher(){return this._matcher}get pattern(){return this._pattern}get patternRuleIndex(){return this._patternRuleIndex}get patternTree(){return this._patternTree}};n([o.NotNull],a.prototype,"_pattern",void 0),n([o.NotNull],a.prototype,"_patternTree",void 0),n([o.NotNull],a.prototype,"_matcher",void 0),n([o.NotNull,i(0,o.NotNull)],a.prototype,"match",null),n([i(0,o.NotNull)],a.prototype,"matches",null),n([o.NotNull,i(0,o.NotNull),i(1,o.NotNull)],a.prototype,"findAll",null),n([o.NotNull],a.prototype,"matcher",null),n([o.NotNull],a.prototype,"pattern",null),n([o.NotNull],a.prototype,"patternTree",null),a=n([i(0,o.NotNull),i(1,o.NotNull),i(3,o.NotNull)],a),r.ParseTreePattern=a},{252:252,382:382}],382:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(245),i=t(250),o=t(262),s=t(267),a=t(276),u=t(384),l=t(385),c=t(386),h=t(387),p=t(388),d=t(389),f=t(390),y=t(391);class m{constructor(t,e){this.parser=t,this.path=e,this.elements=this.split(e)}split(t){let e=new u.XPathLexer(n.CharStreams.fromString(t));e.recover=t=>{throw t},e.removeErrorListeners(),e.addErrorListener(new l.XPathLexerErrorListener);let r=new i.CommonTokenStream(e);try{r.fill()}catch(d){if(d instanceof o.LexerNoViableAltException){let r="Invalid tokens or characters at index "+e.charPositionInLine+" in path '"+t+"' -- "+d.message;throw new RangeError(r)}throw d}let s=r.getTokens(),c=[],h=s.length,p=0;t:for(;p<h;){let t,e=s[p];switch(e.type){case u.XPathLexer.ROOT:case u.XPathLexer.ANYWHERE:let r=e.type===u.XPathLexer.ANYWHERE,n=(t=s[++p]).type===u.XPathLexer.BANG;n&&(t=s[++p]);let i=this.getXPathElement(t,r);i.invert=n,c.push(i),p++;break;case u.XPathLexer.TOKEN_REF:case u.XPathLexer.RULE_REF:case u.XPathLexer.WILDCARD:c.push(this.getXPathElement(e,!1)),p++;break;case a.Token.EOF:break t;default:throw new Error("Unknowth path element "+e)}}return c}getXPathElement(t,e){if(t.type===a.Token.EOF)throw new Error("Missing path element at end of path");let r=t.text;if(null==r)throw new Error("Expected wordToken to have text content.");let n=this.parser.getTokenType(r),i=this.parser.getRuleIndex(r);switch(t.type){case u.XPathLexer.WILDCARD:return e?new f.XPathWildcardAnywhereElement:new y.XPathWildcardElement;case u.XPathLexer.TOKEN_REF:case u.XPathLexer.STRING:if(n===a.Token.INVALID_TYPE)throw new Error(r+" at index "+t.startIndex+" isn't a valid token name");return e?new p.XPathTokenAnywhereElement(r,n):new d.XPathTokenElement(r,n);default:if(-1===i)throw new Error(r+" at index "+t.startIndex+" isn't a valid rule name");return e?new c.XPathRuleAnywhereElement(r,i):new h.XPathRuleElement(r,i)}}static findAll(t,e,r){return new m(r,e).evaluate(t)}evaluate(t){let e=new s.ParserRuleContext;e.addChild(t);let r=new Set([e]),n=0;for(;n<this.elements.length;){let t=new Set;for(let e of r)e.childCount>0&&this.elements[n].evaluate(e).forEach(t.add,t);n++,r=t}return r}}m.WILDCARD="*",m.NOT="!",r.XPath=m},{245:245,250:250,262:262,267:267,276:276,384:384,385:385,386:386,387:387,388:388,389:389,390:390,391:391}],378:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(252),s=t(276);let a=class{constructor(t,e,r){if(null==t||0===t.length)throw new Error("ruleName cannot be null or empty.");this._ruleName=t,this.bypassTokenType=e,this._label=r}get ruleName(){return this._ruleName}get label(){return this._label}get channel(){return s.Token.DEFAULT_CHANNEL}get text(){return null!=this._label?"<"+this._label+":"+this._ruleName+">":"<"+this._ruleName+">"}get type(){return this.bypassTokenType}get line(){return 0}get charPositionInLine(){return-1}get tokenIndex(){return-1}get startIndex(){return-1}get stopIndex(){return-1}get tokenSource(){}get inputStream(){}toString(){return this._ruleName+":"+this.bypassTokenType}};n([o.NotNull],a.prototype,"ruleName",null),n([o.Override],a.prototype,"channel",null),n([o.Override],a.prototype,"text",null),n([o.Override],a.prototype,"type",null),n([o.Override],a.prototype,"line",null),n([o.Override],a.prototype,"charPositionInLine",null),n([o.Override],a.prototype,"tokenIndex",null),n([o.Override],a.prototype,"startIndex",null),n([o.Override],a.prototype,"stopIndex",null),n([o.Override],a.prototype,"tokenSource",null),n([o.Override],a.prototype,"inputStream",null),n([o.Override],a.prototype,"toString",null),a=n([i(0,o.NotNull)],a),r.RuleTagToken=a},{252:252,276:276}],381:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(248),s=t(252);let a=class extends o.CommonToken{constructor(t,e,r){super(e),this._tokenName=t,this._label=r}get tokenName(){return this._tokenName}get label(){return this._label}get text(){return null!=this._label?"<"+this._label+":"+this._tokenName+">":"<"+this._tokenName+">"}toString(){return this._tokenName+":"+this.type}};n([s.NotNull],a.prototype,"_tokenName",void 0),n([s.NotNull],a.prototype,"tokenName",null),n([s.Override],a.prototype,"text",null),n([s.Override],a.prototype,"toString",null),a=n([i(0,s.NotNull)],a),r.TokenTagToken=a},{248:248,252:252}],380:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s},i=this&&this.__param||function(t,e){return function(r,n){e(r,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(374),s=t(252);let a=class extends o.Chunk{constructor(t){if(super(),null==t)throw new Error("text cannot be null");this._text=t}get text(){return this._text}toString(){return"'"+this._text+"'"}};n([s.NotNull],a.prototype,"_text",void 0),n([s.NotNull],a.prototype,"text",null),n([s.Override],a.prototype,"toString",null),a=n([i(0,s.NotNull)],a),r.TextChunk=a},{252:252,374:374}],379:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(374),o=t(252);class s extends i.Chunk{constructor(t,e){if(super(),null==t||0===t.length)throw new Error("tag cannot be null or empty");this._tag=t,this._label=e}get tag(){return this._tag}get label(){return this._label}toString(){return null!=this._label?this._label+":"+this._tag:this._tag}}n([o.NotNull],s.prototype,"tag",null),n([o.Override],s.prototype,"toString",null),r.TagChunk=s},{252:252,374:374}],385:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});class i{syntaxError(t,e,r,n,i,o){}}n([t(252).Override],i.prototype,"syntaxError",null),r.XPathLexerErrorListener=i},{252:252}],384:[function(t,e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(283),i=t(260),o=t(304),s=t(278),a=t(365);class u extends i.Lexer{constructor(t){super(t),this._interp=new o.LexerATNSimulator(u._ATN,this)}get vocabulary(){return u.VOCABULARY}get grammarFileName(){return"XPathLexer.g4"}get ruleNames(){return u.ruleNames}get serializedATN(){return u._serializedATN}get channelNames(){return u.channelNames}get modeNames(){return u.modeNames}action(t,e,r){switch(e){case 4:this.ID_action(t,r)}}ID_action(t,e){switch(e){case 0:let t=this.text;t.charAt(0)===t.charAt(0).toUpperCase()?this.type=u.TOKEN_REF:this.type=u.RULE_REF}}static get _ATN(){return u.__ATN||(u.__ATN=(new n.ATNDeserializer).deserialize(a.toCharArray(u._serializedATN))),u.__ATN}}u.TOKEN_REF=1,u.RULE_REF=2,u.ANYWHERE=3,u.ROOT=4,u.WILDCARD=5,u.BANG=6,u.ID=7,u.STRING=8,u.channelNames=["DEFAULT_TOKEN_CHANNEL","HIDDEN"],u.modeNames=["DEFAULT_MODE"],u.ruleNames=["ANYWHERE","ROOT","WILDCARD","BANG","ID","NameChar","NameStartChar","STRING"],u._LITERAL_NAMES=[void 0,void 0,void 0,"'//'","'/'","'*'","'!'"],u._SYMBOLIC_NAMES=[void 0,"TOKEN_REF","RULE_REF","ANYWHERE","ROOT","WILDCARD","BANG","ID","STRING"],u.VOCABULARY=new s.VocabularyImpl(u._LITERAL_NAMES,u._SYMBOLIC_NAMES,[]),u._serializedATNSegments=2,u._serializedATNSegment0='\x03\uc91d\ucaba\u058d\uafba\u4f53\u0607\uea8b\uc241\x02\n2\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x07\x06\x1f\n\x06\f\x06\x0e\x06"\v\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x07\t,\n\t\f\t\x0e\t/\v\t\x03\t\x03\t\x03-\x02\x02\n\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\x02\x0f\x02\x02\x11\x02\n\x03\x02\x02\x04\u02b6\x02\x02\x02\n\x02\x10\x02\x1d\x022\x02;\x02C\x02\\\x02a\x02a\x02c\x02|\x02\x81\x02\xa1\x02\xac\x02\xac\x02\xaf\x02\xaf\x02\xb7\x02\xb7\x02\xbc\x02\xbc\x02\xc2\x02\xd8\x02\xda\x02\xf8\x02\xfa\x02\u02c3\x02\u02c8\x02\u02d3\x02\u02e2\x02\u02e6\x02\u02ee\x02\u02ee\x02\u02f0\x02\u02f0\x02\u0302\x02\u0376\x02\u0378\x02\u0379\x02\u037c\x02\u037f\x02\u0381\x02\u0381\x02\u0388\x02\u0388\x02\u038a\x02\u038c\x02\u038e\x02\u038e\x02\u0390\x02\u03a3\x02\u03a5\x02\u03f7\x02\u03f9\x02\u0483\x02\u0485\x02\u0489\x02\u048c\x02\u0531\x02\u0533\x02\u0558\x02\u055b\x02\u055b\x02\u0563\x02\u0589\x02\u0593\x02\u05bf\x02\u05c1\x02\u05c1\x02\u05c3\x02\u05c4\x02\u05c6\x02\u05c7\x02\u05c9\x02\u05c9\x02\u05d2\x02\u05ec\x02\u05f2\x02\u05f4\x02\u0602\x02\u0607\x02\u0612\x02\u061c\x02\u061e\x02\u061e\x02\u0622\x02\u066b\x02\u0670\x02\u06d5\x02\u06d7\x02\u06df\x02\u06e1\x02\u06ea\x02\u06ec\x02\u06fe\x02\u0701\x02\u0701\x02\u0711\x02\u074c\x02\u074f\x02\u07b3\x02\u07c2\x02\u07f7\x02\u07fc\x02\u07fc\x02\u0802\x02\u082f\x02\u0842\x02\u085d\x02\u08a2\x02\u08b6\x02\u08b8\x02\u08bf\x02\u08d6\x02\u0965\x02\u0968\x02\u0971\x02\u0973\x02\u0985\x02\u0987\x02\u098e\x02\u0991\x02\u0992\x02\u0995\x02\u09aa\x02\u09ac\x02\u09b2\x02\u09b4\x02\u09b4\x02\u09b8\x02\u09bb\x02\u09be\x02\u09c6\x02\u09c9\x02\u09ca\x02\u09cd\x02\u09d0\x02\u09d9\x02\u09d9\x02\u09de\x02\u09df\x02\u09e1\x02\u09e5\x02\u09e8\x02\u09f3\x02\u0a03\x02\u0a05\x02\u0a07\x02\u0a0c\x02\u0a11\x02\u0a12\x02\u0a15\x02\u0a2a\x02\u0a2c\x02\u0a32\x02\u0a34\x02\u0a35\x02\u0a37\x02\u0a38\x02\u0a3a\x02\u0a3b\x02\u0a3e\x02\u0a3e\x02\u0a40\x02\u0a44\x02\u0a49\x02\u0a4a\x02\u0a4d\x02\u0a4f\x02\u0a53\x02\u0a53\x02\u0a5b\x02\u0a5e\x02\u0a60\x02\u0a60\x02\u0a68\x02\u0a77\x02\u0a83\x02\u0a85\x02\u0a87\x02\u0a8f\x02\u0a91\x02\u0a93\x02\u0a95\x02\u0aaa\x02\u0aac\x02\u0ab2\x02\u0ab4\x02\u0ab5\x02\u0ab7\x02\u0abb\x02\u0abe\x02\u0ac7\x02\u0ac9\x02\u0acb\x02\u0acd\x02\u0acf\x02\u0ad2\x02\u0ad2\x02\u0ae2\x02\u0ae5\x02\u0ae8\x02\u0af1\x02\u0afb\x02\u0afb\x02\u0b03\x02\u0b05\x02\u0b07\x02\u0b0e\x02\u0b11\x02\u0b12\x02\u0b15\x02\u0b2a\x02\u0b2c\x02\u0b32\x02\u0b34\x02\u0b35\x02\u0b37\x02\u0b3b\x02\u0b3e\x02\u0b46\x02\u0b49\x02\u0b4a\x02\u0b4d\x02\u0b4f\x02\u0b58\x02\u0b59\x02\u0b5e\x02\u0b5f\x02\u0b61\x02\u0b65\x02\u0b68\x02\u0b71\x02\u0b73\x02\u0b73\x02\u0b84\x02\u0b85\x02\u0b87\x02\u0b8c\x02\u0b90\x02\u0b92\x02\u0b94\x02\u0b97\x02\u0b9b\x02\u0b9c\x02\u0b9e\x02\u0b9e\x02\u0ba0\x02\u0ba1\x02\u0ba5\x02\u0ba6\x02\u0baa\x02\u0bac\x02\u0bb0\x02\u0bbb\x02\u0bc0\x02\u0bc4\x02\u0bc8\x02\u0bca\x02\u0bcc\x02\u0bcf\x02\u0bd2\x02\u0bd2\x02\u0bd9\x02\u0bd9\x02\u0be8\x02\u0bf1\x02\u0c02\x02\u0c05\x02\u0c07\x02\u0c0e\x02\u0c10\x02\u0c12\x02\u0c14\x02\u0c2a\x02\u0c2c\x02\u0c3b\x02\u0c3f\x02\u0c46\x02\u0c48\x02\u0c4a\x02\u0c4c\x02\u0c4f\x02\u0c57\x02\u0c58\x02\u0c5a\x02\u0c5c\x02\u0c62\x02\u0c65\x02\u0c68\x02\u0c71\x02\u0c82\x02\u0c85\x02\u0c87\x02\u0c8e\x02\u0c90\x02\u0c92\x02\u0c94\x02\u0caa\x02\u0cac\x02\u0cb5\x02\u0cb7\x02\u0cbb\x02\u0cbe\x02\u0cc6\x02\u0cc8\x02\u0cca\x02\u0ccc\x02\u0ccf\x02\u0cd7\x02\u0cd8\x02\u0ce0\x02\u0ce0\x02\u0ce2\x02\u0ce5\x02\u0ce8\x02\u0cf1\x02\u0cf3\x02\u0cf4\x02\u0d03\x02\u0d05\x02\u0d07\x02\u0d0e\x02\u0d10\x02\u0d12\x02\u0d14\x02\u0d3c\x02\u0d3f\x02\u0d46\x02\u0d48\x02\u0d4a\x02\u0d4c\x02\u0d50\x02\u0d56\x02\u0d59\x02\u0d61\x02\u0d65\x02\u0d68\x02\u0d71\x02\u0d7c\x02\u0d81\x02\u0d84\x02\u0d85\x02\u0d87\x02\u0d98\x02\u0d9c\x02\u0db3\x02\u0db5\x02\u0dbd\x02\u0dbf\x02\u0dbf\x02\u0dc2\x02\u0dc8\x02\u0dcc\x02\u0dcc\x02\u0dd1\x02\u0dd6\x02\u0dd8\x02\u0dd8\x02\u0dda\x02\u0de1\x02\u0de8\x02\u0df1\x02\u0df4\x02\u0df5\x02\u0e03\x02\u0e3c\x02\u0e42\x02\u0e50\x02\u0e52\x02\u0e5b\x02\u0e83\x02\u0e84\x02\u0e86\x02\u0e86\x02\u0e89\x02\u0e8a\x02\u0e8c\x02\u0e8c\x02\u0e8f\x02\u0e8f\x02\u0e96\x02\u0e99\x02\u0e9b\x02\u0ea1\x02\u0ea3\x02\u0ea5\x02\u0ea7\x02\u0ea7\x02\u0ea9\x02\u0ea9\x02\u0eac\x02\u0ead\x02\u0eaf\x02\u0ebb\x02\u0ebd\x02\u0ebf\x02\u0ec2\x02\u0ec6\x02\u0ec8\x02\u0ec8\x02\u0eca\x02\u0ecf\x02\u0ed2\x02\u0edb\x02\u0ede\x02\u0ee1\x02\u0f02\x02\u0f02\x02\u0f1a\x02\u0f1b\x02\u0f22\x02\u0f2b\x02\u0f37\x02\u0f37\x02\u0f39\x02\u0f39\x02\u0f3b\x02\u0f3b\x02\u0f40\x02\u0f49\x02\u0f4b\x02\u0f6e\x02\u0f73\x02\u0f86\x02\u0f88\x02\u0f99\x02\u0f9b\x02\u0fbe\x02\u0fc8\x02\u0fc8\x02\u1002\x02\u104b\x02\u1052\x02\u109f\x02\u10a2\x02\u10c7\x02\u10c9\x02\u10c9\x02\u10cf\x02\u10cf\x02\u10d2\x02\u10fc\x02\u10fe\x02\u124a\x02\u124c\x02\u124f\x02\u1252\x02\u1258\x02\u125a\x02\u125a\x02\u125c\x02\u125f\x02\u1262\x02\u128a\x02\u128c\x02\u128f\x02\u1292\x02\u12b2\x02\u12b4\x02\u12b7\x02\u12ba\x02\u12c0\x02\u12c2\x02\u12c2\x02\u12c4\x02\u12c7\x02\u12ca\x02\u12d8\x02\u12da\x02\u1312\x02\u1314\x02\u1317\x02\u131a\x02\u135c\x02\u135f\x02\u1361\x02\u1382\x02\u1391\x02\u13a2\x02\u13f7\x02\u13fa\x02\u13ff\x02\u1403\x02\u166e\x02\u1671\x02\u1681\x02\u1683\x02\u169c\x02\u16a2\x02\u16ec\x02\u16f0\x02\u16fa\x02\u1702\x02\u170e\x02\u1710\x02\u1716\x02\u1722\x02\u1736\x02\u1742\x02\u1755\x02\u1762\x02\u176e\x02\u1770\x02\u1772\x02\u1774\x02\u1775\x02\u1782\x02\u17d5\x02\u17d9\x02\u17d9\x02\u17de\x02\u17df\x02\u17e2\x02\u17eb\x02\u180d\x02\u1810\x02\u1812\x02\u181b\x02\u1822\x02\u1879\x02\u1882\x02\u18ac\x02\u18b2\x02\u18f7\x02\u1902\x02\u1920\x02\u1922\x02\u192d\x02\u1932\x02\u193d\x02\u1948\x02\u196f\x02\u1972\x02\u1976\x02\u1982\x02\u19ad\x02\u19b2\x02\u19cb\x02\u19d2\x02\u19db\x02\u1a02\x02\u1a1d\x02\u1a22\x02\u1a60\x02\u1a62\x02\u1a7e\x02\u1a81\x02\u1a8b\x02\u1a92\x02\u1a9b\x02\u1aa9\x02\u1aa9\x02\u1ab2\x02\u1abf\x02\u1b02\x02\u1b4d\x02\u1b52\x02\u1b5b\x02\u1b6d\x02\u1b75\x02\u1b82\x02\u1bf5\x02\u1c02\x02\u1c39\x02\u1c42\x02\u1c4b\x02\u1c4f\x02\u1c7f\x02\u1c82\x02\u1c8a\x02\u1cd2\x02\u1cd4\x02\u1cd6\x02\u1cf8\x02\u1cfa\x02\u1cfb\x02\u1d02\x02\u1df7\x02\u1dfd\x02\u1f17\x02\u1f1a\x02\u1f1f\x02\u1f22\x02\u1f47\x02\u1f4a\x02\u1f4f\x02\u1f52\x02\u1f59\x02\u1f5b\x02\u1f5b\x02\u1f5d\x02\u1f5d\x02\u1f5f\x02\u1f5f\x02\u1f61\x02\u1f7f\x02\u1f82\x02\u1fb6\x02\u1fb8\x02\u1fbe\x02\u1fc0\x02\u1fc0\x02\u1fc4\x02\u1fc6\x02\u1fc8\x02\u1fce\x02\u1fd2\x02\u1fd5\x02\u1fd8\x02\u1fdd\x02\u1fe2\x02\u1fee\x02\u1ff4\x02\u1ff6\x02\u1ff8\x02\u1ffe\x02\u200d\x02\u2011\x02\u202c\x02\u2030\x02\u2041\x02\u2042\x02\u2056\x02\u2056\x02\u2062\x02\u2066\x02\u2068\x02\u2071\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02\u2092\x02\u209e\x02\u20d2\x02\u20de\x02\u20e3\x02\u20e3\x02\u20e7\x02\u20f2\x02\u2104\x02\u2104\x02\u2109\x02\u2109\x02\u210c\x02\u2115\x02\u2117\x02\u2117\x02\u211b\x02\u211f\x02\u2126\x02\u2126\x02\u2128\x02\u2128\x02\u212a\x02\u212a\x02\u212c\x02\u212f\x02\u2131\x02\u213b\x02\u213e\x02\u2141\x02\u2147\x02\u214b\x02\u2150\x02\u2150\x02\u2162\x02\u218a\x02\u2c02\x02\u2c30\x02\u2c32\x02\u2c60\x02\u2c62\x02\u2ce6\x02\u2ced\x02\u2cf5\x02\u2d02\x02\u2d27\x02\u2d29\x02\u2d29\x02\u2d2f\x02\u2d2f\x02\u2d32\x02\u2d69\x02\u2d71\x02\u2d71\x02\u2d81\x02\u2d98\x02\u2da2\x02\u2da8\x02\u2daa\x02\u2db0\x02\u2db2\x02\u2db8\x02\u2dba\x02\u2dc0\x02\u2dc2\x02\u2dc8\x02\u2dca\x02\u2dd0\x02\u2dd2\x02\u2dd8\x02\u2dda\x02\u2de0\x02\u2de2\x02\u2e01\x02\u2e31\x02\u2e31\x02\u3007\x02\u3009\x02\u3023\x02\u3031\x02\u3033\x02\u3037\x02\u303a\x02\u303e\x02\u3043\x02\u3098\x02\u309b\x02\u309c\x02\u309f\x02\u30a1\x02\u30a3\x02\u30fc\x02\u30fe\x02\u3101\x02\u3107\x02\u312f\x02\u3133\x02\u3190\x02\u31a2\x02\u31bc\x02\u31f2\x02\u3201\x02\u3402\x02\u4db7\x02\u4e02\x02\u9fd7\x02\ua002\x02\ua48e\x02\ua4d2\x02\ua4ff\x02\ua502\x02\ua60e\x02\ua612\x02\ua62d\x02\ua642\x02\ua671\x02\ua676\x02\ua67f\x02\ua681\x02\ua6f3\x02\ua719\x02\ua721\x02\ua724\x02\ua78a\x02\ua78d\x02\ua7b0\x02\ua7b2\x02\ua7b9\x02\ua7f9\x02\ua829\x02\ua842\x02\ua875\x02\ua882\x02\ua8c7\x02\ua8d2\x02\ua8db\x02\ua8e2\x02\ua8f9\x02\ua8fd\x02\ua8fd\x02\ua8ff\x02\ua8ff\x02\ua902\x02\ua92f\x02\ua932\x02\ua955\x02\ua962\x02\ua97e\x02\ua982\x02\ua9c2\x02\ua9d1\x02\ua9db\x02\ua9e2\x02\uaa00\x02\uaa02\x02\uaa38\x02\uaa42\x02\uaa4f\x02\uaa52\x02\uaa5b\x02\uaa62\x02\uaa78\x02\uaa7c\x02\uaac4\x02\uaadd\x02\uaadf\x02\uaae2\x02\uaaf1\x02\uaaf4\x02\uaaf8\x02\uab03\x02\uab08\x02\uab0b\x02\uab10\x02\uab13\x02\uab18\x02\uab22\x02\uab28\x02\uab2a\x02\uab30\x02\uab32\x02\uab5c\x02\uab5e\x02\uab67\x02\uab72\x02\uabec\x02\uabee\x02\uabef\x02\uabf2\x02\uabfb\x02\uac02\x02\ud7a5\x02\ud7b2\x02\ud7c8\x02\ud7cd\x02\ud7fd\x02\uf902\x02\ufa6f\x02\ufa72\x02\ufadb\x02\ufb02\x02\ufb08\x02\ufb15\x02\ufb19\x02\ufb1f\x02\ufb2a\x02\ufb2c\x02\ufb38\x02\ufb3a\x02\ufb3e\x02\ufb40\x02\ufb40\x02\ufb42\x02\ufb43\x02\ufb45\x02\ufb46\x02\ufb48\x02\ufbb3\x02\ufbd5\x02\ufd3f\x02\ufd52\x02\ufd91\x02\ufd94\x02\ufdc9\x02\ufdf2\x02\ufdfd\x02\ufe02\x02\ufe11\x02\ufe22\x02\ufe31\x02\ufe35\x02\ufe36\x02\ufe4f\x02\ufe51\x02\ufe72\x02\ufe76\x02\ufe78\x02\ufefe\x02\uff01\x02\uff01\x02\uff12\x02\uff1b\x02\uff23\x02\uff3c\x02\uff41\x02\uff41\x02\uff43\x02\uff5c\x02\uff68\x02\uffc0\x02\uffc4\x02\uffc9\x02\uffcc\x02\uffd1\x02\uffd4\x02\uffd9\x02\uffdc\x02\uffde\x02\ufffb\x02\ufffd\x02\x02\x03\r\x03\x0f\x03(\x03*\x03<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xfc\x03\u0142\x03\u0176\x03\u01ff\x03\u01ff\x03\u0282\x03\u029e\x03\u02a2\x03\u02d2\x03\u02e2\x03\u02e2\x03\u0302\x03\u0321\x03\u0332\x03\u034c\x03\u0352\x03\u037c\x03\u0382\x03\u039f\x03\u03a2\x03\u03c5\x03\u03ca\x03\u03d1\x03\u03d3\x03\u03d7\x03\u0402\x03\u049f\x03\u04a2\x03\u04ab\x03\u04b2\x03\u04d5\x03\u04da\x03\u04fd\x03\u0502\x03\u0529\x03\u0532\x03\u0565\x03\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769\x03\u0802\x03\u0807\x03\u080a\x03\u080a\x03\u080c\x03\u0837\x03\u0839\x03\u083a\x03\u083e\x03\u083e\x03\u0841\x03\u0857\x03\u0862\x03\u0878\x03\u0882\x03\u08a0\x03\u08e2\x03\u08f4\x03\u08f6\x03\u08f7\x03\u0902\x03\u0917\x03\u0922\x03\u093b\x03\u0982\x03\u09b9\x03\u09c0\x03\u09c1\x03\u0a02\x03\u0a05\x03\u0a07\x03\u0a08\x03\u0a0e\x03\u0a15\x03\u0a17\x03\u0a19\x03\u0a1b\x03\u0a35\x03\u0a3a\x03\u0a3c\x03\u0a41\x03\u0a41\x03\u0a62\x03\u0a7e\x03\u0a82\x03\u0a9e\x03\u0ac2\x03\u0ac9\x03\u0acb\x03\u0ae8\x03\u0b02\x03\u0b37\x03\u0b42\x03\u0b57\x03\u0b62\x03\u0b74\x03\u0b82\x03\u0b93\x03\u0c02\x03\u0c4a\x03\u0c82\x03\u0cb4\x03\u0cc2\x03\u0cf4\x03\u1002\x03\u1048\x03\u1068\x03\u1071\x03\u1081\x03\u10bc\x03\u10bf\x03\u10bf\x03\u10d2\x03\u10ea\x03\u10f2\x03\u10fb\x03\u1102\x03\u1136\x03\u1138\x03\u1141\x03\u1152\x03\u1175\x03\u1178\x03\u1178\x03\u1182\x03\u11c6\x03\u11cc\x03\u11ce\x03\u11d2\x03\u11dc\x03\u11de\x03\u11de\x03\u1202\x03\u1213\x03\u1215\x03\u1239\x03\u1240\x03\u1240\x03\u1282\x03\u1288\x03\u128a\x03\u128a\x03\u128c\x03\u128f\x03\u1291\x03\u129f\x03\u12a1\x03\u12aa\x03\u12b2\x03\u12ec\x03\u12f2\x03\u12fb\x03\u1302\x03\u1305\x03\u1307\x03\u130e\x03\u1311\x03\u1312\x03\u1315\x03\u132a\x03\u132c\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133b\x03\u133e\x03\u1346\x03\u1349\x03\u134a\x03\u134d\x03\u134f\x03\u1352\x03\u1352\x03\u1359\x03\u1359\x03\u135f\x03\u1365\x03\u1368\x03\u136e\x03\u1372\x03\u1376\x03\u1402\x03\u144c\x03\u1452\x03\u145b\x03\u1482\x03\u14c7\x03\u14c9\x03\u14c9\x03\u14d2\x03\u14db\x03\u1582\x03\u15b7\x03\u15ba\x03\u15c2\x03\u15da\x03\u15df\x03\u1602\x03\u1642\x03\u1646\x03\u1646\x03\u1652\x03\u165b\x03\u1682\x03\u16b9\x03\u16c2\x03\u16cb\x03\u1702\x03\u171b\x03\u171f\x03\u172d\x03\u1732\x03\u173b\x03\u18a2\x03\u18eb\x03\u1901\x03\u1901\x03\u1ac2\x03\u1afa\x03\u1c02\x03\u1c0a\x03\u1c0c\x03\u1c38\x03\u1c3a\x03\u1c42\x03\u1c52\x03\u1c5b\x03\u1c74\x03\u1c91\x03\u1c94\x03\u1ca9\x03\u1cab\x03\u1cb8\x03\u2002\x03\u239b\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03\u3430\x03\u4402\x03\u4648\x03\u6802\x03\u6a3a\x03\u6a42\x03\u6a60\x03\u6a62\x03\u6a6b\x03\u6ad2\x03\u6aef\x03\u6af2\x03\u6af6\x03\u6b02\x03\u6b38\x03\u6b42\x03\u6b45\x03\u6b52\x03\u6b5b\x03\u6b65\x03\u6b79\x03\u6b7f\x03\u6b91\x03\u6f02\x03\u6f46\x03\u6f52\x03\u6f80\x03\u6f91\x03\u6fa1\x03\u6fe2\x03\u6fe2\x03\u7002\x03\u87ee\x03\u8802\x03\u8af4\x03\ub002\x03\ub003\x03\ubc02\x03\ubc6c\x03\ubc72\x03\ubc7e\x03\ubc82\x03\ubc8a\x03\ubc92\x03\ubc9b\x03\ubc9f\x03\ubca0\x03\ubca2\x03\ubca5\x03\ud167\x03\ud16b\x03\ud16f\x03\ud184\x03\ud187\x03\ud18d\x03\ud1ac\x03\ud1af\x03\ud244\x03\ud246\x03\ud402\x03\ud456\x03\ud458\x03\ud49e\x03\ud4a0\x03\ud4a1\x03\ud4a4\x03\ud4a4\x03\ud4a7\x03\ud4a8\x03\ud4ab\x03\ud4ae\x03\ud4b0\x03\ud4bb\x03\ud4bd\x03\ud4bd\x03\ud4bf\x03\ud4c5\x03\ud4c7\x03\ud507\x03\ud509\x03\ud50c\x03\ud50f\x03\ud516\x03\ud518\x03\ud51e\x03\ud520\x03\ud53b\x03\ud53d\x03\ud540\x03\ud542\x03\ud546\x03\ud548\x03\ud548\x03\ud54c\x03\ud552\x03\ud554\x03\ud6a7\x03\ud6aa\x03\ud6c2\x03\ud6c4\x03\ud6dc\x03\ud6de\x03\ud6fc\x03\ud6fe\x03\ud716\x03\ud718\x03\ud736\x03\ud738\x03\ud750\x03\ud752\x03\ud770\x03\ud772\x03\ud78a\x03\ud78c\x03\ud7aa\x03\ud7ac\x03\ud7c4\x03\ud7c6\x03\ud7cd\x03\ud7d0\x03\ud801\x03\uda02\x03\uda38\x03\uda3d\x03\uda6e\x03\uda77\x03\uda77\x03\uda86\x03\uda86\x03\uda9d\x03\udaa1\x03\udaa3\x03\udab1\x03\ue002\x03\ue008\x03\ue00a\x03\ue01a\x03\ue01d\x03\ue023\x03\ue025\x03\ue026\x03\ue028\x03\ue02c\x03\ue802\x03\ue8c6\x03\ue8d2\x03\ue8d8\x03\ue902\x03\ue94c\x03\ue952\x03\ue95b\x03\uee02\x03\uee05\x03\uee07\x03\uee21\x03\uee23\x03\uee24\x03\uee26\x03\uee26\x03\uee29\x03\uee29\x03\uee2b\x03\uee34\x03\uee36\x03\uee39\x03\uee3b\x03\uee3b\x03\uee3d\x03\uee3d\x03\uee44\x03\uee44\x03\uee49\x03\uee49\x03\uee4b\x03\uee4b\x03\uee4d\x03\uee4d\x03\uee4f\x03\uee51\x03\uee53\x03\uee54\x03\uee56\x03\uee56\x03\uee59\x03\uee59\x03\uee5b\x03\uee5b\x03\uee5d\x03\uee5d\x03\uee5f\x03\uee5f\x03\uee61\x03\uee61\x03\uee63\x03\uee64\x03\uee66\x03\uee66\x03\uee69\x03\uee6c\x03\uee6e\x03\uee74\x03\uee76\x03\uee79\x03\uee7b\x03\uee7e\x03\uee80\x03\uee80\x03\uee82\x03\uee8b\x03\uee8d\x03\uee9d\x03\ueea3\x03\ueea5\x03\ueea7\x03\ueeab\x03\ueead\x03\ueebd\x03\x02\x04\ua6d8\x04\ua702\x04\ub736\x04\ub742\x04\ub81f\x04\ub822\x04\ucea3\x04\uf802\x04\ufa1f\x04\x03\x10\x03\x10"\x10\x81\x10\u0102\x10\u01f1\x10\u0240\x02C\x02\\\x02c\x02|\x02\xac\x02\xac\x02\xb7\x02\xb7\x02\xbc\x02\xbc\x02\xc2\x02\xd8\x02\xda\x02\xf8\x02\xfa\x02\u02c3\x02\u02c8\x02\u02d3\x02\u02e2\x02\u02e6\x02\u02ee\x02\u02ee\x02\u02f0\x02\u02f0\x02\u0372\x02\u0376\x02\u0378\x02\u0379\x02\u037c\x02\u037f\x02\u0381\x02\u0381\x02\u0388\x02\u0388\x02\u038a\x02\u038c\x02\u038e\x02\u038e\x02\u0390\x02\u03a3\x02\u03a5\x02\u03f7\x02\u03f9\x02\u0483\x02\u048c\x02\u0531\x02\u0533\x02\u0558\x02\u055b\x02\u055b\x02\u0563\x02\u0589\x02\u05d2\x02\u05ec\x02\u05f2\x02\u05f4\x02\u0622\x02\u064c\x02\u0670\x02\u0671\x02\u0673\x02\u06d5\x02\u06d7\x02\u06d7\x02\u06e7\x02\u06e8\x02\u06f0\x02\u06f1\x02\u06fc\x02\u06fe\x02\u0701\x02\u0701\x02\u0712\x02\u0712\x02\u0714\x02\u0731\x02\u074f\x02\u07a7\x02\u07b3\x02\u07b3\x02\u07cc\x02\u07ec\x02\u07f6\x02\u07f7\x02\u07fc\x02\u07fc\x02\u0802\x02\u0817\x02\u081c\x02\u081c\x02\u0826\x02\u0826\x02\u082a\x02\u082a\x02\u0842\x02\u085a\x02\u08a2\x02\u08b6\x02\u08b8\x02\u08bf\x02\u0906\x02\u093b\x02\u093f\x02\u093f\x02\u0952\x02\u0952\x02\u095a\x02\u0963\x02\u0973\x02\u0982\x02\u0987\x02\u098e\x02\u0991\x02\u0992\x02\u0995\x02\u09aa\x02\u09ac\x02\u09b2\x02\u09b4\x02\u09b4\x02\u09b8\x02\u09bb\x02\u09bf\x02\u09bf\x02\u09d0\x02\u09d0\x02\u09de\x02\u09df\x02\u09e1\x02\u09e3\x02\u09f2\x02\u09f3\x02\u0a07\x02\u0a0c\x02\u0a11\x02\u0a12\x02\u0a15\x02\u0a2a\x02\u0a2c\x02\u0a32\x02\u0a34\x02\u0a35\x02\u0a37\x02\u0a38\x02\u0a3a\x02\u0a3b\x02\u0a5b\x02\u0a5e\x02\u0a60\x02\u0a60\x02\u0a74\x02\u0a76\x02\u0a87\x02\u0a8f\x02\u0a91\x02\u0a93\x02\u0a95\x02\u0aaa\x02\u0aac\x02\u0ab2\x02\u0ab4\x02\u0ab5\x02\u0ab7\x02\u0abb\x02\u0abf\x02\u0abf\x02\u0ad2\x02\u0ad2\x02\u0ae2\x02\u0ae3\x02\u0afb\x02\u0afb\x02\u0b07\x02\u0b0e\x02\u0b11\x02\u0b12\x02\u0b15\x02\u0b2a\x02\u0b2c\x02\u0b32\x02\u0b34\x02\u0b35\x02\u0b37\x02\u0b3b\x02\u0b3f\x02\u0b3f\x02\u0b5e\x02\u0b5f\x02\u0b61\x02\u0b63\x02\u0b73\x02\u0b73\x02\u0b85\x02\u0b85\x02\u0b87\x02\u0b8c\x02\u0b90\x02\u0b92\x02\u0b94\x02\u0b97\x02\u0b9b\x02\u0b9c\x02\u0b9e\x02\u0b9e\x02\u0ba0\x02\u0ba1\x02\u0ba5\x02\u0ba6\x02\u0baa\x02\u0bac\x02\u0bb0\x02\u0bbb\x02\u0bd2\x02\u0bd2\x02\u0c07\x02\u0c0e\x02\u0c10\x02\u0c12\x02\u0c14\x02\u0c2a\x02\u0c2c\x02\u0c3b\x02\u0c3f\x02\u0c3f\x02\u0c5a\x02\u0c5c\x02\u0c62\x02\u0c63\x02\u0c82\x02\u0c82\x02\u0c87\x02\u0c8e\x02\u0c90\x02\u0c92\x02\u0c94\x02\u0caa\x02\u0cac\x02\u0cb5\x02\u0cb7\x02\u0cbb\x02\u0cbf\x02\u0cbf\x02\u0ce0\x02\u0ce0\x02\u0ce2\x02\u0ce3\x02\u0cf3\x02\u0cf4\x02\u0d07\x02\u0d0e\x02\u0d10\x02\u0d12\x02\u0d14\x02\u0d3c\x02\u0d3f\x02\u0d3f\x02\u0d50\x02\u0d50\x02\u0d56\x02\u0d58\x02\u0d61\x02\u0d63\x02\u0d7c\x02\u0d81\x02\u0d87\x02\u0d98\x02\u0d9c\x02\u0db3\x02\u0db5\x02\u0dbd\x02\u0dbf\x02\u0dbf\x02\u0dc2\x02\u0dc8\x02\u0e03\x02\u0e32\x02\u0e34\x02\u0e35\x02\u0e42\x02\u0e48\x02\u0e83\x02\u0e84\x02\u0e86\x02\u0e86\x02\u0e89\x02\u0e8a\x02\u0e8c\x02\u0e8c\x02\u0e8f\x02\u0e8f\x02\u0e96\x02\u0e99\x02\u0e9b\x02\u0ea1\x02\u0ea3\x02\u0ea5\x02\u0ea7\x02\u0ea7\x02\u0ea9\x02\u0ea9\x02\u0eac\x02\u0ead\x02\u0eaf\x02\u0eb2\x02\u0eb4\x02\u0eb5\x02\u0ebf\x02\u0ebf\x02\u0ec2\x02\u0ec6\x02\u0ec8\x02\u0ec8\x02\u0ede\x02\u0ee1\x02\u0f02\x02\u0f02\x02\u0f42\x02\u0f49\x02\u0f4b\x02\u0f6e\x02\u0f8a\x02\u0f8e\x02\u1002\x02\u102c\x02\u1041\x02\u1041\x02\u1052\x02\u1057\x02\u105c\x02\u105f\x02\u1063\x02\u1063\x02\u1067\x02\u1068\x02\u1070\x02\u1072\x02\u1077\x02\u1083\x02\u1090\x02\u1090\x02\u10a2\x02\u10c7\x02\u10c9\x02\u10c9\x02\u10cf\x02\u10cf\x02\u10d2\x02\u10fc\x02\u10fe\x02\u124a\x02\u124c\x02\u124f\x02\u1252\x02\u1258\x02\u125a\x02\u125a\x02\u125c\x02\u125f\x02\u1262\x02\u128a\x02\u128c\x02\u128f\x02\u1292\x02\u12b2\x02\u12b4\x02\u12b7\x02\u12ba\x02\u12c0\x02\u12c2\x02\u12c2\x02\u12c4\x02\u12c7\x02\u12ca\x02\u12d8\x02\u12da\x02\u1312\x02\u1314\x02\u1317\x02\u131a\x02\u135c\x02\u1382\x02\u1391\x02\u13a2\x02\u13f7\x02\u13fa\x02\u13ff\x02\u1403\x02\u166e\x02\u1671\x02\u1681\x02\u1683\x02\u169c\x02\u16a2\x02\u16ec\x02\u16f0\x02\u16fa\x02\u1702\x02\u170e\x02\u1710\x02\u1713\x02\u1722\x02\u1733\x02\u1742\x02\u1753\x02\u1762\x02\u176e\x02\u1770\x02\u1772\x02\u1782\x02\u17b5\x02\u17d9\x02\u17d9\x02\u17de\x02\u17de\x02\u1822\x02\u1879\x02\u1882\x02\u1886\x02\u1889\x02\u18aa\x02\u18ac\x02\u18ac\x02\u18b2\x02\u18f7\x02\u1902\x02\u1920\x02\u1952\x02\u196f\x02\u1972\x02\u1976\x02\u1982\x02\u19ad\x02\u19b2\x02\u19cb\x02\u1a02\x02\u1a18\x02\u1a22\x02\u1a56\x02\u1aa9\x02\u1aa9\x02\u1b07\x02\u1b35\x02\u1b47\x02\u1b4d\x02\u1b85\x02\u1ba2\x02\u1bb0\x02\u1bb1\x02\u1bbc\x02\u1be7\x02\u1c02\x02\u1c25\x02\u1c4f\x02\u1c51\x02\u1c5c\x02\u1c7f\x02\u1c82\x02\u1c8a\x02\u1ceb\x02\u1cee\x02\u1cf0\x02\u1cf3\x02\u1cf7\x02\u1cf8\x02\u1d02\x02\u1dc1\x02\u1e02\x02\u1f17\x02\u1f1a\x02\u1f1f\x02\u1f22\x02\u1f47\x02\u1f4a\x02\u1f4f\x02\u1f52\x02\u1f59\x02\u1f5b\x02\u1f5b\x02\u1f5d\x02\u1f5d\x02\u1f5f\x02\u1f5f\x02\u1f61\x02\u1f7f\x02\u1f82\x02\u1fb6\x02\u1fb8\x02\u1fbe\x02\u1fc0\x02\u1fc0\x02\u1fc4\x02\u1fc6\x02\u1fc8\x02\u1fce\x02\u1fd2\x02\u1fd5\x02\u1fd8\x02\u1fdd\x02\u1fe2\x02\u1fee\x02\u1ff4\x02\u1ff6\x02\u1ff8\x02\u1ffe\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02\u2092\x02\u209e\x02\u2104\x02\u2104\x02\u2109\x02\u2109\x02\u210c\x02\u2115\x02\u2117\x02\u2117\x02\u211b\x02\u211f\x02\u2126\x02\u2126\x02\u2128\x02\u2128\x02\u212a\x02\u212a\x02\u212c\x02\u212f\x02\u2131\x02\u213b\x02\u213e\x02\u2141\x02\u2147\x02\u214b\x02\u2150\x02\u2150\x02\u2162\x02\u218a\x02\u2c02\x02\u2c30\x02\u2c32\x02\u2c60\x02\u2c62\x02\u2ce6\x02\u2ced\x02\u2cf0\x02\u2cf4\x02\u2cf5\x02\u2d02\x02\u2d27\x02\u2d29\x02\u2d29\x02\u2d2f\x02\u2d2f\x02\u2d32\x02\u2d69\x02\u2d71\x02\u2d71\x02\u2d82\x02\u2d98\x02\u2da2\x02\u2da8\x02\u2daa\x02\u2db0\x02\u2db2\x02\u2db8\x02\u2dba\x02\u2dc0\x02\u2dc2\x02\u2dc8\x02\u2dca\x02\u2dd0\x02\u2dd2\x02\u2dd8\x02\u2dda\x02\u2de0\x02\u2e31\x02\u2e31\x02\u3007\x02\u3009\x02\u3023\x02\u302b\x02\u3033\x02\u3037\x02\u303a\x02\u303e\x02\u3043\x02\u3098\x02\u309f\x02\u30a1\x02\u30a3\x02\u30fc\x02\u30fe\x02\u3101\x02\u3107\x02\u312f\x02\u3133\x02\u3190\x02\u31a2\x02\u31bc\x02\u31f2\x02\u3201\x02\u3402\x02\u4db7\x02\u4e02\x02\u9fd7\x02\ua002\x02\ua48e\x02\ua4d2\x02\ua4ff\x02\ua502\x02\ua60e\x02\ua612\x02\ua621\x02\ua62c\x02\ua62d\x02\ua642\x02\ua670\x02\ua681\x02\ua69f\x02\ua6a2\x02\ua6f1\x02\ua719\x02\ua721\x02\ua724\x02\ua78a\x02\ua78d\x02\ua7b0\x02\ua7b2\x02\ua7b9\x02\ua7f9\x02\ua803\x02\ua805\x02\ua807\x02\ua809\x02\ua80c\x02\ua80e\x02\ua824\x02\ua842\x02\ua875\x02\ua884\x02\ua8b5\x02\ua8f4\x02\ua8f9\x02\ua8fd\x02\ua8fd\x02\ua8ff\x02\ua8ff\x02\ua90c\x02\ua927\x02\ua932\x02\ua948\x02\ua962\x02\ua97e\x02\ua986\x02\ua9b4\x02\ua9d1\x02\ua9d1\x02\ua9e2\x02\ua9e6\x02\ua9e8\x02\ua9f1\x02\ua9fc\x02\uaa00\x02\uaa02\x02\uaa2a\x02\uaa42\x02\uaa44\x02\uaa46\x02\uaa4d\x02\uaa62\x02\uaa78\x02\uaa7c\x02\uaa7c\x02\uaa80\x02\uaab1\x02\uaab3\x02\uaab3\x02\uaab7\x02\uaab8\x02\uaabb\x02\uaabf\x02\uaac2\x02\uaac2\x02\uaac4\x02\uaac4\x02\uaadd\x02\uaadf\x02\uaae2\x02\uaaec\x02\uaaf4\x02\uaaf6\x02\uab03\x02\uab08\x02\uab0b\x02\uab10\x02\uab13\x02\uab18\x02\uab22\x02\uab28\x02\uab2a\x02\uab30\x02\uab32\x02\uab5c\x02\uab5e\x02\uab67\x02\uab72\x02\uabe4\x02\uac02\x02\ud7a5\x02\ud7b2\x02\ud7c8\x02\ud7cd\x02\ud7fd\x02\uf902\x02\ufa6f\x02\ufa72\x02\ufadb\x02\ufb02\x02\ufb08\x02\ufb15\x02\ufb19\x02\ufb1f\x02\ufb1f\x02\ufb21\x02\ufb2a\x02\ufb2c\x02\ufb38\x02\ufb3a\x02\ufb3e\x02\ufb40\x02\ufb40\x02\ufb42\x02\ufb43\x02\ufb45\x02\ufb46\x02\ufb48\x02\ufbb3\x02\ufbd5\x02\ufd3f\x02\ufd52\x02\ufd91\x02\ufd94\x02\ufdc9\x02\ufdf2\x02\ufdfd\x02\ufe72\x02\ufe76\x02\ufe78\x02\ufefe\x02\uff23\x02\uff3c\x02\uff43\x02\uff5c\x02\uff68\x02\uffc0\x02\uffc4\x02\uffc9\x02\uffcc\x02\uffd1\x02\uffd4\x02\uffd9\x02\uffdc\x02\uffde\x02\x02\x03\r\x03\x0f\x03(\x03*\x03<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xfc\x03\u0142\x03\u0176\x03\u0282\x03\u029e\x03\u02a2\x03\u02d2\x03\u0302\x03\u0321\x03\u0332\x03\u034c\x03\u0352\x03\u0377\x03\u0382\x03\u039f\x03\u03a2\x03\u03c5\x03\u03ca\x03\u03d1\x03\u03d3\x03\u03d7\x03\u0402\x03\u049f\x03\u04b2\x03\u04d5\x03\u04da\x03\u04fd\x03\u0502\x03\u0529\x03\u0532\x03\u0565\x03\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769\x03\u0802\x03\u0807\x03\u080a\x03\u080a\x03\u080c\x03\u0837\x03\u0839\x03\u083a\x03\u083e\x03\u083e\x03\u0841\x03\u0857\x03\u0862\x03\u0878\x03\u0882\x03\u08a0\x03\u08e2\x03\u08f4\x03\u08f6\x03\u08f7\x03\u0902\x03\u0917\x03\u0922\x03\u093b\x03\u0982\x03\u09b9\x03\u09c0\x03\u09c1\x03\u0a02\x03\u0a02\x03\u0a12\x03\u0a15\x03\u0a17\x03\u0a19\x03\u0a1b\x03\u0a35\x03\u0a62\x03\u0a7e\x03\u0a82\x03\u0a9e\x03\u0ac2\x03\u0ac9\x03\u0acb\x03\u0ae6\x03\u0b02\x03\u0b37\x03\u0b42\x03\u0b57\x03\u0b62\x03\u0b74\x03\u0b82\x03\u0b93\x03\u0c02\x03\u0c4a\x03\u0c82\x03\u0cb4\x03\u0cc2\x03\u0cf4\x03\u1005\x03\u1039\x03\u1085\x03\u10b1\x03\u10d2\x03\u10ea\x03\u1105\x03\u1128\x03\u1152\x03\u1174\x03\u1178\x03\u1178\x03\u1185\x03\u11b4\x03\u11c3\x03\u11c6\x03\u11dc\x03\u11dc\x03\u11de\x03\u11de\x03\u1202\x03\u1213\x03\u1215\x03\u122d\x03\u1282\x03\u1288\x03\u128a\x03\u128a\x03\u128c\x03\u128f\x03\u1291\x03\u129f\x03\u12a1\x03\u12aa\x03\u12b2\x03\u12e0\x03\u1307\x03\u130e\x03\u1311\x03\u1312\x03\u1315\x03\u132a\x03\u132c\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133b\x03\u133f\x03\u133f\x03\u1352\x03\u1352\x03\u135f\x03\u1363\x03\u1402\x03\u1436\x03\u1449\x03\u144c\x03\u1482\x03\u14b1\x03\u14c6\x03\u14c7\x03\u14c9\x03\u14c9\x03\u1582\x03\u15b0\x03\u15da\x03\u15dd\x03\u1602\x03\u1631\x03\u1646\x03\u1646\x03\u1682\x03\u16ac\x03\u1702\x03\u171b\x03\u18a2\x03\u18e1\x03\u1901\x03\u1901\x03\u1ac2\x03\u1afa\x03\u1c02\x03\u1c0a\x03\u1c0c\x03\u1c30\x03\u1c42\x03\u1c42\x03\u1c74\x03\u1c91\x03\u2002\x03\u239b\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03\u3430\x03\u4402\x03\u4648\x03\u6802\x03\u6a3a\x03\u6a42\x03\u6a60\x03\u6ad2\x03\u6aef\x03\u6b02\x03\u6b31\x03\u6b42\x03\u6b45\x03\u6b65\x03\u6b79\x03\u6b7f\x03\u6b91\x03\u6f02\x03\u6f46\x03\u6f52\x03\u6f52\x03\u6f95\x03\u6fa1\x03\u6fe2\x03\u6fe2\x03\u7002\x03\u87ee\x03\u8802\x03\u8af4\x03\ub002\x03\ub003\x03\ubc02\x03\ubc6c\x03\ubc72\x03\ubc7e\x03\ubc82\x03\ubc8a\x03\ubc92\x03\ubc9b\x03\ud402\x03\ud456\x03\ud458\x03\ud49e\x03\ud4a0\x03\ud4a1\x03\ud4a4\x03\ud4a4\x03\ud4a7\x03\ud4a8\x03\ud4ab\x03\ud4ae\x03\ud4b0\x03\ud4bb\x03\ud4bd\x03\ud4bd\x03\ud4bf\x03\ud4c5\x03\ud4c7\x03\ud507\x03\ud509\x03\ud50c\x03\ud50f\x03\ud516\x03\ud518\x03\ud51e\x03\ud520\x03\ud53b\x03\ud53d\x03\ud540\x03\ud542\x03\ud546\x03\ud548\x03\ud548',u._serializedATNSegment1="\x03\ud54c\x03\ud552\x03\ud554\x03\ud6a7\x03\ud6aa\x03\ud6c2\x03\ud6c4\x03\ud6dc\x03\ud6de\x03\ud6fc\x03\ud6fe\x03\ud716\x03\ud718\x03\ud736\x03\ud738\x03\ud750\x03\ud752\x03\ud770\x03\ud772\x03\ud78a\x03\ud78c\x03\ud7aa\x03\ud7ac\x03\ud7c4\x03\ud7c6\x03\ud7cd\x03\ue802\x03\ue8c6\x03\ue902\x03\ue945\x03\uee02\x03\uee05\x03\uee07\x03\uee21\x03\uee23\x03\uee24\x03\uee26\x03\uee26\x03\uee29\x03\uee29\x03\uee2b\x03\uee34\x03\uee36\x03\uee39\x03\uee3b\x03\uee3b\x03\uee3d\x03\uee3d\x03\uee44\x03\uee44\x03\uee49\x03\uee49\x03\uee4b\x03\uee4b\x03\uee4d\x03\uee4d\x03\uee4f\x03\uee51\x03\uee53\x03\uee54\x03\uee56\x03\uee56\x03\uee59\x03\uee59\x03\uee5b\x03\uee5b\x03\uee5d\x03\uee5d\x03\uee5f\x03\uee5f\x03\uee61\x03\uee61\x03\uee63\x03\uee64\x03\uee66\x03\uee66\x03\uee69\x03\uee6c\x03\uee6e\x03\uee74\x03\uee76\x03\uee79\x03\uee7b\x03\uee7e\x03\uee80\x03\uee80\x03\uee82\x03\uee8b\x03\uee8d\x03\uee9d\x03\ueea3\x03\ueea5\x03\ueea7\x03\ueeab\x03\ueead\x03\ueebd\x03\x02\x04\ua6d8\x04\ua702\x04\ub736\x04\ub742\x04\ub81f\x04\ub822\x04\ucea3\x04\uf802\x04\ufa1f\x041\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x03\x13\x03\x02\x02\x02\x05\x16\x03\x02\x02\x02\x07\x18\x03\x02\x02\x02\t\x1a\x03\x02\x02\x02\v\x1c\x03\x02\x02\x02\r%\x03\x02\x02\x02\x0f'\x03\x02\x02\x02\x11)\x03\x02\x02\x02\x13\x14\x071\x02\x02\x14\x15\x071\x02\x02\x15\x04\x03\x02\x02\x02\x16\x17\x071\x02\x02\x17\x06\x03\x02\x02\x02\x18\x19\x07,\x02\x02\x19\b\x03\x02\x02\x02\x1a\x1b\x07#\x02\x02\x1b\n\x03\x02\x02\x02\x1c \x05\x0f\b\x02\x1d\x1f\x05\r\x07\x02\x1e\x1d\x03\x02\x02\x02\x1f\"\x03\x02\x02\x02 \x1e\x03\x02\x02\x02 !\x03\x02\x02\x02!#\x03\x02\x02\x02\" \x03\x02\x02\x02#$\b\x06\x02\x02$\f\x03\x02\x02\x02%&\t\x02\x02\x02&\x0e\x03\x02\x02\x02'(\t\x03\x02\x02(\x10\x03\x02\x02\x02)-\x07)\x02\x02*,\v\x02\x02\x02+*\x03\x02\x02\x02,/\x03\x02\x02\x02-.\x03\x02\x02\x02-+\x03\x02\x02\x02.0\x03\x02\x02\x02/-\x03\x02\x02\x0201\x07)\x02\x021\x12\x03\x02\x02\x02\x05\x02 -\x03\x03\x06\x02",u._serializedATN=a.join([u._serializedATNSegment0,u._serializedATNSegment1],""),r.XPathLexer=u},{260:260,278:278,283:283,304:304,365:365}],387:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(267),o=t(252),s=t(372),a=t(383);class u extends a.XPathElement{constructor(t,e){super(t),this.ruleIndex=e}evaluate(t){let e=[];for(let r of s.Trees.getChildren(t))r instanceof i.ParserRuleContext&&(r.ruleIndex===this.ruleIndex&&!this.invert||r.ruleIndex!==this.ruleIndex&&this.invert)&&e.push(r);return e}}n([o.Override],u.prototype,"evaluate",null),r.XPathRuleElement=u},{252:252,267:267,372:372,383:383}],388:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(372),s=t(383);class a extends s.XPathElement{constructor(t,e){super(t),this.tokenType=e}evaluate(t){return o.Trees.findAllTokenNodes(t,this.tokenType)}}n([i.Override],a.prototype,"evaluate",null),r.XPathTokenAnywhereElement=a},{252:252,372:372,383:383}],389:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(371),s=t(372),a=t(383);class u extends a.XPathElement{constructor(t,e){super(t),this.tokenType=e}evaluate(t){let e=[];for(let r of s.Trees.getChildren(t))r instanceof o.TerminalNode&&(r.symbol.type===this.tokenType&&!this.invert||r.symbol.type!==this.tokenType&&this.invert)&&e.push(r);return e}}n([i.Override],u.prototype,"evaluate",null),r.XPathTokenElement=u},{252:252,371:371,372:372,383:383}],390:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(372),s=t(382),a=t(383);class u extends a.XPathElement{constructor(){super(s.XPath.WILDCARD)}evaluate(t){return this.invert?[]:o.Trees.getDescendants(t)}}n([i.Override],u.prototype,"evaluate",null),r.XPathWildcardAnywhereElement=u},{252:252,372:372,382:382,383:383}],391:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(372),s=t(382),a=t(383);class u extends a.XPathElement{constructor(){super(s.XPath.WILDCARD)}evaluate(t){let e=[];if(this.invert)return e;for(let r of o.Trees.getChildren(t))e.push(r);return e}}n([i.Override],u.prototype,"evaluate",null),r.XPathWildcardElement=u},{252:252,372:372,382:382,383:383}],386:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});const i=t(252),o=t(372),s=t(383);class a extends s.XPathElement{constructor(t,e){super(t),this.ruleIndex=e}evaluate(t){return o.Trees.findAllRuleNodes(t,this.ruleIndex)}}n([i.Override],a.prototype,"evaluate",null),r.XPathRuleAnywhereElement=a},{252:252,372:372,383:383}],383:[function(t,e,r){"use strict";var n=this&&this.__decorate||function(t,e,r,n){var i,o=arguments.length,s=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,r,s):i(e,r))||s);return o>3&&s&&Object.defineProperty(e,r,s),s};Object.defineProperty(r,"__esModule",{value:!0});class i{constructor(t){this.nodeName=t,this.invert=!1}toString(){let t=this.invert?"!":"";return Object.constructor.name+"["+t+this.nodeName+"]"}}n([t(252).Override],i.prototype,"toString",null),r.XPathElement=i},{252:252}],392:[function(t,e,r){e.exports=function(t,e,r){if(t.filter)return t.filter(e,r);if(null==t)throw new TypeError;if("function"!=typeof e)throw new TypeError;for(var i=[],o=0;o<t.length;o++)if(n.call(t,o)){var s=t[o];e.call(r,s,o,t)&&i.push(s)}return i};var n=Object.prototype.hasOwnProperty},{}],394:[function(t,e,r){(function(r){(function(){"use strict";var n=t(392);e.exports=function(){return n(["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],(function(t){return"function"==typeof r[t]}))}}).call(this)}).call(this,"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{392:392}],395:[function(t,e,r){"use strict";r.toByteArray=function(t){var e,r,n=l(t),s=n[0],a=n[1],u=new o(function(t,e,r){return 3*(e+r)/4-r}(0,s,a)),c=0,h=a>0?s-4:s;for(r=0;r<h;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],u[c++]=e>>16&255,u[c++]=e>>8&255,u[c++]=255&e;return 2===a&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,u[c++]=255&e),1===a&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,u[c++]=e>>8&255,u[c++]=255&e),u},r.fromByteArray=function(t){for(var e,r=t.length,i=r%3,o=[],s=0,a=r-i;s<a;s+=16383)o.push(c(t,s,s+16383>a?a:s+16383));return 1===i?(e=t[r-1],o.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],o.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"=")),o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)n[a]=s[a],i[s.charCodeAt(a)]=a;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function c(t,e,r){for(var i,o,s=[],a=e;a<r;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},{}],397:[function(t,e,r){},{}],398:[function(t,e,r){"use strict";var n=t(429).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=l,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=c,this.end=h,e=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"\ufffd";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"\ufffd";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"\ufffd"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function l(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function c(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function p(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}r.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"\ufffd":e},o.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=s(e[n]);return i>=0?(i>0&&(t.lastNeed=i-1),i):--n<r||-2===i?0:(i=s(e[n]))>=0?(i>0&&(t.lastNeed=i-2),i):--n<r||-2===i?0:(i=s(e[n]))>=0?(i>0&&(2===i?i=0:t.lastNeed=i-3),i):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},{429:429}],429:[function(t,e,r){var n=t(400),i=n.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return i(t,e,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,r),r.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=i(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},{400:400}],400:[function(t,e,r){(function(e){(function(){"use strict";var e=t(395),n=t(416);r.Buffer=o,r.SlowBuffer=function(t){return+t!=t&&(t=0),o.alloc(+t)},r.INSPECT_MAX_BYTES=50;function i(t){if(t>2147483647)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return e.__proto__=o.prototype,e}function o(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return u(t)}return s(t,e,r)}function s(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!o.isEncoding(e))throw new TypeError("Unknown encoding: "+e);var r=0|h(t,e),n=i(r),s=n.write(t,e);return s!==r&&(n=n.slice(0,s)),n}(t,e);if(ArrayBuffer.isView(t))return l(t);if(null==t)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(k(t,ArrayBuffer)||t&&k(t.buffer,ArrayBuffer))return function(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return(n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r)).__proto__=o.prototype,n}(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return o.from(n,e,r);var s=function(t){if(o.isBuffer(t)){var e=0|c(t.length),r=i(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||F(t.length)?i(0):l(t):"Buffer"===t.type&&Array.isArray(t.data)?l(t.data):void 0}(t);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return o.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function a(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function u(t){return a(t),i(t<0?0:0|c(t))}function l(t){for(var e=t.length<0?0:0|c(t.length),r=i(e),n=0;n<e;n+=1)r[n]=255&t[n];return r}function c(t){if(t>=2147483647)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+2147483647..toString(16)+" bytes");return 0|t}function h(t,e){if(o.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||k(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return D(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return U(t).length;default:if(i)return n?-1:D(t).length;e=(""+e).toLowerCase(),i=!0}}function p(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function d(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),F(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=o.from(e,n)),o.isBuffer(e))return 0===e.length?-1:f(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):f(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function f(t,e,r,n,i){var o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function l(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var c=-1;for(o=r;o<a;o++)if(l(t,o)===l(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var h=!0,p=0;p<u;p++)if(l(t,o+p)!==l(e,p)){h=!1;break}if(h)return o}return-1}function y(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(F(a))return s;t[r+s]=a}return s}function m(t,e,r,n){return M(D(e,t.length-r),t,r,n)}function g(t,e,r,n){return M(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function v(t,e,r,n){return g(t,e,r,n)}function T(t,e,r,n){return M(U(e),t,r,n)}function _(t,e,r,n){return M(function(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=(r=t.charCodeAt(s))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function E(t,r,n){return 0===r&&n===t.length?e.fromByteArray(t):e.fromByteArray(t.slice(r,n))}function b(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,u,l=t[i],c=null,h=l>239?4:l>223?3:l>191?2:1;if(i+h<=r)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&l)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=h}return function(t){var e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);for(var r="",n=0;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=S));return r}(n)}r.kMaxLength=2147483647,o.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()}catch(e){return!1}}(),o.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(o.prototype,"parent",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.buffer}}),Object.defineProperty(o.prototype,"offset",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.byteOffset}}),"undefined"!=typeof Symbol&&null!=Symbol.species&&o[Symbol.species]===o&&Object.defineProperty(o,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),o.poolSize=8192,o.from=function(t,e,r){return s(t,e,r)},o.prototype.__proto__=Uint8Array.prototype,o.__proto__=Uint8Array,o.alloc=function(t,e,r){return function(t,e,r){return a(t),t<=0?i(t):void 0!==e?"string"==typeof r?i(t).fill(e,r):i(t).fill(e):i(t)}(t,e,r)},o.allocUnsafe=function(t){return u(t)},o.allocUnsafeSlow=function(t){return u(t)},o.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==o.prototype},o.compare=function(t,e){if(k(t,Uint8Array)&&(t=o.from(t,t.offset,t.byteLength)),k(e,Uint8Array)&&(e=o.from(e,e.offset,e.byteLength)),!o.isBuffer(t)||!o.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,n=e.length,i=0,s=Math.min(r,n);i<s;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},o.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return o.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var n=o.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){var s=t[r];if(k(s,Uint8Array)&&(s=o.from(s)),!o.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,i),i+=s.length}return n},o.byteLength=h,o.prototype._isBuffer=!0,o.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)p(this,e,e+1);return this},o.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)p(this,e,e+3),p(this,e+1,e+2);return this},o.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)p(this,e,e+7),p(this,e+1,e+6),p(this,e+2,e+5),p(this,e+3,e+4);return this},o.prototype.toString=function(){var t=this.length;return 0===t?"":0===arguments.length?b(this,0,t):function(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return A(this,e,r);case"utf8":case"utf-8":return b(this,e,r);case"ascii":return x(this,e,r);case"latin1":case"binary":return C(this,e,r);case"base64":return E(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}.apply(this,arguments)},o.prototype.toLocaleString=o.prototype.toString,o.prototype.equals=function(t){if(!o.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===o.compare(this,t)},o.prototype.inspect=function(){var t="",e=r.INSPECT_MAX_BYTES;return t=this.toString("hex",0,e).replace(/(.{2})/g,"$1 ").trim(),this.length>e&&(t+=" ... "),"<Buffer "+t+">"},o.prototype.compare=function(t,e,r,n,i){if(k(t,Uint8Array)&&(t=o.from(t,t.offset,t.byteLength)),!o.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(e>>>=0),u=Math.min(s,a),l=this.slice(n,i),c=t.slice(e,r),h=0;h<u;++h)if(l[h]!==c[h]){s=l[h],a=c[h];break}return s<a?-1:a<s?1:0},o.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},o.prototype.indexOf=function(t,e,r){return d(this,t,e,r,!0)},o.prototype.lastIndexOf=function(t,e,r){return d(this,t,e,r,!1)},o.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return y(this,t,e,r);case"utf8":case"utf-8":return m(this,t,e,r);case"ascii":return g(this,t,e,r);case"latin1":case"binary":return v(this,t,e,r);case"base64":return T(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function x(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function C(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function A(t,e,r){var n,i=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>i)&&(r=i);for(var o="",s=e;s<r;++s)o+=(n=t[s])<16?"0"+n.toString(16):n.toString(16);return o}function N(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function O(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function w(t,e,r,n,i,s){if(!o.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<s)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function R(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(t,e,r,i,o){return e=+e,r>>>=0,o||R(t,0,r,4),n.write(t,e,r,i,23,4),r+4}function P(t,e,r,i,o){return e=+e,r>>>=0,o||R(t,0,r,8),n.write(t,e,r,i,52,8),r+8}o.prototype.slice=function(t,e){var r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);var n=this.subarray(t,e);return n.__proto__=o.prototype,n},o.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||O(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n},o.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||O(t,e,this.length);for(var n=this[t+--e],i=1;e>0&&(i*=256);)n+=this[t+--e]*i;return n},o.prototype.readUInt8=function(t,e){return t>>>=0,e||O(t,1,this.length),this[t]},o.prototype.readUInt16LE=function(t,e){return t>>>=0,e||O(t,2,this.length),this[t]|this[t+1]<<8},o.prototype.readUInt16BE=function(t,e){return t>>>=0,e||O(t,2,this.length),this[t]<<8|this[t+1]},o.prototype.readUInt32LE=function(t,e){return t>>>=0,e||O(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},o.prototype.readUInt32BE=function(t,e){return t>>>=0,e||O(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},o.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||O(t,e,this.length);for(var n=this[t],i=1,o=0;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},o.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||O(t,e,this.length);for(var n=e,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},o.prototype.readInt8=function(t,e){return t>>>=0,e||O(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},o.prototype.readInt16LE=function(t,e){t>>>=0,e||O(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},o.prototype.readInt16BE=function(t,e){t>>>=0,e||O(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},o.prototype.readInt32LE=function(t,e){return t>>>=0,e||O(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},o.prototype.readInt32BE=function(t,e){return t>>>=0,e||O(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},o.prototype.readFloatLE=function(t,e){return t>>>=0,e||O(t,4,this.length),n.read(this,t,!0,23,4)},o.prototype.readFloatBE=function(t,e){return t>>>=0,e||O(t,4,this.length),n.read(this,t,!1,23,4)},o.prototype.readDoubleLE=function(t,e){return t>>>=0,e||O(t,8,this.length),n.read(this,t,!0,52,8)},o.prototype.readDoubleBE=function(t,e){return t>>>=0,e||O(t,8,this.length),n.read(this,t,!1,52,8)},o.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||w(this,t,e,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},o.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||w(this,t,e,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},o.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,1,255,0),this[e]=255&t,e+1},o.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},o.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},o.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},o.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},o.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);w(this,t,e,r,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<r&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},o.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){var i=Math.pow(2,8*r-1);w(this,t,e,r,i-1,-i)}var o=r-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},o.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},o.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},o.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},o.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},o.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||w(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},o.prototype.writeFloatLE=function(t,e,r){return L(this,t,e,!0,r)},o.prototype.writeFloatBE=function(t,e,r){return L(this,t,e,!1,r)},o.prototype.writeDoubleLE=function(t,e,r){return P(this,t,e,!0,r)},o.prototype.writeDoubleBE=function(t,e,r){return P(this,t,e,!1,r)},o.prototype.copy=function(t,e,r,n){if(!o.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);var i=n-r;if(this===t&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(e,r,n);else if(this===t&&r<e&&e<n)for(var s=i-1;s>=0;--s)t[s+e]=this[s+r];else Uint8Array.prototype.set.call(t,this.subarray(r,n),e);return i},o.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!o.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){var i=t.charCodeAt(0);("utf8"===n&&i<128||"latin1"===n)&&(t=i)}}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var a=o.isBuffer(t)?t:o.from(t,n),u=a.length;if(0===u)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(s=0;s<r-e;++s)this[s+e]=a[s%u]}return this};var I=/[^+/0-9A-Za-z-_]/g;function D(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function U(t){return e.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(I,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function M(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function k(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function F(t){return t!=t}}).call(this)}).call(this,t(400).Buffer)},{395:395,400:400,416:416}],416:[function(t,e,r){r.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,l=u>>1,c=-7,h=r?i-1:0,p=r?-1:1,d=t[e+h];for(h+=p,o=d&(1<<-c)-1,d>>=-c,c+=a;c>0;o=256*o+t[e+h],h+=p,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=n;c>0;s=256*s+t[e+h],h+=p,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),o-=l}return(d?-1:1)*s*Math.pow(2,o-n)},r.write=function(t,e,r,n,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,h=c>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,f=n?1:-1,y=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=c):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(e*u-1)*Math.pow(2,i),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;t[r+d]=255&a,d+=f,a/=256,i-=8);for(s=s<<i|a,l+=i;l>0;t[r+d]=255&s,d+=f,s/=256,l-=8);t[r+d-f]|=128*y}},{}],406:[function(t,e,r){"use strict";var n=TypeError,i=Object.getOwnPropertyDescriptor;if(i)try{i({},"")}catch(f){i=null}var o=function(){throw new n},s=i?function(){try{return o}catch(t){try{return i(arguments,"callee").get}catch(e){return o}}}():o,a=t(414)(),u=Object.getPrototypeOf||function(t){return t.__proto__},l="undefined"==typeof Uint8Array?void 0:u(Uint8Array),c={"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"%ArrayIteratorPrototype%":a?u([][Symbol.iterator]()):void 0,"%ArrayPrototype%":Array.prototype,"%ArrayProto_entries%":Array.prototype.entries,"%ArrayProto_forEach%":Array.prototype.forEach,"%ArrayProto_keys%":Array.prototype.keys,"%ArrayProto_values%":Array.prototype.values,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":void 0,"%AsyncFunctionPrototype%":void 0,"%AsyncGenerator%":void 0,"%AsyncGeneratorFunction%":void 0,"%AsyncGeneratorPrototype%":void 0,"%AsyncIteratorPrototype%":void 0,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%Boolean%":Boolean,"%BooleanPrototype%":Boolean.prototype,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"%Date%":Date,"%DatePrototype%":Date.prototype,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%ErrorPrototype%":Error.prototype,"%eval%":eval,"%EvalError%":EvalError,"%EvalErrorPrototype%":EvalError.prototype,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"%Function%":Function,"%FunctionPrototype%":Function.prototype,"%Generator%":void 0,"%GeneratorFunction%":void 0,"%GeneratorPrototype%":void 0,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":a?u(u([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%JSONParse%":"object"==typeof JSON?JSON.parse:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&a?u((new Map)[Symbol.iterator]()):void 0,"%MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"%Math%":Math,"%Number%":Number,"%NumberPrototype%":Number.prototype,"%Object%":Object,"%ObjectPrototype%":Object.prototype,"%ObjProto_toString%":Object.prototype.toString,"%ObjProto_valueOf%":Object.prototype.valueOf,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"%PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"%Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"%Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"%Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%RangeErrorPrototype%":RangeError.prototype,"%ReferenceError%":ReferenceError,"%ReferenceErrorPrototype%":ReferenceError.prototype,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%RegExpPrototype%":RegExp.prototype,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&a?u((new Set)[Symbol.iterator]()):void 0,"%SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"%String%":String,"%StringIteratorPrototype%":a?u(""[Symbol.iterator]()):void 0,"%StringPrototype%":String.prototype,"%Symbol%":a?Symbol:void 0,"%SymbolPrototype%":a?Symbol.prototype:void 0,"%SyntaxError%":SyntaxError,"%SyntaxErrorPrototype%":SyntaxError.prototype,"%ThrowTypeError%":s,"%TypedArray%":l,"%TypedArrayPrototype%":l?l.prototype:void 0,"%TypeError%":n,"%TypeErrorPrototype%":n.prototype,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"%URIError%":URIError,"%URIErrorPrototype%":URIError.prototype,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype},h=t(413).call(Function.call,String.prototype.replace),p=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,d=/\\(\\)?/g;e.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new TypeError('"allowMissing" argument must be a boolean');for(var r,o=(r=[],h(t,p,(function(t,e,n,i){r[r.length]=n?h(i,d,"$1"):e||t})),r),s=function(t,e){if(!(t in c))throw new SyntaxError("intrinsic "+t+" does not exist!");if(void 0===c[t]&&!e)throw new n("intrinsic "+t+" exists, but is not available. Please file an issue!");return c[t]}("%"+(o.length>0?o[0]:"")+"%",e),a=1;a<o.length;a+=1)if(null!=s)if(i&&a+1>=o.length){var u=i(s,o[a]);if(!e&&!(o[a]in s))throw new n("base intrinsic for "+t+" exists, but the property is not available.");s=u&&"get"in u&&!("originalValue"in u.get)?u.get:s[o[a]]}else s=s[o[a]];return s}},{413:413,414:414}],414:[function(t,e,r){(function(r){(function(){"use strict";var n=r.Symbol,i=t(415);e.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&i()}}).call(this)}).call(this,"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{415:415}],413:[function(t,e,r){"use strict";var n=t(412);e.exports=Function.prototype.bind||n},{412:412}],407:[function(t,e,r){"use strict";var n=t(413),i=t(406),o=i("%Function.prototype.apply%"),s=i("%Function.prototype.call%"),a=i("%Reflect.apply%",!0)||n.call(s,o),u=i("%Object.defineProperty%",!0);if(u)try{u({},"a",{value:1})}catch(c){u=null}e.exports=function(){return a(n,s,arguments)};var l=function(){return a(n,o,arguments)};u?u(e.exports,"apply",{value:l}):e.exports.apply=l},{406:406,413:413}],408:[function(t,e,r){"use strict";var n=t(406),i=t(407),o=i(n("String.prototype.indexOf"));e.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&o(t,".prototype.")?i(r):r}},{406:406,407:407}],409:[function(t,e,r){"use strict";var n=t(406)("%Object.getOwnPropertyDescriptor%");if(n)try{n([],"length")}catch(i){n=null}e.exports=n},{406:406}],410:[function(t,e,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,o=i&&"function"==typeof i.apply?i.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var s=Number.isNaN||function(t){return t!=t};function a(){a.init.call(this)}e.exports=a,e.exports.once=function(t,e){return new Promise((function(r,n){function i(){void 0!==o&&t.removeListener("error",o),r([].slice.call(arguments))}var o;"error"!==e&&(o=function(r){t.removeListener(e,i),n(r)},t.once("error",o)),t.once(e,i)}))},a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function l(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function c(t){return void 0===t._maxListeners?a.defaultMaxListeners:t._maxListeners}function h(t,e,r,n){var i,o,s,a;if(l(r),void 0===(o=t._events)?(o=t._events=Object.create(null),t._eventsCount=0):(void 0!==o.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),s=o[e]),void 0===s)s=o[e]=r,++t._eventsCount;else if("function"==typeof s?s=o[e]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=c(t))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return t}function p(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},i=function(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}.bind(n);return i.listener=r,n.wrapFn=i,i}function d(t,e,r){var n=t._events;if(void 0===n)return[];var i=n[e];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(i):y(i,i.length)}function f(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},a.prototype.getMaxListeners=function(){return c(this)},a.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var n="error"===t,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)o(u,this,e);else{var l=u.length,c=y(u,l);for(r=0;r<l;++r)o(c[r],this,e)}return!0},a.prototype.addListener=function(t,e){return h(this,t,e,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(t,e){return h(this,t,e,!0)},a.prototype.once=function(t,e){return l(e),this.on(t,p(this,t,e)),this},a.prototype.prependOnceListener=function(t,e){return l(e),this.prependListener(t,p(this,t,e)),this},a.prototype.removeListener=function(t,e){var r,n,i,o,s;if(l(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(r,i),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,s||e)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},a.prototype.listeners=function(t){return d(this,t,!0)},a.prototype.rawListeners=function(t){return d(this,t,!1)},a.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):f.call(t,e)},a.prototype.listenerCount=f,a.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},{}],411:[function(t,e,r){var n=Object.prototype.hasOwnProperty,i=Object.prototype.toString;e.exports=function(t,e,r){if("[object Function]"!==i.call(e))throw new TypeError("iterator must be a function");var o=t.length;if(o===+o)for(var s=0;s<o;s++)e.call(r,t[s],s,t);else for(var a in t)n.call(t,a)&&e.call(r,t[a],a,t)}},{}],412:[function(t,e,r){"use strict";var n=Array.prototype.slice,i=Object.prototype.toString;e.exports=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==i.call(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r,o=n.call(arguments,1),s=Math.max(0,e.length-o.length),a=[],u=0;u<s;u++)a.push("$"+u);if(r=Function("binder","return function ("+a.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof r){var i=e.apply(this,o.concat(n.call(arguments)));return Object(i)===i?i:this}return e.apply(t,o.concat(n.call(arguments)))})),e.prototype){var l=function(){};l.prototype=e.prototype,r.prototype=new l,l.prototype=null}return r}},{}],415:[function(t,e,r){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,e);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},{}],417:[function(t,e,r){"function"==typeof Object.create?e.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},{}],418:[function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,i=Object.prototype.toString,o=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===i.call(t)},s=function(t){return!!o(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==i.call(t)&&"[object Function]"===i.call(t.callee)},a=function(){return o(arguments)}();o.isLegacyArguments=s,e.exports=a?o:s},{}],419:[function(t,e,r){"use strict";var n=Object.prototype.toString,i=Function.prototype.toString,o=/^\s*(?:function)?\*/,s="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,a=Object.getPrototypeOf,u=function(){if(!s)return!1;try{return Function("return function*() {}")()}catch(t){}}(),l=u?a(u):{};e.exports=function(t){return"function"==typeof t&&(!!o.test(i.call(t))||(s?a(t)===l:"[object GeneratorFunction]"===n.call(t)))}},{}],420:[function(t,e,r){(function(r){(function(){"use strict";var n=t(411),i=t(394),o=t(408),s=o("Object.prototype.toString"),a=t(414)()&&"symbol"==typeof Symbol.toStringTag,u=i(),l=o("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},c=o("String.prototype.slice"),h={},p=t(409),d=Object.getPrototypeOf;a&&p&&d&&n(u,(function(t){var e=new r[t];if(!(Symbol.toStringTag in e))throw new EvalError("this engine has support for Symbol.toStringTag, but "+t+" does not have the property! Please report this.");var n=d(e),i=p(n,Symbol.toStringTag);if(!i){var o=d(n);i=p(o,Symbol.toStringTag)}h[t]=i.get})),e.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!a){var e=c(s(t),8,-1);return l(u,e)>-1}return!!p&&function(t){var e=!1;return n(h,(function(r,n){if(!e)try{e=r.call(t)===n}catch(i){}})),e}(t)}}).call(this)}).call(this,"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{394:394,408:408,409:409,411:411,414:414}],422:[function(t,e,r){"use strict";!function(){var t=1,r=2,n=3,i=4,o=5,s=6,a=7,u=8,l=9,c=10,h=11,p=function(){var e,p,d,f,y=1,m=2,g=3,v=4,T=5,_=6,E=7,b='Unexpected token "%0"',S="Unexpected end of path";function x(){for(var t,e=C();D("|");)H(),(t||(t=[e])).push(C());return t?{type:u,args:t}:e}function C(){return D("(")?A():O()}function A(){F("(");var e=x();F(")");for(var r,n=[];r=N();)n.push(r);return n.length?e.type===t?(e.parts=e.parts.concat(n),e):(n.unshift(e),{type:t,parts:n}):e}function N(){return D("[")?function(){F("[");var t=function(){if(D(":"))return H(),{type:c,toIdx:I()};var t=I();return D(":")?(H(),D("]")?{type:c,fromIdx:t}:{type:c,fromIdx:t,toIdx:I()}):{type:c,idx:t}}();return F("]"),{type:i,arg:t}}():D("{")?function(){F("{");var t=w();return F("}"),{type:n,arg:t}}():D("(")?A():void 0}function O(){U()||V(H());var e,n,i,o,s=!1;D("^")?(H(),s=!0):k()&&(e=H().val.substr(1));for(var a,u=[];a=M()?(n=void 0,i=void 0,o=void 0,i=H().val,o=j(),(D("*")||o.type===y||o.type===g)&&(n=H().val),{type:r,selector:i,prop:n}):N();)u.push(a);return{type:t,fromRoot:s,subst:e,parts:u}}function w(){for(var t,e=R();D("||");)H(),(t||(t=[e])).push(R());return t?{type:o,op:"||",args:t}:e}function R(){for(var t,e=L();D("&&");)H(),(t||(t=[e])).push(L());return t?{type:o,op:"&&",args:t}:e}function L(){for(var t=function t(){for(var e=function(){for(var t=P();D("+")||D("-");)t={type:a,op:H().val,args:[t,P()]};return t}();D("<")||D(">")||D("<=")||D(">=");)e={type:s,op:H().val,args:[e,t()]};return e}();D("==")||D("!=")||D("===")||D("!==")||D("^==")||D("==^")||D("^=")||D("=^")||D("$==")||D("==$")||D("$=")||D("=$")||D("*==")||D("==*")||D("*=")||D("=*");)t={type:s,op:H().val,args:[t,L()]};return t}function P(){for(var t=I();D("*")||D("/")||D("%");)t={type:a,op:H().val,args:[t,P()]};return t}function I(){return D("!")||D("-")?{type:l,op:H().val,arg:I()}:(t=j().type)===g||t===m||t===v||t===T?{type:h,val:H().val}:U()?O():D("(")?function(){F("(");var t=w();return F(")"),t}():V(H());var t}function D(t){var e=j();return e.type===_&&e.val===t}function U(){return M()||k()||D("^")}function M(){var t=j();if(t.type===_){var e=t.val;return"."===e||".."===e}return!1}function k(){var t=j();return t.type===y&&"$"===t.val[0]}function F(t){var e=H();e.type===_&&e.val===t||V(e)}function j(){if(null!==d)return d;var t=p;return d=B(),p=t,d}function B(){for(;t=e[p]," \r\n\t".indexOf(t)>-1;)++p;var t;if(p>=f)return{type:E,range:[p,p]};var r=function(){var t=p,r=e[p],n=e[p+1];if("."===r){if(G(n))return;return"."===e[++p]?{type:_,val:"..",range:[t,++p]}:{type:_,val:".",range:[t,p]}}if("="===n){var i=e[p+2];if("="===i){if("=!^$*".indexOf(r)>=0)return{type:_,val:r+n+i,range:[t,p+=3]}}else if("^$*".indexOf(i)>=0){if("="===r)return{type:_,val:r+n+i,range:[t,p+=3]}}else if("=!^$*><".indexOf(r)>=0)return{type:_,val:r+n,range:[t,p+=2]}}else if("="===r&&"^$*".indexOf(n)>=0)return{type:_,val:r+n,range:[t,p+=2]};return r!==n||"|"!==r&&"&"!==r?":{}()[]^+-*/%!><|".indexOf(r)>=0?{type:_,val:r,range:[t,++p]}:void 0:{type:_,val:r+n,range:[t,p+=2]}}();if(r||(r=function(){var t=e[p];if(z(t)){for(var r=p,n=t;++p<f&&W(t=e[p]);)n+=t;switch(n){case"true":case"false":return{type:v,val:"true"===n,range:[r,p]};case"null":return{type:T,val:null,range:[r,p]};default:return{type:y,val:n,range:[r,p]}}}}())||(r=function(){if('"'===e[p]||"'"===e[p]){for(var t,r=e[p],n=++p,i="",o=!1;p<f;){if("\\"===(t=e[p++]))t=e[p++];else if(('"'===t||"'"===t)&&t===r){o=!0;break}i+=t}return o?{type:g,val:i,range:[n,p]}:void 0}}())||(r=function(){var t=p,r=e[p],n="."===r;if(n||G(r)){for(var i=r;++p<f;){if("."===(r=e[p])){if(n)return;n=!0}else if(!G(r))break;i+=r}return{type:m,val:n?parseFloat(i):parseInt(i,10),range:[t,p]}}}()))return r;r={range:[p,p]},p>=f?r.type=E:r.val=e[p],V(r)}function H(){var t;return d?(p=d.range[1],t=d,d=null,t):B()}function G(t){return"0123456789".indexOf(t)>=0}function z(t){return"$"===t||"@"===t||"_"===t||t>="a"&&t<="z"||t>="A"&&t<="Z"}function W(t){return z(t)||t>="0"&&t<="9"}function V(t){t.type===E&&$(t,S),$(t,b,t.val)}function $(t,e){var r=Array.prototype.slice.call(arguments,2),n=e.replace(/%(\d)/g,(function(t,e){return r[e]||""})),i=new Error(n);throw i.column=t.range[0],i}return function(t){e=t.split(""),p=0,d=null,f=e.length;var r=x(),n=H();return n.type!==E&&V(n),r}}(),d=function(){var e,c,p,d;function f(){if(d.length)return d.shift();var t="v"+ ++p;return c.push(t),t}function y(){for(var t=arguments,e=t.length;e--;)d.push(t[e])}function m(t,r,n){if(t.prop){var i=S(t.prop),o=f(),s=f(),a=f(),u=f(),l=f(),c=f(),h=f();e.push(o,"= [];",s,"= 0;",a,"=",n,".length;",h,"= [];","while(",s,"<",a,") {",u,"=",n,"[",s,"++];","if(",u,"!= null) {"),"*"===t.prop?(e.push("if(typeof ",u,'=== "object") {',"if(isArr(",u,")) {",o,"=",o,".concat(",u,");","}","else {","for(",l," in ",u,") {","if(",u,".hasOwnProperty(",l,")) {",c,"=",u,"[",l,"];"),x(o,c),e.push("}","}","}","}")):(e.push(c,"=",u,"[",i,"];"),x(o,c,h,a)),e.push("}","}",r,"=",a,"> 1 &&",h,".length?",h,".length > 1?","concat.apply(",o,",",h,") :",o,".concat(",h,"[0]) :",o,";"),y(o,s,a,u,l,c,h)}}function g(t,r,n){var i=t.prop,o=f(),s=f(),a=f(),u=f(),l=f(),c=f(),h=f(),p=f();e.push(o,"=",n,".slice(),",p,"= [];","while(",o,".length) {",s,"=",o,".shift();"),i?e.push("if(typeof ",s,'=== "object" &&',s,") {"):e.push("if(typeof ",s,"!= null) {"),e.push(a,"= [];","if(isArr(",s,")) {",u,"= 0,",h,"=",s,".length;","while(",u,"<",h,") {",c,"=",s,"[",u,"++];"),i&&e.push("if(typeof ",c,'=== "object") {'),x(a,c),i&&e.push("}"),e.push("}","}","else {"),i?"*"!==i&&(e.push(c,"=",s,'["'+i+'"];'),x(p,c)):(x(p,s),e.push("if(typeof ",s,'=== "object") {')),e.push("for(",l," in ",s,") {","if(",s,".hasOwnProperty(",l,")) {",c,"=",s,"[",l,"];"),x(a,c),"*"===i&&x(p,c),e.push("}","}"),i||e.push("}"),e.push("}",a,".length &&",o,".unshift.apply(",o,",",a,");","}","}",r,"=",p,";"),y(o,s,a,u,l,c,h,p)}function v(t,r,n){var i=f(),o=f(),s=f(),a=f(),u=f();e.push(i,"= [];",o,"= 0;",s,"=",n,".length;","while(",o,"<",s,") {",u,"=",n,"[",o,"++];"),_(t.arg,a,u),e.push(A(t.arg,a),"&&",i,".push(",u,");","}",r,"=",i,";"),y(i,o,s,u,a)}function T(t,r,n){var i,o,s=t.arg;if(s.idx){var a=f();return _(s.idx,a,n),e.push(a,"< 0 && (",a,"=",n,".length +",a,");",r,"=",n,"[",a,"] == null? [] : [",n,"[",a,"]];"),y(a),!1}s.fromIdx?s.toIdx?(_(s.fromIdx,i=f(),n),_(s.toIdx,o=f(),n),e.push(r,"=",n,".slice(",i,",",o,");"),y(i,o)):(_(s.fromIdx,i=f(),n),e.push(r,"=",n,".slice(",i,");"),y(i)):(_(s.toIdx,o=f(),n),e.push(r,"=",n,".slice(0,",o,");"),y(o))}function _(c,p,d){switch(c.type){case t:!function(t,o,s){var a=t.parts,l=0,c=a.length;for(e.push(o,"=",t.fromRoot?"data":t.subst?"subst."+t.subst:s,";","isArr("+o+") || ("+o+" = ["+o+"]);");l<c;){var h=a[l++];switch(h.type){case r:".."===h.selector?g(h,o,o):m(h,o,o);break;case n:v(h,o,o);break;case i:T(h,o,o);break;case u:b(h,o,o)}}}(c,p,d);break;case u:b(c,p,d);break;case s:!function(r,n,i){var o=f(),s=f(),a=f(),u=f(),l=f(),c=f(),p=f(),d=f(),m=r.args[0],g=r.args[1];e.push(n,"= false;"),_(m,o,i),_(g,s,i);var v=m.type===t,T=g.type===h;e.push(a,"="),v?e.push("true;"):e.push("isArr(",o,");"),e.push(u,"="),T?e.push("false;"):e.push("isArr(",s,");"),e.push("if("),v||e.push(a,"&&"),e.push(o,".length === 1) {",o,"=",o,"[0];",a,"= false;","}"),T||e.push("if(",u,"&&",s,".length === 1) {",s,"=",s,"[0];",u,"= false;","}"),e.push(l,"= 0;","if(",a,") {",p,"=",o,".length;"),T||(e.push("if(",u,") {",d,"=",s,".length;","while(",l,"<",p,"&& !",n,") {",c,"= 0;","while(",c,"<",d,") {"),E(r.op,[o,"[",l,"]"].join(""),[s,"[",c,"]"].join("")),e.push(n,"= true;","break;","}","++",c,";","}","++",l,";","}","}","else {")),e.push("while(",l,"<",p,") {"),E(r.op,[o,"[",l,"]"].join(""),s),e.push(n,"= true;","break;","}","++",l,";","}"),T||e.push("}"),e.push("}"),T||(e.push("else if(",u,") {",d,"=",s,".length;","while(",l,"<",d,") {"),E(r.op,o,[s,"[",l,"]"].join("")),e.push(n,"= true;","break;","}","++",l,";","}","}")),e.push("else {",n,"=",D[r.op](o,s),";","}"),y(o,s,a,u,l,c,p,d)}(c,p,d);break;case a:!function(t,r,n){var i=f(),o=f(),s=t.args;_(s[0],i,n),_(s[1],o,n),e.push(r,"=",D[t.op](N(s[0],i),N(s[1],o)),";"),y(i,o)}(c,p,d);break;case o:!function(t,r,n){var i,o=[],s=t.args,a=s.length,u=0;switch(e.push(r,"= false;"),t.op){case"&&":for(;u<a;)o.push(i=f()),_(s[u],i,n),e.push("if(",A(s[u++],i),") {");e.push(r,"= true;");break;case"||":for(;u<a;)o.push(i=f()),_(s[u],i,n),e.push("if(",A(s[u],i),") {",r,"= true;","}"),1+u++<a&&e.push("else {");--a}for(;a--;)e.push("}");y.apply(null,o)}(c,p,d);break;case l:!function(t,r,n){var i=f(),o=t.arg;switch(_(o,i,n),t.op){case"!":e.push(r,"= !",A(o,i)+";");break;case"-":e.push(r,"= -",N(o,i)+";")}y(i)}(c,p,d);break;case h:e.push(p,"="),x=c.val,e.push("string"==typeof x?S(x):null===x?"null":x),e.push(";")}var x}function E(t,r,n){e.push("if(",D[t](r,n),") {")}function b(t,r,n){for(var i=[],o=t.args,s=o.length,a=0;a<s;)i.push(f()),_(o[a],i[a++],n);e.push(r,"= concat.call(",i.join(","),");"),y.apply(null,i)}function S(t){return"'"+t.replace(/\\/g,"\\\\").replace(/'/g,"\\'")+"'"}function x(t,r,n,i){e.push("if(typeof ",r,'!== "undefined") {',"if(isArr(",r,")) {"),n&&(e.push(i,"> 1?"),C(n,r),e.push(":")),e.push(t,"=",t,".length?",t,".concat(",r,") :",r,".slice()",";","}","else {"),n&&e.push("if(",n,".length) {",t,"= concat.apply(",t,",",n,");",n,"= [];","}"),C(t,r),e.push(";","}","}")}function C(t,r){e.push(t,".length?",t,".push(",r,") :",t,"[0] =",r)}function A(e,r){switch(e.type){case o:return r;case h:return"!!"+r;case t:return r+".length > 0";default:return["(typeof ",r,'=== "boolean"?',r,":","isArr(",r,")?",r,".length > 0 : !!",r,")"].join("")}}function N(e,r){switch(e.type){case h:return r;case t:return r+"[0]";default:return["(isArr(",r,")?",r,"[0] : ",r,")"].join("")}}function O(t,e){return["typeof ",t,'=== "string" && typeof ',e,'=== "string" &&',t,".indexOf(",e,") === 0"].join("")}function w(t,e){return[t,"!= null &&",e,"!= null &&",t,".toString().toLowerCase().indexOf(",e,".toString().toLowerCase()) === 0"].join("")}function R(t,e){return["typeof ",t,'=== "string" && typeof ',e,'=== "string" &&',t,".length >=",e,".length &&",t,".lastIndexOf(",e,") ===",t,".length -",e,".length"].join("")}function L(t,e){return[t,"!= null &&",e,"!= null &&","(",t,"=",t,".toString()).length >=","(",e,"=",e,".toString()).length &&","(",t,".toLowerCase()).lastIndexOf(","(",e,".toLowerCase())) ===",t,".length -",e,".length"].join("")}function P(t,e){return["typeof ",t,'=== "string" && typeof ',e,'=== "string" &&',t,".indexOf(",e,") > -1"].join("")}function I(t,e){return[t,"!= null && ",e,"!= null &&",t,".toString().toLowerCase().indexOf(",e,".toString().toLowerCase()) > -1"].join("")}var D={"===":function(t,e){return t+"==="+e},"==":function(t,e){return["typeof ",t,'=== "string" && typeof ',e,'=== "string"?',t,".toLowerCase() ===",e,".toLowerCase() :"+t,"==",e].join("")},">=":function(t,e){return t+">="+e},">":function(t,e){return t+">"+e},"<=":function(t,e){return t+"<="+e},"<":function(t,e){return t+"<"+e},"!==":function(t,e){return t+"!=="+e},"!=":function(t,e){return t+"!="+e},"^==":O,"==^":function(t,e){return O(e,t)},"^=":w,"=^":function(t,e){return w(e,t)},"$==":R,"==$":function(t,e){return R(e,t)},"$=":L,"=$":function(t,e){return L(e,t)},"*==":P,"==*":function(t,e){return P(e,t)},"=*":function(t,e){return I(e,t)},"*=":I,"+":function(t,e){return t+"+"+e},"-":function(t,e){return t+"-"+e},"*":function(t,e){return t+"*"+e},"/":function(t,e){return t+"/"+e},"%":function(t,e){return t+"%"+e}};return function(r){if(e=[],c=["res"],p=0,d=[],_(r,"res","data"),e.unshift("var ",Array.isArray?"isArr = Array.isArray":'toStr = Object.prototype.toString, isArr = function(o) { return toStr.call(o) === "[object Array]"; }',", concat = Array.prototype.concat",",",c.join(","),";"),r.type===t){var n=r.parts[r.parts.length-1];n&&n.type===i&&"idx"in n.arg&&e.push("res = res[0];")}return e.push("return res;"),e.join("")}}();function f(t){return Function("data,subst",d(p(t)))}var y={},m=[],g={cacheSize:100},v={cacheSize:function(t,e){if(e<t&&m.length>e)for(var r=m.splice(0,m.length-e),n=r.length;n--;)delete y[r[n]]}},T=function(t,e,r){return y[t]||(y[t]=f(t),m.push(t)>g.cacheSize&&delete y[m.shift()]),y[t](e,r||{})};T.version="0.3.4",T.params=function(t){if(!arguments.length)return g;for(var e in t)t.hasOwnProperty(e)&&(v[e]&&v[e](g[e],t[e]),g[e]=t[e])},T.compile=f,T.apply=T,"object"==typeof e&&"object"==typeof e.exports?e.exports=T:"object"==typeof modules?modules.define("jspath",(function(t){t(T)})):window.JSPath=T}()},{}],426:[function(t,e,r){"use strict";function n(t){var e=this;if(e instanceof n||(e=new n),e.tail=null,e.head=null,e.length=0,t&&"function"==typeof t.forEach)t.forEach((function(t){e.push(t)}));else if(arguments.length>0)for(var r=0,i=arguments.length;r<i;r++)e.push(arguments[r]);return e}function i(t,e,r){var n=e===t.head?new a(r,null,e,t):new a(r,e,e.next,t);return null===n.next&&(t.tail=n),null===n.prev&&(t.head=n),t.length++,n}function o(t,e){t.tail=new a(e,t.tail,null,t),t.head||(t.head=t.tail),t.length++}function s(t,e){t.head=new a(e,null,t.head,t),t.tail||(t.tail=t.head),t.length++}function a(t,e,r,n){if(!(this instanceof a))return new a(t,e,r,n);this.list=n,this.value=t,e?(e.next=this,this.prev=e):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}e.exports=n,n.Node=a,n.create=n,n.prototype.removeNode=function(t){if(t.list!==this)throw new Error("removing node which does not belong to this list");var e=t.next,r=t.prev;return e&&(e.prev=r),r&&(r.next=e),t===this.head&&(this.head=e),t===this.tail&&(this.tail=r),t.list.length--,t.next=null,t.prev=null,t.list=null,e},n.prototype.unshiftNode=function(t){if(t!==this.head){t.list&&t.list.removeNode(t);var e=this.head;t.list=this,t.next=e,e&&(e.prev=t),this.head=t,this.tail||(this.tail=t),this.length++}},n.prototype.pushNode=function(t){if(t!==this.tail){t.list&&t.list.removeNode(t);var e=this.tail;t.list=this,t.prev=e,e&&(e.next=t),this.tail=t,this.head||(this.head=t),this.length++}},n.prototype.push=function(){for(var t=0,e=arguments.length;t<e;t++)o(this,arguments[t]);return this.length},n.prototype.unshift=function(){for(var t=0,e=arguments.length;t<e;t++)s(this,arguments[t]);return this.length},n.prototype.pop=function(){if(this.tail){var t=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,t}},n.prototype.shift=function(){if(this.head){var t=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,t}},n.prototype.forEach=function(t,e){e=e||this;for(var r=this.head,n=0;null!==r;n++)t.call(e,r.value,n,this),r=r.next},n.prototype.forEachReverse=function(t,e){e=e||this;for(var r=this.tail,n=this.length-1;null!==r;n--)t.call(e,r.value,n,this),r=r.prev},n.prototype.get=function(t){for(var e=0,r=this.head;null!==r&&e<t;e++)r=r.next;if(e===t&&null!==r)return r.value},n.prototype.getReverse=function(t){for(var e=0,r=this.tail;null!==r&&e<t;e++)r=r.prev;if(e===t&&null!==r)return r.value},n.prototype.map=function(t,e){e=e||this;for(var r=new n,i=this.head;null!==i;)r.push(t.call(e,i.value,this)),i=i.next;return r},n.prototype.mapReverse=function(t,e){e=e||this;for(var r=new n,i=this.tail;null!==i;)r.push(t.call(e,i.value,this)),i=i.prev;return r},n.prototype.reduce=function(t,e){var r,n=this.head;if(arguments.length>1)r=e;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");n=this.head.next,r=this.head.value}for(var i=0;null!==n;i++)r=t(r,n.value,i),n=n.next;return r},n.prototype.reduceReverse=function(t,e){var r,n=this.tail;if(arguments.length>1)r=e;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");n=this.tail.prev,r=this.tail.value}for(var i=this.length-1;null!==n;i--)r=t(r,n.value,i),n=n.prev;return r},n.prototype.toArray=function(){for(var t=new Array(this.length),e=0,r=this.head;null!==r;e++)t[e]=r.value,r=r.next;return t},n.prototype.toArrayReverse=function(){for(var t=new Array(this.length),e=0,r=this.tail;null!==r;e++)t[e]=r.value,r=r.prev;return t},n.prototype.slice=function(t,e){(e=e||this.length)<0&&(e+=this.length),(t=t||0)<0&&(t+=this.length);var r=new n;if(e<t||e<0)return r;t<0&&(t=0),e>this.length&&(e=this.length);for(var i=0,o=this.head;null!==o&&i<t;i++)o=o.next;for(;null!==o&&i<e;i++,o=o.next)r.push(o.value);return r},n.prototype.sliceReverse=function(t,e){(e=e||this.length)<0&&(e+=this.length),(t=t||0)<0&&(t+=this.length);var r=new n;if(e<t||e<0)return r;t<0&&(t=0),e>this.length&&(e=this.length);for(var i=this.length,o=this.tail;null!==o&&i>e;i--)o=o.prev;for(;null!==o&&i>t;i--,o=o.prev)r.push(o.value);return r},n.prototype.splice=function(t,e){t>this.length&&(t=this.length-1),t<0&&(t=this.length+t);for(var r=0,n=this.head;null!==n&&r<t;r++)n=n.next;var o=[];for(r=0;n&&r<e;r++)o.push(n.value),n=this.removeNode(n);for(null===n&&(n=this.tail),n!==this.head&&n!==this.tail&&(n=n.prev),r=2;r<arguments.length;r++)n=i(this,n,arguments[r]);return o},n.prototype.reverse=function(){for(var t=this.head,e=this.tail,r=t;null!==r;r=r.prev){var n=r.prev;r.prev=r.next,r.next=n}return this.head=e,this.tail=t,this};try{t(425)(n)}catch(u){}},{425:425}],425:[function(t,e,r){"use strict";e.exports=function(t){t.prototype[Symbol.iterator]=function*(){for(let t=this.head;t;t=t.next)yield t.value}}},{}],430:[function(t,e,r){(function(e){(function(){!function(r){r.parser=function(t,e){return new o(t,e)},r.SAXParser=o,r.SAXStream=a,r.createStream=function(t,e){return new a(t,e)},r.MAX_BUFFER_LENGTH=65536;var n,i=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function o(t,e){if(!(this instanceof o))return new o(t,e);!function(t){for(var e=0,r=i.length;e<r;e++)t[i[e]]=""}(this),this.q=this.c="",this.bufferCheckPosition=r.MAX_BUFFER_LENGTH,this.opt=e||{},this.opt.lowercase=this.opt.lowercase||this.opt.lowercasetags,this.looseCase=this.opt.lowercase?"toLowerCase":"toUpperCase",this.tags=[],this.closed=this.closedRoot=this.sawRoot=!1,this.tag=this.error=null,this.strict=!!t,this.noscript=!(!t&&!this.opt.noscript),this.state=x.BEGIN,this.strictEntities=this.opt.strictEntities,this.ENTITIES=this.strictEntities?Object.create(r.XML_ENTITIES):Object.create(r.ENTITIES),this.attribList=[],this.opt.xmlns&&(this.ns=Object.create(h)),this.trackPosition=!1!==this.opt.position,this.trackPosition&&(this.position=this.line=this.column=0),A(this,"onready")}r.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(t){function e(){}return e.prototype=t,new e}),Object.keys||(Object.keys=function(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push(r);return e}),o.prototype={end:function(){L(this)},write:function(t){if(this.error)throw this.error;if(this.closed)return R(this,"Cannot write after close. Assign an onready handler.");if(null===t)return L(this);"object"==typeof t&&(t=t.toString());for(var e,n,o,s,a,c=0,h="";h=j(t,c++),this.c=h,h;)switch(this.trackPosition&&(this.position++,"\n"===h?(this.line++,this.column=0):this.column++),this.state){case x.BEGIN:if(this.state=x.BEGIN_WHITESPACE,"\ufeff"===h)continue;F(this,h);continue;case x.BEGIN_WHITESPACE:F(this,h);continue;case x.TEXT:if(this.sawRoot&&!this.closedRoot){for(var E=c-1;h&&"<"!==h&&"&"!==h;)(h=j(t,c++))&&this.trackPosition&&(this.position++,"\n"===h?(this.line++,this.column=0):this.column++);this.textNode+=t.substring(E,c-1)}"<"!==h||this.sawRoot&&this.closedRoot&&!this.strict?(m(h)||this.sawRoot&&!this.closedRoot||P(this,"Text data outside of root node."),"&"===h?this.state=x.TEXT_ENTITY:this.textNode+=h):(this.state=x.OPEN_WAKA,this.startTagPosition=this.position);continue;case x.SCRIPT:"<"===h?this.state=x.SCRIPT_ENDING:this.script+=h;continue;case x.SCRIPT_ENDING:"/"===h?this.state=x.CLOSE_TAG:(this.script+="<"+h,this.state=x.SCRIPT);continue;case x.OPEN_WAKA:if("!"===h)this.state=x.SGML_DECL,this.sgmlDecl="";else if(m(h));else if(T(p,h))this.state=x.OPEN_TAG,this.tagName=h;else if("/"===h)this.state=x.CLOSE_TAG,this.tagName="";else if("?"===h)this.state=x.PROC_INST,this.procInstName=this.procInstBody="";else{if(P(this,"Unencoded <"),this.startTagPosition+1<this.position){var b=this.position-this.startTagPosition;h=new Array(b).join(" ")+h}this.textNode+="<"+h,this.state=x.TEXT}continue;case x.SGML_DECL:(this.sgmlDecl+h).toUpperCase()===u?(N(this,"onopencdata"),this.state=x.CDATA,this.sgmlDecl="",this.cdata=""):this.sgmlDecl+h==="--"?(this.state=x.COMMENT,this.comment="",this.sgmlDecl=""):(this.sgmlDecl+h).toUpperCase()===l?(this.state=x.DOCTYPE,(this.doctype||this.sawRoot)&&P(this,"Inappropriately located doctype declaration"),this.doctype="",this.sgmlDecl=""):">"===h?(N(this,"onsgmldeclaration",this.sgmlDecl),this.sgmlDecl="",this.state=x.TEXT):g(h)?(this.state=x.SGML_DECL_QUOTED,this.sgmlDecl+=h):this.sgmlDecl+=h;continue;case x.SGML_DECL_QUOTED:h===this.q&&(this.state=x.SGML_DECL,this.q=""),this.sgmlDecl+=h;continue;case x.DOCTYPE:">"===h?(this.state=x.TEXT,N(this,"ondoctype",this.doctype),this.doctype=!0):(this.doctype+=h,"["===h?this.state=x.DOCTYPE_DTD:g(h)&&(this.state=x.DOCTYPE_QUOTED,this.q=h));continue;case x.DOCTYPE_QUOTED:this.doctype+=h,h===this.q&&(this.q="",this.state=x.DOCTYPE);continue;case x.DOCTYPE_DTD:this.doctype+=h,"]"===h?this.state=x.DOCTYPE:g(h)&&(this.state=x.DOCTYPE_DTD_QUOTED,this.q=h);continue;case x.DOCTYPE_DTD_QUOTED:this.doctype+=h,h===this.q&&(this.state=x.DOCTYPE_DTD,this.q="");continue;case x.COMMENT:"-"===h?this.state=x.COMMENT_ENDING:this.comment+=h;continue;case x.COMMENT_ENDING:"-"===h?(this.state=x.COMMENT_ENDED,this.comment=w(this.opt,this.comment),this.comment&&N(this,"oncomment",this.comment),this.comment=""):(this.comment+="-"+h,this.state=x.COMMENT);continue;case x.COMMENT_ENDED:">"!==h?(P(this,"Malformed comment"),this.comment+="--"+h,this.state=x.COMMENT):this.state=x.TEXT;continue;case x.CDATA:"]"===h?this.state=x.CDATA_ENDING:this.cdata+=h;continue;case x.CDATA_ENDING:"]"===h?this.state=x.CDATA_ENDING_2:(this.cdata+="]"+h,this.state=x.CDATA);continue;case x.CDATA_ENDING_2:">"===h?(this.cdata&&N(this,"oncdata",this.cdata),N(this,"onclosecdata"),this.cdata="",this.state=x.TEXT):"]"===h?this.cdata+="]":(this.cdata+="]]"+h,this.state=x.CDATA);continue;case x.PROC_INST:"?"===h?this.state=x.PROC_INST_ENDING:m(h)?this.state=x.PROC_INST_BODY:this.procInstName+=h;continue;case x.PROC_INST_BODY:if(!this.procInstBody&&m(h))continue;"?"===h?this.state=x.PROC_INST_ENDING:this.procInstBody+=h;continue;case x.PROC_INST_ENDING:">"===h?(N(this,"onprocessinginstruction",{name:this.procInstName,body:this.procInstBody}),this.procInstName=this.procInstBody="",this.state=x.TEXT):(this.procInstBody+="?"+h,this.state=x.PROC_INST_BODY);continue;case x.OPEN_TAG:T(d,h)?this.tagName+=h:(I(this),">"===h?M(this):"/"===h?this.state=x.OPEN_TAG_SLASH:(m(h)||P(this,"Invalid character in tag name"),this.state=x.ATTRIB));continue;case x.OPEN_TAG_SLASH:">"===h?(M(this,!0),k(this)):(P(this,"Forward-slash in opening tag not followed by >"),this.state=x.ATTRIB);continue;case x.ATTRIB:if(m(h))continue;">"===h?M(this):"/"===h?this.state=x.OPEN_TAG_SLASH:T(p,h)?(this.attribName=h,this.attribValue="",this.state=x.ATTRIB_NAME):P(this,"Invalid attribute name");continue;case x.ATTRIB_NAME:"="===h?this.state=x.ATTRIB_VALUE:">"===h?(P(this,"Attribute without value"),this.attribValue=this.attribName,U(this),M(this)):m(h)?this.state=x.ATTRIB_NAME_SAW_WHITE:T(d,h)?this.attribName+=h:P(this,"Invalid attribute name");continue;case x.ATTRIB_NAME_SAW_WHITE:if("="===h)this.state=x.ATTRIB_VALUE;else{if(m(h))continue;P(this,"Attribute without value"),this.tag.attributes[this.attribName]="",this.attribValue="",N(this,"onattribute",{name:this.attribName,value:""}),this.attribName="",">"===h?M(this):T(p,h)?(this.attribName=h,this.state=x.ATTRIB_NAME):(P(this,"Invalid attribute name"),this.state=x.ATTRIB)}continue;case x.ATTRIB_VALUE:if(m(h))continue;g(h)?(this.q=h,this.state=x.ATTRIB_VALUE_QUOTED):(P(this,"Unquoted attribute value"),this.state=x.ATTRIB_VALUE_UNQUOTED,this.attribValue=h);continue;case x.ATTRIB_VALUE_QUOTED:if(h!==this.q){"&"===h?this.state=x.ATTRIB_VALUE_ENTITY_Q:this.attribValue+=h;continue}U(this),this.q="",this.state=x.ATTRIB_VALUE_CLOSED;continue;case x.ATTRIB_VALUE_CLOSED:m(h)?this.state=x.ATTRIB:">"===h?M(this):"/"===h?this.state=x.OPEN_TAG_SLASH:T(p,h)?(P(this,"No whitespace between attributes"),this.attribName=h,this.attribValue="",this.state=x.ATTRIB_NAME):P(this,"Invalid attribute name");continue;case x.ATTRIB_VALUE_UNQUOTED:if(!v(h)){"&"===h?this.state=x.ATTRIB_VALUE_ENTITY_U:this.attribValue+=h;continue}U(this),">"===h?M(this):this.state=x.ATTRIB;continue;case x.CLOSE_TAG:if(this.tagName)">"===h?k(this):T(d,h)?this.tagName+=h:this.script?(this.script+="</"+this.tagName,this.tagName="",this.state=x.SCRIPT):(m(h)||P(this,"Invalid tagname in closing tag"),this.state=x.CLOSE_TAG_SAW_WHITE);else{if(m(h))continue;_(p,h)?this.script?(this.script+="</"+h,this.state=x.SCRIPT):P(this,"Invalid tagname in closing tag."):this.tagName=h}continue;case x.CLOSE_TAG_SAW_WHITE:if(m(h))continue;">"===h?k(this):P(this,"Invalid characters in closing tag");continue;case x.TEXT_ENTITY:case x.ATTRIB_VALUE_ENTITY_Q:case x.ATTRIB_VALUE_ENTITY_U:var S,C;switch(this.state){case x.TEXT_ENTITY:S=x.TEXT,C="textNode";break;case x.ATTRIB_VALUE_ENTITY_Q:S=x.ATTRIB_VALUE_QUOTED,C="attribValue";break;case x.ATTRIB_VALUE_ENTITY_U:S=x.ATTRIB_VALUE_UNQUOTED,C="attribValue"}";"===h?(this[C]+=(n=void 0,o=void 0,s=void 0,a=void 0,o=(e=this).entity,s=o.toLowerCase(),a="",e.ENTITIES[o]?e.ENTITIES[o]:e.ENTITIES[s]?e.ENTITIES[s]:("#"===(o=s).charAt(0)&&("x"===o.charAt(1)?(o=o.slice(2),a=(n=parseInt(o,16)).toString(16)):(o=o.slice(1),a=(n=parseInt(o,10)).toString(10))),o=o.replace(/^0+/,""),isNaN(n)||a.toLowerCase()!==o?(P(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(n))),this.entity="",this.state=S):T(this.entity.length?y:f,h)?this.entity+=h:(P(this,"Invalid character in entity name"),this[C]+="&"+this.entity+h,this.entity="",this.state=S);continue;default:throw new Error(this,"Unknown state: "+this.state)}return this.position>=this.bufferCheckPosition&&function(t){for(var e=Math.max(r.MAX_BUFFER_LENGTH,10),n=0,o=0,s=i.length;o<s;o++){var a=t[i[o]].length;if(a>e)switch(i[o]){case"textNode":O(t);break;case"cdata":N(t,"oncdata",t.cdata),t.cdata="";break;case"script":N(t,"onscript",t.script),t.script="";break;default:R(t,"Max buffer length exceeded: "+i[o])}n=Math.max(n,a)}var u=r.MAX_BUFFER_LENGTH-n;t.bufferCheckPosition=u+t.position}(this),this},resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){O(this),""!==this.cdata&&(N(this,"oncdata",this.cdata),this.cdata=""),""!==this.script&&(N(this,"onscript",this.script),this.script="")}};try{n=t(431).Stream}catch(B){n=function(){}}var s=r.EVENTS.filter((function(t){return"error"!==t&&"end"!==t}));function a(t,e){if(!(this instanceof a))return new a(t,e);n.apply(this),this._parser=new o(t,e),this.writable=!0,this.readable=!0;var r=this;this._parser.onend=function(){r.emit("end")},this._parser.onerror=function(t){r.emit("error",t),r._parser.error=null},this._decoder=null,s.forEach((function(t){Object.defineProperty(r,"on"+t,{get:function(){return r._parser["on"+t]},set:function(e){if(!e)return r.removeAllListeners(t),r._parser["on"+t]=e,e;r.on(t,e)},enumerable:!0,configurable:!1})}))}a.prototype=Object.create(n.prototype,{constructor:{value:a}}),a.prototype.write=function(r){if("function"==typeof e&&"function"==typeof e.isBuffer&&e.isBuffer(r)){if(!this._decoder){var n=t(398).StringDecoder;this._decoder=new n("utf8")}r=this._decoder.write(r)}return this._parser.write(r.toString()),this.emit("data",r),!0},a.prototype.end=function(t){return t&&t.length&&this.write(t),this._parser.end(),!0},a.prototype.on=function(t,e){var r=this;return r._parser["on"+t]||-1===s.indexOf(t)||(r._parser["on"+t]=function(){var e=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);e.splice(0,0,t),r.emit.apply(r,e)}),n.prototype.on.call(r,t,e)};var u="[CDATA[",l="DOCTYPE",c="http://www.w3.org/XML/1998/namespace",h={xml:c,xmlns:"http://www.w3.org/2000/xmlns/"},p=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,d=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,f=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,y=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function m(t){return" "===t||"\n"===t||"\r"===t||"\t"===t}function g(t){return'"'===t||"'"===t}function v(t){return">"===t||m(t)}function T(t,e){return t.test(e)}function _(t,e){return!T(t,e)}var E,b,S,x=0;for(var C in r.STATE={BEGIN:x++,BEGIN_WHITESPACE:x++,TEXT:x++,TEXT_ENTITY:x++,OPEN_WAKA:x++,SGML_DECL:x++,SGML_DECL_QUOTED:x++,DOCTYPE:x++,DOCTYPE_QUOTED:x++,DOCTYPE_DTD:x++,DOCTYPE_DTD_QUOTED:x++,COMMENT_STARTING:x++,COMMENT:x++,COMMENT_ENDING:x++,COMMENT_ENDED:x++,CDATA:x++,CDATA_ENDING:x++,CDATA_ENDING_2:x++,PROC_INST:x++,PROC_INST_BODY:x++,PROC_INST_ENDING:x++,OPEN_TAG:x++,OPEN_TAG_SLASH:x++,ATTRIB:x++,ATTRIB_NAME:x++,ATTRIB_NAME_SAW_WHITE:x++,ATTRIB_VALUE:x++,ATTRIB_VALUE_QUOTED:x++,ATTRIB_VALUE_CLOSED:x++,ATTRIB_VALUE_UNQUOTED:x++,ATTRIB_VALUE_ENTITY_Q:x++,ATTRIB_VALUE_ENTITY_U:x++,CLOSE_TAG:x++,CLOSE_TAG_SAW_WHITE:x++,SCRIPT:x++,SCRIPT_ENDING:x++},r.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},r.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(r.ENTITIES).forEach((function(t){var e=r.ENTITIES[t],n="number"==typeof e?String.fromCharCode(e):e;r.ENTITIES[t]=n})),r.STATE)r.STATE[r.STATE[C]]=C;function A(t,e,r){t[e]&&t[e](r)}function N(t,e,r){t.textNode&&O(t),A(t,e,r)}function O(t){t.textNode=w(t.opt,t.textNode),t.textNode&&A(t,"ontext",t.textNode),t.textNode=""}function w(t,e){return t.trim&&(e=e.trim()),t.normalize&&(e=e.replace(/\s+/g," ")),e}function R(t,e){return O(t),t.trackPosition&&(e+="\nLine: "+t.line+"\nColumn: "+t.column+"\nChar: "+t.c),e=new Error(e),t.error=e,A(t,"onerror",e),t}function L(t){return t.sawRoot&&!t.closedRoot&&P(t,"Unclosed root tag"),t.state!==x.BEGIN&&t.state!==x.BEGIN_WHITESPACE&&t.state!==x.TEXT&&R(t,"Unexpected end"),O(t),t.c="",t.closed=!0,A(t,"onend"),o.call(t,t.strict,t.opt),t}function P(t,e){if("object"!=typeof t||!(t instanceof o))throw new Error("bad call to strictFail");t.strict&&R(t,e)}function I(t){t.strict||(t.tagName=t.tagName[t.looseCase]());var e=t.tags[t.tags.length-1]||t,r=t.tag={name:t.tagName,attributes:{}};t.opt.xmlns&&(r.ns=e.ns),t.attribList.length=0,N(t,"onopentagstart",r)}function D(t,e){var r=t.indexOf(":")<0?["",t]:t.split(":"),n=r[0],i=r[1];return e&&"xmlns"===t&&(n="xmlns",i=""),{prefix:n,local:i}}function U(t){if(t.strict||(t.attribName=t.attribName[t.looseCase]()),-1!==t.attribList.indexOf(t.attribName)||t.tag.attributes.hasOwnProperty(t.attribName))t.attribName=t.attribValue="";else{if(t.opt.xmlns){var e=D(t.attribName,!0),r=e.prefix,n=e.local;if("xmlns"===r)if("xml"===n&&t.attribValue!==c)P(t,"xml: prefix must be bound to "+c+"\nActual: "+t.attribValue);else if("xmlns"===n&&"http://www.w3.org/2000/xmlns/"!==t.attribValue)P(t,"xmlns: prefix must be bound to http://www.w3.org/2000/xmlns/\nActual: "+t.attribValue);else{var i=t.tag,o=t.tags[t.tags.length-1]||t;i.ns===o.ns&&(i.ns=Object.create(o.ns)),i.ns[n]=t.attribValue}t.attribList.push([t.attribName,t.attribValue])}else t.tag.attributes[t.attribName]=t.attribValue,N(t,"onattribute",{name:t.attribName,value:t.attribValue});t.attribName=t.attribValue=""}}function M(t,e){if(t.opt.xmlns){var r=t.tag,n=D(t.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(P(t,"Unbound namespace prefix: "+JSON.stringify(t.tagName)),r.uri=n.prefix);var i=t.tags[t.tags.length-1]||t;r.ns&&i.ns!==r.ns&&Object.keys(r.ns).forEach((function(e){N(t,"onopennamespace",{prefix:e,uri:r.ns[e]})}));for(var o=0,s=t.attribList.length;o<s;o++){var a=t.attribList[o],u=a[0],l=a[1],c=D(u,!0),h=c.prefix,p=c.local,d=""===h?"":r.ns[h]||"",f={name:u,value:l,prefix:h,local:p,uri:d};h&&"xmlns"!==h&&!d&&(P(t,"Unbound namespace prefix: "+JSON.stringify(h)),f.uri=h),t.tag.attributes[u]=f,N(t,"onattribute",f)}t.attribList.length=0}t.tag.isSelfClosing=!!e,t.sawRoot=!0,t.tags.push(t.tag),N(t,"onopentag",t.tag),e||(t.noscript||"script"!==t.tagName.toLowerCase()?t.state=x.TEXT:t.state=x.SCRIPT,t.tag=null,t.tagName=""),t.attribName=t.attribValue="",t.attribList.length=0}function k(t){if(!t.tagName)return P(t,"Weird empty close tag."),t.textNode+="</>",void(t.state=x.TEXT);if(t.script){if("script"!==t.tagName)return t.script+="</"+t.tagName+">",t.tagName="",void(t.state=x.SCRIPT);N(t,"onscript",t.script),t.script=""}var e=t.tags.length,r=t.tagName;t.strict||(r=r[t.looseCase]());for(var n=r;e--&&t.tags[e].name!==n;)P(t,"Unexpected close tag");if(e<0)return P(t,"Unmatched closing tag: "+t.tagName),t.textNode+="</"+t.tagName+">",void(t.state=x.TEXT);t.tagName=r;for(var i=t.tags.length;i-- >e;){var o=t.tag=t.tags.pop();t.tagName=t.tag.name,N(t,"onclosetag",t.tagName);var s={};for(var a in o.ns)s[a]=o.ns[a];var u=t.tags[t.tags.length-1]||t;t.opt.xmlns&&o.ns!==u.ns&&Object.keys(o.ns).forEach((function(e){var r=o.ns[e];N(t,"onclosenamespace",{prefix:e,uri:r})}))}0===e&&(t.closedRoot=!0),t.tagName=t.attribValue=t.attribName="",t.attribList.length=0,t.state=x.TEXT}function F(t,e){"<"===e?(t.state=x.OPEN_WAKA,t.startTagPosition=t.position):m(e)||(P(t,"Non-whitespace before first tag."),t.textNode=e,t.state=x.TEXT)}function j(t,e){var r="";return e<t.length&&(r=t.charAt(e)),r}x=r.STATE,String.fromCodePoint||(E=String.fromCharCode,b=Math.floor,S=function(){var t,e,r=[],n=-1,i=arguments.length;if(!i)return"";for(var o="";++n<i;){var s=Number(arguments[n]);if(!isFinite(s)||s<0||s>1114111||b(s)!==s)throw RangeError("Invalid code point: "+s);s<=65535?r.push(s):(t=55296+((s-=65536)>>10),e=s%1024+56320,r.push(t,e)),(n+1===i||r.length>16384)&&(o+=E.apply(null,r),r.length=0)}return o},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:S,configurable:!0,writable:!0}):String.fromCodePoint=S)}(void 0===r?this.sax={}:r)}).call(this)}).call(this,t(400).Buffer)},{398:398,400:400,431:431}],431:[function(t,e,r){e.exports=i;var n=t(410).EventEmitter;function i(){n.call(this)}t(417)(i,n),i.Readable=t(435),i.Writable=t(437),i.Duplex=t(433),i.Transform=t(436),i.PassThrough=t(434),i.finished=t(441),i.pipeline=t(443),i.Stream=i,i.prototype.pipe=function(t,e){var r=this;function i(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(r.on("end",a),r.on("close",u));var s=!1;function a(){s||(s=!0,t.end())}function u(){s||(s=!0,"function"==typeof t.destroy&&t.destroy())}function l(t){if(c(),0===n.listenerCount(this,"error"))throw t}function c(){r.removeListener("data",i),t.removeListener("drain",o),r.removeListener("end",a),r.removeListener("close",u),r.removeListener("error",l),t.removeListener("error",l),r.removeListener("end",c),r.removeListener("close",c),t.removeListener("close",c)}return r.on("error",l),t.on("error",l),r.on("end",c),r.on("close",c),t.on("close",c),t.emit("pipe",r),t}},{410:410,417:417,433:433,434:434,435:435,436:436,437:437,441:441,443:443}],441:[function(t,e,r){"use strict";var n=t(432).codes.ERR_STREAM_PREMATURE_CLOSE;function i(){}e.exports=function t(e,r,o){if("function"==typeof r)return t(e,null,r);r||(r={}),o=function(t){var e=!1;return function(){if(!e){e=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];t.apply(this,n)}}}(o||i);var s=r.readable||!1!==r.readable&&e.readable,a=r.writable||!1!==r.writable&&e.writable,u=function(){e.writable||c()},l=e._writableState&&e._writableState.finished,c=function(){a=!1,l=!0,s||o.call(e)},h=e._readableState&&e._readableState.endEmitted,p=function(){s=!1,h=!0,a||o.call(e)},d=function(t){o.call(e,t)},f=function(){var t;return s&&!h?(e._readableState&&e._readableState.ended||(t=new n),o.call(e,t)):a&&!l?(e._writableState&&e._writableState.ended||(t=new n),o.call(e,t)):void 0},y=function(){e.req.on("finish",c)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",c),e.on("abort",f),e.req?y():e.on("request",y)):a&&!e._writableState&&(e.on("end",u),e.on("close",u)),e.on("end",p),e.on("finish",c),!1!==r.error&&e.on("error",d),e.on("close",f),function(){e.removeListener("complete",c),e.removeListener("abort",f),e.removeListener("request",y),e.req&&e.req.removeListener("finish",c),e.removeListener("end",u),e.removeListener("close",u),e.removeListener("finish",c),e.removeListener("end",p),e.removeListener("error",d),e.removeListener("close",f)}}},{432:432}],443:[function(t,e,r){"use strict";var n,i=t(432).codes,o=i.ERR_MISSING_ARGS,s=i.ERR_STREAM_DESTROYED;function a(t){if(t)throw t}function u(t){t()}function l(t,e){return t.pipe(e)}e.exports=function(){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];var c,h=function(t){return t.length?"function"!=typeof t[t.length-1]?a:t.pop():a}(r);if(Array.isArray(r[0])&&(r=r[0]),r.length<2)throw new o("streams");var p=r.map((function(e,i){var o=i<r.length-1;return function(e,r,i,o){o=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(o);var a=!1;e.on("close",(function(){a=!0})),void 0===n&&(n=t(441)),n(e,{readable:r,writable:i},(function(t){if(t)return o(t);a=!0,o()}));var u=!1;return function(t){if(!a&&!u)return u=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void o(t||new s("pipe"))}}(e,o,i>0,(function(t){c||(c=t),t&&p.forEach(u),o||(p.forEach(u),h(c))}))}));return r.reduce(l)}},{432:432,441:441}],433:[function(t,e,r){(function(r){(function(){"use strict";var n=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};e.exports=l;var i=t(435),o=t(437);t(417)(l,i);for(var s=n(o.prototype),a=0;a<s.length;a++){var u=s[a];l.prototype[u]||(l.prototype[u]=o.prototype[u])}function l(t){if(!(this instanceof l))return new l(t);i.call(this,t),o.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",c)))}function c(){this._writableState.ended||r.nextTick(h,this)}function h(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})}).call(this)}).call(this,t(428))},{417:417,428:428,435:435,437:437}],436:[function(t,e,r){"use strict";e.exports=c;var n=t(432).codes,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,s=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,a=n.ERR_TRANSFORM_WITH_LENGTH_0,u=t(433);function l(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function c(t){if(!(this instanceof c))return new c(t);u.call(this,t),this._transformState={afterTransform:l.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",h)}function h(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?p(this,null,null):this._flush((function(e,r){p(t,e,r)}))}function p(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new a;if(t._transformState.transforming)throw new s;return t.push(null)}t(417)(c,u),c.prototype.push=function(t,e){return this._transformState.needTransform=!1,u.prototype.push.call(this,t,e)},c.prototype._transform=function(t,e,r){r(new i("_transform()"))},c.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},c.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},c.prototype._destroy=function(t,e){u.prototype._destroy.call(this,t,(function(t){e(t)}))}},{417:417,432:432,433:433}],434:[function(t,e,r){"use strict";e.exports=i;var n=t(436);function i(t){if(!(this instanceof i))return new i(t);n.call(this,t)}t(417)(i,n),i.prototype._transform=function(t,e,r){r(null,t)}},{417:417,436:436}],437:[function(t,e,r){(function(r,n){(function(){"use strict";function i(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(void 0),n=n.next}e.corkedRequestsFree.next=t}(e,t)}}var o;e.exports=C,C.WritableState=x;var s,a={deprecate:t(448)},u=t(445),l=t(400).Buffer,c=n.Uint8Array||function(){},h=t(440),p=t(444).getHighWaterMark,d=t(432).codes,f=d.ERR_INVALID_ARG_TYPE,y=d.ERR_METHOD_NOT_IMPLEMENTED,m=d.ERR_MULTIPLE_CALLBACK,g=d.ERR_STREAM_CANNOT_PIPE,v=d.ERR_STREAM_DESTROYED,T=d.ERR_STREAM_NULL_VALUES,_=d.ERR_STREAM_WRITE_AFTER_END,E=d.ERR_UNKNOWN_ENCODING,b=h.errorOrDestroy;function S(){}function x(e,n,s){o=o||t(433),e=e||{},"boolean"!=typeof s&&(s=n instanceof o),this.objectMode=!!e.objectMode,s&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=p(this,e,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===e.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,i=n.sync,o=n.writecb;if("function"!=typeof o)throw new m;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,i,o){--e.pendingcb,n?(r.nextTick(o,i),r.nextTick(L,t,e),t._writableState.errorEmitted=!0,b(t,i)):(o(i),t._writableState.errorEmitted=!0,b(t,i),L(t,e))}(t,n,i,e,o);else{var s=w(n)||t.destroyed;s||n.corked||n.bufferProcessing||!n.bufferedRequest||O(t,n),i?r.nextTick(N,t,n,s,o):N(t,n,s,o)}}(n,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this)}function C(e){var r=this instanceof(o=o||t(433));if(!r&&!s.call(C,this))return new C(e);this._writableState=new x(e,this,r),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),u.call(this)}function A(t,e,r,n,i,o,s){e.writelen=n,e.writecb=s,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new v("write")):r?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function N(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,n(),L(t,e)}function O(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,o=new Array(n),s=e.corkedRequestsFree;s.entry=r;for(var a=0,u=!0;r;)o[a]=r,r.isBuf||(u=!1),r=r.next,a+=1;o.allBuffers=u,A(t,e,!0,e.length,o,"",s.finish),e.pendingcb++,e.lastBufferedRequest=null,s.next?(e.corkedRequestsFree=s.next,s.next=null):e.corkedRequestsFree=new i(e),e.bufferedRequestCount=0}else{for(;r;){var l=r.chunk,c=r.encoding,h=r.callback;if(A(t,e,!1,e.objectMode?1:l.length,l,c,h),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function w(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function R(t,e){t._final((function(r){e.pendingcb--,r&&b(t,r),e.prefinished=!0,t.emit("prefinish"),L(t,e)}))}function L(t,e){var n=w(e);if(n&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,r.nextTick(R,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var i=t._readableState;(!i||i.autoDestroy&&i.endEmitted)&&t.destroy()}return n}t(417)(C,u),x.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(x.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(s=Function.prototype[Symbol.hasInstance],Object.defineProperty(C,Symbol.hasInstance,{value:function(t){return!!s.call(this,t)||this===C&&t&&t._writableState instanceof x}})):s=function(t){return t instanceof this},C.prototype.pipe=function(){b(this,new g)},C.prototype.write=function(t,e,n){var i,o=this._writableState,s=!1,a=!o.objectMode&&(i=t,l.isBuffer(i)||i instanceof c);return a&&!l.isBuffer(t)&&(t=function(t){return l.from(t)}(t)),"function"==typeof e&&(n=e,e=null),a?e="buffer":e||(e=o.defaultEncoding),"function"!=typeof n&&(n=S),o.ending?function(t,e){var n=new _;b(t,n),r.nextTick(e,n)}(this,n):(a||function(t,e,n,i){var o;return null===n?o=new T:"string"==typeof n||e.objectMode||(o=new f("chunk",["string","Buffer"],n)),!o||(b(t,o),r.nextTick(i,o),!1)}(this,o,t,n))&&(o.pendingcb++,s=function(t,e,r,n,i,o){if(!r){var s=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=l.from(e,r)),e}(e,n,i);n!==s&&(r=!0,i="buffer",n=s)}var a=e.objectMode?1:n.length;e.length+=a;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var c=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else A(t,e,!1,a,n,i,o);return u}(this,o,a,t,e,n)),s},C.prototype.cork=function(){this._writableState.corked++},C.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||O(this,t))},C.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new E(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(C.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(C.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),C.prototype._write=function(t,e,r){r(new y("_write()"))},C.prototype._writev=null,C.prototype.end=function(t,e,n){var i=this._writableState;return"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!=t&&this.write(t,e),i.corked&&(i.corked=1,this.uncork()),i.ending||function(t,e,n){e.ending=!0,L(t,e),n&&(e.finished?r.nextTick(n):t.once("finish",n)),e.ended=!0,t.writable=!1}(this,i,n),this},Object.defineProperty(C.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(C.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),C.prototype.destroy=h.destroy,C.prototype._undestroy=h.undestroy,C.prototype._destroy=function(t,e){e(t)}}).call(this)}).call(this,t(428),"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{400:400,417:417,428:428,432:432,433:433,440:440,444:444,445:445,448:448}],435:[function(t,e,r){(function(r,n){(function(){"use strict";var i;e.exports=C,C.ReadableState=x,t(410).EventEmitter;var o,s=function(t,e){return t.listeners(e).length},a=t(445),u=t(400).Buffer,l=n.Uint8Array||function(){},c=t(397);o=c&&c.debuglog?c.debuglog("stream"):function(){};var h,p,d,f=t(439),y=t(440),m=t(444).getHighWaterMark,g=t(432).codes,v=g.ERR_INVALID_ARG_TYPE,T=g.ERR_STREAM_PUSH_AFTER_EOF,_=g.ERR_METHOD_NOT_IMPLEMENTED,E=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;t(417)(C,a);var b=y.errorOrDestroy,S=["error","close","destroy","pause","resume"];function x(e,r,n){i=i||t(433),e=e||{},"boolean"!=typeof n&&(n=r instanceof i),this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=m(this,e,"readableHighWaterMark",n),this.buffer=new f,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(h||(h=t(446).StringDecoder),this.decoder=new h(e.encoding),this.encoding=e.encoding)}function C(e){if(i=i||t(433),!(this instanceof C))return new C(e);var r=this instanceof i;this._readableState=new x(e,this,r),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),a.call(this)}function A(t,e,r,n,i){o("readableAddChunk",e);var s,a=t._readableState;if(null===e)a.reading=!1,function(t,e){if(o("onEofChunk"),!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,e.sync?w(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,R(t)))}}(t,a);else if(i||(s=function(t,e){var r,n;return n=e,u.isBuffer(n)||n instanceof l||"string"==typeof e||void 0===e||t.objectMode||(r=new v("chunk",["string","Buffer","Uint8Array"],e)),r}(a,e)),s)b(t,s);else if(a.objectMode||e&&e.length>0)if("string"==typeof e||a.objectMode||Object.getPrototypeOf(e)===u.prototype||(e=function(t){return u.from(t)}(e)),n)a.endEmitted?b(t,new E):N(t,a,e,!0);else if(a.ended)b(t,new T);else{if(a.destroyed)return!1;a.reading=!1,a.decoder&&!r?(e=a.decoder.write(e),a.objectMode||0!==e.length?N(t,a,e,!1):L(t,a)):N(t,a,e,!1)}else n||(a.reading=!1,L(t,a));return!a.ended&&(a.length<a.highWaterMark||0===a.length)}function N(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",r)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&w(t)),L(t,e)}Object.defineProperty(C.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),C.prototype.destroy=y.destroy,C.prototype._undestroy=y.undestroy,C.prototype._destroy=function(t,e){e(t)},C.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=u.from(t,e),e=""),r=!0),A(this,t,e,!1,r)},C.prototype.unshift=function(t){return A(this,t,null,!0,!1)},C.prototype.isPaused=function(){return!1===this._readableState.flowing},C.prototype.setEncoding=function(e){h||(h=t(446).StringDecoder);var r=new h(e);this._readableState.decoder=r,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=r.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};function O(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=1073741824?t=1073741824:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function w(t){var e=t._readableState;o("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(o("emitReadable",e.flowing),e.emittedReadable=!0,r.nextTick(R,t))}function R(t){var e=t._readableState;o("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,M(t)}function L(t,e){e.readingMore||(e.readingMore=!0,r.nextTick(P,t,e))}function P(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var r=e.length;if(o("maybeReadMore read 0"),t.read(0),r===e.length)break}e.readingMore=!1}function I(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function D(t){o("readable nexttick read 0"),t.read(0)}function U(t,e){o("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),M(t),e.flowing&&!e.reading&&t.read(0)}function M(t){var e=t._readableState;for(o("flow",e.flowing);e.flowing&&null!==t.read(););}function k(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):r=e.buffer.consume(t,e.decoder),r);var r}function F(t){var e=t._readableState;o("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,r.nextTick(j,e,t))}function j(t,e){if(o("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var r=e._writableState;(!r||r.autoDestroy&&r.finished)&&e.destroy()}}function B(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}C.prototype.read=function(t){o("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return o("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?F(this):w(this),null;if(0===(t=O(t,e))&&e.ended)return 0===e.length&&F(this),null;var n,i=e.needReadable;return o("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&o("length less than watermark",i=!0),e.ended||e.reading?o("reading or ended",i=!1):i&&(o("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=O(r,e))),null===(n=t>0?k(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&F(this)),null!==n&&this.emit("data",n),n},C.prototype._read=function(t){b(this,new _("_read()"))},C.prototype.pipe=function(t,e){var n=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=t;break;case 1:i.pipes=[i.pipes,t];break;default:i.pipes.push(t)}i.pipesCount+=1,o("pipe count=%d opts=%j",i.pipesCount,e);var a=e&&!1===e.end||t===r.stdout||t===r.stderr?y:u;function u(){o("onend"),t.end()}i.endEmitted?r.nextTick(a):n.once("end",a),t.on("unpipe",(function e(r,s){o("onunpipe"),r===n&&s&&!1===s.hasUnpiped&&(s.hasUnpiped=!0,o("cleanup"),t.removeListener("close",d),t.removeListener("finish",f),t.removeListener("drain",l),t.removeListener("error",p),t.removeListener("unpipe",e),n.removeListener("end",u),n.removeListener("end",y),n.removeListener("data",h),c=!0,!i.awaitDrain||t._writableState&&!t._writableState.needDrain||l())}));var l=function(t){return function(){var e=t._readableState;o("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,M(t))}}(n);t.on("drain",l);var c=!1;function h(e){o("ondata");var r=t.write(e);o("dest.write",r),!1===r&&((1===i.pipesCount&&i.pipes===t||i.pipesCount>1&&-1!==B(i.pipes,t))&&!c&&(o("false write response, pause",i.awaitDrain),i.awaitDrain++),n.pause())}function p(e){o("onerror",e),y(),t.removeListener("error",p),0===s(t,"error")&&b(t,e)}function d(){t.removeListener("finish",f),y()}function f(){o("onfinish"),t.removeListener("close",d),y()}function y(){o("unpipe"),n.unpipe(t)}return n.on("data",h),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener("error",r);t._events&&t._events.error?Array.isArray(t._events.error)?t._events.error.unshift(r):t._events.error=[r,t._events.error]:t.on("error",r)}(t,0,p),t.once("close",d),t.once("finish",f),t.emit("pipe",n),i.flowing||(o("pipe resume"),n.resume()),t},C.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var s=B(e.pipes,t);return-1===s||(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},C.prototype.on=function(t,e){var n=a.prototype.on.call(this,t,e),i=this._readableState;return"data"===t?(i.readableListening=this.listenerCount("readable")>0,!1!==i.flowing&&this.resume()):"readable"===t&&(i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.flowing=!1,i.emittedReadable=!1,o("on readable",i.length,i.reading),i.length?w(this):i.reading||r.nextTick(D,this))),n},C.prototype.addListener=C.prototype.on,C.prototype.removeListener=function(t,e){var n=a.prototype.removeListener.call(this,t,e);return"readable"===t&&r.nextTick(I,this),n},C.prototype.removeAllListeners=function(t){var e=a.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||r.nextTick(I,this),e},C.prototype.resume=function(){var t=this._readableState;return t.flowing||(o("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,r.nextTick(U,t,e))}(this,t)),t.paused=!1,this},C.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},C.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var i in t.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(e.push(i)||(n=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var s=0;s<S.length;s++)t.on(S[s],this.emit.bind(this,S[s]));return this._read=function(e){o("wrapped _read",e),n&&(n=!1,t.resume())},this},"function"==typeof Symbol&&(C.prototype[Symbol.asyncIterator]=function(){return void 0===p&&(p=t(438)),p(this)}),Object.defineProperty(C.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(C.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(C.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),C._fromList=k,Object.defineProperty(C.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(C.from=function(e,r){return void 0===d&&(d=t(442)),d(C,e,r)})}).call(this)}).call(this,t(428),"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{397:397,400:400,410:410,417:417,428:428,432:432,433:433,438:438,439:439,440:440,442:442,444:444,445:445,446:446}],432:[function(t,e,r){"use strict";var n={};function i(t,e,r){r||(r=Error);var i=function(t){var r,n;function i(r,n,i){return t.call(this,function(t,r,n){return"string"==typeof e?e:e(t,r,n)}(r,n,i))||this}return n=t,(r=i).prototype=Object.create(n.prototype),r.prototype.constructor=r,r.__proto__=n,i}(r);i.prototype.name=r.name,i.prototype.code=t,n[t]=i}function o(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}i("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),i("ERR_INVALID_ARG_TYPE",(function(t,e,r){var n,i,s,a;if("string"==typeof e&&("not ","not "===e.substr(0,"not ".length))?(n="must not be",e=e.replace(/^not /,"")):n="must be",s=t,(void 0===a||a>s.length)&&(a=s.length)," argument"===s.substring(a-" argument".length,a))i="The ".concat(t," ").concat(n," ").concat(o(e,"type"));else{var u=function(t,e,r){return"number"!=typeof r&&(r=0),!(r+".".length>t.length)&&-1!==t.indexOf(".",r)}(t)?"property":"argument";i='The "'.concat(t,'" ').concat(u," ").concat(n," ").concat(o(e,"type"))}return i+". Received type ".concat(typeof r)}),TypeError),i("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),i("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),i("ERR_STREAM_PREMATURE_CLOSE","Premature close"),i("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),i("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),i("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),i("ERR_STREAM_WRITE_AFTER_END","write after end"),i("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),i("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),i("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.codes=n},{}],442:[function(t,e,r){e.exports=function(){throw new Error("Readable.from is not available in the browser")}},{}],445:[function(t,e,r){e.exports=t(410).EventEmitter},{410:410}],440:[function(t,e,r){(function(t){(function(){"use strict";function r(t,e){i(t,e),n(t)}function n(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function i(t,e){t.emit("error",e)}e.exports={destroy:function(e,o){var s=this,a=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return a||u?(o?o(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,t.nextTick(i,this,e)):t.nextTick(i,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!o&&e?s._writableState?s._writableState.errorEmitted?t.nextTick(n,s):(s._writableState.errorEmitted=!0,t.nextTick(r,s,e)):t.nextTick(r,s,e):o?(t.nextTick(n,s),o(e)):t.nextTick(n,s)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var r=t._readableState,n=t._writableState;r&&r.autoDestroy||n&&n.autoDestroy?t.destroy(e):t.emit("error",e)}}}).call(this)}).call(this,t(428))},{428:428}],439:[function(t,e,r){"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s=t(400).Buffer,a=t(397).inspect,u=a&&a.custom||"inspect";e.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,r;return e=t,(r=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r}},{key:"concat",value:function(t){if(0===this.length)return s.alloc(0);for(var e,r,n,i=s.allocUnsafe(t>>>0),o=this.head,a=0;o;)e=o.data,r=i,n=a,s.prototype.copy.call(e,r,n),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(t,e){var r;return t<this.head.data.length?(r=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):r=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,r=1,n=e.data;for(t-=n.length;e=e.next;){var i=e.data,o=t>i.length?i.length:t;if(o===i.length?n+=i:n+=i.slice(0,t),0==(t-=o)){o===i.length?(++r,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(t){var e=s.allocUnsafe(t),r=this.head,n=1;for(r.data.copy(e),t-=r.data.length;r=r.next;){var i=r.data,o=t>i.length?i.length:t;if(i.copy(e,e.length-t,0,o),0==(t-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,e}},{key:u,value:function(t,e){return a(this,function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({},e,{depth:0,customInspect:!1}))}}])&&o(e.prototype,r),t}()},{397:397,400:400}],444:[function(t,e,r){"use strict";var n=t(432).codes.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(t,e,r,i){var o=function(t,e,r){return null!=t.highWaterMark?t.highWaterMark:e?t[r]:null}(e,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return t.objectMode?16:16384}}},{432:432}],438:[function(t,e,r){(function(r){(function(){"use strict";var n;function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var o=t(441),s=Symbol("lastResolve"),a=Symbol("lastReject"),u=Symbol("error"),l=Symbol("ended"),c=Symbol("lastPromise"),h=Symbol("handlePromise"),p=Symbol("stream");function d(t,e){return{value:t,done:e}}function f(t){var e=t[s];if(null!==e){var r=t[p].read();null!==r&&(t[c]=null,t[s]=null,t[a]=null,e(d(r,!1)))}}var y=Object.getPrototypeOf((function(){})),m=Object.setPrototypeOf((i(n={get stream(){return this[p]},next:function(){var t=this,e=this[u];if(null!==e)return Promise.reject(e);if(this[l])return Promise.resolve(d(void 0,!0));if(this[p].destroyed)return new Promise((function(e,n){r.nextTick((function(){t[u]?n(t[u]):e(d(void 0,!0))}))}));var n,i=this[c];if(i)n=new Promise(function(t,e){return function(r,n){t.then((function(){e[l]?r(d(void 0,!0)):e[h](r,n)}),n)}}(i,this));else{var o=this[p].read();if(null!==o)return Promise.resolve(d(o,!1));n=new Promise(this[h])}return this[c]=n,n}},Symbol.asyncIterator,(function(){return this})),i(n,"return",(function(){var t=this;return new Promise((function(e,r){t[p].destroy(null,(function(t){t?r(t):e(d(void 0,!0))}))}))})),n),y);e.exports=function(t){var e,n=Object.create(m,(i(e={},p,{value:t,writable:!0}),i(e,s,{value:null,writable:!0}),i(e,a,{value:null,writable:!0}),i(e,u,{value:null,writable:!0}),i(e,l,{value:t._readableState.endEmitted,writable:!0}),i(e,h,{value:function(t,e){var r=n[p].read();r?(n[c]=null,n[s]=null,n[a]=null,t(d(r,!1))):(n[s]=t,n[a]=e)},writable:!0}),e));return n[c]=null,o(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=n[a];return null!==e&&(n[c]=null,n[s]=null,n[a]=null,e(t)),void(n[u]=t)}var r=n[s];null!==r&&(n[c]=null,n[s]=null,n[a]=null,r(d(void 0,!0))),n[l]=!0})),t.on("readable",function(t){r.nextTick(f,t)}.bind(null,n)),n}}).call(this)}).call(this,t(428))},{428:428,441:441}],446:[function(t,e,r){"use strict";var n=t(429).Buffer,i=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(n.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=l,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=c,this.end=h,e=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"\ufffd";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"\ufffd";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"\ufffd"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function l(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function c(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function p(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}r.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"\ufffd":e},o.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var i=s(e[n]);return i>=0?(i>0&&(t.lastNeed=i-1),i):--n<r||-2===i?0:(i=s(e[n]))>=0?(i>0&&(t.lastNeed=i-2),i):--n<r||-2===i?0:(i=s(e[n]))>=0?(i>0&&(2===i?i=0:t.lastNeed=i-3),i):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},{429:429}],448:[function(t,e,r){(function(t){(function(){function r(e){try{if(!t.localStorage)return!1}catch(n){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(t,e){if(r("noDeprecation"))return t;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(e);r("traceDeprecation")?console.trace(e):console.warn(e),n=!0}return t.apply(this,arguments)}}}).call(this)}).call(this,"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],447:[function(t,e,r){(function(e,n){(function(){var i=t(428).nextTick,o=(Function.prototype.apply,Array.prototype.slice),s={},a=0;function u(t,e){this._id=t,this._clearFn=e}u.prototype.unref=u.prototype.ref=function(){},u.prototype.close=function(){this._clearFn.call(window,this._id)},r.setImmediate="function"==typeof e?e:function(t){var e=a++,n=!(arguments.length<2)&&o.call(arguments,1);return s[e]=!0,i((function(){s[e]&&(n?t.apply(null,n):t.call(null),r.clearImmediate(e))})),e},r.clearImmediate="function"==typeof n?n:function(t){delete s[t]}}).call(this)}).call(this,t(447).setImmediate,t(447).clearImmediate)},{428:428,447:447}],449:[function(t,e,r){e.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},{}],450:[function(t,e,r){"use strict";var n=t(418),i=t(419),o=t(452),s=t(420);function a(t){return t.call.bind(t)}var u="undefined"!=typeof BigInt,l="undefined"!=typeof Symbol,c=a(Object.prototype.toString),h=a(Number.prototype.valueOf),p=a(String.prototype.valueOf),d=a(Boolean.prototype.valueOf);if(u)var f=a(BigInt.prototype.valueOf);if(l)var y=a(Symbol.prototype.valueOf);function m(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(r){return!1}}function g(t){return"[object Map]"===c(t)}function v(t){return"[object Set]"===c(t)}function T(t){return"[object WeakMap]"===c(t)}function _(t){return"[object WeakSet]"===c(t)}function E(t){return"[object ArrayBuffer]"===c(t)}function b(t){return"undefined"!=typeof ArrayBuffer&&(E.working?E(t):t instanceof ArrayBuffer)}function S(t){return"[object DataView]"===c(t)}function x(t){return"undefined"!=typeof DataView&&(S.working?S(t):t instanceof DataView)}function C(t){return"[object SharedArrayBuffer]"===c(t)}function A(t){return"undefined"!=typeof SharedArrayBuffer&&(C.working?C(t):t instanceof SharedArrayBuffer)}function N(t){return m(t,h)}function O(t){return m(t,p)}function w(t){return m(t,d)}function R(t){return u&&m(t,f)}function L(t){return l&&m(t,y)}r.isArgumentsObject=n,r.isGeneratorFunction=i,r.isTypedArray=s,r.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},r.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):s(t)||x(t)},r.isUint8Array=function(t){return"Uint8Array"===o(t)},r.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===o(t)},r.isUint16Array=function(t){return"Uint16Array"===o(t)},r.isUint32Array=function(t){return"Uint32Array"===o(t)},r.isInt8Array=function(t){return"Int8Array"===o(t)},r.isInt16Array=function(t){return"Int16Array"===o(t)},r.isInt32Array=function(t){return"Int32Array"===o(t)},r.isFloat32Array=function(t){return"Float32Array"===o(t)},r.isFloat64Array=function(t){return"Float64Array"===o(t)},r.isBigInt64Array=function(t){return"BigInt64Array"===o(t)},r.isBigUint64Array=function(t){return"BigUint64Array"===o(t)},g.working="undefined"!=typeof Map&&g(new Map),r.isMap=function(t){return"undefined"!=typeof Map&&(g.working?g(t):t instanceof Map)},v.working="undefined"!=typeof Set&&v(new Set),r.isSet=function(t){return"undefined"!=typeof Set&&(v.working?v(t):t instanceof Set)},T.working="undefined"!=typeof WeakMap&&T(new WeakMap),r.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(T.working?T(t):t instanceof WeakMap)},_.working="undefined"!=typeof WeakSet&&_(new WeakSet),r.isWeakSet=function(t){return _(t)},E.working="undefined"!=typeof ArrayBuffer&&E(new ArrayBuffer),r.isArrayBuffer=b,S.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&S(new DataView(new ArrayBuffer(1),0,1)),r.isDataView=x,C.working="undefined"!=typeof SharedArrayBuffer&&C(new SharedArrayBuffer),r.isSharedArrayBuffer=A,r.isAsyncFunction=function(t){return"[object AsyncFunction]"===c(t)},r.isMapIterator=function(t){return"[object Map Iterator]"===c(t)},r.isSetIterator=function(t){return"[object Set Iterator]"===c(t)},r.isGeneratorObject=function(t){return"[object Generator]"===c(t)},r.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===c(t)},r.isNumberObject=N,r.isStringObject=O,r.isBooleanObject=w,r.isBigIntObject=R,r.isSymbolObject=L,r.isBoxedPrimitive=function(t){return N(t)||O(t)||w(t)||R(t)||L(t)},r.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(b(t)||A(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(r,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},{418:418,419:419,420:420,452:452}],452:[function(t,e,r){(function(r){(function(){"use strict";var n=t(411),i=t(394),o=t(408),s=o("Object.prototype.toString"),a=t(414)()&&"symbol"==typeof Symbol.toStringTag,u=i(),l=o("String.prototype.slice"),c={},h=t(409),p=Object.getPrototypeOf;a&&h&&p&&n(u,(function(t){if("function"==typeof r[t]){var e=new r[t];if(!(Symbol.toStringTag in e))throw new EvalError("this engine has support for Symbol.toStringTag, but "+t+" does not have the property! Please report this.");var n=p(e),i=h(n,Symbol.toStringTag);if(!i){var o=p(n);i=h(o,Symbol.toStringTag)}c[t]=i.get}}));var d=t(420);e.exports=function(t){return!!d(t)&&(a?function(t){var e=!1;return n(c,(function(r,n){if(!e)try{var i=r.call(t);i===n&&(e=i)}catch(o){}})),e}(t):l(s(t),8,-1))}}).call(this)}).call(this,"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{394:394,408:408,409:409,411:411,414:414,420:420}],453:[function(t,e,r){function n(t){this.options=t||{locator:{}}}function i(){this.cdata=!1}function o(t,e){e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber}function s(t){if(t)return"\n@"+(t.systemId||"")+"#[line:"+t.lineNumber+",col:"+t.columnNumber+"]"}function a(t,e,r){return"string"==typeof t?t.substr(e,r):t.length>=e+r||e?new java.lang.String(t,e,r)+"":t}function u(t,e){t.currentElement?t.currentElement.appendChild(e):t.doc.appendChild(e)}n.prototype.parseFromString=function(t,e){var r=this.options,n=new l,o=r.domBuilder||new i,a=r.errorHandler,u=r.locator,c=r.xmlns||{},h={lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return u&&o.setDocumentLocator(u),n.errorHandler=function(t,e,r){if(!t){if(e instanceof i)return e;t=e}var n={},o=t instanceof Function;function a(e){var i=t[e];!i&&o&&(i=2==t.length?function(r){t(e,r)}:t),n[e]=i&&function(t){i("[xmldom "+e+"]\t"+t+s(r))}||function(){}}return r=r||{},a("warning"),a("error"),a("fatalError"),n}(a,o,u),n.domBuilder=r.domBuilder||o,/\/x?html?$/.test(e)&&(h.nbsp="\xa0",h.copy="\xa9",c[""]="http://www.w3.org/1999/xhtml"),c.xml=c.xml||"http://www.w3.org/XML/1998/namespace",t?n.parse(t,c,h):n.errorHandler.error("invalid doc source"),o.doc},i.prototype={startDocument:function(){this.doc=(new c).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(t,e,r,n){var i=this.doc,s=i.createElementNS(t,r||e),a=n.length;u(this,s),this.currentElement=s,this.locator&&o(this.locator,s);for(var l=0;l<a;l++){t=n.getURI(l);var c=n.getValue(l),h=(r=n.getQName(l),i.createAttributeNS(t,r));this.locator&&o(n.getLocator(l),h),h.value=h.nodeValue=c,s.setAttributeNode(h)}},endElement:function(t,e,r){var n=this.currentElement;n.tagName,this.currentElement=n.parentNode},startPrefixMapping:function(t,e){},endPrefixMapping:function(t){},processingInstruction:function(t,e){var r=this.doc.createProcessingInstruction(t,e);this.locator&&o(this.locator,r),u(this,r)},ignorableWhitespace:function(t,e,r){},characters:function(t,e,r){if(t=a.apply(this,arguments)){if(this.cdata)var n=this.doc.createCDATASection(t);else n=this.doc.createTextNode(t);this.currentElement?this.currentElement.appendChild(n):/^\s*$/.test(t)&&this.doc.appendChild(n),this.locator&&o(this.locator,n)}},skippedEntity:function(t){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(t){(this.locator=t)&&(t.lineNumber=0)},comment:function(t,e,r){t=a.apply(this,arguments);var n=this.doc.createComment(t);this.locator&&o(this.locator,n),u(this,n)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(t,e,r){var n=this.doc.implementation;if(n&&n.createDocumentType){var i=n.createDocumentType(t,e,r);this.locator&&o(this.locator,i),u(this,i)}},warning:function(t){console.warn("[xmldom warning]\t"+t,s(this.locator))},error:function(t){console.error("[xmldom error]\t"+t,s(this.locator))},fatalError:function(t){throw console.error("[xmldom fatalError]\t"+t,s(this.locator)),t}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,(function(t){i.prototype[t]=function(){return null}}));var l=t(455).XMLReader,c=t(454).DOMImplementation;t(454).XMLSerializer,r.DOMParser=n},{454:454,455:455}],455:[function(t,e,r){var n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,i=new RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),o=new RegExp("^"+n.source+i.source+"*(?::"+n.source+i.source+"*)?$");function s(){}function a(t,e){return e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber,e}function u(t,e,r,n,i,o){for(var s,a=++e,u=0;;){var l=t.charAt(a);switch(l){case"=":if(1===u)s=t.slice(e,a),u=3;else{if(2!==u)throw new Error("attribute equal must after attrName");u=3}break;case"'":case'"':if(3===u||1===u){if(1===u&&(o.warning('attribute value must after "="'),s=t.slice(e,a)),e=a+1,!((a=t.indexOf(l,e))>0))throw new Error("attribute value no end '"+l+"' match");c=t.slice(e,a).replace(/&#?\w+;/g,i),r.add(s,c,e-1),u=5}else{if(4!=u)throw new Error('attribute value must after "="');c=t.slice(e,a).replace(/&#?\w+;/g,i),r.add(s,c,e),o.warning('attribute "'+s+'" missed start quot('+l+")!!"),e=a+1,u=5}break;case"/":switch(u){case 0:r.setTagName(t.slice(e,a));case 5:case 6:case 7:u=7,r.closed=!0;case 4:case 1:case 2:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return o.error("unexpected end of input"),0==u&&r.setTagName(t.slice(e,a)),a;case">":switch(u){case 0:r.setTagName(t.slice(e,a));case 5:case 6:case 7:break;case 4:case 1:"/"===(c=t.slice(e,a)).slice(-1)&&(r.closed=!0,c=c.slice(0,-1));case 2:2===u&&(c=s),4==u?(o.warning('attribute "'+c+'" missed quot(")!!'),r.add(s,c.replace(/&#?\w+;/g,i),e)):("http://www.w3.org/1999/xhtml"===n[""]&&c.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+c+'" missed value!! "'+c+'" instead!!'),r.add(c,c,e));break;case 3:throw new Error("attribute value missed!!")}return a;case"\x80":l=" ";default:if(l<=" ")switch(u){case 0:r.setTagName(t.slice(e,a)),u=6;break;case 1:s=t.slice(e,a),u=2;break;case 4:var c=t.slice(e,a).replace(/&#?\w+;/g,i);o.warning('attribute "'+c+'" missed quot(")!!'),r.add(s,c,e);case 5:u=6}else switch(u){case 2:r.tagName,"http://www.w3.org/1999/xhtml"===n[""]&&s.match(/^(?:disabled|checked|selected)$/i)||o.warning('attribute "'+s+'" missed value!! "'+s+'" instead2!!'),r.add(s,s,e),e=a,u=1;break;case 5:o.warning('attribute space is required"'+s+'"!!');case 6:u=1,e=a;break;case 3:u=4,e=a;break;case 7:throw new Error("elements closed character '/' and '>' must be connected to")}}a++}}function l(t,e,r){for(var n=t.tagName,i=null,o=t.length;o--;){var s=t[o],a=s.qName,u=s.value;if((d=a.indexOf(":"))>0)var l=s.prefix=a.slice(0,d),c=a.slice(d+1),h="xmlns"===l&&c;else c=a,l=null,h="xmlns"===a&&"";s.localName=c,!1!==h&&(null==i&&(i={},p(r,r={})),r[h]=i[h]=u,s.uri="http://www.w3.org/2000/xmlns/",e.startPrefixMapping(h,u))}for(o=t.length;o--;)(l=(s=t[o]).prefix)&&("xml"===l&&(s.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==l&&(s.uri=r[l||""]));var d;(d=n.indexOf(":"))>0?(l=t.prefix=n.slice(0,d),c=t.localName=n.slice(d+1)):(l=null,c=t.localName=n);var f=t.uri=r[l||""];if(e.startElement(f,c,n,t),!t.closed)return t.currentNSMap=r,t.localNSMap=i,!0;if(e.endElement(f,c,n),i)for(l in i)e.endPrefixMapping(l)}function c(t,e,r,n,i){if(/^(?:script|textarea)$/i.test(r)){var o=t.indexOf("</"+r+">",e),s=t.substring(e+1,o);if(/[&<]/.test(s))return/^script$/i.test(r)?(i.characters(s,0,s.length),o):(s=s.replace(/&#?\w+;/g,n),i.characters(s,0,s.length),o)}return e+1}function h(t,e,r,n){var i=n[r];return null==i&&((i=t.lastIndexOf("</"+r+">"))<e&&(i=t.lastIndexOf("</"+r)),n[r]=i),i<e}function p(t,e){for(var r in t)e[r]=t[r]}function d(t,e,r,n){switch(t.charAt(e+2)){case"-":return"-"===t.charAt(e+3)?(i=t.indexOf("--\x3e",e+4))>e?(r.comment(t,e+4,i-e-4),i+3):(n.error("Unclosed comment"),-1):-1;default:if("CDATA["==t.substr(e+3,6)){var i=t.indexOf("]]>",e+9);return r.startCDATA(),r.characters(t,e+9,i-e-9),r.endCDATA(),i+3}var o=function(t,e){var r,n=[],i=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;for(i.lastIndex=e,i.exec(t);r=i.exec(t);)if(n.push(r),r[1])return n}(t,e),s=o.length;if(s>1&&/!doctype/i.test(o[0][0])){var a=o[1][0],u=s>3&&/^public$/i.test(o[2][0])&&o[3][0],l=s>4&&o[4][0],c=o[s-1];return r.startDTD(a,u&&u.replace(/^(['"])(.*?)\1$/,"$2"),l&&l.replace(/^(['"])(.*?)\1$/,"$2")),r.endDTD(),c.index+c[0].length}}return-1}function f(t,e,r){var n=t.indexOf("?>",e);if(n){var i=t.substring(e,n).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);return i?(i[0].length,r.processingInstruction(i[1],i[2]),n+2):-1}return-1}function y(t){}function m(t,e){return t.__proto__=e,t}s.prototype={parse:function(t,e,r){var n=this.domBuilder;n.startDocument(),p(e,e={}),function(t,e,r,n,i){function o(t){var e=t.slice(1,-1);return e in r?r[e]:"#"===e.charAt(0)?function(t){if(t>65535){var e=55296+((t-=65536)>>10),r=56320+(1023&t);return String.fromCharCode(e,r)}return String.fromCharCode(t)}(parseInt(e.substr(1).replace("x","0x"))):(i.error("entity not found:"+t),t)}function s(e){if(e>b){var r=t.substring(b,e).replace(/&#?\w+;/g,o);T&&p(b),n.characters(r,0,e-b),b=e}}function p(e,r){for(;e>=g&&(r=v.exec(t));)m=r.index,g=m+r[0].length,T.lineNumber++;T.columnNumber=e-m+1}for(var m=0,g=0,v=/.*(?:\r\n?|\n)|.*$/g,T=n.locator,_=[{currentNSMap:e}],E={},b=0;;){try{var S=t.indexOf("<",b);if(S<0){if(!t.substr(b).match(/^\s*$/)){var x=n.doc,C=x.createTextNode(t.substr(b));x.appendChild(C),n.currentElement=C}return}switch(S>b&&s(S),t.charAt(S+1)){case"/":var A=t.indexOf(">",S+3),N=t.substring(S+2,A),O=_.pop();A<0?(N=t.substring(S+2).replace(/[\s<].*/,""),i.error("end tag name: "+N+" is not complete:"+O.tagName),A=S+1+N.length):N.match(/\s</)&&(N=N.replace(/[\s<].*/,""),i.error("end tag name: "+N+" maybe not complete"),A=S+1+N.length);var w=O.localNSMap,R=O.tagName==N;if(R||O.tagName&&O.tagName.toLowerCase()==N.toLowerCase()){if(n.endElement(O.uri,O.localName,N),w)for(var L in w)n.endPrefixMapping(L);R||i.fatalError("end tag name: "+N+" is not match the current start tagName:"+O.tagName)}else _.push(O);A++;break;case"?":T&&p(S),A=f(t,S,n);break;case"!":T&&p(S),A=d(t,S,n,i);break;default:T&&p(S);var P=new y,I=_[_.length-1].currentNSMap,D=(A=u(t,S,P,I,o,i),P.length);if(!P.closed&&h(t,A,P.tagName,E)&&(P.closed=!0,r.nbsp||i.warning("unclosed xml attribute")),T&&D){for(var U=a(T,{}),M=0;M<D;M++){var k=P[M];p(k.offset),k.locator=a(T,{})}n.locator=U,l(P,n,I)&&_.push(P),n.locator=T}else l(P,n,I)&&_.push(P);"http://www.w3.org/1999/xhtml"!==P.uri||P.closed?A++:A=c(t,A,P.tagName,o,n)}}catch(F){i.error("element parse error: "+F),A=-1}A>b?b=A:s(Math.max(S,b)+1)}}(t,e,r,n,this.errorHandler),n.endDocument()}},y.prototype={setTagName:function(t){if(!o.test(t))throw new Error("invalid tagName:"+t);this.tagName=t},add:function(t,e,r){if(!o.test(t))throw new Error("invalid attribute:"+t);this[this.length++]={qName:t,value:e,offset:r}},length:0,getLocalName:function(t){return this[t].localName},getLocator:function(t){return this[t].locator},getQName:function(t){return this[t].qName},getURI:function(t){return this[t].uri},getValue:function(t){return this[t].value}},m({},m.prototype)instanceof m||(m=function(t,e){function r(){}for(e in r.prototype=e,r=new r,t)r[e]=t[e];return r}),r.XMLReader=s},{}],454:[function(t,e,r){function n(t,e){for(var r in t)e[r]=t[r]}function i(t,e){var r=t.prototype;if(Object.create){var i=Object.create(e.prototype);r.__proto__=i}if(!(r instanceof e)){function o(){}o.prototype=e.prototype,n(r,o=new o),t.prototype=r=o}r.constructor!=t&&("function"!=typeof t&&console.error("unknow Class:"+t),r.constructor=t)}var o={},s=o.ELEMENT_NODE=1,a=o.ATTRIBUTE_NODE=2,u=o.TEXT_NODE=3,l=o.CDATA_SECTION_NODE=4,c=o.ENTITY_REFERENCE_NODE=5,h=o.ENTITY_NODE=6,p=o.PROCESSING_INSTRUCTION_NODE=7,d=o.COMMENT_NODE=8,f=o.DOCUMENT_NODE=9,y=o.DOCUMENT_TYPE_NODE=10,m=o.DOCUMENT_FRAGMENT_NODE=11,g=o.NOTATION_NODE=12,v={},T={},_=(v.INDEX_SIZE_ERR=(T[1]="Index size error",1),v.DOMSTRING_SIZE_ERR=(T[2]="DOMString size error",2),v.HIERARCHY_REQUEST_ERR=(T[3]="Hierarchy request error",3)),E=(v.WRONG_DOCUMENT_ERR=(T[4]="Wrong document",4),v.INVALID_CHARACTER_ERR=(T[5]="Invalid character",5),v.NO_DATA_ALLOWED_ERR=(T[6]="No data allowed",6),v.NO_MODIFICATION_ALLOWED_ERR=(T[7]="No modification allowed",7),v.NOT_FOUND_ERR=(T[8]="Not found",8)),b=(v.NOT_SUPPORTED_ERR=(T[9]="Not supported",9),v.INUSE_ATTRIBUTE_ERR=(T[10]="Attribute in use",10));function S(t,e){if(e instanceof Error)var r=e;else r=this,Error.call(this,T[t]),this.message=T[t],Error.captureStackTrace&&Error.captureStackTrace(this,S);return r.code=t,e&&(this.message=this.message+": "+e),r}function x(){}function C(t,e){this._node=t,this._refresh=e,A(this)}function A(t){var e=t._node._inc||t._node.ownerDocument._inc;if(t._inc!=e){var r=t._refresh(t._node);rt(t,"length",r.length),n(r,t),t._inc=e}}function N(){}function O(t,e){for(var r=t.length;r--;)if(t[r]===e)return r}function w(t,e,r,n){if(n?e[O(e,n)]=r:e[e.length++]=r,t){r.ownerElement=t;var i=t.ownerDocument;i&&(n&&M(i,t,n),function(t,e,r){t&&t._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&(e._nsMap[r.prefix?r.localName:""]=r.value)}(i,t,r))}}function R(t,e,r){var n=O(e,r);if(!(n>=0))throw S(E,new Error(t.tagName+"@"+r));for(var i=e.length-1;n<i;)e[n]=e[++n];if(e.length=i,t){var o=t.ownerDocument;o&&(M(o,t,r),r.ownerElement=null)}}function L(t){if(this._features={},t)for(var e in t)this._features=t[e]}function P(){}function I(t){return("<"==t?"&lt;":">"==t&&"&gt;")||"&"==t&&"&amp;"||'"'==t&&"&quot;"||"&#"+t.charCodeAt()+";"}function D(t,e){if(e(t))return!0;if(t=t.firstChild)do{if(D(t,e))return!0}while(t=t.nextSibling)}function U(){}function M(t,e,r,n){t&&t._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&delete e._nsMap[r.prefix?r.localName:""]}function k(t,e,r){if(t&&t._inc){t._inc++;var n=e.childNodes;if(r)n[n.length++]=r;else{for(var i=e.firstChild,o=0;i;)n[o++]=i,i=i.nextSibling;n.length=o}}}function F(t,e){var r=e.previousSibling,n=e.nextSibling;return r?r.nextSibling=n:t.firstChild=n,n?n.previousSibling=r:t.lastChild=r,k(t.ownerDocument,t),e}function j(t,e,r){var n=e.parentNode;if(n&&n.removeChild(e),e.nodeType===m){var i=e.firstChild;if(null==i)return e;var o=e.lastChild}else i=o=e;var s=r?r.previousSibling:t.lastChild;i.previousSibling=s,o.nextSibling=r,s?s.nextSibling=i:t.firstChild=i,null==r?t.lastChild=o:r.previousSibling=o;do{i.parentNode=t}while(i!==o&&(i=i.nextSibling));return k(t.ownerDocument||t,t),e.nodeType==m&&(e.firstChild=e.lastChild=null),e}function B(){this._nsMap={}}function H(){}function G(){}function z(){}function W(){}function V(){}function $(){}function q(){}function Y(){}function K(){}function X(){}function Q(){}function Z(){}function J(t,e){var r=[],n=9==this.nodeType?this.documentElement:this,i=n.prefix,o=n.namespaceURI;if(o&&null==i&&null==(i=n.lookupPrefix(o)))var s=[{namespace:o,prefix:null}];return et(this,r,t,e,s),r.join("")}function tt(t,e,r){var n=t.prefix||"",i=t.namespaceURI;if(!n&&!i)return!1;if("xml"===n&&"http://www.w3.org/XML/1998/namespace"===i||"http://www.w3.org/2000/xmlns/"==i)return!1;for(var o=r.length;o--;){var s=r[o];if(s.prefix==n)return s.namespace!=i}return!0}function et(t,e,r,n,i){if(n){if(!(t=n(t)))return;if("string"==typeof t)return void e.push(t)}switch(t.nodeType){case s:i||(i=[]),i.length;var o=t.attributes,h=o.length,g=t.firstChild,v=t.tagName;r="http://www.w3.org/1999/xhtml"===t.namespaceURI||r,e.push("<",v);for(var T=0;T<h;T++)"xmlns"==(_=o.item(T)).prefix?i.push({prefix:_.localName,namespace:_.value}):"xmlns"==_.nodeName&&i.push({prefix:"",namespace:_.value});for(T=0;T<h;T++){var _;if(tt(_=o.item(T),0,i)){var E=_.prefix||"",b=_.namespaceURI,S=E?" xmlns:"+E:" xmlns";e.push(S,'="',b,'"'),i.push({prefix:E,namespace:b})}et(_,e,r,n,i)}if(tt(t,0,i)&&(E=t.prefix||"",b=t.namespaceURI,S=E?" xmlns:"+E:" xmlns",e.push(S,'="',b,'"'),i.push({prefix:E,namespace:b})),g||r&&!/^(?:meta|link|img|br|hr|input)$/i.test(v)){if(e.push(">"),r&&/^script$/i.test(v))for(;g;)g.data?e.push(g.data):et(g,e,r,n,i),g=g.nextSibling;else for(;g;)et(g,e,r,n,i),g=g.nextSibling;e.push("</",v,">")}else e.push("/>");return;case f:case m:for(g=t.firstChild;g;)et(g,e,r,n,i),g=g.nextSibling;return;case a:return e.push(" ",t.name,'="',t.value.replace(/[<&"]/g,I),'"');case u:return e.push(t.data.replace(/[<&]/g,I));case l:return e.push("<![CDATA[",t.data,"]]>");case d:return e.push("\x3c!--",t.data,"--\x3e");case y:var x=t.publicId,C=t.systemId;if(e.push("<!DOCTYPE ",t.name),x)e.push(' PUBLIC "',x),C&&"."!=C&&e.push('" "',C),e.push('">');else if(C&&"."!=C)e.push(' SYSTEM "',C,'">');else{var A=t.internalSubset;A&&e.push(" [",A,"]"),e.push(">")}return;case p:return e.push("<?",t.target," ",t.data,"?>");case c:return e.push("&",t.nodeName,";");default:e.push("??",t.nodeName)}}function rt(t,e,r){t[e]=r}v.INVALID_STATE_ERR=(T[11]="Invalid state",11),v.SYNTAX_ERR=(T[12]="Syntax error",12),v.INVALID_MODIFICATION_ERR=(T[13]="Invalid modification",13),v.NAMESPACE_ERR=(T[14]="Invalid namespace",14),v.INVALID_ACCESS_ERR=(T[15]="Invalid access",15),S.prototype=Error.prototype,n(v,S),x.prototype={length:0,item:function(t){return this[t]||null},toString:function(t,e){for(var r=[],n=0;n<this.length;n++)et(this[n],r,t,e);return r.join("")}},C.prototype.item=function(t){return A(this),this[t]},i(C,x),N.prototype={length:0,item:x.prototype.item,getNamedItem:function(t){for(var e=this.length;e--;){var r=this[e];if(r.nodeName==t)return r}},setNamedItem:function(t){var e=t.ownerElement;if(e&&e!=this._ownerElement)throw new S(b);var r=this.getNamedItem(t.nodeName);return w(this._ownerElement,this,t,r),r},setNamedItemNS:function(t){var e,r=t.ownerElement;if(r&&r!=this._ownerElement)throw new S(b);return e=this.getNamedItemNS(t.namespaceURI,t.localName),w(this._ownerElement,this,t,e),e},removeNamedItem:function(t){var e=this.getNamedItem(t);return R(this._ownerElement,this,e),e},removeNamedItemNS:function(t,e){var r=this.getNamedItemNS(t,e);return R(this._ownerElement,this,r),r},getNamedItemNS:function(t,e){for(var r=this.length;r--;){var n=this[r];if(n.localName==e&&n.namespaceURI==t)return n}return null}},L.prototype={hasFeature:function(t,e){var r=this._features[t.toLowerCase()];return!(!r||e&&!(e in r))},createDocument:function(t,e,r){var n=new U;if(n.implementation=this,n.childNodes=new x,n.doctype=r,r&&n.appendChild(r),e){var i=n.createElementNS(t,e);n.appendChild(i)}return n},createDocumentType:function(t,e,r){var n=new $;return n.name=t,n.nodeName=t,n.publicId=e,n.systemId=r,n}},P.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(t,e){return j(this,t,e)},replaceChild:function(t,e){this.insertBefore(t,e),e&&this.removeChild(e)},removeChild:function(t){return F(this,t)},appendChild:function(t){return this.insertBefore(t,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(t){return function t(e,r,n){var i=new r.constructor;for(var o in r){var u=r[o];"object"!=typeof u&&u!=i[o]&&(i[o]=u)}switch(r.childNodes&&(i.childNodes=new x),i.ownerDocument=e,i.nodeType){case s:var l=r.attributes,c=i.attributes=new N,h=l.length;c._ownerElement=i;for(var p=0;p<h;p++)i.setAttributeNode(t(e,l.item(p),!0));break;case a:n=!0}if(n)for(var d=r.firstChild;d;)i.appendChild(t(e,d,n)),d=d.nextSibling;return i}(this.ownerDocument||this,this,t)},normalize:function(){for(var t=this.firstChild;t;){var e=t.nextSibling;e&&e.nodeType==u&&t.nodeType==u?(this.removeChild(e),t.appendData(e.data)):(t.normalize(),t=e)}},isSupported:function(t,e){return this.ownerDocument.implementation.hasFeature(t,e)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(t){for(var e=this;e;){var r=e._nsMap;if(r)for(var n in r)if(r[n]==t)return n;e=e.nodeType==a?e.ownerDocument:e.parentNode}return null},lookupNamespaceURI:function(t){for(var e=this;e;){var r=e._nsMap;if(r&&t in r)return r[t];e=e.nodeType==a?e.ownerDocument:e.parentNode}return null},isDefaultNamespace:function(t){return null==this.lookupPrefix(t)}},n(o,P),n(o,P.prototype),U.prototype={nodeName:"#document",nodeType:f,doctype:null,documentElement:null,_inc:1,insertBefore:function(t,e){if(t.nodeType==m){for(var r=t.firstChild;r;){var n=r.nextSibling;this.insertBefore(r,e),r=n}return t}return null==this.documentElement&&t.nodeType==s&&(this.documentElement=t),j(this,t,e),t.ownerDocument=this,t},removeChild:function(t){return this.documentElement==t&&(this.documentElement=null),F(this,t)},importNode:function(t,e){return function t(e,r,n){var i;switch(r.nodeType){case s:(i=r.cloneNode(!1)).ownerDocument=e;case m:break;case a:n=!0}if(i||(i=r.cloneNode(!1)),i.ownerDocument=e,i.parentNode=null,n)for(var o=r.firstChild;o;)i.appendChild(t(e,o,n)),o=o.nextSibling;return i}(this,t,e)},getElementById:function(t){var e=null;return D(this.documentElement,(function(r){if(r.nodeType==s&&r.getAttribute("id")==t)return e=r,!0})),e},createElement:function(t){var e=new B;return e.ownerDocument=this,e.nodeName=t,e.tagName=t,e.childNodes=new x,(e.attributes=new N)._ownerElement=e,e},createDocumentFragment:function(){var t=new X;return t.ownerDocument=this,t.childNodes=new x,t},createTextNode:function(t){var e=new z;return e.ownerDocument=this,e.appendData(t),e},createComment:function(t){var e=new W;return e.ownerDocument=this,e.appendData(t),e},createCDATASection:function(t){var e=new V;return e.ownerDocument=this,e.appendData(t),e},createProcessingInstruction:function(t,e){var r=new Q;return r.ownerDocument=this,r.tagName=r.target=t,r.nodeValue=r.data=e,r},createAttribute:function(t){var e=new H;return e.ownerDocument=this,e.name=t,e.nodeName=t,e.localName=t,e.specified=!0,e},createEntityReference:function(t){var e=new K;return e.ownerDocument=this,e.nodeName=t,e},createElementNS:function(t,e){var r=new B,n=e.split(":"),i=r.attributes=new N;return r.childNodes=new x,r.ownerDocument=this,r.nodeName=e,r.tagName=e,r.namespaceURI=t,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=e,i._ownerElement=r,r},createAttributeNS:function(t,e){var r=new H,n=e.split(":");return r.ownerDocument=this,r.nodeName=e,r.name=e,r.namespaceURI=t,r.specified=!0,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=e,r}},i(U,P),B.prototype={nodeType:s,hasAttribute:function(t){return null!=this.getAttributeNode(t)},getAttribute:function(t){var e=this.getAttributeNode(t);return e&&e.value||""},getAttributeNode:function(t){return this.attributes.getNamedItem(t)},setAttribute:function(t,e){var r=this.ownerDocument.createAttribute(t);r.value=r.nodeValue=""+e,this.setAttributeNode(r)},removeAttribute:function(t){var e=this.getAttributeNode(t);e&&this.removeAttributeNode(e)},appendChild:function(t){return t.nodeType===m?this.insertBefore(t,null):function(t,e){var r=e.parentNode;if(r){var n=t.lastChild;r.removeChild(e),n=t.lastChild}return n=t.lastChild,e.parentNode=t,e.previousSibling=n,e.nextSibling=null,n?n.nextSibling=e:t.firstChild=e,t.lastChild=e,k(t.ownerDocument,t,e),e}(this,t)},setAttributeNode:function(t){return this.attributes.setNamedItem(t)},setAttributeNodeNS:function(t){return this.attributes.setNamedItemNS(t)},removeAttributeNode:function(t){return this.attributes.removeNamedItem(t.nodeName)},removeAttributeNS:function(t,e){var r=this.getAttributeNodeNS(t,e);r&&this.removeAttributeNode(r)},hasAttributeNS:function(t,e){return null!=this.getAttributeNodeNS(t,e)},getAttributeNS:function(t,e){var r=this.getAttributeNodeNS(t,e);return r&&r.value||""},setAttributeNS:function(t,e,r){var n=this.ownerDocument.createAttributeNS(t,e);n.value=n.nodeValue=""+r,this.setAttributeNode(n)},getAttributeNodeNS:function(t,e){return this.attributes.getNamedItemNS(t,e)},getElementsByTagName:function(t){return new C(this,(function(e){var r=[];return D(e,(function(n){n===e||n.nodeType!=s||"*"!==t&&n.tagName!=t||r.push(n)})),r}))},getElementsByTagNameNS:function(t,e){return new C(this,(function(r){var n=[];return D(r,(function(i){i===r||i.nodeType!==s||"*"!==t&&i.namespaceURI!==t||"*"!==e&&i.localName!=e||n.push(i)})),n}))}},U.prototype.getElementsByTagName=B.prototype.getElementsByTagName,U.prototype.getElementsByTagNameNS=B.prototype.getElementsByTagNameNS,i(B,P),H.prototype.nodeType=a,i(H,P),G.prototype={data:"",substringData:function(t,e){return this.data.substring(t,t+e)},appendData:function(t){t=this.data+t,this.nodeValue=this.data=t,this.length=t.length},insertData:function(t,e){this.replaceData(t,0,e)},appendChild:function(t){throw new Error(T[_])},deleteData:function(t,e){this.replaceData(t,e,"")},replaceData:function(t,e,r){r=this.data.substring(0,t)+r+this.data.substring(t+e),this.nodeValue=this.data=r,this.length=r.length}},i(G,P),z.prototype={nodeName:"#text",nodeType:u,splitText:function(t){var e=this.data,r=e.substring(t);e=e.substring(0,t),this.data=this.nodeValue=e,this.length=e.length;var n=this.ownerDocument.createTextNode(r);return this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling),n}},i(z,G),W.prototype={nodeName:"#comment",nodeType:d},i(W,G),V.prototype={nodeName:"#cdata-section",nodeType:l},i(V,G),$.prototype.nodeType=y,i($,P),q.prototype.nodeType=g,i(q,P),Y.prototype.nodeType=h,i(Y,P),K.prototype.nodeType=c,i(K,P),X.prototype.nodeName="#document-fragment",X.prototype.nodeType=m,i(X,P),Q.prototype.nodeType=p,i(Q,P),Z.prototype.serializeToString=function(t,e,r){return J.call(t,e,r)},P.prototype.toString=J;try{Object.defineProperty&&(Object.defineProperty(C.prototype,"length",{get:function(){return A(this),this.$$length}}),Object.defineProperty(P.prototype,"textContent",{get:function(){return function t(e){switch(e.nodeType){case s:case m:var r=[];for(e=e.firstChild;e;)7!==e.nodeType&&8!==e.nodeType&&r.push(t(e)),e=e.nextSibling;return r.join("");default:return e.nodeValue}}(this)},set:function(t){switch(this.nodeType){case s:case m:for(;this.firstChild;)this.removeChild(this.firstChild);(t||String(t))&&this.appendChild(this.ownerDocument.createTextNode(t));break;default:this.data=t,this.value=t,this.nodeValue=t}}}),rt=function(t,e,r){t["$$"+e]=r})}catch(nt){}},{}],457:[function(t,e,r){(function(){"use strict";r.stripBOM=function(t){return"\ufeff"===t[0]?t.substring(1):t}}).call(this)},{}],458:[function(t,e,r){(function(){"use strict";var e,n,i,o,s,a={}.hasOwnProperty;e=t(495),n=t(459).defaults,o=function(t){return"string"==typeof t&&(t.indexOf("&")>=0||t.indexOf(">")>=0||t.indexOf("<")>=0)},s=function(t){return"<![CDATA["+i(t)+"]]>"},i=function(t){return t.replace("]]>","]]]]><![CDATA[>")},r.Builder=function(){function t(t){var e,r,i;for(e in this.options={},r=n[.2])a.call(r,e)&&(i=r[e],this.options[e]=i);for(e in t)a.call(t,e)&&(i=t[e],this.options[e]=i)}return t.prototype.buildObject=function(t){var r,i,u,l,c,h;return r=this.options.attrkey,i=this.options.charkey,1===Object.keys(t).length&&this.options.rootName===n[.2].rootName?t=t[c=Object.keys(t)[0]]:c=this.options.rootName,h=this,u=function(t,e){var n,l,c,p,d,f;if("object"!=typeof e)h.options.cdata&&o(e)?t.raw(s(e)):t.txt(e);else if(Array.isArray(e)){for(p in e)if(a.call(e,p))for(d in l=e[p])c=l[d],t=u(t.ele(d),c).up()}else for(d in e)if(a.call(e,d))if(l=e[d],d===r){if("object"==typeof l)for(n in l)f=l[n],t=t.att(n,f)}else if(d===i)t=h.options.cdata&&o(l)?t.raw(s(l)):t.txt(l);else if(Array.isArray(l))for(p in l)a.call(l,p)&&(t="string"==typeof(c=l[p])?h.options.cdata&&o(c)?t.ele(d).raw(s(c)).up():t.ele(d,c).up():u(t.ele(d),c).up());else"object"==typeof l?t=u(t.ele(d),l).up():"string"==typeof l&&h.options.cdata&&o(l)?t=t.ele(d).raw(s(l)).up():(null==l&&(l=""),t=t.ele(d,l.toString()).up());return t},l=e.create(c,this.options.xmldec,this.options.doctype,{headless:this.options.headless,allowSurrogateChars:this.options.allowSurrogateChars}),u(l,t).end(this.options.renderOpts)},t}()}).call(this)},{459:459,495:495}],459:[function(t,e,r){(function(){r.defaults={.1:{explicitCharkey:!1,trim:!0,normalize:!0,normalizeTags:!1,attrkey:"@",charkey:"#",explicitArray:!1,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!1,validator:null,xmlns:!1,explicitChildren:!1,childkey:"@@",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,emptyTag:""},.2:{explicitCharkey:!1,trim:!1,normalize:!1,normalizeTags:!1,attrkey:"$",charkey:"_",explicitArray:!0,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!0,validator:null,xmlns:!1,explicitChildren:!1,preserveChildrenOrder:!1,childkey:"$$",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,rootName:"root",xmldec:{version:"1.0",encoding:"UTF-8",standalone:!0},doctype:null,renderOpts:{pretty:!0,indent:"  ",newline:"\n"},headless:!1,chunkSize:1e4,emptyTag:"",cdata:!1}}}).call(this)},{}],495:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c,h;h=t(465),l=h.assign,c=h.isFunction,i=t(473),o=t(481),s=t(482),u=t(491),a=t(490),r=t(464),n=t(466),e.exports.create=function(t,e,r,n){var i,s;if(null==t)throw new Error("Root element needs a name.");return n=l({},e,r,n),s=(i=new o(n)).element(t),n.headless||(i.declaration(n),null==n.pubID&&null==n.sysID||i.dtd(n)),s},e.exports.begin=function(t,e,r){var n;return c(t)&&(e=(n=[t,e])[0],r=n[1],t={}),e?new s(t,e,r):new o(t)},e.exports.stringWriter=function(t){return new u(t)},e.exports.streamWriter=function(t,e){return new a(t,e)},e.exports.implementation=new i,e.exports.nodeType=r,e.exports.writerState=n}).call(this)},{464:464,465:465,466:466,473:473,481:481,482:482,490:490,491:491}],460:[function(t,e,r){(function(){"use strict";var e,n,i,o,s,a,u,l,c=function(t,e){return function(){return t.apply(e,arguments)}},h={}.hasOwnProperty;u=t(430),i=t(410),e=t(457),a=t(461),l=t(447).setImmediate,n=t(459).defaults,o=function(t){return"object"==typeof t&&null!=t&&0===Object.keys(t).length},s=function(t,e,r){var n,i;for(n=0,i=t.length;n<i;n++)e=(0,t[n])(e,r);return e},r.Parser=function(t){function p(t){var e,i,o;if(this.parseStringPromise=c(this.parseStringPromise,this),this.parseString=c(this.parseString,this),this.reset=c(this.reset,this),this.assignOrPush=c(this.assignOrPush,this),this.processAsync=c(this.processAsync,this),!(this instanceof r.Parser))return new r.Parser(t);for(e in this.options={},i=n[.2])h.call(i,e)&&(o=i[e],this.options[e]=o);for(e in t)h.call(t,e)&&(o=t[e],this.options[e]=o);this.options.xmlns&&(this.options.xmlnskey=this.options.attrkey+"ns"),this.options.normalizeTags&&(this.options.tagNameProcessors||(this.options.tagNameProcessors=[]),this.options.tagNameProcessors.unshift(a.normalize)),this.reset()}return function(t,e){for(var r in e)h.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(p,i),p.prototype.processAsync=function(){var t,e;try{return this.remaining.length<=this.options.chunkSize?(t=this.remaining,this.remaining="",this.saxParser=this.saxParser.write(t),this.saxParser.close()):(t=this.remaining.substr(0,this.options.chunkSize),this.remaining=this.remaining.substr(this.options.chunkSize,this.remaining.length),this.saxParser=this.saxParser.write(t),l(this.processAsync))}catch(r){if(e=r,!this.saxParser.errThrown)return this.saxParser.errThrown=!0,this.emit(e)}},p.prototype.assignOrPush=function(t,e,r){return e in t?(t[e]instanceof Array||(t[e]=[t[e]]),t[e].push(r)):this.options.explicitArray?t[e]=[r]:t[e]=r},p.prototype.reset=function(){var t,e,r,n,i;return this.removeAllListeners(),this.saxParser=u.parser(this.options.strict,{trim:!1,normalize:!1,xmlns:this.options.xmlns}),this.saxParser.errThrown=!1,this.saxParser.onerror=(i=this,function(t){if(i.saxParser.resume(),!i.saxParser.errThrown)return i.saxParser.errThrown=!0,i.emit("error",t)}),this.saxParser.onend=function(t){return function(){if(!t.saxParser.ended)return t.saxParser.ended=!0,t.emit("end",t.resultObject)}}(this),this.saxParser.ended=!1,this.EXPLICIT_CHARKEY=this.options.explicitCharkey,this.resultObject=null,n=[],t=this.options.attrkey,e=this.options.charkey,this.saxParser.onopentag=function(r){return function(i){var o,a,u,l,c;if((u={})[e]="",!r.options.ignoreAttrs)for(o in c=i.attributes)h.call(c,o)&&(t in u||r.options.mergeAttrs||(u[t]={}),a=r.options.attrValueProcessors?s(r.options.attrValueProcessors,i.attributes[o],o):i.attributes[o],l=r.options.attrNameProcessors?s(r.options.attrNameProcessors,o):o,r.options.mergeAttrs?r.assignOrPush(u,l,a):u[t][l]=a);return u["#name"]=r.options.tagNameProcessors?s(r.options.tagNameProcessors,i.name):i.name,r.options.xmlns&&(u[r.options.xmlnskey]={uri:i.uri,local:i.local}),n.push(u)}}(this),this.saxParser.onclosetag=function(t){return function(){var r,i,a,u,l,c,p,d,f,y;if(c=n.pop(),l=c["#name"],t.options.explicitChildren&&t.options.preserveChildrenOrder||delete c["#name"],!0===c.cdata&&(r=c.cdata,delete c.cdata),f=n[n.length-1],c[e].match(/^\s*$/)&&!r?(i=c[e],delete c[e]):(t.options.trim&&(c[e]=c[e].trim()),t.options.normalize&&(c[e]=c[e].replace(/\s{2,}/g," ").trim()),c[e]=t.options.valueProcessors?s(t.options.valueProcessors,c[e],l):c[e],1===Object.keys(c).length&&e in c&&!t.EXPLICIT_CHARKEY&&(c=c[e])),o(c)&&(c=""!==t.options.emptyTag?t.options.emptyTag:i),null!=t.options.validator&&(y="/"+function(){var t,e,r;for(r=[],t=0,e=n.length;t<e;t++)u=n[t],r.push(u["#name"]);return r}().concat(l).join("/"),function(){var e;try{c=t.options.validator(y,f&&f[l],c)}catch(r){return e=r,t.emit("error",e)}}()),t.options.explicitChildren&&!t.options.mergeAttrs&&"object"==typeof c)if(t.options.preserveChildrenOrder){if(f){for(a in f[t.options.childkey]=f[t.options.childkey]||[],p={},c)h.call(c,a)&&(p[a]=c[a]);f[t.options.childkey].push(p),delete c["#name"],1===Object.keys(c).length&&e in c&&!t.EXPLICIT_CHARKEY&&(c=c[e])}}else u={},t.options.attrkey in c&&(u[t.options.attrkey]=c[t.options.attrkey],delete c[t.options.attrkey]),!t.options.charsAsChildren&&t.options.charkey in c&&(u[t.options.charkey]=c[t.options.charkey],delete c[t.options.charkey]),Object.getOwnPropertyNames(c).length>0&&(u[t.options.childkey]=c),c=u;return n.length>0?t.assignOrPush(f,l,c):(t.options.explicitRoot&&(d=c,(c={})[l]=d),t.resultObject=c,t.saxParser.ended=!0,t.emit("end",t.resultObject))}}(this),r=function(t){return function(r){var i,o;if(o=n[n.length-1])return o[e]+=r,t.options.explicitChildren&&t.options.preserveChildrenOrder&&t.options.charsAsChildren&&(t.options.includeWhiteChars||""!==r.replace(/\\n/g,"").trim())&&(o[t.options.childkey]=o[t.options.childkey]||[],(i={"#name":"__text__"})[e]=r,t.options.normalize&&(i[e]=i[e].replace(/\s{2,}/g," ").trim()),o[t.options.childkey].push(i)),o}}(this),this.saxParser.ontext=r,this.saxParser.oncdata=function(t){var e;if(e=r(t))return e.cdata=!0}},p.prototype.parseString=function(t,r){var n;null!=r&&"function"==typeof r&&(this.on("end",(function(t){return this.reset(),r(null,t)})),this.on("error",(function(t){return this.reset(),r(t)})));try{return""===(t=t.toString()).trim()?(this.emit("end",null),!0):(t=e.stripBOM(t),this.options.async?(this.remaining=t,l(this.processAsync),this.saxParser):this.saxParser.write(t).close())}catch(i){if(n=i,!this.saxParser.errThrown&&!this.saxParser.ended)return this.emit("error",n),this.saxParser.errThrown=!0;if(this.saxParser.ended)throw n}},p.prototype.parseStringPromise=function(t){return new Promise((e=this,function(r,n){return e.parseString(t,(function(t,e){return t?n(t):r(e)}))}));var e},p}(),r.parseString=function(t,e,n){var i,o;return null!=n?("function"==typeof n&&(i=n),"object"==typeof e&&(o=e)):("function"==typeof e&&(i=e),o={}),new r.Parser(o).parseString(t,i)},r.parseStringPromise=function(t,e){var n;return"object"==typeof e&&(n=e),new r.Parser(n).parseStringPromise(t)}}).call(this)},{410:410,430:430,447:447,457:457,459:459,461:461}],461:[function(t,e,r){(function(){"use strict";var t;t=new RegExp(/(?!xmlns)^.*:/),r.normalize=function(t){return t.toLowerCase()},r.firstCharLowerCase=function(t){return t.charAt(0).toLowerCase()+t.slice(1)},r.stripPrefix=function(e){return e.replace(t,"")},r.parseNumbers=function(t){return isNaN(t)||(t=t%1==0?parseInt(t,10):parseFloat(t)),t},r.parseBooleans=function(t){return/^(?:true|false)$/i.test(t)&&(t="true"===t.toLowerCase()),t}}).call(this)},{}],463:[function(t,e,r){(function(){e.exports={Disconnected:1,Preceding:2,Following:4,Contains:8,ContainedBy:16,ImplementationSpecific:32}}).call(this)},{}],464:[function(t,e,r){(function(){e.exports={Element:1,Attribute:2,Text:3,CData:4,EntityReference:5,EntityDeclaration:6,ProcessingInstruction:7,Comment:8,Document:9,DocType:10,DocumentFragment:11,NotationDeclaration:12,Declaration:201,Raw:202,AttributeDeclaration:203,ElementDeclaration:204,Dummy:205}}).call(this)},{}],465:[function(t,e,r){(function(){var t,r,n,i,o,s,a,u=[].slice,l={}.hasOwnProperty;t=function(){var t,e,r,n,i,s;if(s=arguments[0],i=2<=arguments.length?u.call(arguments,1):[],o(Object.assign))Object.assign.apply(null,arguments);else for(t=0,r=i.length;t<r;t++)if(null!=(n=i[t]))for(e in n)l.call(n,e)&&(s[e]=n[e]);return s},o=function(t){return!!t&&"[object Function]"===Object.prototype.toString.call(t)},s=function(t){var e;return!!t&&("function"==(e=typeof t)||"object"===e)},n=function(t){return o(Array.isArray)?Array.isArray(t):"[object Array]"===Object.prototype.toString.call(t)},i=function(t){var e;if(n(t))return!t.length;for(e in t)if(l.call(t,e))return!1;return!0},a=function(t){var e,r;return s(t)&&(r=Object.getPrototypeOf(t))&&(e=r.constructor)&&"function"==typeof e&&e instanceof e&&Function.prototype.toString.call(e)===Function.prototype.toString.call(Object)},r=function(t){return o(t.valueOf)?t.valueOf():t},e.exports.assign=t,e.exports.isFunction=o,e.exports.isObject=s,e.exports.isArray=n,e.exports.isEmpty=i,e.exports.isPlainObject=a,e.exports.getValue=r}).call(this)},{}],466:[function(t,e,r){(function(){e.exports={None:0,OpenTag:1,InsideTag:2,CloseTag:3}}).call(this)},{}],467:[function(t,e,r){(function(){var r;r=t(464),t(486),e.exports=function(){function t(t,e,n){if(this.parent=t,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),null==e)throw new Error("Missing attribute name. "+this.debugInfo(e));this.name=this.stringify.name(e),this.value=this.stringify.attValue(n),this.type=r.Attribute,this.isId=!1,this.schemaTypeInfo=null}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(t.prototype,"ownerElement",{get:function(){return this.parent}}),Object.defineProperty(t.prototype,"textContent",{get:function(){return this.value},set:function(t){return this.value=t||""}}),Object.defineProperty(t.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(t.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(t.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(t.prototype,"specified",{get:function(){return!0}}),t.prototype.clone=function(){return Object.create(this)},t.prototype.toString=function(t){return this.options.writer.attribute(this,this.options.writer.filterOptions(t))},t.prototype.debugInfo=function(t){return null==(t=t||this.name)?"parent: <"+this.parent.name+">":"attribute: {"+t+"}, parent: <"+this.parent.name+">"},t.prototype.isEqualNode=function(t){return t.namespaceURI===this.namespaceURI&&t.prefix===this.prefix&&t.localName===this.localName&&t.value===this.value},t}()}).call(this)},{464:464,486:486}],486:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c,h,p,d,f,y,m,g,v,T={}.hasOwnProperty;v=t(465),g=v.isObject,m=v.isFunction,y=v.isEmpty,f=v.getValue,l=null,i=null,o=null,s=null,a=null,p=null,d=null,h=null,u=null,n=null,c=null,r=null,e.exports=function(){function e(e){this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.value=null,this.children=[],this.baseURI=null,l||(l=t(484),i=t(468),o=t(470),s=t(479),a=t(480),p=t(489),d=t(493),h=t(488),u=t(483),n=t(464),c=t(487),t(485),r=t(463))}return Object.defineProperty(e.prototype,"nodeName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"nodeType",{get:function(){return this.type}}),Object.defineProperty(e.prototype,"nodeValue",{get:function(){return this.value}}),Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent}}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this.childNodeList&&this.childNodeList.nodes||(this.childNodeList=new c(this.children)),this.childNodeList}}),Object.defineProperty(e.prototype,"firstChild",{get:function(){return this.children[0]||null}}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children[this.children.length-1]||null}}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){var t;return t=this.parent.children.indexOf(this),this.parent.children[t-1]||null}}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){var t;return t=this.parent.children.indexOf(this),this.parent.children[t+1]||null}}),Object.defineProperty(e.prototype,"ownerDocument",{get:function(){return this.document()||null}}),Object.defineProperty(e.prototype,"textContent",{get:function(){var t,e,r,i,o;if(this.nodeType===n.Element||this.nodeType===n.DocumentFragment){for(o="",e=0,r=(i=this.children).length;e<r;e++)(t=i[e]).textContent&&(o+=t.textContent);return o}return null},set:function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e.prototype.setParent=function(t){var e,r,n,i,o;for(this.parent=t,t&&(this.options=t.options,this.stringify=t.stringify),o=[],r=0,n=(i=this.children).length;r<n;r++)e=i[r],o.push(e.setParent(this));return o},e.prototype.element=function(t,e,r){var n,i,o,s,a,u,l,c,h,p,d;if(u=null,null===e&&null==r&&(e=(h=[{},null])[0],r=h[1]),null==e&&(e={}),e=f(e),g(e)||(r=(p=[e,r])[0],e=p[1]),null!=t&&(t=f(t)),Array.isArray(t))for(o=0,l=t.length;o<l;o++)i=t[o],u=this.element(i);else if(m(t))u=this.element(t.apply());else if(g(t)){for(a in t)if(T.call(t,a))if(d=t[a],m(d)&&(d=d.apply()),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&0===a.indexOf(this.stringify.convertAttKey))u=this.attribute(a.substr(this.stringify.convertAttKey.length),d);else if(!this.options.separateArrayItems&&Array.isArray(d)&&y(d))u=this.dummy();else if(g(d)&&y(d))u=this.element(a);else if(this.options.keepNullNodes||null!=d)if(!this.options.separateArrayItems&&Array.isArray(d))for(s=0,c=d.length;s<c;s++)i=d[s],(n={})[a]=i,u=this.element(n);else g(d)?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===a.indexOf(this.stringify.convertTextKey)?u=this.element(d):(u=this.element(a)).element(d):u=this.element(a,d);else u=this.dummy()}else u=this.options.keepNullNodes||null!==r?!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===t.indexOf(this.stringify.convertTextKey)?this.text(r):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&0===t.indexOf(this.stringify.convertCDataKey)?this.cdata(r):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&0===t.indexOf(this.stringify.convertCommentKey)?this.comment(r):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&0===t.indexOf(this.stringify.convertRawKey)?this.raw(r):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&0===t.indexOf(this.stringify.convertPIKey)?this.instruction(t.substr(this.stringify.convertPIKey.length),r):this.node(t,e,r):this.dummy();if(null==u)throw new Error("Could not create any elements with: "+t+". "+this.debugInfo());return u},e.prototype.insertBefore=function(t,e,r){var n,i,o,s,a;if(null!=t?t.type:void 0)return s=e,(o=t).setParent(this),s?(i=children.indexOf(s),a=children.splice(i),children.push(o),Array.prototype.push.apply(children,a)):children.push(o),o;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(t));return i=this.parent.children.indexOf(this),a=this.parent.children.splice(i),n=this.parent.element(t,e,r),Array.prototype.push.apply(this.parent.children,a),n},e.prototype.insertAfter=function(t,e,r){var n,i,o;if(this.isRoot)throw new Error("Cannot insert elements at root level. "+this.debugInfo(t));return i=this.parent.children.indexOf(this),o=this.parent.children.splice(i+1),n=this.parent.element(t,e,r),Array.prototype.push.apply(this.parent.children,o),n},e.prototype.remove=function(){var t;if(this.isRoot)throw new Error("Cannot remove the root element. "+this.debugInfo());return t=this.parent.children.indexOf(this),[].splice.apply(this.parent.children,[t,t-t+1].concat([])),this.parent},e.prototype.node=function(t,e,r){var n,i;return null!=t&&(t=f(t)),e||(e={}),e=f(e),g(e)||(r=(i=[e,r])[0],e=i[1]),n=new l(this,t,e),null!=r&&n.text(r),this.children.push(n),n},e.prototype.text=function(t){var e;return g(t)&&this.element(t),e=new d(this,t),this.children.push(e),this},e.prototype.cdata=function(t){var e;return e=new i(this,t),this.children.push(e),this},e.prototype.comment=function(t){var e;return e=new o(this,t),this.children.push(e),this},e.prototype.commentBefore=function(t){var e,r;return e=this.parent.children.indexOf(this),r=this.parent.children.splice(e),this.parent.comment(t),Array.prototype.push.apply(this.parent.children,r),this},e.prototype.commentAfter=function(t){var e,r;return e=this.parent.children.indexOf(this),r=this.parent.children.splice(e+1),this.parent.comment(t),Array.prototype.push.apply(this.parent.children,r),this},e.prototype.raw=function(t){var e;return e=new p(this,t),this.children.push(e),this},e.prototype.dummy=function(){return new u(this)},e.prototype.instruction=function(t,e){var r,n,i,o,s;if(null!=t&&(t=f(t)),null!=e&&(e=f(e)),Array.isArray(t))for(o=0,s=t.length;o<s;o++)r=t[o],this.instruction(r);else if(g(t))for(r in t)T.call(t,r)&&(n=t[r],this.instruction(r,n));else m(e)&&(e=e.apply()),i=new h(this,t,e),this.children.push(i);return this},e.prototype.instructionBefore=function(t,e){var r,n;return r=this.parent.children.indexOf(this),n=this.parent.children.splice(r),this.parent.instruction(t,e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.instructionAfter=function(t,e){var r,n;return r=this.parent.children.indexOf(this),n=this.parent.children.splice(r+1),this.parent.instruction(t,e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.declaration=function(t,e,r){var i,o;return i=this.document(),o=new s(i,t,e,r),0===i.children.length?i.children.unshift(o):i.children[0].type===n.Declaration?i.children[0]=o:i.children.unshift(o),i.root()||i},e.prototype.dtd=function(t,e){var r,i,o,s,u,l,c,h,p;for(r=this.document(),i=new a(r,t,e),o=s=0,l=(h=r.children).length;s<l;o=++s)if(h[o].type===n.DocType)return r.children[o]=i,i;for(o=u=0,c=(p=r.children).length;u<c;o=++u)if(p[o].isRoot)return r.children.splice(o,0,i),i;return r.children.push(i),i},e.prototype.up=function(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent},e.prototype.root=function(){var t;for(t=this;t;){if(t.type===n.Document)return t.rootObject;if(t.isRoot)return t;t=t.parent}},e.prototype.document=function(){var t;for(t=this;t;){if(t.type===n.Document)return t;t=t.parent}},e.prototype.end=function(t){return this.document().end(t)},e.prototype.prev=function(){var t;if((t=this.parent.children.indexOf(this))<1)throw new Error("Already at the first node. "+this.debugInfo());return this.parent.children[t-1]},e.prototype.next=function(){var t;if(-1===(t=this.parent.children.indexOf(this))||t===this.parent.children.length-1)throw new Error("Already at the last node. "+this.debugInfo());return this.parent.children[t+1]},e.prototype.importDocument=function(t){var e;return(e=t.root().clone()).parent=this,e.isRoot=!1,this.children.push(e),this},e.prototype.debugInfo=function(t){var e,r;return null!=(t=t||this.name)||(null!=(e=this.parent)?e.name:void 0)?null==t?"parent: <"+this.parent.name+">":(null!=(r=this.parent)?r.name:void 0)?"node: <"+t+">, parent: <"+this.parent.name+">":"node: <"+t+">":""},e.prototype.ele=function(t,e,r){return this.element(t,e,r)},e.prototype.nod=function(t,e,r){return this.node(t,e,r)},e.prototype.txt=function(t){return this.text(t)},e.prototype.dat=function(t){return this.cdata(t)},e.prototype.com=function(t){return this.comment(t)},e.prototype.ins=function(t,e){return this.instruction(t,e)},e.prototype.doc=function(){return this.document()},e.prototype.dec=function(t,e,r){return this.declaration(t,e,r)},e.prototype.e=function(t,e,r){return this.element(t,e,r)},e.prototype.n=function(t,e,r){return this.node(t,e,r)},e.prototype.t=function(t){return this.text(t)},e.prototype.d=function(t){return this.cdata(t)},e.prototype.c=function(t){return this.comment(t)},e.prototype.r=function(t){return this.raw(t)},e.prototype.i=function(t,e){return this.instruction(t,e)},e.prototype.u=function(){return this.up()},e.prototype.importXMLBuilder=function(t){return this.importDocument(t)},e.prototype.replaceChild=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.removeChild=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.appendChild=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.hasChildNodes=function(){return 0!==this.children.length},e.prototype.cloneNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.normalize=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isSupported=function(t,e){return!0},e.prototype.hasAttributes=function(){return 0!==this.attribs.length},e.prototype.compareDocumentPosition=function(t){var e;return this===t?0:this.document()!==t.document()?(e=r.Disconnected|r.ImplementationSpecific,Math.random()<.5?e|=r.Preceding:e|=r.Following,e):this.isAncestor(t)?r.Contains|r.Preceding:this.isDescendant(t)?r.Contains|r.Following:this.isPreceding(t)?r.Preceding:r.Following},e.prototype.isSameNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.lookupPrefix=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isDefaultNamespace=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.lookupNamespaceURI=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isEqualNode=function(t){var e,r,n;if(t.nodeType!==this.nodeType)return!1;if(t.children.length!==this.children.length)return!1;for(e=r=0,n=this.children.length-1;0<=n?r<=n:r>=n;e=0<=n?++r:--r)if(!this.children[e].isEqualNode(t.children[e]))return!1;return!0},e.prototype.getFeature=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setUserData=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getUserData=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.contains=function(t){return!!t&&(t===this||this.isDescendant(t))},e.prototype.isDescendant=function(t){var e,r,n,i;for(r=0,n=(i=this.children).length;r<n;r++){if(t===(e=i[r]))return!0;if(e.isDescendant(t))return!0}return!1},e.prototype.isAncestor=function(t){return t.isDescendant(this)},e.prototype.isPreceding=function(t){var e,r;return e=this.treePosition(t),r=this.treePosition(this),-1!==e&&-1!==r&&e<r},e.prototype.isFollowing=function(t){var e,r;return e=this.treePosition(t),r=this.treePosition(this),-1!==e&&-1!==r&&e>r},e.prototype.treePosition=function(t){var e,r;return r=0,e=!1,this.foreachTreeNode(this.document(),(function(n){if(r++,!e&&n===t)return e=!0})),e?r:-1},e.prototype.foreachTreeNode=function(t,e){var r,n,i,o,s;for(t||(t=this.document()),n=0,i=(o=t.children).length;n<i;n++){if(s=e(r=o[n]))return s;if(s=this.foreachTreeNode(r,e))return s}},e}()}).call(this)},{463:463,464:464,465:465,468:468,470:470,479:479,480:480,483:483,484:484,485:485,487:487,488:488,489:489,493:493}],468:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(469),e.exports=function(t){function e(t,n){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing CDATA text. "+this.debugInfo());this.name="#cdata-section",this.type=r.CData,this.value=this.stringify.cdata(n)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.cdata(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,469:469}],469:[function(t,e,r){(function(){var r,n={}.hasOwnProperty;r=t(486),e.exports=function(t){function e(t){e.__super__.constructor.call(this,t),this.value=""}return function(t,e){for(var r in e)n.call(e,r)&&(t[r]=e[r]);function i(){this.constructor=t}i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype}(e,r),Object.defineProperty(e.prototype,"data",{get:function(){return this.value},set:function(t){return this.value=t||""}}),Object.defineProperty(e.prototype,"length",{get:function(){return this.value.length}}),Object.defineProperty(e.prototype,"textContent",{get:function(){return this.value},set:function(t){return this.value=t||""}}),e.prototype.clone=function(){return Object.create(this)},e.prototype.substringData=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.appendData=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.insertData=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.deleteData=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.replaceData=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isEqualNode=function(t){return!!e.__super__.isEqualNode.apply(this,arguments).isEqualNode(t)&&t.data===this.data},e}()}).call(this)},{486:486}],470:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(469),e.exports=function(t){function e(t,n){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing comment text. "+this.debugInfo());this.name="#comment",this.type=r.Comment,this.value=this.stringify.comment(n)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.comment(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,469:469}],471:[function(t,e,r){(function(){var r,n;r=t(472),n=t(474),e.exports=function(){function t(){this.defaultParams={"canonical-form":!1,"cdata-sections":!1,comments:!1,"datatype-normalization":!1,"element-content-whitespace":!0,entities:!0,"error-handler":new r,infoset:!0,"validate-if-schema":!1,namespaces:!0,"namespace-declarations":!0,"normalize-characters":!1,"schema-location":"","schema-type":"","split-cdata-sections":!0,validate:!1,"well-formed":!0},this.params=Object.create(this.defaultParams)}return Object.defineProperty(t.prototype,"parameterNames",{get:function(){return new n(Object.keys(this.defaultParams))}}),t.prototype.getParameter=function(t){return this.params.hasOwnProperty(t)?this.params[t]:null},t.prototype.canSetParameter=function(t,e){return!0},t.prototype.setParameter=function(t,e){return null!=e?this.params[t]=e:delete this.params[t]},t}()}).call(this)},{472:472,474:474}],472:[function(t,e,r){(function(){e.exports=function(){function t(){}return t.prototype.handleError=function(t){throw new Error(t)},t}()}).call(this)},{}],474:[function(t,e,r){(function(){e.exports=function(){function t(t){this.arr=t||[]}return Object.defineProperty(t.prototype,"length",{get:function(){return this.arr.length}}),t.prototype.item=function(t){return this.arr[t]||null},t.prototype.contains=function(t){return-1!==this.arr.indexOf(t)},t}()}).call(this)},{}],473:[function(t,e,r){(function(){e.exports=function(){function t(){}return t.prototype.hasFeature=function(t,e){return!0},t.prototype.createDocumentType=function(t,e,r){throw new Error("This DOM method is not implemented.")},t.prototype.createDocument=function(t,e,r){throw new Error("This DOM method is not implemented.")},t.prototype.createHTMLDocument=function(t){throw new Error("This DOM method is not implemented.")},t.prototype.getFeature=function(t,e){throw new Error("This DOM method is not implemented.")},t}()}).call(this)},{}],475:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;n=t(486),r=t(464),e.exports=function(t){function e(t,n,i,o,s,a){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());if(null==i)throw new Error("Missing DTD attribute name. "+this.debugInfo(n));if(!o)throw new Error("Missing DTD attribute type. "+this.debugInfo(n));if(!s)throw new Error("Missing DTD attribute default. "+this.debugInfo(n));if(0!==s.indexOf("#")&&(s="#"+s),!s.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. "+this.debugInfo(n));if(a&&!s.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT. "+this.debugInfo(n));this.elementName=this.stringify.name(n),this.type=r.AttributeDeclaration,this.attributeName=this.stringify.name(i),this.attributeType=this.stringify.dtdAttType(o),a&&(this.defaultValue=this.stringify.dtdAttDefault(a)),this.defaultValueType=s}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.toString=function(t){return this.options.writer.dtdAttList(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,486:486}],476:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;n=t(486),r=t(464),e.exports=function(t){function e(t,n,i){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing DTD element name. "+this.debugInfo());i||(i="(#PCDATA)"),Array.isArray(i)&&(i="("+i.join(",")+")"),this.name=this.stringify.name(n),this.type=r.ElementDeclaration,this.value=this.stringify.dtdElementValue(i)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.toString=function(t){return this.options.writer.dtdElement(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,486:486}],477:[function(t,e,r){(function(){var r,n,i,o={}.hasOwnProperty;i=t(465).isObject,n=t(486),r=t(464),e.exports=function(t){function e(t,n,o,s){if(e.__super__.constructor.call(this,t),null==o)throw new Error("Missing DTD entity name. "+this.debugInfo(o));if(null==s)throw new Error("Missing DTD entity value. "+this.debugInfo(o));if(this.pe=!!n,this.name=this.stringify.name(o),this.type=r.EntityDeclaration,i(s)){if(!s.pubID&&!s.sysID)throw new Error("Public and/or system identifiers are required for an external entity. "+this.debugInfo(o));if(s.pubID&&!s.sysID)throw new Error("System identifier is required for a public external entity. "+this.debugInfo(o));if(this.internal=!1,null!=s.pubID&&(this.pubID=this.stringify.dtdPubID(s.pubID)),null!=s.sysID&&(this.sysID=this.stringify.dtdSysID(s.sysID)),null!=s.nData&&(this.nData=this.stringify.dtdNData(s.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity. "+this.debugInfo(o))}else this.value=this.stringify.dtdEntityValue(s),this.internal=!0}return function(t,e){for(var r in e)o.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"notationName",{get:function(){return this.nData||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return null}}),e.prototype.toString=function(t){return this.options.writer.dtdEntity(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,465:465,486:486}],478:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;n=t(486),r=t(464),e.exports=function(t){function e(t,n,i){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing DTD notation name. "+this.debugInfo(n));if(!i.pubID&&!i.sysID)throw new Error("Public or system identifiers are required for an external entity. "+this.debugInfo(n));this.name=this.stringify.name(n),this.type=r.NotationDeclaration,null!=i.pubID&&(this.pubID=this.stringify.dtdPubID(i.pubID)),null!=i.sysID&&(this.sysID=this.stringify.dtdSysID(i.sysID))}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),e.prototype.toString=function(t){return this.options.writer.dtdNotation(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,486:486}],479:[function(t,e,r){(function(){var r,n,i,o={}.hasOwnProperty;i=t(465).isObject,n=t(486),r=t(464),e.exports=function(t){function e(t,n,o,s){var a;e.__super__.constructor.call(this,t),i(n)&&(n=(a=n).version,o=a.encoding,s=a.standalone),n||(n="1.0"),this.type=r.Declaration,this.version=this.stringify.xmlVersion(n),null!=o&&(this.encoding=this.stringify.xmlEncoding(o)),null!=s&&(this.standalone=this.stringify.xmlStandalone(s))}return function(t,e){for(var r in e)o.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.toString=function(t){return this.options.writer.declaration(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,465:465,486:486}],480:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c={}.hasOwnProperty;l=t(465).isObject,u=t(486),r=t(464),n=t(475),o=t(477),i=t(476),s=t(478),a=t(485),e.exports=function(t){function e(t,n,i){var o,s,a,u,c,h;if(e.__super__.constructor.call(this,t),this.type=r.DocType,t.children)for(s=0,a=(u=t.children).length;s<a;s++)if((o=u[s]).type===r.Element){this.name=o.name;break}this.documentObject=t,l(n)&&(n=(c=n).pubID,i=c.sysID),null==i&&(i=(h=[n,i])[0],n=h[1]),null!=n&&(this.pubID=this.stringify.dtdPubID(n)),null!=i&&(this.sysID=this.stringify.dtdSysID(i))}return function(t,e){for(var r in e)c.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,u),Object.defineProperty(e.prototype,"entities",{get:function(){var t,e,n,i,o;for(i={},e=0,n=(o=this.children).length;e<n;e++)(t=o[e]).type!==r.EntityDeclaration||t.pe||(i[t.name]=t);return new a(i)}}),Object.defineProperty(e.prototype,"notations",{get:function(){var t,e,n,i,o;for(i={},e=0,n=(o=this.children).length;e<n;e++)(t=o[e]).type===r.NotationDeclaration&&(i[t.name]=t);return new a(i)}}),Object.defineProperty(e.prototype,"publicId",{get:function(){return this.pubID}}),Object.defineProperty(e.prototype,"systemId",{get:function(){return this.sysID}}),Object.defineProperty(e.prototype,"internalSubset",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),e.prototype.element=function(t,e){var r;return r=new i(this,t,e),this.children.push(r),this},e.prototype.attList=function(t,e,r,i,o){var s;return s=new n(this,t,e,r,i,o),this.children.push(s),this},e.prototype.entity=function(t,e){var r;return r=new o(this,!1,t,e),this.children.push(r),this},e.prototype.pEntity=function(t,e){var r;return r=new o(this,!0,t,e),this.children.push(r),this},e.prototype.notation=function(t,e){var r;return r=new s(this,t,e),this.children.push(r),this},e.prototype.toString=function(t){return this.options.writer.docType(this,this.options.writer.filterOptions(t))},e.prototype.ele=function(t,e){return this.element(t,e)},e.prototype.att=function(t,e,r,n,i){return this.attList(t,e,r,n,i)},e.prototype.ent=function(t,e){return this.entity(t,e)},e.prototype.pent=function(t,e){return this.pEntity(t,e)},e.prototype.not=function(t,e){return this.notation(t,e)},e.prototype.up=function(){return this.root()||this.documentObject},e.prototype.isEqualNode=function(t){return!!e.__super__.isEqualNode.apply(this,arguments).isEqualNode(t)&&t.name===this.name&&t.publicId===this.publicId&&t.systemId===this.systemId},e}()}).call(this)},{464:464,465:465,475:475,476:476,477:477,478:478,485:485,486:486}],485:[function(t,e,r){(function(){e.exports=function(){function t(t){this.nodes=t}return Object.defineProperty(t.prototype,"length",{get:function(){return Object.keys(this.nodes).length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.getNamedItem=function(t){return this.nodes[t]},t.prototype.setNamedItem=function(t){var e;return e=this.nodes[t.nodeName],this.nodes[t.nodeName]=t,e||null},t.prototype.removeNamedItem=function(t){var e;return e=this.nodes[t],delete this.nodes[t],e||null},t.prototype.item=function(t){return this.nodes[Object.keys(this.nodes)[t]]||null},t.prototype.getNamedItemNS=function(t,e){throw new Error("This DOM method is not implemented.")},t.prototype.setNamedItemNS=function(t){throw new Error("This DOM method is not implemented.")},t.prototype.removeNamedItemNS=function(t,e){throw new Error("This DOM method is not implemented.")},t}()}).call(this)},{}],481:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l={}.hasOwnProperty;u=t(465).isPlainObject,i=t(473),n=t(471),o=t(486),r=t(464),a=t(492),s=t(491),e.exports=function(t){function e(t){e.__super__.constructor.call(this,null),this.name="#document",this.type=r.Document,this.documentURI=null,this.domConfig=new n,t||(t={}),t.writer||(t.writer=new s),this.options=t,this.stringify=new a(t)}return function(t,e){for(var r in e)l.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,o),Object.defineProperty(e.prototype,"implementation",{value:new i}),Object.defineProperty(e.prototype,"doctype",{get:function(){var t,e,n,i;for(e=0,n=(i=this.children).length;e<n;e++)if((t=i[e]).type===r.DocType)return t;return null}}),Object.defineProperty(e.prototype,"documentElement",{get:function(){return this.rootObject||null}}),Object.defineProperty(e.prototype,"inputEncoding",{get:function(){return null}}),Object.defineProperty(e.prototype,"strictErrorChecking",{get:function(){return!1}}),Object.defineProperty(e.prototype,"xmlEncoding",{get:function(){return 0!==this.children.length&&this.children[0].type===r.Declaration?this.children[0].encoding:null}}),Object.defineProperty(e.prototype,"xmlStandalone",{get:function(){return 0!==this.children.length&&this.children[0].type===r.Declaration&&"yes"===this.children[0].standalone}}),Object.defineProperty(e.prototype,"xmlVersion",{get:function(){return 0!==this.children.length&&this.children[0].type===r.Declaration?this.children[0].version:"1.0"}}),Object.defineProperty(e.prototype,"URL",{get:function(){return this.documentURI}}),Object.defineProperty(e.prototype,"origin",{get:function(){return null}}),Object.defineProperty(e.prototype,"compatMode",{get:function(){return null}}),Object.defineProperty(e.prototype,"characterSet",{get:function(){return null}}),Object.defineProperty(e.prototype,"contentType",{get:function(){return null}}),e.prototype.end=function(t){var e;return e={},t?u(t)&&(e=t,t=this.options.writer):t=this.options.writer,t.document(this,t.filterOptions(e))},e.prototype.toString=function(t){return this.options.writer.document(this,this.options.writer.filterOptions(t))},e.prototype.createElement=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createDocumentFragment=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createTextNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createComment=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createCDATASection=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createProcessingInstruction=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createAttribute=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createEntityReference=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.importNode=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createElementNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createAttributeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagNameNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementById=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.adoptNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.normalizeDocument=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.renameNode=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByClassName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createEvent=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createRange=function(){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createNodeIterator=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.createTreeWalker=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e}()}).call(this)},{464:464,465:465,471:471,473:473,486:486,491:491,492:492}],491:[function(t,e,r){(function(){var r,n={}.hasOwnProperty;r=t(494),e.exports=function(t){function e(t){e.__super__.constructor.call(this,t)}return function(t,e){for(var r in e)n.call(e,r)&&(t[r]=e[r]);function i(){this.constructor=t}i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype}(e,r),e.prototype.document=function(t,e){var r,n,i,o,s;for(e=this.filterOptions(e),o="",n=0,i=(s=t.children).length;n<i;n++)r=s[n],o+=this.writeChildNode(r,e,0);return e.pretty&&o.slice(-e.newline.length)===e.newline&&(o=o.slice(0,-e.newline.length)),o},e}()}).call(this)},{494:494}],492:[function(t,e,r){(function(){var t=function(t,e){return function(){return t.apply(e,arguments)}},r={}.hasOwnProperty;e.exports=function(){function e(e){var n,i,o;for(n in this.assertLegalName=t(this.assertLegalName,this),this.assertLegalChar=t(this.assertLegalChar,this),e||(e={}),this.options=e,this.options.version||(this.options.version="1.0"),i=e.stringify||{})r.call(i,n)&&(o=i[n],this[n]=o)}return e.prototype.name=function(t){return this.options.noValidation?t:this.assertLegalName(""+t||"")},e.prototype.text=function(t){return this.options.noValidation?t:this.assertLegalChar(this.textEscape(""+t||""))},e.prototype.cdata=function(t){return this.options.noValidation?t:(t=(t=""+t||"").replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(t))},e.prototype.comment=function(t){if(this.options.noValidation)return t;if((t=""+t||"").match(/--/))throw new Error("Comment text cannot contain double-hypen: "+t);return this.assertLegalChar(t)},e.prototype.raw=function(t){return this.options.noValidation?t:""+t||""},e.prototype.attValue=function(t){return this.options.noValidation?t:this.assertLegalChar(this.attEscape(t=""+t||""))},e.prototype.insTarget=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.insValue=function(t){if(this.options.noValidation)return t;if((t=""+t||"").match(/\?>/))throw new Error("Invalid processing instruction value: "+t);return this.assertLegalChar(t)},e.prototype.xmlVersion=function(t){if(this.options.noValidation)return t;if(!(t=""+t||"").match(/1\.[0-9]+/))throw new Error("Invalid version number: "+t);return t},e.prototype.xmlEncoding=function(t){if(this.options.noValidation)return t;if(!(t=""+t||"").match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+t);return this.assertLegalChar(t)},e.prototype.xmlStandalone=function(t){return this.options.noValidation?t:t?"yes":"no"},e.prototype.dtdPubID=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdSysID=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdElementValue=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdAttType=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdAttDefault=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdEntityValue=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.dtdNData=function(t){return this.options.noValidation?t:this.assertLegalChar(""+t||"")},e.prototype.convertAttKey="@",e.prototype.convertPIKey="?",e.prototype.convertTextKey="#text",e.prototype.convertCDataKey="#cdata",e.prototype.convertCommentKey="#comment",e.prototype.convertRawKey="#raw",e.prototype.assertLegalChar=function(t){var e,r;if(this.options.noValidation)return t;if(e="","1.0"===this.options.version){if(e=/[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,r=t.match(e))throw new Error("Invalid character in string: "+t+" at index "+r.index)}else if("1.1"===this.options.version&&(e=/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,r=t.match(e)))throw new Error("Invalid character in string: "+t+" at index "+r.index);return t},e.prototype.assertLegalName=function(t){var e;if(this.options.noValidation)return t;if(this.assertLegalChar(t),e=/^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/,!t.match(e))throw new Error("Invalid character in name");return t},e.prototype.textEscape=function(t){var e;return this.options.noValidation?t:(e=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,t.replace(e,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;"))},e.prototype.attEscape=function(t){var e;return this.options.noValidation?t:(e=this.options.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,t.replace(e,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;"))},e}()}).call(this)},{}],482:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c,h,p,d,f,y,m,g,v,T,_,E,b,S,x,C={}.hasOwnProperty;x=t(465),b=x.isObject,E=x.isFunction,S=x.isPlainObject,_=x.getValue,r=t(464),d=t(481),f=t(484),o=t(468),s=t(470),m=t(489),T=t(493),y=t(488),h=t(479),p=t(480),a=t(475),l=t(477),u=t(476),c=t(478),i=t(467),v=t(492),g=t(491),n=t(466),e.exports=function(){function t(t,e,n){var i;this.name="?xml",this.type=r.Document,t||(t={}),i={},t.writer?S(t.writer)&&(i=t.writer,t.writer=new g):t.writer=new g,this.options=t,this.writer=t.writer,this.writerOptions=this.writer.filterOptions(i),this.stringify=new v(t),this.onDataCallback=e||function(){},this.onEndCallback=n||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}return t.prototype.createChildNode=function(t){var e,n,i,o,s,a,u,l;switch(t.type){case r.CData:this.cdata(t.value);break;case r.Comment:this.comment(t.value);break;case r.Element:for(n in i={},u=t.attribs)C.call(u,n)&&(e=u[n],i[n]=e.value);this.node(t.name,i);break;case r.Dummy:this.dummy();break;case r.Raw:this.raw(t.value);break;case r.Text:this.text(t.value);break;case r.ProcessingInstruction:this.instruction(t.target,t.value);break;default:throw new Error("This XML node type is not supported in a JS object: "+t.constructor.name)}for(s=0,a=(l=t.children).length;s<a;s++)o=l[s],this.createChildNode(o),o.type===r.Element&&this.up();return this},t.prototype.dummy=function(){return this},t.prototype.node=function(t,e,r){var n;if(null==t)throw new Error("Missing node name.");if(this.root&&-1===this.currentLevel)throw new Error("Document can only have one root node. "+this.debugInfo(t));return this.openCurrent(),t=_(t),null==e&&(e={}),e=_(e),b(e)||(r=(n=[e,r])[0],e=n[1]),this.currentNode=new f(this,t,e),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,null!=r&&this.text(r),this},t.prototype.element=function(t,e,n){var i,o,s,a,u,l;if(this.currentNode&&this.currentNode.type===r.DocType)this.dtdElement.apply(this,arguments);else if(Array.isArray(t)||b(t)||E(t))for(a=this.options.noValidation,this.options.noValidation=!0,(l=new d(this.options).element("TEMP_ROOT")).element(t),this.options.noValidation=a,o=0,s=(u=l.children).length;o<s;o++)i=u[o],this.createChildNode(i),i.type===r.Element&&this.up();else this.node(t,e,n);return this},t.prototype.attribute=function(t,e){var r,n;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode. "+this.debugInfo(t));if(null!=t&&(t=_(t)),b(t))for(r in t)C.call(t,r)&&(n=t[r],this.attribute(r,n));else E(e)&&(e=e.apply()),this.options.keepNullAttributes&&null==e?this.currentNode.attribs[t]=new i(this,t,""):null!=e&&(this.currentNode.attribs[t]=new i(this,t,e));return this},t.prototype.text=function(t){var e;return this.openCurrent(),e=new T(this,t),this.onData(this.writer.text(e,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.cdata=function(t){var e;return this.openCurrent(),e=new o(this,t),this.onData(this.writer.cdata(e,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.comment=function(t){var e;return this.openCurrent(),e=new s(this,t),this.onData(this.writer.comment(e,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.raw=function(t){var e;return this.openCurrent(),e=new m(this,t),this.onData(this.writer.raw(e,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.instruction=function(t,e){var r,n,i,o,s;if(this.openCurrent(),null!=t&&(t=_(t)),null!=e&&(e=_(e)),Array.isArray(t))for(r=0,o=t.length;r<o;r++)n=t[r],this.instruction(n);else if(b(t))for(n in t)C.call(t,n)&&(i=t[n],this.instruction(n,i));else E(e)&&(e=e.apply()),s=new y(this,t,e),this.onData(this.writer.processingInstruction(s,this.writerOptions,this.currentLevel+1),this.currentLevel+1);return this},t.prototype.declaration=function(t,e,r){var n;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node.");return n=new h(this,t,e,r),this.onData(this.writer.declaration(n,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.doctype=function(t,e,r){if(this.openCurrent(),null==t)throw new Error("Missing root node name.");if(this.root)throw new Error("dtd() must come before the root node.");return this.currentNode=new p(this,e,r),this.currentNode.rootNodeName=t,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this},t.prototype.dtdElement=function(t,e){var r;return this.openCurrent(),r=new u(this,t,e),this.onData(this.writer.dtdElement(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.attList=function(t,e,r,n,i){var o;return this.openCurrent(),o=new a(this,t,e,r,n,i),this.onData(this.writer.dtdAttList(o,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.entity=function(t,e){var r;return this.openCurrent(),r=new l(this,!1,t,e),this.onData(this.writer.dtdEntity(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.pEntity=function(t,e){var r;return this.openCurrent(),r=new l(this,!0,t,e),this.onData(this.writer.dtdEntity(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.notation=function(t,e){var r;return this.openCurrent(),r=new c(this,t,e),this.onData(this.writer.dtdNotation(r,this.writerOptions,this.currentLevel+1),this.currentLevel+1),this},t.prototype.up=function(){if(this.currentLevel<0)throw new Error("The document node has no parent.");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this},t.prototype.end=function(){for(;this.currentLevel>=0;)this.up();return this.onEnd()},t.prototype.openCurrent=function(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)},t.prototype.openNode=function(t){var e,i,o,s;if(!t.isOpen){if(this.root||0!==this.currentLevel||t.type!==r.Element||(this.root=t),i="",t.type===r.Element){for(o in this.writerOptions.state=n.OpenTag,i=this.writer.indent(t,this.writerOptions,this.currentLevel)+"<"+t.name,s=t.attribs)C.call(s,o)&&(e=s[o],i+=this.writer.attribute(e,this.writerOptions,this.currentLevel));i+=(t.children?">":"/>")+this.writer.endline(t,this.writerOptions,this.currentLevel),this.writerOptions.state=n.InsideTag}else this.writerOptions.state=n.OpenTag,i=this.writer.indent(t,this.writerOptions,this.currentLevel)+"<!DOCTYPE "+t.rootNodeName,t.pubID&&t.sysID?i+=' PUBLIC "'+t.pubID+'" "'+t.sysID+'"':t.sysID&&(i+=' SYSTEM "'+t.sysID+'"'),t.children?(i+=" [",this.writerOptions.state=n.InsideTag):(this.writerOptions.state=n.CloseTag,i+=">"),i+=this.writer.endline(t,this.writerOptions,this.currentLevel);return this.onData(i,this.currentLevel),t.isOpen=!0}},t.prototype.closeNode=function(t){var e;if(!t.isClosed)return"",this.writerOptions.state=n.CloseTag,e=t.type===r.Element?this.writer.indent(t,this.writerOptions,this.currentLevel)+"</"+t.name+">"+this.writer.endline(t,this.writerOptions,this.currentLevel):this.writer.indent(t,this.writerOptions,this.currentLevel)+"]>"+this.writer.endline(t,this.writerOptions,this.currentLevel),this.writerOptions.state=n.None,this.onData(e,this.currentLevel),t.isClosed=!0},t.prototype.onData=function(t,e){return this.documentStarted=!0,this.onDataCallback(t,e+1)},t.prototype.onEnd=function(){return this.documentCompleted=!0,this.onEndCallback()},t.prototype.debugInfo=function(t){return null==t?"":"node: <"+t+">"},t.prototype.ele=function(){return this.element.apply(this,arguments)},t.prototype.nod=function(t,e,r){return this.node(t,e,r)},t.prototype.txt=function(t){return this.text(t)},t.prototype.dat=function(t){return this.cdata(t)},t.prototype.com=function(t){return this.comment(t)},t.prototype.ins=function(t,e){return this.instruction(t,e)},t.prototype.dec=function(t,e,r){return this.declaration(t,e,r)},t.prototype.dtd=function(t,e,r){return this.doctype(t,e,r)},t.prototype.e=function(t,e,r){return this.element(t,e,r)},t.prototype.n=function(t,e,r){return this.node(t,e,r)},t.prototype.t=function(t){return this.text(t)},t.prototype.d=function(t){return this.cdata(t)},t.prototype.c=function(t){return this.comment(t)},t.prototype.r=function(t){return this.raw(t)},t.prototype.i=function(t,e){return this.instruction(t,e)},t.prototype.att=function(){return this.currentNode&&this.currentNode.type===r.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},t.prototype.a=function(){return this.currentNode&&this.currentNode.type===r.DocType?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},t.prototype.ent=function(t,e){return this.entity(t,e)},t.prototype.pent=function(t,e){return this.pEntity(t,e)},t.prototype.not=function(t,e){return this.notation(t,e)},t}()}).call(this)},{464:464,465:465,466:466,467:467,468:468,470:470,475:475,476:476,477:477,478:478,479:479,480:480,481:481,484:484,488:488,489:489,491:491,492:492,493:493}],484:[function(t,e,r){(function(){var r,n,i,o,s,a,u,l,c={}.hasOwnProperty;l=t(465),u=l.isObject,a=l.isFunction,s=l.getValue,o=t(486),r=t(464),n=t(467),i=t(485),e.exports=function(t){function e(t,n,i){var o,s,a,u;if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing element name. "+this.debugInfo());if(this.name=this.stringify.name(n),this.type=r.Element,this.attribs={},this.schemaTypeInfo=null,null!=i&&this.attribute(i),t.type===r.Document&&(this.isRoot=!0,this.documentObject=t,t.rootObject=this,t.children))for(s=0,a=(u=t.children).length;s<a;s++)if((o=u[s]).type===r.DocType){o.name=this.name;break}}return function(t,e){for(var r in e)c.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,o),Object.defineProperty(e.prototype,"tagName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"namespaceURI",{get:function(){return""}}),Object.defineProperty(e.prototype,"prefix",{get:function(){return""}}),Object.defineProperty(e.prototype,"localName",{get:function(){return this.name}}),Object.defineProperty(e.prototype,"id",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"className",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"classList",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.attributeMap&&this.attributeMap.nodes||(this.attributeMap=new i(this.attribs)),this.attributeMap}}),e.prototype.clone=function(){var t,e,r,n;for(e in(r=Object.create(this)).isRoot&&(r.documentObject=null),r.attribs={},n=this.attribs)c.call(n,e)&&(t=n[e],r.attribs[e]=t.clone());return r.children=[],this.children.forEach((function(t){var e;return(e=t.clone()).parent=r,r.children.push(e)})),r},e.prototype.attribute=function(t,e){var r,i;if(null!=t&&(t=s(t)),u(t))for(r in t)c.call(t,r)&&(i=t[r],this.attribute(r,i));else a(e)&&(e=e.apply()),this.options.keepNullAttributes&&null==e?this.attribs[t]=new n(this,t,""):null!=e&&(this.attribs[t]=new n(this,t,e));return this},e.prototype.removeAttribute=function(t){var e,r,n;if(null==t)throw new Error("Missing attribute name. "+this.debugInfo());if(t=s(t),Array.isArray(t))for(r=0,n=t.length;r<n;r++)e=t[r],delete this.attribs[e];else delete this.attribs[t];return this},e.prototype.toString=function(t){return this.options.writer.element(this,this.options.writer.filterOptions(t))},e.prototype.att=function(t,e){return this.attribute(t,e)},e.prototype.a=function(t,e){return this.attribute(t,e)},e.prototype.getAttribute=function(t){return this.attribs.hasOwnProperty(t)?this.attribs[t].value:null},e.prototype.setAttribute=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getAttributeNode=function(t){return this.attribs.hasOwnProperty(t)?this.attribs[t]:null},e.prototype.setAttributeNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.removeAttributeNode=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getAttributeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setAttributeNS=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.removeAttributeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getAttributeNodeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setAttributeNodeNS=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagNameNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.hasAttribute=function(t){return this.attribs.hasOwnProperty(t)},e.prototype.hasAttributeNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setIdAttribute=function(t,e){return this.attribs.hasOwnProperty(t)?this.attribs[t].isId:e},e.prototype.setIdAttributeNS=function(t,e,r){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.setIdAttributeNode=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByTagNameNS=function(t,e){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.getElementsByClassName=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.isEqualNode=function(t){var r,n,i;if(!e.__super__.isEqualNode.apply(this,arguments).isEqualNode(t))return!1;if(t.namespaceURI!==this.namespaceURI)return!1;if(t.prefix!==this.prefix)return!1;if(t.localName!==this.localName)return!1;if(t.attribs.length!==this.attribs.length)return!1;for(r=n=0,i=this.attribs.length-1;0<=i?n<=i:n>=i;r=0<=i?++n:--n)if(!this.attribs[r].isEqualNode(t.attribs[r]))return!1;return!0},e}()}).call(this)},{464:464,465:465,467:467,485:485,486:486}],489:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(486),e.exports=function(t){function e(t,n){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing raw text. "+this.debugInfo());this.type=r.Raw,this.value=this.stringify.raw(n)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.raw(this,this.options.writer.filterOptions(t))},e}()}).call(this)},{464:464,486:486}],493:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(469),e.exports=function(t){function e(t,n){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing element text. "+this.debugInfo());this.name="#text",this.type=r.Text,this.value=this.stringify.text(n)}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),Object.defineProperty(e.prototype,"isElementContentWhitespace",{get:function(){throw new Error("This DOM method is not implemented."+this.debugInfo())}}),Object.defineProperty(e.prototype,"wholeText",{get:function(){var t,e,r;for(r="",e=this.previousSibling;e;)r=e.data+r,e=e.previousSibling;for(r+=this.data,t=this.nextSibling;t;)r+=t.data,t=t.nextSibling;return r}}),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.text(this,this.options.writer.filterOptions(t))},e.prototype.splitText=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e.prototype.replaceWholeText=function(t){throw new Error("This DOM method is not implemented."+this.debugInfo())},e}()}).call(this)},{464:464,469:469}],488:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;r=t(464),n=t(469),e.exports=function(t){function e(t,n,i){if(e.__super__.constructor.call(this,t),null==n)throw new Error("Missing instruction target. "+this.debugInfo());this.type=r.ProcessingInstruction,this.target=this.stringify.insTarget(n),this.name=this.target,i&&(this.value=this.stringify.insValue(i))}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return this.options.writer.processingInstruction(this,this.options.writer.filterOptions(t))},e.prototype.isEqualNode=function(t){return!!e.__super__.isEqualNode.apply(this,arguments).isEqualNode(t)&&t.target===this.target},e}()}).call(this)},{464:464,469:469}],483:[function(t,e,r){(function(){var r,n,i={}.hasOwnProperty;n=t(486),r=t(464),e.exports=function(t){function e(t){e.__super__.constructor.call(this,t),this.type=r.Dummy}return function(t,e){for(var r in e)i.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,n),e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(t){return""},e}()}).call(this)},{464:464,486:486}],487:[function(t,e,r){(function(){e.exports=function(){function t(t){this.nodes=t}return Object.defineProperty(t.prototype,"length",{get:function(){return this.nodes.length||0}}),t.prototype.clone=function(){return this.nodes=null},t.prototype.item=function(t){return this.nodes[t]||null},t}()}).call(this)},{}],490:[function(t,e,r){(function(){var r,n,i,o={}.hasOwnProperty;r=t(464),i=t(494),n=t(466),e.exports=function(t){function e(t,r){this.stream=t,e.__super__.constructor.call(this,r)}return function(t,e){for(var r in e)o.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,i),e.prototype.endline=function(t,r,i){return t.isLastRootNode&&r.state===n.CloseTag?"":e.__super__.endline.call(this,t,r,i)},e.prototype.document=function(t,e){var r,n,i,o,s,a,u,l,c;for(n=i=0,s=(u=t.children).length;i<s;n=++i)(r=u[n]).isLastRootNode=n===t.children.length-1;for(e=this.filterOptions(e),c=[],o=0,a=(l=t.children).length;o<a;o++)r=l[o],c.push(this.writeChildNode(r,e,0));return c},e.prototype.attribute=function(t,r,n){return this.stream.write(e.__super__.attribute.call(this,t,r,n))},e.prototype.cdata=function(t,r,n){return this.stream.write(e.__super__.cdata.call(this,t,r,n))},e.prototype.comment=function(t,r,n){return this.stream.write(e.__super__.comment.call(this,t,r,n))},e.prototype.declaration=function(t,r,n){return this.stream.write(e.__super__.declaration.call(this,t,r,n))},e.prototype.docType=function(t,e,r){var i,o,s,a;if(r||(r=0),this.openNode(t,e,r),e.state=n.OpenTag,this.stream.write(this.indent(t,e,r)),this.stream.write("<!DOCTYPE "+t.root().name),t.pubID&&t.sysID?this.stream.write(' PUBLIC "'+t.pubID+'" "'+t.sysID+'"'):t.sysID&&this.stream.write(' SYSTEM "'+t.sysID+'"'),t.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(t,e,r)),e.state=n.InsideTag,o=0,s=(a=t.children).length;o<s;o++)i=a[o],this.writeChildNode(i,e,r+1);e.state=n.CloseTag,this.stream.write("]")}return e.state=n.CloseTag,this.stream.write(e.spaceBeforeSlash+">"),this.stream.write(this.endline(t,e,r)),e.state=n.None,this.closeNode(t,e,r)},e.prototype.element=function(t,e,i){var s,a,u,l,c,h,p,d,f;for(p in i||(i=0),this.openNode(t,e,i),e.state=n.OpenTag,this.stream.write(this.indent(t,e,i)+"<"+t.name),d=t.attribs)o.call(d,p)&&(s=d[p],this.attribute(s,e,i));if(l=0===(u=t.children.length)?null:t.children[0],0===u||t.children.every((function(t){return(t.type===r.Text||t.type===r.Raw)&&""===t.value})))e.allowEmpty?(this.stream.write(">"),e.state=n.CloseTag,this.stream.write("</"+t.name+">")):(e.state=n.CloseTag,this.stream.write(e.spaceBeforeSlash+"/>"));else if(!e.pretty||1!==u||l.type!==r.Text&&l.type!==r.Raw||null==l.value){for(this.stream.write(">"+this.endline(t,e,i)),e.state=n.InsideTag,c=0,h=(f=t.children).length;c<h;c++)a=f[c],this.writeChildNode(a,e,i+1);e.state=n.CloseTag,this.stream.write(this.indent(t,e,i)+"</"+t.name+">")}else this.stream.write(">"),e.state=n.InsideTag,e.suppressPrettyCount++,this.writeChildNode(l,e,i+1),e.suppressPrettyCount--,e.state=n.CloseTag,this.stream.write("</"+t.name+">");return this.stream.write(this.endline(t,e,i)),e.state=n.None,this.closeNode(t,e,i)},e.prototype.processingInstruction=function(t,r,n){return this.stream.write(e.__super__.processingInstruction.call(this,t,r,n))},e.prototype.raw=function(t,r,n){return this.stream.write(e.__super__.raw.call(this,t,r,n))},e.prototype.text=function(t,r,n){return this.stream.write(e.__super__.text.call(this,t,r,n))},e.prototype.dtdAttList=function(t,r,n){return this.stream.write(e.__super__.dtdAttList.call(this,t,r,n))},e.prototype.dtdElement=function(t,r,n){return this.stream.write(e.__super__.dtdElement.call(this,t,r,n))},e.prototype.dtdEntity=function(t,r,n){return this.stream.write(e.__super__.dtdEntity.call(this,t,r,n))},e.prototype.dtdNotation=function(t,r,n){return this.stream.write(e.__super__.dtdNotation.call(this,t,r,n))},e}()}).call(this)},{464:464,466:466,494:494}],494:[function(t,e,r){(function(){var r,n,i,o={}.hasOwnProperty;i=t(465).assign,r=t(464),t(479),t(480),t(468),t(470),t(484),t(489),t(493),t(488),t(483),t(475),t(476),t(477),t(478),n=t(466),e.exports=function(){function t(t){var e,r,n;for(e in t||(t={}),this.options=t,r=t.writer||{})o.call(r,e)&&(n=r[e],this["_"+e]=this[e],this[e]=n)}return t.prototype.filterOptions=function(t){var e,r,o,s,a,u,l,c;return t||(t={}),t=i({},this.options,t),(e={writer:this}).pretty=t.pretty||!1,e.allowEmpty=t.allowEmpty||!1,e.indent=null!=(r=t.indent)?r:"  ",e.newline=null!=(o=t.newline)?o:"\n",e.offset=null!=(s=t.offset)?s:0,e.dontPrettyTextNodes=null!=(a=null!=(u=t.dontPrettyTextNodes)?u:t.dontprettytextnodes)?a:0,e.spaceBeforeSlash=null!=(l=null!=(c=t.spaceBeforeSlash)?c:t.spacebeforeslash)?l:"",!0===e.spaceBeforeSlash&&(e.spaceBeforeSlash=" "),e.suppressPrettyCount=0,e.user={},e.state=n.None,e},t.prototype.indent=function(t,e,r){var n;return!e.pretty||e.suppressPrettyCount?"":e.pretty&&(n=(r||0)+e.offset+1)>0?new Array(n).join(e.indent):""},t.prototype.endline=function(t,e,r){return!e.pretty||e.suppressPrettyCount?"":e.newline},t.prototype.attribute=function(t,e,r){var n;return this.openAttribute(t,e,r),n=" "+t.name+'="'+t.value+'"',this.closeAttribute(t,e,r),n},t.prototype.cdata=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<![CDATA[",e.state=n.InsideTag,i+=t.value,e.state=n.CloseTag,i+="]]>"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.comment=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"\x3c!-- ",e.state=n.InsideTag,i+=t.value,e.state=n.CloseTag,i+=" --\x3e"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.declaration=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<?xml",e.state=n.InsideTag,i+=' version="'+t.version+'"',null!=t.encoding&&(i+=' encoding="'+t.encoding+'"'),null!=t.standalone&&(i+=' standalone="'+t.standalone+'"'),e.state=n.CloseTag,i+=e.spaceBeforeSlash+"?>",i+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.docType=function(t,e,r){var i,o,s,a,u;if(r||(r=0),this.openNode(t,e,r),e.state=n.OpenTag,a=this.indent(t,e,r),a+="<!DOCTYPE "+t.root().name,t.pubID&&t.sysID?a+=' PUBLIC "'+t.pubID+'" "'+t.sysID+'"':t.sysID&&(a+=' SYSTEM "'+t.sysID+'"'),t.children.length>0){for(a+=" [",a+=this.endline(t,e,r),e.state=n.InsideTag,o=0,s=(u=t.children).length;o<s;o++)i=u[o],a+=this.writeChildNode(i,e,r+1);e.state=n.CloseTag,a+="]"}return e.state=n.CloseTag,a+=e.spaceBeforeSlash+">",a+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),a},t.prototype.element=function(t,e,i){var s,a,u,l,c,h,p,d,f,y,m,g,v,T;for(f in i||(i=0),y=!1,m="",this.openNode(t,e,i),e.state=n.OpenTag,m+=this.indent(t,e,i)+"<"+t.name,g=t.attribs)o.call(g,f)&&(s=g[f],m+=this.attribute(s,e,i));if(l=0===(u=t.children.length)?null:t.children[0],0===u||t.children.every((function(t){return(t.type===r.Text||t.type===r.Raw)&&""===t.value})))e.allowEmpty?(m+=">",e.state=n.CloseTag,m+="</"+t.name+">"+this.endline(t,e,i)):(e.state=n.CloseTag,m+=e.spaceBeforeSlash+"/>"+this.endline(t,e,i));else if(!e.pretty||1!==u||l.type!==r.Text&&l.type!==r.Raw||null==l.value){if(e.dontPrettyTextNodes)for(c=0,p=(v=t.children).length;c<p;c++)if(((a=v[c]).type===r.Text||a.type===r.Raw)&&null!=a.value){e.suppressPrettyCount++,y=!0;break}for(m+=">"+this.endline(t,e,i),e.state=n.InsideTag,h=0,d=(T=t.children).length;h<d;h++)a=T[h],m+=this.writeChildNode(a,e,i+1);e.state=n.CloseTag,m+=this.indent(t,e,i)+"</"+t.name+">",y&&e.suppressPrettyCount--,m+=this.endline(t,e,i),e.state=n.None}else m+=">",e.state=n.InsideTag,e.suppressPrettyCount++,y=!0,m+=this.writeChildNode(l,e,i+1),e.suppressPrettyCount--,y=!1,e.state=n.CloseTag,m+="</"+t.name+">"+this.endline(t,e,i);return this.closeNode(t,e,i),m},t.prototype.writeChildNode=function(t,e,n){switch(t.type){case r.CData:return this.cdata(t,e,n);case r.Comment:return this.comment(t,e,n);case r.Element:return this.element(t,e,n);case r.Raw:return this.raw(t,e,n);case r.Text:return this.text(t,e,n);case r.ProcessingInstruction:return this.processingInstruction(t,e,n);case r.Dummy:return"";case r.Declaration:return this.declaration(t,e,n);case r.DocType:return this.docType(t,e,n);case r.AttributeDeclaration:return this.dtdAttList(t,e,n);case r.ElementDeclaration:return this.dtdElement(t,e,n);case r.EntityDeclaration:return this.dtdEntity(t,e,n);case r.NotationDeclaration:return this.dtdNotation(t,e,n);default:throw new Error("Unknown XML node type: "+t.constructor.name)}},t.prototype.processingInstruction=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<?",e.state=n.InsideTag,i+=t.target,t.value&&(i+=" "+t.value),e.state=n.CloseTag,i+=e.spaceBeforeSlash+"?>",i+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.raw=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r),e.state=n.InsideTag,i+=t.value,e.state=n.CloseTag,i+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.text=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r),e.state=n.InsideTag,i+=t.value,e.state=n.CloseTag,i+=this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.dtdAttList=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<!ATTLIST",e.state=n.InsideTag,i+=" "+t.elementName+" "+t.attributeName+" "+t.attributeType,"#DEFAULT"!==t.defaultValueType&&(i+=" "+t.defaultValueType),t.defaultValue&&(i+=' "'+t.defaultValue+'"'),e.state=n.CloseTag,i+=e.spaceBeforeSlash+">"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.dtdElement=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<!ELEMENT",e.state=n.InsideTag,i+=" "+t.name+" "+t.value,e.state=n.CloseTag,i+=e.spaceBeforeSlash+">"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.dtdEntity=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<!ENTITY",e.state=n.InsideTag,t.pe&&(i+=" %"),i+=" "+t.name,t.value?i+=' "'+t.value+'"':(t.pubID&&t.sysID?i+=' PUBLIC "'+t.pubID+'" "'+t.sysID+'"':t.sysID&&(i+=' SYSTEM "'+t.sysID+'"'),t.nData&&(i+=" NDATA "+t.nData)),e.state=n.CloseTag,i+=e.spaceBeforeSlash+">"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.dtdNotation=function(t,e,r){var i;return this.openNode(t,e,r),e.state=n.OpenTag,i=this.indent(t,e,r)+"<!NOTATION",e.state=n.InsideTag,i+=" "+t.name,t.pubID&&t.sysID?i+=' PUBLIC "'+t.pubID+'" "'+t.sysID+'"':t.pubID?i+=' PUBLIC "'+t.pubID+'"':t.sysID&&(i+=' SYSTEM "'+t.sysID+'"'),e.state=n.CloseTag,i+=e.spaceBeforeSlash+">"+this.endline(t,e,r),e.state=n.None,this.closeNode(t,e,r),i},t.prototype.openNode=function(t,e,r){},t.prototype.closeNode=function(t,e,r){},t.prototype.openAttribute=function(t,e,r){},t.prototype.closeAttribute=function(t,e,r){},t}()}).call(this)},{464:464,465:465,466:466,468:468,470:470,475:475,476:476,477:477,478:478,479:479,480:480,483:483,484:484,488:488,489:489,493:493}]},{},[1])(1)}));
//# sourceMappingURL=browser.js.map

/***/ }),

/***/ "./node_modules/adaptivecards-templating/lib/adaptivecards-templating.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/adaptivecards-templating/lib/adaptivecards-templating.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
__exportStar(__webpack_require__(/*! ./template-engine */ "./node_modules/adaptivecards-templating/lib/template-engine.js"), exports);
__exportStar(__webpack_require__(/*! ./json-schema-card */ "./node_modules/adaptivecards-templating/lib/json-schema-card.js"), exports);
//# sourceMappingURL=adaptivecards-templating.js.map

/***/ }),

/***/ "./node_modules/adaptivecards-templating/lib/json-schema-card.js":
/*!***********************************************************************!*\
  !*** ./node_modules/adaptivecards-templating/lib/json-schema-card.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JSONSchemaCard = void 0;
// JSON Schema Card
// generates an Adaptive Card given a JSON schema
function JSONSchemaCard(schema) {
    try {
        return {
            type: "AdaptiveCard",
            body: [
                JSONSchemaCardObject(schema, '', 0),
            ],
        };
    }
    catch (e) {
        console.error(e);
        return undefined;
    }
}
exports.JSONSchemaCard = JSONSchemaCard;
// JSON Schema Elements
function JSONSchemaCardElement(schema, path, depth) {
    if (typeof (schema) === "boolean")
        return null;
    switch (schema.type) {
        case "array":
            if (Array.isArray(schema.items)) {
                return JSONSchemaCardTuple(schema, path, depth);
            }
            else {
                return JSONSchemaCardList(schema, path, depth);
            }
        case "object":
            return JSONSchemaCardObject(schema, path, depth);
        case "boolean":
            return JSONSchemaCardBoolean(schema, path);
        case "integer":
        case "number":
            return JSONSchemaCardNumber(schema, path);
        case "string":
            if (schema.enum) {
                return JSONSchemaCardChoiceSet(schema, path);
            }
            else {
                return JSONSchemaCardText(schema, path);
            }
        case "date-time":
        case "time":
        case "date":
            return JSONSchemaCardTime(schema, path);
        default:
            return null;
    }
}
function encodeProperty(property) {
    return encodeURIComponent(property).replace('.', '%2e');
}
function textSizeAtDepth(depth) {
    switch (depth) {
        case 0:
            "large";
        case 1:
            "medium";
        default:
            "small";
    }
}
function JSONSchemaFieldTitle(schema, path, depth) {
    return [
        schema.title ? {
            type: "TextBlock",
            size: textSizeAtDepth(depth),
            text: schema.title,
        } : null,
        schema.description ? {
            type: "TextBlock",
            size: textSizeAtDepth(depth + 1),
            isSubtle: true,
            wrap: true,
            text: schema.description,
        } : null,
    ];
}
function JSONSchemaCardTuple(schema, path, depth) {
    var _a, _b;
    if (!Array.isArray(schema.items))
        return null;
    return {
        type: "Container",
        items: __spreadArray(__spreadArray([], JSONSchemaFieldTitle(schema, path, depth)), (_b = (_a = schema.items) === null || _a === void 0 ? void 0 : _a.map(function (item, idx) {
            return JSONSchemaCardElement(item, path + "[" + idx + "]", depth + 1);
        })) !== null && _b !== void 0 ? _b : []),
    };
}
function JSONSchemaCardList(schema, path, depth) {
    return {
        type: "Container",
        items: __spreadArray([], JSONSchemaFieldTitle(schema, path, depth)),
    };
}
function JSONSchemaCardObject(schema, path, depth) {
    var _a, _b;
    return {
        type: "Container",
        items: __spreadArray(__spreadArray([], JSONSchemaFieldTitle(schema, path, depth)), (_b = (_a = schema.required) === null || _a === void 0 ? void 0 : _a.map(function (property) {
            return JSONSchemaCardElement(schema.properties[property], path + "." + encodeProperty(property), depth + 1);
        })) !== null && _b !== void 0 ? _b : []),
    };
}
function JSONSchemaCardBoolean(schema, path) {
    return {
        type: "Input.Toggle",
        id: path,
        title: schema.title,
        label: schema.description,
        value: schema.default,
    };
}
function JSONSchemaCardNumber(schema, path) {
    var _a, _b;
    return {
        type: "Input.Number",
        id: path,
        title: schema.title,
        placeholder: schema.description,
        value: schema.default,
        min: (_a = schema.exclusiveMinimum) !== null && _a !== void 0 ? _a : schema.minimum,
        max: (_b = schema.exclusiveMaximum) !== null && _b !== void 0 ? _b : schema.maximum,
    };
}
function JSONSchemaCardChoiceSet(schema, path) {
    return {
        type: "Input.ChoiceSet",
        id: path,
        title: schema.title,
        choices: schema.enum.map(function (item) {
            return {
                title: item,
                value: item,
            };
        }),
        placeholder: schema.description,
        value: schema.default,
    };
}
function JSONSchemaCardText(schema, path) {
    return {
        type: "Input.Text",
        id: path,
        title: schema.title,
        placeholder: schema.description,
        value: schema.default,
        maxLength: schema.maxLength,
        regex: schema.pattern,
    };
}
function JSONSchemaCardTime(schema, path) {
    return {
        type: "Input.Time",
        id: path,
        title: schema.title,
        placeholder: schema.description,
        value: schema.default,
    };
}
//# sourceMappingURL=json-schema-card.js.map

/***/ }),

/***/ "./node_modules/adaptivecards-templating/lib/template-engine.js":
/*!**********************************************************************!*\
  !*** ./node_modules/adaptivecards-templating/lib/template-engine.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Template = exports.GlobalSettings = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var AEL = __webpack_require__(/*! adaptive-expressions */ "./node_modules/adaptive-expressions/lib/browser.js");
var EvaluationContext = /** @class */ (function () {
    function EvaluationContext(context) {
        this._stateStack = [];
        if (context !== undefined) {
            this.$root = context.$root;
        }
    }
    EvaluationContext.prototype.isReservedField = function (name) {
        return EvaluationContext._reservedFields.indexOf(name) >= 0;
    };
    EvaluationContext.prototype.saveState = function () {
        this._stateStack.push({
            $data: this.$data,
            $index: this.$index
        });
    };
    EvaluationContext.prototype.restoreLastState = function () {
        if (this._stateStack.length === 0) {
            throw new Error("There is no evaluation context state to restore.");
        }
        var savedContext = this._stateStack.pop();
        this.$data = savedContext.$data;
        this.$index = savedContext.$index;
    };
    Object.defineProperty(EvaluationContext.prototype, "$data", {
        get: function () {
            return this._$data !== undefined ? this._$data : this.$root;
        },
        set: function (value) {
            this._$data = value;
        },
        enumerable: false,
        configurable: true
    });
    EvaluationContext._reservedFields = ["$data", "$when", "$root", "$index"];
    return EvaluationContext;
}());
var TemplateObjectMemory = /** @class */ (function () {
    function TemplateObjectMemory() {
        this._memory = new AEL.SimpleObjectMemory(this);
    }
    TemplateObjectMemory.prototype.getValue = function (path) {
        var actualPath = (path.length > 0 && path[0] !== "$") ? "$data." + path : path;
        return this._memory.getValue(actualPath);
    };
    TemplateObjectMemory.prototype.setValue = function (path, input) {
        this._memory.setValue(path, input);
    };
    TemplateObjectMemory.prototype.version = function () {
        return this._memory.version();
    };
    return TemplateObjectMemory;
}());
/**
 * Holds global settings that can be used to customize the way templates are expanded.
 */
var GlobalSettings = /** @class */ (function () {
    function GlobalSettings() {
    }
    /**
     * Callback invoked when expression evaluation needs the value of a field in the source data object
     * and that field is undefined or null. By default, expression evaluation will substitute an undefined
     * field with its binding expression (e.g. `${field}`). This callback makes it possible to customize that
     * behavior.
     *
     * **Example**
     * Given this data object:
     *
     * ```json
     * {
     *     firstName: "David"
     * }
     * ```
     *
     * The expression `${firstName} ${lastName}` will evaluate to "David ${lastName}" because the `lastName`
     * field is undefined.
     *
     * Now let's set the callback:
     * ```typescript
     * GlobalSettings.getUndefinedFieldValueSubstitutionString = (path: string) => { return "<undefined value>"; }
     * ```
     *
     * With that, the above expression will evaluate to "David &lt;undefined value&gt;"
     */
    GlobalSettings.getUndefinedFieldValueSubstitutionString = undefined;
    return GlobalSettings;
}());
exports.GlobalSettings = GlobalSettings;
/**
 * Represents a template that can be bound to data.
 */
var Template = /** @class */ (function () {
    /**
     * Initializes a new Template instance based on the provided payload.
     * Once created, the instance can be bound to different data objects
     * in a loop.
     *
     * @param payload The template payload.
     */
    function Template(payload) {
        this._preparedPayload = Template.prepare(payload);
    }
    Template.prepare = function (node) {
        if (typeof node === "string") {
            return Template.parseInterpolatedString(node);
        }
        else if (typeof node === "object" && node !== null) {
            if (Array.isArray(node)) {
                var result = [];
                for (var _i = 0, node_1 = node; _i < node_1.length; _i++) {
                    var item = node_1[_i];
                    result.push(Template.prepare(item));
                }
                return result;
            }
            else {
                var keys = Object.keys(node);
                var result = {};
                for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
                    var key = keys_1[_a];
                    result[key] = Template.prepare(node[key]);
                }
                return result;
            }
        }
        else {
            return node;
        }
    };
    Template.internalTryEvaluateExpression = function (expression, context, allowSubstitutions) {
        var memory = new TemplateObjectMemory();
        memory.$root = context.$root;
        memory.$data = context.$data;
        memory.$index = context.$index;
        var options = undefined;
        if (allowSubstitutions) {
            options = new AEL.Options();
            options.nullSubstitution = function (path) {
                var substitutionValue = undefined;
                if (GlobalSettings.getUndefinedFieldValueSubstitutionString) {
                    substitutionValue = GlobalSettings.getUndefinedFieldValueSubstitutionString(path);
                }
                return substitutionValue ? substitutionValue : "${" + path + "}";
            };
        }
        // The root of an expression coming from an interpolated string is of type Concat.
        // In that case, and if the caller allows it, we're doing our own concatenation
        // in order to catch each individual expression evaluation error and substitute in
        // the final string
        if (expression.type === AEL.ExpressionType.Concat && allowSubstitutions) {
            var result = "";
            for (var _i = 0, _a = expression.children; _i < _a.length; _i++) {
                var childExpression = _a[_i];
                var evaluationResult = void 0;
                try {
                    evaluationResult = childExpression.tryEvaluate(memory, options);
                }
                catch (ex) {
                    // We'll swallow all exceptions here
                    evaluationResult = {
                        value: undefined,
                        error: ex
                    };
                }
                if (evaluationResult.error) {
                    evaluationResult.value = "${" + childExpression.toString() + "}";
                }
                result += evaluationResult.value.toString();
            }
            return { value: result, error: undefined };
        }
        return expression.tryEvaluate(memory, options);
    };
    /**
     * Parses an interpolated string into an Expression object ready to evaluate.
     *
     * @param interpolatedString The interpolated string to parse. Example: "Hello ${name}"
     * @returns An Expression object if the provided interpolated string contained at least one expression (e.g. "${expression}"); the original string otherwise.
     */
    Template.parseInterpolatedString = function (interpolatedString) {
        var lookup = function (type) {
            var standardFunction = AEL.ExpressionFunctions.standardFunctions.get(type);
            if (standardFunction) {
                return standardFunction;
            }
            else {
                return new AEL.ExpressionEvaluator(type, function (expression, state, options) { throw new Error("Unknown function " + type); }, AEL.ReturnType.String);
            }
        };
        // If there is at least one expression start marker, let's attempt to convert into an expression
        if (interpolatedString.indexOf("${") >= 0) {
            var parsedExpression = AEL.Expression.parse("`" + interpolatedString + "`", lookup);
            if (parsedExpression.type === "concat") {
                if (parsedExpression.children.length === 1 && !(parsedExpression.children[0] instanceof AEL.Constant)) {
                    // The concat contains a single child that isn't a constant, thus the original
                    // string was a single expression. When evaluated, we want it to produce the type
                    // of that single expression
                    return parsedExpression.children[0];
                }
                else if (parsedExpression.children.length === 2) {
                    var firstChild = parsedExpression.children[0];
                    if (firstChild instanceof AEL.Constant && firstChild.value === "" && !(parsedExpression.children[1] instanceof AEL.Constant)) {
                        // The concat contains 2 children, and the first one is an empty string constant and the second isn't a constant.
                        // From version 4.10.3, AEL always inserts an empty string constant in all concat expression. Thus the original
                        // string was a single expression in this case as well. When evaluated, we want it to produce the type
                        // of that single expression.
                        return parsedExpression.children[1];
                    }
                }
                // Otherwise, we want the expression to produce a string
                return parsedExpression;
            }
        }
        // If the original string didn't contain any expression, return i as is
        return interpolatedString;
    };
    /**
     * Tries to evaluate the provided expression using the provided context.
     *
     * @param expression The expression to evaluate.
     * @param context The context (data) used to evaluate the expression.
     * @param allowSubstitutions Indicates if the expression evaluator should substitute undefined value with a default
     *   string or the value returned by the GlobalSettings.getUndefinedFieldValueSubstitutionString callback.
     * @returns An object representing the result of the evaluation. If the evaluation succeeded, the value property
     *   contains the actual evaluation result, and the error property is undefined. If the evaluation fails, the error
     *   property contains a message detailing the error that occurred.
     */
    Template.tryEvaluateExpression = function (expression, context, allowSubstitutions) {
        return Template.internalTryEvaluateExpression(expression, new EvaluationContext(context), allowSubstitutions);
    };
    Template.prototype.expandSingleObject = function (node) {
        var result = {};
        var keys = Object.keys(node);
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
            var key = keys_2[_i];
            if (!this._context.isReservedField(key)) {
                var value = this.internalExpand(node[key]);
                if (value !== undefined) {
                    result[key] = value;
                }
            }
        }
        return result;
    };
    Template.prototype.internalExpand = function (node) {
        var result;
        this._context.saveState();
        if (Array.isArray(node)) {
            var itemArray = [];
            for (var _i = 0, node_2 = node; _i < node_2.length; _i++) {
                var item = node_2[_i];
                var expandedItem = this.internalExpand(item);
                if (expandedItem !== null) {
                    if (Array.isArray(expandedItem)) {
                        itemArray = itemArray.concat(expandedItem);
                    }
                    else {
                        itemArray.push(expandedItem);
                    }
                }
            }
            result = itemArray;
        }
        else if (node instanceof AEL.Expression) {
            var evaluationResult = Template.internalTryEvaluateExpression(node, this._context, true);
            if (!evaluationResult.error) {
                result = evaluationResult.value;
            }
            else {
                throw new Error(evaluationResult.error);
            }
        }
        else if (typeof node === "object" && node !== null) {
            var when = node["$when"];
            var dataContext = node["$data"];
            var dataContextIsArray = false;
            var dataContexts = void 0;
            if (dataContext === undefined) {
                dataContexts = [undefined];
            }
            else {
                if (dataContext instanceof AEL.Expression) {
                    var evaluationResult = Template.internalTryEvaluateExpression(dataContext, this._context, true);
                    if (!evaluationResult.error) {
                        dataContext = evaluationResult.value;
                    }
                    else {
                        throw new Error(evaluationResult.error);
                    }
                }
                if (Array.isArray(dataContext)) {
                    dataContexts = dataContext;
                    dataContextIsArray = true;
                }
                else {
                    dataContexts = [dataContext];
                }
            }
            result = [];
            for (var i = 0; i < dataContexts.length; i++) {
                if (dataContextIsArray) {
                    this._context.$index = i;
                }
                if (dataContexts[i] !== undefined) {
                    this._context.$data = dataContexts[i];
                }
                var dropObject = false;
                if (when instanceof AEL.Expression) {
                    var evaluationResult = Template.internalTryEvaluateExpression(when, this._context, false);
                    var whenValue = false;
                    // If $when fails to evaluate or evaluates to anything but a boolean, consider it is false
                    if (!evaluationResult.error) {
                        whenValue = typeof evaluationResult.value === "boolean" && evaluationResult.value;
                    }
                    dropObject = !whenValue;
                }
                if (!dropObject) {
                    var expandedObject = this.expandSingleObject(node);
                    if (expandedObject !== null) {
                        result.push(expandedObject);
                    }
                }
            }
            if (result.length === 0) {
                result = null;
            }
            else if (result.length === 1) {
                result = result[0];
            }
        }
        else {
            result = node;
        }
        this._context.restoreLastState();
        return result;
    };
    /**
     * Expands the template using the provided context. Template expansion involves
     * evaluating the expressions used in the original template payload, as well as
     * repeating (expanding) parts of that payload that are bound to arrays.
     *
     * Example:
     *
     * ```typescript
     * let context = {
     *     $root: {
     *         firstName: "John",
     *         lastName: "Doe",
     *         children: [
     *             { fullName: "Jane Doe", age: 9 },
     *             { fullName: "Alex Doe", age: 12 }
     *         ]
     *     }
     * }
     *
     * let templatePayload = {
     *     type: "AdaptiveCard",
     *     version: "1.2",
     *     body: [
     *         {
     *             type: "TextBlock",
     *             text: "${firstName} ${lastName}"
     *         },
     *         {
     *             type: "TextBlock",
     *             $data: "${children}",
     *             text: "${fullName} (${age})"
     *         }
     *     ]
     * }
     *
     * let template = new Template(templatePayload);
     *
     * let expandedTemplate = template.expand(context);
     * ```
     *
     * With the above code, the value of `expandedTemplate` will be
     *
     * ```json
     * {
     *     type: "AdaptiveCard",
     *     version: "1.2",
     *     body: [
     *         {
     *             type: "TextBlock",
     *             text: "John Doe"
     *         },
     *         {
     *             type: "TextBlock",
     *             text: "Jane Doe (9)"
     *         },
     *         {
     *             type: "TextBlock",
     *             text: "Alex Doe (12)"
     *         }
     *     ]
     * }
     * ```
     *
     * @param context The context to bind the template to.
     * @returns A value representing the expanded template. The type of that value
     *   is dependent on the type of the original template payload passed to the constructor.
     */
    Template.prototype.expand = function (context) {
        this._context = new EvaluationContext(context);
        return this.internalExpand(this._preparedPayload);
    };
    return Template;
}());
exports.Template = Template;
//# sourceMappingURL=template-engine.js.map

/***/ }),

/***/ "./node_modules/chart.js/auto/auto.esm.js":
/*!************************************************!*\
  !*** ./node_modules/chart.js/auto/auto.esm.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dist_chart_esm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/chart.esm */ "./node_modules/chart.js/dist/chart.esm.js");


_dist_chart_esm__WEBPACK_IMPORTED_MODULE_0__.Chart.register(..._dist_chart_esm__WEBPACK_IMPORTED_MODULE_0__.registerables);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_dist_chart_esm__WEBPACK_IMPORTED_MODULE_0__.Chart);


/***/ }),

/***/ "./node_modules/chart.js/dist/chart.esm.js":
/*!*************************************************!*\
  !*** ./node_modules/chart.js/dist/chart.esm.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaults": () => (/* reexport safe */ _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d),
/* harmony export */   "Animation": () => (/* binding */ Animation),
/* harmony export */   "Animations": () => (/* binding */ Animations),
/* harmony export */   "ArcElement": () => (/* binding */ ArcElement),
/* harmony export */   "BarController": () => (/* binding */ BarController),
/* harmony export */   "BarElement": () => (/* binding */ BarElement),
/* harmony export */   "BasePlatform": () => (/* binding */ BasePlatform),
/* harmony export */   "BasicPlatform": () => (/* binding */ BasicPlatform),
/* harmony export */   "BubbleController": () => (/* binding */ BubbleController),
/* harmony export */   "CategoryScale": () => (/* binding */ CategoryScale),
/* harmony export */   "Chart": () => (/* binding */ Chart),
/* harmony export */   "DatasetController": () => (/* binding */ DatasetController),
/* harmony export */   "Decimation": () => (/* binding */ plugin_decimation),
/* harmony export */   "DomPlatform": () => (/* binding */ DomPlatform),
/* harmony export */   "DoughnutController": () => (/* binding */ DoughnutController),
/* harmony export */   "Element": () => (/* binding */ Element),
/* harmony export */   "Filler": () => (/* binding */ plugin_filler),
/* harmony export */   "Interaction": () => (/* binding */ Interaction),
/* harmony export */   "Legend": () => (/* binding */ plugin_legend),
/* harmony export */   "LineController": () => (/* binding */ LineController),
/* harmony export */   "LineElement": () => (/* binding */ LineElement),
/* harmony export */   "LinearScale": () => (/* binding */ LinearScale),
/* harmony export */   "LogarithmicScale": () => (/* binding */ LogarithmicScale),
/* harmony export */   "PieController": () => (/* binding */ PieController),
/* harmony export */   "PointElement": () => (/* binding */ PointElement),
/* harmony export */   "PolarAreaController": () => (/* binding */ PolarAreaController),
/* harmony export */   "RadarController": () => (/* binding */ RadarController),
/* harmony export */   "RadialLinearScale": () => (/* binding */ RadialLinearScale),
/* harmony export */   "Scale": () => (/* binding */ Scale),
/* harmony export */   "ScatterController": () => (/* binding */ ScatterController),
/* harmony export */   "SubTitle": () => (/* binding */ plugin_subtitle),
/* harmony export */   "Ticks": () => (/* binding */ Ticks),
/* harmony export */   "TimeScale": () => (/* binding */ TimeScale),
/* harmony export */   "TimeSeriesScale": () => (/* binding */ TimeSeriesScale),
/* harmony export */   "Title": () => (/* binding */ plugin_title),
/* harmony export */   "Tooltip": () => (/* binding */ plugin_tooltip),
/* harmony export */   "_adapters": () => (/* binding */ adapters),
/* harmony export */   "_detectPlatform": () => (/* binding */ _detectPlatform),
/* harmony export */   "animator": () => (/* binding */ animator),
/* harmony export */   "controllers": () => (/* binding */ controllers),
/* harmony export */   "elements": () => (/* binding */ elements),
/* harmony export */   "layouts": () => (/* binding */ layouts),
/* harmony export */   "plugins": () => (/* binding */ plugins),
/* harmony export */   "registerables": () => (/* binding */ registerables),
/* harmony export */   "registry": () => (/* binding */ registry),
/* harmony export */   "scales": () => (/* binding */ scales)
/* harmony export */ });
/* harmony import */ var _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/helpers.segment.js */ "./node_modules/chart.js/dist/chunks/helpers.segment.js");
/*!
 * Chart.js v3.5.1
 * https://www.chartjs.org
 * (c) 2021 Chart.js Contributors
 * Released under the MIT License
 */



class Animator {
  constructor() {
    this._request = null;
    this._charts = new Map();
    this._running = false;
    this._lastDate = undefined;
  }
  _notify(chart, anims, date, type) {
    const callbacks = anims.listeners[type];
    const numSteps = anims.duration;
    callbacks.forEach(fn => fn({
      chart,
      initial: anims.initial,
      numSteps,
      currentStep: Math.min(date - anims.start, numSteps)
    }));
  }
  _refresh() {
    const me = this;
    if (me._request) {
      return;
    }
    me._running = true;
    me._request = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.r.call(window, () => {
      me._update();
      me._request = null;
      if (me._running) {
        me._refresh();
      }
    });
  }
  _update(date = Date.now()) {
    const me = this;
    let remaining = 0;
    me._charts.forEach((anims, chart) => {
      if (!anims.running || !anims.items.length) {
        return;
      }
      const items = anims.items;
      let i = items.length - 1;
      let draw = false;
      let item;
      for (; i >= 0; --i) {
        item = items[i];
        if (item._active) {
          if (item._total > anims.duration) {
            anims.duration = item._total;
          }
          item.tick(date);
          draw = true;
        } else {
          items[i] = items[items.length - 1];
          items.pop();
        }
      }
      if (draw) {
        chart.draw();
        me._notify(chart, anims, date, 'progress');
      }
      if (!items.length) {
        anims.running = false;
        me._notify(chart, anims, date, 'complete');
        anims.initial = false;
      }
      remaining += items.length;
    });
    me._lastDate = date;
    if (remaining === 0) {
      me._running = false;
    }
  }
  _getAnims(chart) {
    const charts = this._charts;
    let anims = charts.get(chart);
    if (!anims) {
      anims = {
        running: false,
        initial: true,
        items: [],
        listeners: {
          complete: [],
          progress: []
        }
      };
      charts.set(chart, anims);
    }
    return anims;
  }
  listen(chart, event, cb) {
    this._getAnims(chart).listeners[event].push(cb);
  }
  add(chart, items) {
    if (!items || !items.length) {
      return;
    }
    this._getAnims(chart).items.push(...items);
  }
  has(chart) {
    return this._getAnims(chart).items.length > 0;
  }
  start(chart) {
    const anims = this._charts.get(chart);
    if (!anims) {
      return;
    }
    anims.running = true;
    anims.start = Date.now();
    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);
    this._refresh();
  }
  running(chart) {
    if (!this._running) {
      return false;
    }
    const anims = this._charts.get(chart);
    if (!anims || !anims.running || !anims.items.length) {
      return false;
    }
    return true;
  }
  stop(chart) {
    const anims = this._charts.get(chart);
    if (!anims || !anims.items.length) {
      return;
    }
    const items = anims.items;
    let i = items.length - 1;
    for (; i >= 0; --i) {
      items[i].cancel();
    }
    anims.items = [];
    this._notify(chart, anims, Date.now(), 'complete');
  }
  remove(chart) {
    return this._charts.delete(chart);
  }
}
var animator = new Animator();

const transparent = 'transparent';
const interpolators = {
  boolean(from, to, factor) {
    return factor > 0.5 ? to : from;
  },
  color(from, to, factor) {
    const c0 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.c)(from || transparent);
    const c1 = c0.valid && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.c)(to || transparent);
    return c1 && c1.valid
      ? c1.mix(c0, factor).hexString()
      : to;
  },
  number(from, to, factor) {
    return from + (to - from) * factor;
  }
};
class Animation {
  constructor(cfg, target, prop, to) {
    const currentValue = target[prop];
    to = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.to, to, currentValue, cfg.from]);
    const from = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.from, currentValue, to]);
    this._active = true;
    this._fn = cfg.fn || interpolators[cfg.type || typeof from];
    this._easing = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.e[cfg.easing] || _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.e.linear;
    this._start = Math.floor(Date.now() + (cfg.delay || 0));
    this._duration = this._total = Math.floor(cfg.duration);
    this._loop = !!cfg.loop;
    this._target = target;
    this._prop = prop;
    this._from = from;
    this._to = to;
    this._promises = undefined;
  }
  active() {
    return this._active;
  }
  update(cfg, to, date) {
    const me = this;
    if (me._active) {
      me._notify(false);
      const currentValue = me._target[me._prop];
      const elapsed = date - me._start;
      const remain = me._duration - elapsed;
      me._start = date;
      me._duration = Math.floor(Math.max(remain, cfg.duration));
      me._total += elapsed;
      me._loop = !!cfg.loop;
      me._to = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.to, to, currentValue, cfg.from]);
      me._from = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([cfg.from, currentValue, to]);
    }
  }
  cancel() {
    const me = this;
    if (me._active) {
      me.tick(Date.now());
      me._active = false;
      me._notify(false);
    }
  }
  tick(date) {
    const me = this;
    const elapsed = date - me._start;
    const duration = me._duration;
    const prop = me._prop;
    const from = me._from;
    const loop = me._loop;
    const to = me._to;
    let factor;
    me._active = from !== to && (loop || (elapsed < duration));
    if (!me._active) {
      me._target[prop] = to;
      me._notify(true);
      return;
    }
    if (elapsed < 0) {
      me._target[prop] = from;
      return;
    }
    factor = (elapsed / duration) % 2;
    factor = loop && factor > 1 ? 2 - factor : factor;
    factor = me._easing(Math.min(1, Math.max(0, factor)));
    me._target[prop] = me._fn(from, to, factor);
  }
  wait() {
    const promises = this._promises || (this._promises = []);
    return new Promise((res, rej) => {
      promises.push({res, rej});
    });
  }
  _notify(resolved) {
    const method = resolved ? 'res' : 'rej';
    const promises = this._promises || [];
    for (let i = 0; i < promises.length; i++) {
      promises[i][method]();
    }
  }
}

const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];
const colors = ['color', 'borderColor', 'backgroundColor'];
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.set('animation', {
  delay: undefined,
  duration: 1000,
  easing: 'easeOutQuart',
  fn: undefined,
  from: undefined,
  loop: undefined,
  to: undefined,
  type: undefined,
});
const animationOptions = Object.keys(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.animation);
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.describe('animation', {
  _fallback: false,
  _indexable: false,
  _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',
});
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.set('animations', {
  colors: {
    type: 'color',
    properties: colors
  },
  numbers: {
    type: 'number',
    properties: numbers
  },
});
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.describe('animations', {
  _fallback: 'animation',
});
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.set('transitions', {
  active: {
    animation: {
      duration: 400
    }
  },
  resize: {
    animation: {
      duration: 0
    }
  },
  show: {
    animations: {
      colors: {
        from: 'transparent'
      },
      visible: {
        type: 'boolean',
        duration: 0
      },
    }
  },
  hide: {
    animations: {
      colors: {
        to: 'transparent'
      },
      visible: {
        type: 'boolean',
        easing: 'linear',
        fn: v => v | 0
      },
    }
  }
});
class Animations {
  constructor(chart, config) {
    this._chart = chart;
    this._properties = new Map();
    this.configure(config);
  }
  configure(config) {
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(config)) {
      return;
    }
    const animatedProps = this._properties;
    Object.getOwnPropertyNames(config).forEach(key => {
      const cfg = config[key];
      if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(cfg)) {
        return;
      }
      const resolved = {};
      for (const option of animationOptions) {
        resolved[option] = cfg[option];
      }
      ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(cfg.properties) && cfg.properties || [key]).forEach((prop) => {
        if (prop === key || !animatedProps.has(prop)) {
          animatedProps.set(prop, resolved);
        }
      });
    });
  }
  _animateOptions(target, values) {
    const newOptions = values.options;
    const options = resolveTargetOptions(target, newOptions);
    if (!options) {
      return [];
    }
    const animations = this._createAnimations(options, newOptions);
    if (newOptions.$shared) {
      awaitAll(target.options.$animations, newOptions).then(() => {
        target.options = newOptions;
      }, () => {
      });
    }
    return animations;
  }
  _createAnimations(target, values) {
    const animatedProps = this._properties;
    const animations = [];
    const running = target.$animations || (target.$animations = {});
    const props = Object.keys(values);
    const date = Date.now();
    let i;
    for (i = props.length - 1; i >= 0; --i) {
      const prop = props[i];
      if (prop.charAt(0) === '$') {
        continue;
      }
      if (prop === 'options') {
        animations.push(...this._animateOptions(target, values));
        continue;
      }
      const value = values[prop];
      let animation = running[prop];
      const cfg = animatedProps.get(prop);
      if (animation) {
        if (cfg && animation.active()) {
          animation.update(cfg, value, date);
          continue;
        } else {
          animation.cancel();
        }
      }
      if (!cfg || !cfg.duration) {
        target[prop] = value;
        continue;
      }
      running[prop] = animation = new Animation(cfg, target, prop, value);
      animations.push(animation);
    }
    return animations;
  }
  update(target, values) {
    if (this._properties.size === 0) {
      Object.assign(target, values);
      return;
    }
    const animations = this._createAnimations(target, values);
    if (animations.length) {
      animator.add(this._chart, animations);
      return true;
    }
  }
}
function awaitAll(animations, properties) {
  const running = [];
  const keys = Object.keys(properties);
  for (let i = 0; i < keys.length; i++) {
    const anim = animations[keys[i]];
    if (anim && anim.active()) {
      running.push(anim.wait());
    }
  }
  return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
  if (!newOptions) {
    return;
  }
  let options = target.options;
  if (!options) {
    target.options = newOptions;
    return;
  }
  if (options.$shared) {
    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});
  }
  return options;
}

function scaleClip(scale, allowedOverflow) {
  const opts = scale && scale.options || {};
  const reverse = opts.reverse;
  const min = opts.min === undefined ? allowedOverflow : 0;
  const max = opts.max === undefined ? allowedOverflow : 0;
  return {
    start: reverse ? max : min,
    end: reverse ? min : max
  };
}
function defaultClip(xScale, yScale, allowedOverflow) {
  if (allowedOverflow === false) {
    return false;
  }
  const x = scaleClip(xScale, allowedOverflow);
  const y = scaleClip(yScale, allowedOverflow);
  return {
    top: y.end,
    right: x.end,
    bottom: y.start,
    left: x.start
  };
}
function toClip(value) {
  let t, r, b, l;
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(value)) {
    t = value.top;
    r = value.right;
    b = value.bottom;
    l = value.left;
  } else {
    t = r = b = l = value;
  }
  return {
    top: t,
    right: r,
    bottom: b,
    left: l,
    disabled: value === false
  };
}
function getSortedDatasetIndices(chart, filterVisible) {
  const keys = [];
  const metasets = chart._getSortedDatasetMetas(filterVisible);
  let i, ilen;
  for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    keys.push(metasets[i].index);
  }
  return keys;
}
function applyStack(stack, value, dsIndex, options) {
  const keys = stack.keys;
  const singleMode = options.mode === 'single';
  let i, ilen, datasetIndex, otherValue;
  if (value === null) {
    return;
  }
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    datasetIndex = +keys[i];
    if (datasetIndex === dsIndex) {
      if (options.all) {
        continue;
      }
      break;
    }
    otherValue = stack.values[datasetIndex];
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(otherValue) && (singleMode || (value === 0 || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(value) === (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(otherValue)))) {
      value += otherValue;
    }
  }
  return value;
}
function convertObjectDataToArray(data) {
  const keys = Object.keys(data);
  const adata = new Array(keys.length);
  let i, ilen, key;
  for (i = 0, ilen = keys.length; i < ilen; ++i) {
    key = keys[i];
    adata[i] = {
      x: key,
      y: data[key]
    };
  }
  return adata;
}
function isStacked(scale, meta) {
  const stacked = scale && scale.options.stacked;
  return stacked || (stacked === undefined && meta.stack !== undefined);
}
function getStackKey(indexScale, valueScale, meta) {
  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
  const {min, max, minDefined, maxDefined} = scale.getUserBounds();
  return {
    min: minDefined ? min : Number.NEGATIVE_INFINITY,
    max: maxDefined ? max : Number.POSITIVE_INFINITY
  };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
  const subStack = stacks[stackKey] || (stacks[stackKey] = {});
  return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive) {
  for (const meta of vScale.getMatchingVisibleMetas('bar').reverse()) {
    const value = stack[meta.index];
    if ((positive && value > 0) || (!positive && value < 0)) {
      return meta.index;
    }
  }
  return null;
}
function updateStacks(controller, parsed) {
  const {chart, _cachedMeta: meta} = controller;
  const stacks = chart._stacks || (chart._stacks = {});
  const {iScale, vScale, index: datasetIndex} = meta;
  const iAxis = iScale.axis;
  const vAxis = vScale.axis;
  const key = getStackKey(iScale, vScale, meta);
  const ilen = parsed.length;
  let stack;
  for (let i = 0; i < ilen; ++i) {
    const item = parsed[i];
    const {[iAxis]: index, [vAxis]: value} = item;
    const itemStacks = item._stacks || (item._stacks = {});
    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
    stack[datasetIndex] = value;
    stack._top = getLastIndexInStack(stack, vScale, true);
    stack._bottom = getLastIndexInStack(stack, vScale, false);
  }
}
function getFirstScaleId(chart, axis) {
  const scales = chart.scales;
  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index) {
  return Object.assign(Object.create(parent),
    {
      active: false,
      dataset: undefined,
      datasetIndex: index,
      index,
      mode: 'default',
      type: 'dataset'
    }
  );
}
function createDataContext(parent, index, element) {
  return Object.assign(Object.create(parent), {
    active: false,
    dataIndex: index,
    parsed: undefined,
    raw: undefined,
    element,
    index,
    mode: 'default',
    type: 'data'
  });
}
function clearStacks(meta, items) {
  const datasetIndex = meta.controller.index;
  const axis = meta.vScale && meta.vScale.axis;
  if (!axis) {
    return;
  }
  items = items || meta._parsed;
  for (const parsed of items) {
    const stacks = parsed._stacks;
    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {
      return;
    }
    delete stacks[axis][datasetIndex];
  }
}
const isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';
const cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);
class DatasetController {
  constructor(chart, datasetIndex) {
    this.chart = chart;
    this._ctx = chart.ctx;
    this.index = datasetIndex;
    this._cachedDataOpts = {};
    this._cachedMeta = this.getMeta();
    this._type = this._cachedMeta.type;
    this.options = undefined;
    this._parsing = false;
    this._data = undefined;
    this._objectData = undefined;
    this._sharedOptions = undefined;
    this._drawStart = undefined;
    this._drawCount = undefined;
    this.enableOptionSharing = false;
    this.$context = undefined;
    this._syncList = [];
    this.initialize();
  }
  initialize() {
    const me = this;
    const meta = me._cachedMeta;
    me.configure();
    me.linkScales();
    meta._stacked = isStacked(meta.vScale, meta);
    me.addElements();
  }
  updateIndex(datasetIndex) {
    if (this.index !== datasetIndex) {
      clearStacks(this._cachedMeta);
    }
    this.index = datasetIndex;
  }
  linkScales() {
    const me = this;
    const chart = me.chart;
    const meta = me._cachedMeta;
    const dataset = me.getDataset();
    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;
    const xid = meta.xAxisID = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.xAxisID, getFirstScaleId(chart, 'x'));
    const yid = meta.yAxisID = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.yAxisID, getFirstScaleId(chart, 'y'));
    const rid = meta.rAxisID = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(dataset.rAxisID, getFirstScaleId(chart, 'r'));
    const indexAxis = meta.indexAxis;
    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
    meta.xScale = me.getScaleForId(xid);
    meta.yScale = me.getScaleForId(yid);
    meta.rScale = me.getScaleForId(rid);
    meta.iScale = me.getScaleForId(iid);
    meta.vScale = me.getScaleForId(vid);
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(scaleID) {
    return this.chart.scales[scaleID];
  }
  _getOtherScale(scale) {
    const meta = this._cachedMeta;
    return scale === meta.iScale
      ? meta.vScale
      : meta.iScale;
  }
  reset() {
    this._update('reset');
  }
  _destroy() {
    const meta = this._cachedMeta;
    if (this._data) {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.u)(this._data, this);
    }
    if (meta._stacked) {
      clearStacks(meta);
    }
  }
  _dataCheck() {
    const me = this;
    const dataset = me.getDataset();
    const data = dataset.data || (dataset.data = []);
    const _data = me._data;
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(data)) {
      me._data = convertObjectDataToArray(data);
    } else if (_data !== data) {
      if (_data) {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.u)(_data, me);
        const meta = me._cachedMeta;
        clearStacks(meta);
        meta._parsed = [];
      }
      if (data && Object.isExtensible(data)) {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.l)(data, me);
      }
      me._syncList = [];
      me._data = data;
    }
  }
  addElements() {
    const me = this;
    const meta = me._cachedMeta;
    me._dataCheck();
    if (me.datasetElementType) {
      meta.dataset = new me.datasetElementType();
    }
  }
  buildOrUpdateElements(resetNewElements) {
    const me = this;
    const meta = me._cachedMeta;
    const dataset = me.getDataset();
    let stackChanged = false;
    me._dataCheck();
    const oldStacked = meta._stacked;
    meta._stacked = isStacked(meta.vScale, meta);
    if (meta.stack !== dataset.stack) {
      stackChanged = true;
      clearStacks(meta);
      meta.stack = dataset.stack;
    }
    me._resyncElements(resetNewElements);
    if (stackChanged || oldStacked !== meta._stacked) {
      updateStacks(me, meta._parsed);
    }
  }
  configure() {
    const me = this;
    const config = me.chart.config;
    const scopeKeys = config.datasetScopeKeys(me._type);
    const scopes = config.getOptionScopes(me.getDataset(), scopeKeys, true);
    me.options = config.createResolver(scopes, me.getContext());
    me._parsing = me.options.parsing;
  }
  parse(start, count) {
    const me = this;
    const {_cachedMeta: meta, _data: data} = me;
    const {iScale, _stacked} = meta;
    const iAxis = iScale.axis;
    let sorted = start === 0 && count === data.length ? true : meta._sorted;
    let prev = start > 0 && meta._parsed[start - 1];
    let i, cur, parsed;
    if (me._parsing === false) {
      meta._parsed = data;
      meta._sorted = true;
      parsed = data;
    } else {
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(data[start])) {
        parsed = me.parseArrayData(meta, data, start, count);
      } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(data[start])) {
        parsed = me.parseObjectData(meta, data, start, count);
      } else {
        parsed = me.parsePrimitiveData(meta, data, start, count);
      }
      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);
      for (i = 0; i < count; ++i) {
        meta._parsed[i + start] = cur = parsed[i];
        if (sorted) {
          if (isNotInOrderComparedToPrev()) {
            sorted = false;
          }
          prev = cur;
        }
      }
      meta._sorted = sorted;
    }
    if (_stacked) {
      updateStacks(me, parsed);
    }
  }
  parsePrimitiveData(meta, data, start, count) {
    const {iScale, vScale} = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = new Array(count);
    let i, ilen, index;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      parsed[i] = {
        [iAxis]: singleScale || iScale.parse(labels[index], index),
        [vAxis]: vScale.parse(data[index], index)
      };
    }
    return parsed;
  }
  parseArrayData(meta, data, start, count) {
    const {xScale, yScale} = meta;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      item = data[index];
      parsed[i] = {
        x: xScale.parse(item[0], index),
        y: yScale.parse(item[1], index)
      };
    }
    return parsed;
  }
  parseObjectData(meta, data, start, count) {
    const {xScale, yScale} = meta;
    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for (i = 0, ilen = count; i < ilen; ++i) {
      index = i + start;
      item = data[index];
      parsed[i] = {
        x: xScale.parse((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(item, xAxisKey), index),
        y: yScale.parse((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(item, yAxisKey), index)
      };
    }
    return parsed;
  }
  getParsed(index) {
    return this._cachedMeta._parsed[index];
  }
  getDataElement(index) {
    return this._cachedMeta.data[index];
  }
  applyStack(scale, parsed, mode) {
    const chart = this.chart;
    const meta = this._cachedMeta;
    const value = parsed[scale.axis];
    const stack = {
      keys: getSortedDatasetIndices(chart, true),
      values: parsed._stacks[scale.axis]
    };
    return applyStack(stack, value, meta.index, {mode});
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    const parsedValue = parsed[scale.axis];
    let value = parsedValue === null ? NaN : parsedValue;
    const values = stack && parsed._stacks[scale.axis];
    if (stack && values) {
      stack.values = values;
      range.min = Math.min(range.min, value);
      range.max = Math.max(range.max, value);
      value = applyStack(stack, parsedValue, this._cachedMeta.index, {all: true});
    }
    range.min = Math.min(range.min, value);
    range.max = Math.max(range.max, value);
  }
  getMinMax(scale, canStack) {
    const me = this;
    const meta = me._cachedMeta;
    const _parsed = meta._parsed;
    const sorted = meta._sorted && scale === meta.iScale;
    const ilen = _parsed.length;
    const otherScale = me._getOtherScale(scale);
    const stack = canStack && meta._stacked && {keys: getSortedDatasetIndices(me.chart, true), values: null};
    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};
    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);
    let i, value, parsed, otherValue;
    function _skip() {
      parsed = _parsed[i];
      value = parsed[scale.axis];
      otherValue = parsed[otherScale.axis];
      return !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(value) || otherMin > otherValue || otherMax < otherValue;
    }
    for (i = 0; i < ilen; ++i) {
      if (_skip()) {
        continue;
      }
      me.updateRangeFromParsed(range, scale, parsed, stack);
      if (sorted) {
        break;
      }
    }
    if (sorted) {
      for (i = ilen - 1; i >= 0; --i) {
        if (_skip()) {
          continue;
        }
        me.updateRangeFromParsed(range, scale, parsed, stack);
        break;
      }
    }
    return range;
  }
  getAllParsedValues(scale) {
    const parsed = this._cachedMeta._parsed;
    const values = [];
    let i, ilen, value;
    for (i = 0, ilen = parsed.length; i < ilen; ++i) {
      value = parsed[i][scale.axis];
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(value)) {
        values.push(value);
      }
    }
    return values;
  }
  getMaxOverflow() {
    return false;
  }
  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const parsed = me.getParsed(index);
    return {
      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',
      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''
    };
  }
  _update(mode) {
    const me = this;
    const meta = me._cachedMeta;
    me.configure();
    me._cachedDataOpts = {};
    me.update(mode || 'default');
    meta._clip = toClip((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(me.options.clip, defaultClip(meta.xScale, meta.yScale, me.getMaxOverflow())));
  }
  update(mode) {}
  draw() {
    const me = this;
    const ctx = me._ctx;
    const chart = me.chart;
    const meta = me._cachedMeta;
    const elements = meta.data || [];
    const area = chart.chartArea;
    const active = [];
    const start = me._drawStart || 0;
    const count = me._drawCount || (elements.length - start);
    let i;
    if (meta.dataset) {
      meta.dataset.draw(ctx, area, start, count);
    }
    for (i = start; i < start + count; ++i) {
      const element = elements[i];
      if (element.hidden) {
        continue;
      }
      if (element.active) {
        active.push(element);
      } else {
        element.draw(ctx, area);
      }
    }
    for (i = 0; i < active.length; ++i) {
      active[i].draw(ctx, area);
    }
  }
  getStyle(index, active) {
    const mode = active ? 'active' : 'default';
    return index === undefined && this._cachedMeta.dataset
      ? this.resolveDatasetElementOptions(mode)
      : this.resolveDataElementOptions(index || 0, mode);
  }
  getContext(index, active, mode) {
    const me = this;
    const dataset = me.getDataset();
    let context;
    if (index >= 0 && index < me._cachedMeta.data.length) {
      const element = me._cachedMeta.data[index];
      context = element.$context ||
        (element.$context = createDataContext(me.getContext(), index, element));
      context.parsed = me.getParsed(index);
      context.raw = dataset.data[index];
      context.index = context.dataIndex = index;
    } else {
      context = me.$context ||
        (me.$context = createDatasetContext(me.chart.getContext(), me.index));
      context.dataset = dataset;
      context.index = context.datasetIndex = me.index;
    }
    context.active = !!active;
    context.mode = mode;
    return context;
  }
  resolveDatasetElementOptions(mode) {
    return this._resolveElementOptions(this.datasetElementType.id, mode);
  }
  resolveDataElementOptions(index, mode) {
    return this._resolveElementOptions(this.dataElementType.id, mode, index);
  }
  _resolveElementOptions(elementType, mode = 'default', index) {
    const me = this;
    const active = mode === 'active';
    const cache = me._cachedDataOpts;
    const cacheKey = elementType + '-' + mode;
    const cached = cache[cacheKey];
    const sharing = me.enableOptionSharing && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(index);
    if (cached) {
      return cloneIfNotShared(cached, sharing);
    }
    const config = me.chart.config;
    const scopeKeys = config.datasetElementScopeKeys(me._type, elementType);
    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];
    const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);
    const names = Object.keys(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.elements[elementType]);
    const context = () => me.getContext(index, active);
    const values = config.resolveNamedOptions(scopes, names, context, prefixes);
    if (values.$shared) {
      values.$shared = sharing;
      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
    }
    return values;
  }
  _resolveAnimations(index, transition, active) {
    const me = this;
    const chart = me.chart;
    const cache = me._cachedDataOpts;
    const cacheKey = `animation-${transition}`;
    const cached = cache[cacheKey];
    if (cached) {
      return cached;
    }
    let options;
    if (chart.options.animation !== false) {
      const config = me.chart.config;
      const scopeKeys = config.datasetAnimationScopeKeys(me._type, transition);
      const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);
      options = config.createResolver(scopes, me.getContext(index, active, transition));
    }
    const animations = new Animations(chart, options && options.animations);
    if (options && options._cacheable) {
      cache[cacheKey] = Object.freeze(animations);
    }
    return animations;
  }
  getSharedOptions(options) {
    if (!options.$shared) {
      return;
    }
    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
  }
  includeOptions(mode, sharedOptions) {
    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
  }
  updateElement(element, index, properties, mode) {
    if (isDirectUpdateMode(mode)) {
      Object.assign(element, properties);
    } else {
      this._resolveAnimations(index, mode).update(element, properties);
    }
  }
  updateSharedOptions(sharedOptions, mode, newOptions) {
    if (sharedOptions && !isDirectUpdateMode(mode)) {
      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
    }
  }
  _setStyle(element, index, mode, active) {
    element.active = active;
    const options = this.getStyle(index, active);
    this._resolveAnimations(index, mode, active).update(element, {
      options: (!active && this.getSharedOptions(options)) || options
    });
  }
  removeHoverStyle(element, datasetIndex, index) {
    this._setStyle(element, index, 'active', false);
  }
  setHoverStyle(element, datasetIndex, index) {
    this._setStyle(element, index, 'active', true);
  }
  _removeDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, undefined, 'active', false);
    }
  }
  _setDatasetHoverStyle() {
    const element = this._cachedMeta.dataset;
    if (element) {
      this._setStyle(element, undefined, 'active', true);
    }
  }
  _resyncElements(resetNewElements) {
    const me = this;
    const data = me._data;
    const elements = me._cachedMeta.data;
    for (const [method, arg1, arg2] of me._syncList) {
      me[method](arg1, arg2);
    }
    me._syncList = [];
    const numMeta = elements.length;
    const numData = data.length;
    const count = Math.min(numData, numMeta);
    if (count) {
      me.parse(0, count);
    }
    if (numData > numMeta) {
      me._insertElements(numMeta, numData - numMeta, resetNewElements);
    } else if (numData < numMeta) {
      me._removeElements(numData, numMeta - numData);
    }
  }
  _insertElements(start, count, resetNewElements = true) {
    const me = this;
    const meta = me._cachedMeta;
    const data = meta.data;
    const end = start + count;
    let i;
    const move = (arr) => {
      arr.length += count;
      for (i = arr.length - 1; i >= end; i--) {
        arr[i] = arr[i - count];
      }
    };
    move(data);
    for (i = start; i < end; ++i) {
      data[i] = new me.dataElementType();
    }
    if (me._parsing) {
      move(meta._parsed);
    }
    me.parse(start, count);
    if (resetNewElements) {
      me.updateElements(data, start, count, 'reset');
    }
  }
  updateElements(element, start, count, mode) {}
  _removeElements(start, count) {
    const me = this;
    const meta = me._cachedMeta;
    if (me._parsing) {
      const removed = meta._parsed.splice(start, count);
      if (meta._stacked) {
        clearStacks(meta, removed);
      }
    }
    meta.data.splice(start, count);
  }
  _sync(args) {
    if (this._parsing) {
      this._syncList.push(args);
    } else {
      const [method, arg1, arg2] = args;
      this[method](arg1, arg2);
    }
  }
  _onDataPush() {
    const count = arguments.length;
    this._sync(['_insertElements', this.getDataset().data.length - count, count]);
  }
  _onDataPop() {
    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);
  }
  _onDataShift() {
    this._sync(['_removeElements', 0, 1]);
  }
  _onDataSplice(start, count) {
    this._sync(['_removeElements', start, count]);
    this._sync(['_insertElements', start, arguments.length - 2]);
  }
  _onDataUnshift() {
    this._sync(['_insertElements', 0, arguments.length]);
  }
}
DatasetController.defaults = {};
DatasetController.prototype.datasetElementType = null;
DatasetController.prototype.dataElementType = null;

function getAllScaleValues(scale) {
  if (!scale._cache.$bar) {
    const metas = scale.getMatchingVisibleMetas('bar');
    let values = [];
    for (let i = 0, ilen = metas.length; i < ilen; i++) {
      values = values.concat(metas[i].controller.getAllParsedValues(scale));
    }
    scale._cache.$bar = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__._)(values.sort((a, b) => a - b));
  }
  return scale._cache.$bar;
}
function computeMinSampleSize(scale) {
  const values = getAllScaleValues(scale);
  let min = scale._length;
  let i, ilen, curr, prev;
  const updateMinAndPrev = () => {
    if (curr === 32767 || curr === -32768) {
      return;
    }
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(prev)) {
      min = Math.min(min, Math.abs(curr - prev) || min);
    }
    prev = curr;
  };
  for (i = 0, ilen = values.length; i < ilen; ++i) {
    curr = scale.getPixelForValue(values[i]);
    updateMinAndPrev();
  }
  prev = undefined;
  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {
    curr = scale.getPixelForTick(i);
    updateMinAndPrev();
  }
  return min;
}
function computeFitCategoryTraits(index, ruler, options, stackCount) {
  const thickness = options.barThickness;
  let size, ratio;
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(thickness)) {
    size = ruler.min * options.categoryPercentage;
    ratio = options.barPercentage;
  } else {
    size = thickness * stackCount;
    ratio = 1;
  }
  return {
    chunk: size / stackCount,
    ratio,
    start: ruler.pixels[index] - (size / 2)
  };
}
function computeFlexCategoryTraits(index, ruler, options, stackCount) {
  const pixels = ruler.pixels;
  const curr = pixels[index];
  let prev = index > 0 ? pixels[index - 1] : null;
  let next = index < pixels.length - 1 ? pixels[index + 1] : null;
  const percent = options.categoryPercentage;
  if (prev === null) {
    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
  }
  if (next === null) {
    next = curr + curr - prev;
  }
  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
  const size = Math.abs(next - prev) / 2 * percent;
  return {
    chunk: size / stackCount,
    ratio: options.barPercentage,
    start
  };
}
function parseFloatBar(entry, item, vScale, i) {
  const startValue = vScale.parse(entry[0], i);
  const endValue = vScale.parse(entry[1], i);
  const min = Math.min(startValue, endValue);
  const max = Math.max(startValue, endValue);
  let barStart = min;
  let barEnd = max;
  if (Math.abs(min) > Math.abs(max)) {
    barStart = max;
    barEnd = min;
  }
  item[vScale.axis] = barEnd;
  item._custom = {
    barStart,
    barEnd,
    start: startValue,
    end: endValue,
    min,
    max
  };
}
function parseValue(entry, item, vScale, i) {
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(entry)) {
    parseFloatBar(entry, item, vScale, i);
  } else {
    item[vScale.axis] = vScale.parse(entry, i);
  }
  return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
  const iScale = meta.iScale;
  const vScale = meta.vScale;
  const labels = iScale.getLabels();
  const singleScale = iScale === vScale;
  const parsed = [];
  let i, ilen, item, entry;
  for (i = start, ilen = start + count; i < ilen; ++i) {
    entry = data[i];
    item = {};
    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
    parsed.push(parseValue(entry, item, vScale, i));
  }
  return parsed;
}
function isFloatBar(custom) {
  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}
function barSign(size, vScale, actualBase) {
  if (size !== 0) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(size);
  }
  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
  let reverse, start, end, top, bottom;
  if (properties.horizontal) {
    reverse = properties.base > properties.x;
    start = 'left';
    end = 'right';
  } else {
    reverse = properties.base < properties.y;
    start = 'bottom';
    end = 'top';
  }
  if (reverse) {
    top = 'end';
    bottom = 'start';
  } else {
    top = 'start';
    bottom = 'end';
  }
  return {start, end, reverse, top, bottom};
}
function setBorderSkipped(properties, options, stack, index) {
  let edge = options.borderSkipped;
  const res = {};
  if (!edge) {
    properties.borderSkipped = res;
    return;
  }
  const {start, end, reverse, top, bottom} = borderProps(properties);
  if (edge === 'middle' && stack) {
    properties.enableBorderRadius = true;
    if ((stack._top || 0) === index) {
      edge = top;
    } else if ((stack._bottom || 0) === index) {
      edge = bottom;
    } else {
      res[parseEdge(bottom, start, end, reverse)] = true;
      edge = top;
    }
  }
  res[parseEdge(edge, start, end, reverse)] = true;
  properties.borderSkipped = res;
}
function parseEdge(edge, a, b, reverse) {
  if (reverse) {
    edge = swap(edge, a, b);
    edge = startEnd(edge, b, a);
  } else {
    edge = startEnd(edge, a, b);
  }
  return edge;
}
function swap(orig, v1, v2) {
  return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
  return v === 'start' ? start : v === 'end' ? end : v;
}
class BarController extends DatasetController {
  parsePrimitiveData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseArrayData(meta, data, start, count) {
    return parseArrayOrPrimitive(meta, data, start, count);
  }
  parseObjectData(meta, data, start, count) {
    const {iScale, vScale} = meta;
    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;
    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;
    const parsed = [];
    let i, ilen, item, obj;
    for (i = start, ilen = start + count; i < ilen; ++i) {
      obj = data[i];
      item = {};
      item[iScale.axis] = iScale.parse((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(obj, iAxisKey), i);
      parsed.push(parseValue((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(obj, vAxisKey), item, vScale, i));
    }
    return parsed;
  }
  updateRangeFromParsed(range, scale, parsed, stack) {
    super.updateRangeFromParsed(range, scale, parsed, stack);
    const custom = parsed._custom;
    if (custom && scale === this._cachedMeta.vScale) {
      range.min = Math.min(range.min, custom.min);
      range.max = Math.max(range.max, custom.max);
    }
  }
  getMaxOverflow() {
    return 0;
  }
  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const {iScale, vScale} = meta;
    const parsed = me.getParsed(index);
    const custom = parsed._custom;
    const value = isFloatBar(custom)
      ? '[' + custom.start + ', ' + custom.end + ']'
      : '' + vScale.getLabelForValue(parsed[vScale.axis]);
    return {
      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),
      value
    };
  }
  initialize() {
    const me = this;
    me.enableOptionSharing = true;
    super.initialize();
    const meta = me._cachedMeta;
    meta.stack = me.getDataset().stack;
  }
  update(mode) {
    const me = this;
    const meta = me._cachedMeta;
    me.updateElements(meta.data, 0, meta.data.length, mode);
  }
  updateElements(bars, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const {index, _cachedMeta: {vScale}} = me;
    const base = vScale.getBasePixel();
    const horizontal = vScale.isHorizontal();
    const ruler = me._getRuler();
    const firstOpts = me.resolveDataElementOptions(start, mode);
    const sharedOptions = me.getSharedOptions(firstOpts);
    const includeOptions = me.includeOptions(mode, sharedOptions);
    me.updateSharedOptions(sharedOptions, mode, firstOpts);
    for (let i = start; i < start + count; i++) {
      const parsed = me.getParsed(i);
      const vpixels = reset || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(parsed[vScale.axis]) ? {base, head: base} : me._calculateBarValuePixels(i);
      const ipixels = me._calculateBarIndexPixels(i, ruler);
      const stack = (parsed._stacks || {})[vScale.axis];
      const properties = {
        horizontal,
        base: vpixels.base,
        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),
        x: horizontal ? vpixels.head : ipixels.center,
        y: horizontal ? ipixels.center : vpixels.head,
        height: horizontal ? ipixels.size : Math.abs(vpixels.size),
        width: horizontal ? Math.abs(vpixels.size) : ipixels.size
      };
      if (includeOptions) {
        properties.options = sharedOptions || me.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);
      }
      setBorderSkipped(properties, properties.options || bars[i].options, stack, index);
      me.updateElement(bars[i], i, properties, mode);
    }
  }
  _getStacks(last, dataIndex) {
    const me = this;
    const meta = me._cachedMeta;
    const iScale = meta.iScale;
    const metasets = iScale.getMatchingVisibleMetas(me._type);
    const stacked = iScale.options.stacked;
    const ilen = metasets.length;
    const stacks = [];
    let i, item;
    for (i = 0; i < ilen; ++i) {
      item = metasets[i];
      if (!item.controller.options.grouped) {
        continue;
      }
      if (typeof dataIndex !== 'undefined') {
        const val = item.controller.getParsed(dataIndex)[
          item.controller._cachedMeta.vScale.axis
        ];
        if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(val) || isNaN(val)) {
          continue;
        }
      }
      if (stacked === false || stacks.indexOf(item.stack) === -1 ||
				(stacked === undefined && item.stack === undefined)) {
        stacks.push(item.stack);
      }
      if (item.index === last) {
        break;
      }
    }
    if (!stacks.length) {
      stacks.push(undefined);
    }
    return stacks;
  }
  _getStackCount(index) {
    return this._getStacks(undefined, index).length;
  }
  _getStackIndex(datasetIndex, name, dataIndex) {
    const stacks = this._getStacks(datasetIndex, dataIndex);
    const index = (name !== undefined)
      ? stacks.indexOf(name)
      : -1;
    return (index === -1)
      ? stacks.length - 1
      : index;
  }
  _getRuler() {
    const me = this;
    const opts = me.options;
    const meta = me._cachedMeta;
    const iScale = meta.iScale;
    const pixels = [];
    let i, ilen;
    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {
      pixels.push(iScale.getPixelForValue(me.getParsed(i)[iScale.axis], i));
    }
    const barThickness = opts.barThickness;
    const min = barThickness || computeMinSampleSize(iScale);
    return {
      min,
      pixels,
      start: iScale._startPixel,
      end: iScale._endPixel,
      stackCount: me._getStackCount(),
      scale: iScale,
      grouped: opts.grouped,
      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
    };
  }
  _calculateBarValuePixels(index) {
    const me = this;
    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = me;
    const actualBase = baseValue || 0;
    const parsed = me.getParsed(index);
    const custom = parsed._custom;
    const floating = isFloatBar(custom);
    let value = parsed[vScale.axis];
    let start = 0;
    let length = _stacked ? me.applyStack(vScale, parsed, _stacked) : value;
    let head, size;
    if (length !== value) {
      start = length - value;
      length = value;
    }
    if (floating) {
      value = custom.barStart;
      length = custom.barEnd - custom.barStart;
      if (value !== 0 && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(value) !== (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(custom.barEnd)) {
        start = 0;
      }
      start += value;
    }
    const startValue = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(baseValue) && !floating ? baseValue : start;
    let base = vScale.getPixelForValue(startValue);
    if (me.chart.getDataVisibility(index)) {
      head = vScale.getPixelForValue(start + length);
    } else {
      head = base;
    }
    size = head - base;
    if (Math.abs(size) < minBarLength) {
      size = barSign(size, vScale, actualBase) * minBarLength;
      if (value === actualBase) {
        base -= size / 2;
      }
      head = base + size;
    }
    if (base === vScale.getPixelForValue(actualBase)) {
      const halfGrid = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;
      base += halfGrid;
      size -= halfGrid;
    }
    return {
      size,
      base,
      head,
      center: head + size / 2
    };
  }
  _calculateBarIndexPixels(index, ruler) {
    const me = this;
    const scale = ruler.scale;
    const options = me.options;
    const skipNull = options.skipNull;
    const maxBarThickness = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(options.maxBarThickness, Infinity);
    let center, size;
    if (ruler.grouped) {
      const stackCount = skipNull ? me._getStackCount(index) : ruler.stackCount;
      const range = options.barThickness === 'flex'
        ? computeFlexCategoryTraits(index, ruler, options, stackCount)
        : computeFitCategoryTraits(index, ruler, options, stackCount);
      const stackIndex = me._getStackIndex(me.index, me._cachedMeta.stack, skipNull ? index : undefined);
      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
      size = Math.min(maxBarThickness, range.chunk * range.ratio);
    } else {
      center = scale.getPixelForValue(me.getParsed(index)[scale.axis], index);
      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
    }
    return {
      base: center - size / 2,
      head: center + size / 2,
      center,
      size
    };
  }
  draw() {
    const me = this;
    const meta = me._cachedMeta;
    const vScale = meta.vScale;
    const rects = meta.data;
    const ilen = rects.length;
    let i = 0;
    for (; i < ilen; ++i) {
      if (me.getParsed(i)[vScale.axis] !== null) {
        rects[i].draw(me._ctx);
      }
    }
  }
}
BarController.id = 'bar';
BarController.defaults = {
  datasetElementType: false,
  dataElementType: 'bar',
  categoryPercentage: 0.8,
  barPercentage: 0.9,
  grouped: true,
  animations: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'base', 'width', 'height']
    }
  }
};
BarController.overrides = {
  scales: {
    _index_: {
      type: 'category',
      offset: true,
      grid: {
        offset: true
      }
    },
    _value_: {
      type: 'linear',
      beginAtZero: true,
    }
  }
};

class BubbleController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
  }
  parseObjectData(meta, data, start, count) {
    const {xScale, yScale} = meta;
    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;
    const parsed = [];
    let i, ilen, item;
    for (i = start, ilen = start + count; i < ilen; ++i) {
      item = data[i];
      parsed.push({
        x: xScale.parse((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(item, xAxisKey), i),
        y: yScale.parse((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(item, yAxisKey), i),
        _custom: item && item.r && +item.r
      });
    }
    return parsed;
  }
  getMaxOverflow() {
    const {data, _parsed} = this._cachedMeta;
    let max = 0;
    for (let i = data.length - 1; i >= 0; --i) {
      max = Math.max(max, data[i].size() / 2, _parsed[i]._custom);
    }
    return max > 0 && max;
  }
  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const {xScale, yScale} = meta;
    const parsed = me.getParsed(index);
    const x = xScale.getLabelForValue(parsed.x);
    const y = yScale.getLabelForValue(parsed.y);
    const r = parsed._custom;
    return {
      label: meta.label,
      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'
    };
  }
  update(mode) {
    const me = this;
    const points = me._cachedMeta.data;
    me.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const {iScale, vScale} = me._cachedMeta;
    const firstOpts = me.resolveDataElementOptions(start, mode);
    const sharedOptions = me.getSharedOptions(firstOpts);
    const includeOptions = me.includeOptions(mode, sharedOptions);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    for (let i = start; i < start + count; i++) {
      const point = points[i];
      const parsed = !reset && me.getParsed(i);
      const properties = {};
      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
      properties.skip = isNaN(iPixel) || isNaN(vPixel);
      if (includeOptions) {
        properties.options = me.resolveDataElementOptions(i, point.active ? 'active' : mode);
        if (reset) {
          properties.options.radius = 0;
        }
      }
      me.updateElement(point, i, properties, mode);
    }
    me.updateSharedOptions(sharedOptions, mode, firstOpts);
  }
  resolveDataElementOptions(index, mode) {
    const parsed = this.getParsed(index);
    let values = super.resolveDataElementOptions(index, mode);
    if (values.$shared) {
      values = Object.assign({}, values, {$shared: false});
    }
    const radius = values.radius;
    if (mode !== 'active') {
      values.radius = 0;
    }
    values.radius += (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(parsed && parsed._custom, radius);
    return values;
  }
}
BubbleController.id = 'bubble';
BubbleController.defaults = {
  datasetElementType: false,
  dataElementType: 'point',
  animations: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'borderWidth', 'radius']
    }
  }
};
BubbleController.overrides = {
  scales: {
    x: {
      type: 'linear'
    },
    y: {
      type: 'linear'
    }
  },
  plugins: {
    tooltip: {
      callbacks: {
        title() {
          return '';
        }
      }
    }
  }
};

function getRatioAndOffset(rotation, circumference, cutout) {
  let ratioX = 1;
  let ratioY = 1;
  let offsetX = 0;
  let offsetY = 0;
  if (circumference < _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T) {
    const startAngle = rotation;
    const endAngle = startAngle + circumference;
    const startX = Math.cos(startAngle);
    const startY = Math.sin(startAngle);
    const endX = Math.cos(endAngle);
    const endY = Math.sin(endAngle);
    const calcMax = (angle, a, b) => (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.o)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
    const calcMin = (angle, a, b) => (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.o)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
    const maxX = calcMax(0, startX, endX);
    const maxY = calcMax(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, startY, endY);
    const minX = calcMin(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P, startX, endX);
    const minY = calcMin(_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, startY, endY);
    ratioX = (maxX - minX) / 2;
    ratioY = (maxY - minY) / 2;
    offsetX = -(maxX + minX) / 2;
    offsetY = -(maxY + minY) / 2;
  }
  return {ratioX, ratioY, offsetX, offsetY};
}
class DoughnutController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.enableOptionSharing = true;
    this.innerRadius = undefined;
    this.outerRadius = undefined;
    this.offsetX = undefined;
    this.offsetY = undefined;
  }
  linkScales() {}
  parse(start, count) {
    const data = this.getDataset().data;
    const meta = this._cachedMeta;
    let i, ilen;
    for (i = start, ilen = start + count; i < ilen; ++i) {
      meta._parsed[i] = +data[i];
    }
  }
  _getRotation() {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.rotation - 90);
  }
  _getCircumference() {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.options.circumference);
  }
  _getRotationExtents() {
    let min = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T;
    let max = -_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T;
    const me = this;
    for (let i = 0; i < me.chart.data.datasets.length; ++i) {
      if (me.chart.isDatasetVisible(i)) {
        const controller = me.chart.getDatasetMeta(i).controller;
        const rotation = controller._getRotation();
        const circumference = controller._getCircumference();
        min = Math.min(min, rotation);
        max = Math.max(max, rotation + circumference);
      }
    }
    return {
      rotation: min,
      circumference: max - min,
    };
  }
  update(mode) {
    const me = this;
    const chart = me.chart;
    const {chartArea} = chart;
    const meta = me._cachedMeta;
    const arcs = meta.data;
    const spacing = me.getMaxBorderWidth() + me.getMaxOffset(arcs) + me.options.spacing;
    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
    const cutout = Math.min((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.k)(me.options.cutout, maxSize), 1);
    const chartWeight = me._getRingWeight(me.index);
    const {circumference, rotation} = me._getRotationExtents();
    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);
    const maxWidth = (chartArea.width - spacing) / ratioX;
    const maxHeight = (chartArea.height - spacing) / ratioY;
    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    const outerRadius = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.m)(me.options.radius, maxRadius);
    const innerRadius = Math.max(outerRadius * cutout, 0);
    const radiusLength = (outerRadius - innerRadius) / me._getVisibleDatasetWeightTotal();
    me.offsetX = offsetX * outerRadius;
    me.offsetY = offsetY * outerRadius;
    meta.total = me.calculateTotal();
    me.outerRadius = outerRadius - radiusLength * me._getRingWeightOffset(me.index);
    me.innerRadius = Math.max(me.outerRadius - radiusLength * chartWeight, 0);
    me.updateElements(arcs, 0, arcs.length, mode);
  }
  _circumference(i, reset) {
    const me = this;
    const opts = me.options;
    const meta = me._cachedMeta;
    const circumference = me._getCircumference();
    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {
      return 0;
    }
    return me.calculateCircumference(meta._parsed[i] * circumference / _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T);
  }
  updateElements(arcs, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const chart = me.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const animationOpts = opts.animation;
    const centerX = (chartArea.left + chartArea.right) / 2;
    const centerY = (chartArea.top + chartArea.bottom) / 2;
    const animateScale = reset && animationOpts.animateScale;
    const innerRadius = animateScale ? 0 : me.innerRadius;
    const outerRadius = animateScale ? 0 : me.outerRadius;
    const firstOpts = me.resolveDataElementOptions(start, mode);
    const sharedOptions = me.getSharedOptions(firstOpts);
    const includeOptions = me.includeOptions(mode, sharedOptions);
    let startAngle = me._getRotation();
    let i;
    for (i = 0; i < start; ++i) {
      startAngle += me._circumference(i, reset);
    }
    for (i = start; i < start + count; ++i) {
      const circumference = me._circumference(i, reset);
      const arc = arcs[i];
      const properties = {
        x: centerX + me.offsetX,
        y: centerY + me.offsetY,
        startAngle,
        endAngle: startAngle + circumference,
        circumference,
        outerRadius,
        innerRadius
      };
      if (includeOptions) {
        properties.options = sharedOptions || me.resolveDataElementOptions(i, arc.active ? 'active' : mode);
      }
      startAngle += circumference;
      me.updateElement(arc, i, properties, mode);
    }
    me.updateSharedOptions(sharedOptions, mode, firstOpts);
  }
  calculateTotal() {
    const meta = this._cachedMeta;
    const metaData = meta.data;
    let total = 0;
    let i;
    for (i = 0; i < metaData.length; i++) {
      const value = meta._parsed[i];
      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {
        total += Math.abs(value);
      }
    }
    return total;
  }
  calculateCircumference(value) {
    const total = this._cachedMeta.total;
    if (total > 0 && !isNaN(value)) {
      return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T * (Math.abs(value) / total);
    }
    return 0;
  }
  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const chart = me.chart;
    const labels = chart.data.labels || [];
    const value = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.n)(meta._parsed[index], chart.options.locale);
    return {
      label: labels[index] || '',
      value,
    };
  }
  getMaxBorderWidth(arcs) {
    const me = this;
    let max = 0;
    const chart = me.chart;
    let i, ilen, meta, controller, options;
    if (!arcs) {
      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
        if (chart.isDatasetVisible(i)) {
          meta = chart.getDatasetMeta(i);
          arcs = meta.data;
          controller = meta.controller;
          if (controller !== me) {
            controller.configure();
          }
          break;
        }
      }
    }
    if (!arcs) {
      return 0;
    }
    for (i = 0, ilen = arcs.length; i < ilen; ++i) {
      options = controller.resolveDataElementOptions(i);
      if (options.borderAlign !== 'inner') {
        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
      }
    }
    return max;
  }
  getMaxOffset(arcs) {
    let max = 0;
    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {
      const options = this.resolveDataElementOptions(i);
      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
    }
    return max;
  }
  _getRingWeightOffset(datasetIndex) {
    let ringWeightOffset = 0;
    for (let i = 0; i < datasetIndex; ++i) {
      if (this.chart.isDatasetVisible(i)) {
        ringWeightOffset += this._getRingWeight(i);
      }
    }
    return ringWeightOffset;
  }
  _getRingWeight(datasetIndex) {
    return Math.max((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);
  }
  _getVisibleDatasetWeightTotal() {
    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
  }
}
DoughnutController.id = 'doughnut';
DoughnutController.defaults = {
  datasetElementType: false,
  dataElementType: 'arc',
  animation: {
    animateRotate: true,
    animateScale: false
  },
  animations: {
    numbers: {
      type: 'number',
      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']
    },
  },
  cutout: '50%',
  rotation: 0,
  circumference: 360,
  radius: '100%',
  spacing: 0,
  indexAxis: 'r',
};
DoughnutController.descriptors = {
  _scriptable: (name) => name !== 'spacing',
  _indexable: (name) => name !== 'spacing',
};
DoughnutController.overrides = {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const {labels: {pointStyle}} = chart.legend.options;
            return data.labels.map((label, i) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                lineWidth: style.borderWidth,
                pointStyle: pointStyle,
                hidden: !chart.getDataVisibility(i),
                index: i
              };
            });
          }
          return [];
        }
      },
      onClick(e, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    },
    tooltip: {
      callbacks: {
        title() {
          return '';
        },
        label(tooltipItem) {
          let dataLabel = tooltipItem.label;
          const value = ': ' + tooltipItem.formattedValue;
          if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(dataLabel)) {
            dataLabel = dataLabel.slice();
            dataLabel[0] += value;
          } else {
            dataLabel += value;
          }
          return dataLabel;
        }
      }
    }
  }
};

class LineController extends DatasetController {
  initialize() {
    this.enableOptionSharing = true;
    super.initialize();
  }
  update(mode) {
    const me = this;
    const meta = me._cachedMeta;
    const {dataset: line, data: points = [], _dataset} = meta;
    const animationsDisabled = me.chart._animationsDisabled;
    let {start, count} = getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);
    me._drawStart = start;
    me._drawCount = count;
    if (scaleRangesChanged(meta)) {
      start = 0;
      count = points.length;
    }
    line._datasetIndex = me.index;
    line._decimated = !!_dataset._decimated;
    line.points = points;
    const options = me.resolveDatasetElementOptions(mode);
    if (!me.options.showLine) {
      options.borderWidth = 0;
    }
    options.segment = me.options.segment;
    me.updateElement(line, undefined, {
      animated: !animationsDisabled,
      options
    }, mode);
    me.updateElements(points, start, count, mode);
  }
  updateElements(points, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const {iScale, vScale, _stacked} = me._cachedMeta;
    const firstOpts = me.resolveDataElementOptions(start, mode);
    const sharedOptions = me.getSharedOptions(firstOpts);
    const includeOptions = me.includeOptions(mode, sharedOptions);
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const spanGaps = me.options.spanGaps;
    const maxGapLength = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
    const directUpdate = me.chart._animationsDisabled || reset || mode === 'none';
    let prevParsed = start > 0 && me.getParsed(start - 1);
    for (let i = start; i < start + count; ++i) {
      const point = points[i];
      const parsed = me.getParsed(i);
      const properties = directUpdate ? point : {};
      const nullData = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(parsed[vAxis]);
      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? me.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
      properties.stop = i > 0 && (parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
      properties.parsed = parsed;
      if (includeOptions) {
        properties.options = sharedOptions || me.resolveDataElementOptions(i, point.active ? 'active' : mode);
      }
      if (!directUpdate) {
        me.updateElement(point, i, properties, mode);
      }
      prevParsed = parsed;
    }
    me.updateSharedOptions(sharedOptions, mode, firstOpts);
  }
  getMaxOverflow() {
    const me = this;
    const meta = me._cachedMeta;
    const dataset = meta.dataset;
    const border = dataset.options && dataset.options.borderWidth || 0;
    const data = meta.data || [];
    if (!data.length) {
      return border;
    }
    const firstPoint = data[0].size(me.resolveDataElementOptions(0));
    const lastPoint = data[data.length - 1].size(me.resolveDataElementOptions(data.length - 1));
    return Math.max(border, firstPoint, lastPoint) / 2;
  }
  draw() {
    const meta = this._cachedMeta;
    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
    super.draw();
  }
}
LineController.id = 'line';
LineController.defaults = {
  datasetElementType: 'line',
  dataElementType: 'point',
  showLine: true,
  spanGaps: false,
};
LineController.overrides = {
  scales: {
    _index_: {
      type: 'category',
    },
    _value_: {
      type: 'linear',
    },
  }
};
function getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
  const pointCount = points.length;
  let start = 0;
  let count = pointCount;
  if (meta._sorted) {
    const {iScale, _parsed} = meta;
    const axis = iScale.axis;
    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();
    if (minDefined) {
      start = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(Math.min(
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(_parsed, iScale.axis, min).lo,
        animationsDisabled ? pointCount : (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(points, axis, iScale.getPixelForValue(min)).lo),
      0, pointCount - 1);
    }
    if (maxDefined) {
      count = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(Math.max(
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(_parsed, iScale.axis, max).hi + 1,
        animationsDisabled ? 0 : (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(points, axis, iScale.getPixelForValue(max)).hi + 1),
      start, pointCount) - start;
    } else {
      count = pointCount - start;
    }
  }
  return {start, count};
}
function scaleRangesChanged(meta) {
  const {xScale, yScale, _scaleRanges} = meta;
  const newRanges = {
    xmin: xScale.min,
    xmax: xScale.max,
    ymin: yScale.min,
    ymax: yScale.max
  };
  if (!_scaleRanges) {
    meta._scaleRanges = newRanges;
    return true;
  }
  const changed = _scaleRanges.xmin !== xScale.min
		|| _scaleRanges.xmax !== xScale.max
		|| _scaleRanges.ymin !== yScale.min
		|| _scaleRanges.ymax !== yScale.max;
  Object.assign(_scaleRanges, newRanges);
  return changed;
}

class PolarAreaController extends DatasetController {
  constructor(chart, datasetIndex) {
    super(chart, datasetIndex);
    this.innerRadius = undefined;
    this.outerRadius = undefined;
  }
  getLabelAndValue(index) {
    const me = this;
    const meta = me._cachedMeta;
    const chart = me.chart;
    const labels = chart.data.labels || [];
    const value = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.n)(meta._parsed[index].r, chart.options.locale);
    return {
      label: labels[index] || '',
      value,
    };
  }
  update(mode) {
    const arcs = this._cachedMeta.data;
    this._updateRadius();
    this.updateElements(arcs, 0, arcs.length, mode);
  }
  _updateRadius() {
    const me = this;
    const chart = me.chart;
    const chartArea = chart.chartArea;
    const opts = chart.options;
    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
    const outerRadius = Math.max(minSize / 2, 0);
    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
    me.outerRadius = outerRadius - (radiusLength * me.index);
    me.innerRadius = me.outerRadius - radiusLength;
  }
  updateElements(arcs, start, count, mode) {
    const me = this;
    const reset = mode === 'reset';
    const chart = me.chart;
    const dataset = me.getDataset();
    const opts = chart.options;
    const animationOpts = opts.animation;
    const scale = me._cachedMeta.rScale;
    const centerX = scale.xCenter;
    const centerY = scale.yCenter;
    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P;
    let angle = datasetStartAngle;
    let i;
    const defaultAngle = 360 / me.countVisibleElements();
    for (i = 0; i < start; ++i) {
      angle += me._computeAngle(i, mode, defaultAngle);
    }
    for (i = start; i < start + count; i++) {
      const arc = arcs[i];
      let startAngle = angle;
      let endAngle = angle + me._computeAngle(i, mode, defaultAngle);
      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(dataset.data[i]) : 0;
      angle = endAngle;
      if (reset) {
        if (animationOpts.animateScale) {
          outerRadius = 0;
        }
        if (animationOpts.animateRotate) {
          startAngle = endAngle = datasetStartAngle;
        }
      }
      const properties = {
        x: centerX,
        y: centerY,
        innerRadius: 0,
        outerRadius,
        startAngle,
        endAngle,
        options: me.resolveDataElementOptions(i, arc.active ? 'active' : mode)
      };
      me.updateElement(arc, i, properties, mode);
    }
  }
  countVisibleElements() {
    const dataset = this.getDataset();
    const meta = this._cachedMeta;
    let count = 0;
    meta.data.forEach((element, index) => {
      if (!isNaN(dataset.data[index]) && this.chart.getDataVisibility(index)) {
        count++;
      }
    });
    return count;
  }
  _computeAngle(index, mode, defaultAngle) {
    return this.chart.getDataVisibility(index)
      ? (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle)
      : 0;
  }
}
PolarAreaController.id = 'polarArea';
PolarAreaController.defaults = {
  dataElementType: 'arc',
  animation: {
    animateRotate: true,
    animateScale: true
  },
  animations: {
    numbers: {
      type: 'number',
      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']
    },
  },
  indexAxis: 'r',
  startAngle: 0,
};
PolarAreaController.overrides = {
  aspectRatio: 1,
  plugins: {
    legend: {
      labels: {
        generateLabels(chart) {
          const data = chart.data;
          if (data.labels.length && data.datasets.length) {
            const {labels: {pointStyle}} = chart.legend.options;
            return data.labels.map((label, i) => {
              const meta = chart.getDatasetMeta(0);
              const style = meta.controller.getStyle(i);
              return {
                text: label,
                fillStyle: style.backgroundColor,
                strokeStyle: style.borderColor,
                lineWidth: style.borderWidth,
                pointStyle: pointStyle,
                hidden: !chart.getDataVisibility(i),
                index: i
              };
            });
          }
          return [];
        }
      },
      onClick(e, legendItem, legend) {
        legend.chart.toggleDataVisibility(legendItem.index);
        legend.chart.update();
      }
    },
    tooltip: {
      callbacks: {
        title() {
          return '';
        },
        label(context) {
          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;
        }
      }
    }
  },
  scales: {
    r: {
      type: 'radialLinear',
      angleLines: {
        display: false
      },
      beginAtZero: true,
      grid: {
        circular: true
      },
      pointLabels: {
        display: false
      },
      startAngle: 0
    }
  }
};

class PieController extends DoughnutController {
}
PieController.id = 'pie';
PieController.defaults = {
  cutout: 0,
  rotation: 0,
  circumference: 360,
  radius: '100%'
};

class RadarController extends DatasetController {
  getLabelAndValue(index) {
    const me = this;
    const vScale = me._cachedMeta.vScale;
    const parsed = me.getParsed(index);
    return {
      label: vScale.getLabels()[index],
      value: '' + vScale.getLabelForValue(parsed[vScale.axis])
    };
  }
  update(mode) {
    const me = this;
    const meta = me._cachedMeta;
    const line = meta.dataset;
    const points = meta.data || [];
    const labels = meta.iScale.getLabels();
    line.points = points;
    if (mode !== 'resize') {
      const options = me.resolveDatasetElementOptions(mode);
      if (!me.options.showLine) {
        options.borderWidth = 0;
      }
      const properties = {
        _loop: true,
        _fullLoop: labels.length === points.length,
        options
      };
      me.updateElement(line, undefined, properties, mode);
    }
    me.updateElements(points, 0, points.length, mode);
  }
  updateElements(points, start, count, mode) {
    const me = this;
    const dataset = me.getDataset();
    const scale = me._cachedMeta.rScale;
    const reset = mode === 'reset';
    for (let i = start; i < start + count; i++) {
      const point = points[i];
      const options = me.resolveDataElementOptions(i, point.active ? 'active' : mode);
      const pointPosition = scale.getPointPositionForValue(i, dataset.data[i]);
      const x = reset ? scale.xCenter : pointPosition.x;
      const y = reset ? scale.yCenter : pointPosition.y;
      const properties = {
        x,
        y,
        angle: pointPosition.angle,
        skip: isNaN(x) || isNaN(y),
        options
      };
      me.updateElement(point, i, properties, mode);
    }
  }
}
RadarController.id = 'radar';
RadarController.defaults = {
  datasetElementType: 'line',
  dataElementType: 'point',
  indexAxis: 'r',
  showLine: true,
  elements: {
    line: {
      fill: 'start'
    }
  },
};
RadarController.overrides = {
  aspectRatio: 1,
  scales: {
    r: {
      type: 'radialLinear',
    }
  }
};

class ScatterController extends LineController {
}
ScatterController.id = 'scatter';
ScatterController.defaults = {
  showLine: false,
  fill: false
};
ScatterController.overrides = {
  interaction: {
    mode: 'point'
  },
  plugins: {
    tooltip: {
      callbacks: {
        title() {
          return '';
        },
        label(item) {
          return '(' + item.label + ', ' + item.formattedValue + ')';
        }
      }
    }
  },
  scales: {
    x: {
      type: 'linear'
    },
    y: {
      type: 'linear'
    }
  }
};

var controllers = /*#__PURE__*/Object.freeze({
__proto__: null,
BarController: BarController,
BubbleController: BubbleController,
DoughnutController: DoughnutController,
LineController: LineController,
PolarAreaController: PolarAreaController,
PieController: PieController,
RadarController: RadarController,
ScatterController: ScatterController
});

function abstract() {
  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');
}
class DateAdapter {
  constructor(options) {
    this.options = options || {};
  }
  formats() {
    return abstract();
  }
  parse(value, format) {
    return abstract();
  }
  format(timestamp, format) {
    return abstract();
  }
  add(timestamp, amount, unit) {
    return abstract();
  }
  diff(a, b, unit) {
    return abstract();
  }
  startOf(timestamp, unit, weekday) {
    return abstract();
  }
  endOf(timestamp, unit) {
    return abstract();
  }
}
DateAdapter.override = function(members) {
  Object.assign(DateAdapter.prototype, members);
};
var adapters = {
  _date: DateAdapter
};

function getRelativePosition(e, chart) {
  if ('native' in e) {
    return {
      x: e.x,
      y: e.y
    };
  }
  return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.x)(e, chart);
}
function evaluateAllVisibleItems(chart, handler) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  let index, data, element;
  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
    ({index, data} = metasets[i]);
    for (let j = 0, jlen = data.length; j < jlen; ++j) {
      element = data[j];
      if (!element.skip) {
        handler(element, index, j);
      }
    }
  }
}
function binarySearch(metaset, axis, value, intersect) {
  const {controller, data, _sorted} = metaset;
  const iScale = controller._cachedMeta.iScale;
  if (iScale && axis === iScale.axis && _sorted && data.length) {
    const lookupMethod = iScale._reversePixels ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.z : _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w;
    if (!intersect) {
      return lookupMethod(data, axis, value);
    } else if (controller._sharedOptions) {
      const el = data[0];
      const range = typeof el.getRange === 'function' && el.getRange(axis);
      if (range) {
        const start = lookupMethod(data, axis, value - range);
        const end = lookupMethod(data, axis, value + range);
        return {lo: start.lo, hi: end.hi};
      }
    }
  }
  return {lo: 0, hi: data.length - 1};
}
function optimizedEvaluateItems(chart, axis, position, handler, intersect) {
  const metasets = chart.getSortedVisibleDatasetMetas();
  const value = position[axis];
  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {
    const {index, data} = metasets[i];
    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);
    for (let j = lo; j <= hi; ++j) {
      const element = data[j];
      if (!element.skip) {
        handler(element, index, j);
      }
    }
  }
}
function getDistanceMetricForAxis(axis) {
  const useX = axis.indexOf('x') !== -1;
  const useY = axis.indexOf('y') !== -1;
  return function(pt1, pt2) {
    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  };
}
function getIntersectItems(chart, position, axis, useFinalPosition) {
  const items = [];
  if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.y)(position, chart.chartArea, chart._minPadding)) {
    return items;
  }
  const evaluationFunc = function(element, datasetIndex, index) {
    if (element.inRange(position.x, position.y, useFinalPosition)) {
      items.push({element, datasetIndex, index});
    }
  };
  optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);
  return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition) {
  const distanceMetric = getDistanceMetricForAxis(axis);
  let minDistance = Number.POSITIVE_INFINITY;
  let items = [];
  if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.y)(position, chart.chartArea, chart._minPadding)) {
    return items;
  }
  const evaluationFunc = function(element, datasetIndex, index) {
    if (intersect && !element.inRange(position.x, position.y, useFinalPosition)) {
      return;
    }
    const center = element.getCenterPoint(useFinalPosition);
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.y)(center, chart.chartArea, chart._minPadding) && !element.inRange(position.x, position.y, useFinalPosition)) {
      return;
    }
    const distance = distanceMetric(position, center);
    if (distance < minDistance) {
      items = [{element, datasetIndex, index}];
      minDistance = distance;
    } else if (distance === minDistance) {
      items.push({element, datasetIndex, index});
    }
  };
  optimizedEvaluateItems(chart, axis, position, evaluationFunc);
  return items;
}
function getAxisItems(chart, e, options, useFinalPosition) {
  const position = getRelativePosition(e, chart);
  const items = [];
  const axis = options.axis;
  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';
  let intersectsItem = false;
  evaluateAllVisibleItems(chart, (element, datasetIndex, index) => {
    if (element[rangeMethod](position[axis], useFinalPosition)) {
      items.push({element, datasetIndex, index});
    }
    if (element.inRange(position.x, position.y, useFinalPosition)) {
      intersectsItem = true;
    }
  });
  if (options.intersect && !intersectsItem) {
    return [];
  }
  return items;
}
var Interaction = {
  modes: {
    index(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || 'x';
      const items = options.intersect
        ? getIntersectItems(chart, position, axis, useFinalPosition)
        : getNearestItems(chart, position, axis, false, useFinalPosition);
      const elements = [];
      if (!items.length) {
        return [];
      }
      chart.getSortedVisibleDatasetMetas().forEach((meta) => {
        const index = items[0].index;
        const element = meta.data[index];
        if (element && !element.skip) {
          elements.push({element, datasetIndex: meta.index, index});
        }
      });
      return elements;
    },
    dataset(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || 'xy';
      let items = options.intersect
        ? getIntersectItems(chart, position, axis, useFinalPosition) :
        getNearestItems(chart, position, axis, false, useFinalPosition);
      if (items.length > 0) {
        const datasetIndex = items[0].datasetIndex;
        const data = chart.getDatasetMeta(datasetIndex).data;
        items = [];
        for (let i = 0; i < data.length; ++i) {
          items.push({element: data[i], datasetIndex, index: i});
        }
      }
      return items;
    },
    point(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || 'xy';
      return getIntersectItems(chart, position, axis, useFinalPosition);
    },
    nearest(chart, e, options, useFinalPosition) {
      const position = getRelativePosition(e, chart);
      const axis = options.axis || 'xy';
      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);
    },
    x(chart, e, options, useFinalPosition) {
      options.axis = 'x';
      return getAxisItems(chart, e, options, useFinalPosition);
    },
    y(chart, e, options, useFinalPosition) {
      options.axis = 'y';
      return getAxisItems(chart, e, options, useFinalPosition);
    }
  }
};

const STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];
function filterByPosition(array, position) {
  return array.filter(v => v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
  return array.sort((a, b) => {
    const v0 = reverse ? b : a;
    const v1 = reverse ? a : b;
    return v0.weight === v1.weight ?
      v0.index - v1.index :
      v0.weight - v1.weight;
  });
}
function wrapBoxes(boxes) {
  const layoutBoxes = [];
  let i, ilen, box, pos, stack, stackWeight;
  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    box = boxes[i];
    ({position: pos, options: {stack, stackWeight = 1}} = box);
    layoutBoxes.push({
      index: i,
      box,
      pos,
      horizontal: box.isHorizontal(),
      weight: box.weight,
      stack: stack && (pos + stack),
      stackWeight
    });
  }
  return layoutBoxes;
}
function buildStacks(layouts) {
  const stacks = {};
  for (const wrap of layouts) {
    const {stack, pos, stackWeight} = wrap;
    if (!stack || !STATIC_POSITIONS.includes(pos)) {
      continue;
    }
    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});
    _stack.count++;
    _stack.weight += stackWeight;
  }
  return stacks;
}
function setLayoutDims(layouts, params) {
  const stacks = buildStacks(layouts);
  const {vBoxMaxWidth, hBoxMaxHeight} = params;
  let i, ilen, layout;
  for (i = 0, ilen = layouts.length; i < ilen; ++i) {
    layout = layouts[i];
    const {fullSize} = layout.box;
    const stack = stacks[layout.stack];
    const factor = stack && layout.stackWeight / stack.weight;
    if (layout.horizontal) {
      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
      layout.height = hBoxMaxHeight;
    } else {
      layout.width = vBoxMaxWidth;
      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
    }
  }
  return stacks;
}
function buildLayoutBoxes(boxes) {
  const layoutBoxes = wrapBoxes(boxes);
  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);
  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));
  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');
  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');
  return {
    fullSize,
    leftAndTop: left.concat(top),
    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
    chartArea: filterByPosition(layoutBoxes, 'chartArea'),
    vertical: left.concat(right).concat(centerVertical),
    horizontal: top.concat(bottom).concat(centerHorizontal)
  };
}
function getCombinedMax(maxPadding, chartArea, a, b) {
  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function updateMaxPadding(maxPadding, boxPadding) {
  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
  const {pos, box} = layout;
  const maxPadding = chartArea.maxPadding;
  if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(pos)) {
    if (layout.size) {
      chartArea[pos] -= layout.size;
    }
    const stack = stacks[layout.stack] || {size: 0, count: 1};
    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
    layout.size = stack.size / stack.count;
    chartArea[pos] += layout.size;
  }
  if (box.getPadding) {
    updateMaxPadding(maxPadding, box.getPadding());
  }
  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));
  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));
  const widthChanged = newWidth !== chartArea.w;
  const heightChanged = newHeight !== chartArea.h;
  chartArea.w = newWidth;
  chartArea.h = newHeight;
  return layout.horizontal
    ? {same: widthChanged, other: heightChanged}
    : {same: heightChanged, other: widthChanged};
}
function handleMaxPadding(chartArea) {
  const maxPadding = chartArea.maxPadding;
  function updatePos(pos) {
    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    chartArea[pos] += change;
    return change;
  }
  chartArea.y += updatePos('top');
  chartArea.x += updatePos('left');
  updatePos('right');
  updatePos('bottom');
}
function getMargins(horizontal, chartArea) {
  const maxPadding = chartArea.maxPadding;
  function marginForPositions(positions) {
    const margin = {left: 0, top: 0, right: 0, bottom: 0};
    positions.forEach((pos) => {
      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    });
    return margin;
  }
  return horizontal
    ? marginForPositions(['left', 'right'])
    : marginForPositions(['top', 'bottom']);
}
function fitBoxes(boxes, chartArea, params, stacks) {
  const refitBoxes = [];
  let i, ilen, layout, box, refit, changed;
  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {
    layout = boxes[i];
    box = layout.box;
    box.update(
      layout.width || chartArea.w,
      layout.height || chartArea.h,
      getMargins(layout.horizontal, chartArea)
    );
    const {same, other} = updateDims(chartArea, params, layout, stacks);
    refit |= same && refitBoxes.length;
    changed = changed || other;
    if (!box.fullSize) {
      refitBoxes.push(layout);
    }
  }
  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
  box.top = top;
  box.left = left;
  box.right = left + width;
  box.bottom = top + height;
  box.width = width;
  box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
  const userPadding = params.padding;
  let {x, y} = chartArea;
  for (const layout of boxes) {
    const box = layout.box;
    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};
    const weight = (layout.stackWeight / stack.weight) || 1;
    if (layout.horizontal) {
      const width = chartArea.w * weight;
      const height = stack.size || box.height;
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(stack.start)) {
        y = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
      } else {
        setBoxDims(box, chartArea.left + stack.placed, y, width, height);
      }
      stack.start = y;
      stack.placed += width;
      y = box.bottom;
    } else {
      const height = chartArea.h * weight;
      const width = stack.size || box.width;
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(stack.start)) {
        x = stack.start;
      }
      if (box.fullSize) {
        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
      } else {
        setBoxDims(box, x, chartArea.top + stack.placed, width, height);
      }
      stack.start = x;
      stack.placed += height;
      x = box.right;
    }
  }
  chartArea.x = x;
  chartArea.y = y;
}
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.set('layout', {
  padding: {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
});
var layouts = {
  addBox(chart, item) {
    if (!chart.boxes) {
      chart.boxes = [];
    }
    item.fullSize = item.fullSize || false;
    item.position = item.position || 'top';
    item.weight = item.weight || 0;
    item._layers = item._layers || function() {
      return [{
        z: 0,
        draw(chartArea) {
          item.draw(chartArea);
        }
      }];
    };
    chart.boxes.push(item);
  },
  removeBox(chart, layoutItem) {
    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    if (index !== -1) {
      chart.boxes.splice(index, 1);
    }
  },
  configure(chart, item, options) {
    item.fullSize = options.fullSize;
    item.position = options.position;
    item.weight = options.weight;
  },
  update(chart, width, height, minPadding) {
    if (!chart) {
      return;
    }
    const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(chart.options.layout.padding);
    const availableWidth = Math.max(width - padding.width, 0);
    const availableHeight = Math.max(height - padding.height, 0);
    const boxes = buildLayoutBoxes(chart.boxes);
    const verticalBoxes = boxes.vertical;
    const horizontalBoxes = boxes.horizontal;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(chart.boxes, box => {
      if (typeof box.beforeLayout === 'function') {
        box.beforeLayout();
      }
    });
    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>
      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
    const params = Object.freeze({
      outerWidth: width,
      outerHeight: height,
      padding,
      availableWidth,
      availableHeight,
      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
      hBoxMaxHeight: availableHeight / 2
    });
    const maxPadding = Object.assign({}, padding);
    updateMaxPadding(maxPadding, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(minPadding));
    const chartArea = Object.assign({
      maxPadding,
      w: availableWidth,
      h: availableHeight,
      x: padding.left,
      y: padding.top
    }, padding);
    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
    fitBoxes(boxes.fullSize, chartArea, params, stacks);
    fitBoxes(verticalBoxes, chartArea, params, stacks);
    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {
      fitBoxes(verticalBoxes, chartArea, params, stacks);
    }
    handleMaxPadding(chartArea);
    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
    chartArea.x += chartArea.w;
    chartArea.y += chartArea.h;
    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
    chart.chartArea = {
      left: chartArea.left,
      top: chartArea.top,
      right: chartArea.left + chartArea.w,
      bottom: chartArea.top + chartArea.h,
      height: chartArea.h,
      width: chartArea.w,
    };
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(boxes.chartArea, (layout) => {
      const box = layout.box;
      Object.assign(box, chart.chartArea);
      box.update(chartArea.w, chartArea.h);
    });
  }
};

class BasePlatform {
  acquireContext(canvas, aspectRatio) {}
  releaseContext(context) {
    return false;
  }
  addEventListener(chart, type, listener) {}
  removeEventListener(chart, type, listener) {}
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(element, width, height, aspectRatio) {
    width = Math.max(0, width || element.width);
    height = height || element.height;
    return {
      width,
      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
    };
  }
  isAttached(canvas) {
    return true;
  }
}

class BasicPlatform extends BasePlatform {
  acquireContext(item) {
    return item && item.getContext && item.getContext('2d') || null;
  }
}

const EXPANDO_KEY = '$chartjs';
const EVENT_TYPES = {
  touchstart: 'mousedown',
  touchmove: 'mousemove',
  touchend: 'mouseup',
  pointerenter: 'mouseenter',
  pointerdown: 'mousedown',
  pointermove: 'mousemove',
  pointerup: 'mouseup',
  pointerleave: 'mouseout',
  pointerout: 'mouseout'
};
const isNullOrEmpty = value => value === null || value === '';
function initCanvas(canvas, aspectRatio) {
  const style = canvas.style;
  const renderHeight = canvas.getAttribute('height');
  const renderWidth = canvas.getAttribute('width');
  canvas[EXPANDO_KEY] = {
    initial: {
      height: renderHeight,
      width: renderWidth,
      style: {
        display: style.display,
        height: style.height,
        width: style.width
      }
    }
  };
  style.display = style.display || 'block';
  style.boxSizing = style.boxSizing || 'border-box';
  if (isNullOrEmpty(renderWidth)) {
    const displayWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(canvas, 'width');
    if (displayWidth !== undefined) {
      canvas.width = displayWidth;
    }
  }
  if (isNullOrEmpty(renderHeight)) {
    if (canvas.style.height === '') {
      canvas.height = canvas.width / (aspectRatio || 2);
    } else {
      const displayHeight = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.E)(canvas, 'height');
      if (displayHeight !== undefined) {
        canvas.height = displayHeight;
      }
    }
  }
  return canvas;
}
const eventListenerOptions = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.G ? {passive: true} : false;
function addListener(node, type, listener) {
  node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(chart, type, listener) {
  chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}
function fromNativeEvent(event, chart) {
  const type = EVENT_TYPES[event.type] || event.type;
  const {x, y} = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.x)(event, chart);
  return {
    type,
    chart,
    native: event,
    x: x !== undefined ? x : null,
    y: y !== undefined ? y : null,
  };
}
function createAttachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.D)(canvas);
  const element = container || canvas;
  const observer = new MutationObserver(entries => {
    const parent = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.D)(element);
    entries.forEach(entry => {
      for (let i = 0; i < entry.addedNodes.length; i++) {
        const added = entry.addedNodes[i];
        if (added === element || added === parent) {
          listener(entry.target);
        }
      }
    });
  });
  observer.observe(document, {childList: true, subtree: true});
  return observer;
}
function createDetachObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.D)(canvas);
  if (!container) {
    return;
  }
  const observer = new MutationObserver(entries => {
    entries.forEach(entry => {
      for (let i = 0; i < entry.removedNodes.length; i++) {
        if (entry.removedNodes[i] === canvas) {
          listener();
          break;
        }
      }
    });
  });
  observer.observe(container, {childList: true});
  return observer;
}
const drpListeningCharts = new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
  const dpr = window.devicePixelRatio;
  if (dpr === oldDevicePixelRatio) {
    return;
  }
  oldDevicePixelRatio = dpr;
  drpListeningCharts.forEach((resize, chart) => {
    if (chart.currentDevicePixelRatio !== dpr) {
      resize();
    }
  });
}
function listenDevicePixelRatioChanges(chart, resize) {
  if (!drpListeningCharts.size) {
    window.addEventListener('resize', onWindowResize);
  }
  drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
  drpListeningCharts.delete(chart);
  if (!drpListeningCharts.size) {
    window.removeEventListener('resize', onWindowResize);
  }
}
function createResizeObserver(chart, type, listener) {
  const canvas = chart.canvas;
  const container = canvas && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.D)(canvas);
  if (!container) {
    return;
  }
  const resize = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)((width, height) => {
    const w = container.clientWidth;
    listener(width, height);
    if (w < container.clientWidth) {
      listener();
    }
  }, window);
  const observer = new ResizeObserver(entries => {
    const entry = entries[0];
    const width = entry.contentRect.width;
    const height = entry.contentRect.height;
    if (width === 0 && height === 0) {
      return;
    }
    resize(width, height);
  });
  observer.observe(container);
  listenDevicePixelRatioChanges(chart, resize);
  return observer;
}
function releaseObserver(chart, type, observer) {
  if (observer) {
    observer.disconnect();
  }
  if (type === 'resize') {
    unlistenDevicePixelRatioChanges(chart);
  }
}
function createProxyAndListen(chart, type, listener) {
  const canvas = chart.canvas;
  const proxy = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.F)((event) => {
    if (chart.ctx !== null) {
      listener(fromNativeEvent(event, chart));
    }
  }, chart, (args) => {
    const event = args[0];
    return [event, event.offsetX, event.offsetY];
  });
  addListener(canvas, type, proxy);
  return proxy;
}
class DomPlatform extends BasePlatform {
  acquireContext(canvas, aspectRatio) {
    const context = canvas && canvas.getContext && canvas.getContext('2d');
    if (context && context.canvas === canvas) {
      initCanvas(canvas, aspectRatio);
      return context;
    }
    return null;
  }
  releaseContext(context) {
    const canvas = context.canvas;
    if (!canvas[EXPANDO_KEY]) {
      return false;
    }
    const initial = canvas[EXPANDO_KEY].initial;
    ['height', 'width'].forEach((prop) => {
      const value = initial[prop];
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(value)) {
        canvas.removeAttribute(prop);
      } else {
        canvas.setAttribute(prop, value);
      }
    });
    const style = initial.style || {};
    Object.keys(style).forEach((key) => {
      canvas.style[key] = style[key];
    });
    canvas.width = canvas.width;
    delete canvas[EXPANDO_KEY];
    return true;
  }
  addEventListener(chart, type, listener) {
    this.removeEventListener(chart, type);
    const proxies = chart.$proxies || (chart.$proxies = {});
    const handlers = {
      attach: createAttachObserver,
      detach: createDetachObserver,
      resize: createResizeObserver
    };
    const handler = handlers[type] || createProxyAndListen;
    proxies[type] = handler(chart, type, listener);
  }
  removeEventListener(chart, type) {
    const proxies = chart.$proxies || (chart.$proxies = {});
    const proxy = proxies[type];
    if (!proxy) {
      return;
    }
    const handlers = {
      attach: releaseObserver,
      detach: releaseObserver,
      resize: releaseObserver
    };
    const handler = handlers[type] || removeListener;
    handler(chart, type, proxy);
    proxies[type] = undefined;
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(canvas, width, height, aspectRatio) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.C)(canvas, width, height, aspectRatio);
  }
  isAttached(canvas) {
    const container = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.D)(canvas);
    return !!(container && container.isConnected);
  }
}

function _detectPlatform(canvas) {
  if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.I)() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {
    return BasicPlatform;
  }
  return DomPlatform;
}

class Element {
  constructor() {
    this.x = undefined;
    this.y = undefined;
    this.active = false;
    this.options = undefined;
    this.$animations = undefined;
  }
  tooltipPosition(useFinalPosition) {
    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
    return {x, y};
  }
  hasValue() {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(this.x) && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(this.y);
  }
  getProps(props, final) {
    const me = this;
    const anims = this.$animations;
    if (!final || !anims) {
      return me;
    }
    const ret = {};
    props.forEach(prop => {
      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : me[prop];
    });
    return ret;
  }
}
Element.defaults = {};
Element.defaultRoutes = undefined;

const formatters = {
  values(value) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(value) ? value : '' + value;
  },
  numeric(tickValue, index, ticks) {
    if (tickValue === 0) {
      return '0';
    }
    const locale = this.chart.options.locale;
    let notation;
    let delta = tickValue;
    if (ticks.length > 1) {
      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
      if (maxTick < 1e-4 || maxTick > 1e+15) {
        notation = 'scientific';
      }
      delta = calculateDelta(tickValue, ticks);
    }
    const logDelta = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(Math.abs(delta));
    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};
    Object.assign(options, this.options.ticks.format);
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.n)(tickValue, locale, options);
  },
  logarithmic(tickValue, index, ticks) {
    if (tickValue === 0) {
      return '0';
    }
    const remain = tickValue / (Math.pow(10, Math.floor((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(tickValue))));
    if (remain === 1 || remain === 2 || remain === 5) {
      return formatters.numeric.call(this, tickValue, index, ticks);
    }
    return '';
  }
};
function calculateDelta(tickValue, ticks) {
  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
    delta = tickValue - Math.floor(tickValue);
  }
  return delta;
}
var Ticks = {formatters};

_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.set('scale', {
  display: true,
  offset: false,
  reverse: false,
  beginAtZero: false,
  bounds: 'ticks',
  grace: 0,
  grid: {
    display: true,
    lineWidth: 1,
    drawBorder: true,
    drawOnChartArea: true,
    drawTicks: true,
    tickLength: 8,
    tickWidth: (_ctx, options) => options.lineWidth,
    tickColor: (_ctx, options) => options.color,
    offset: false,
    borderDash: [],
    borderDashOffset: 0.0,
    borderWidth: 1
  },
  title: {
    display: false,
    text: '',
    padding: {
      top: 4,
      bottom: 4
    }
  },
  ticks: {
    minRotation: 0,
    maxRotation: 50,
    mirror: false,
    textStrokeWidth: 0,
    textStrokeColor: '',
    padding: 3,
    display: true,
    autoSkip: true,
    autoSkipPadding: 3,
    labelOffset: 0,
    callback: Ticks.formatters.values,
    minor: {},
    major: {},
    align: 'center',
    crossAlign: 'near',
    showLabelBackdrop: false,
    backdropColor: 'rgba(255, 255, 255, 0.75)',
    backdropPadding: 2,
  }
});
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.ticks', 'color', '', 'color');
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.grid', 'color', '', 'borderColor');
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.grid', 'borderColor', '', 'borderColor');
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.route('scale.title', 'color', '', 'color');
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.describe('scale', {
  _fallback: false,
  _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
  _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',
});
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.describe('scales', {
  _fallback: 'scale',
});
_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.describe('scale.ticks', {
  _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',
  _indexable: (name) => name !== 'backdropPadding',
});

function autoSkip(scale, ticks) {
  const tickOpts = scale.options.ticks;
  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);
  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  const numMajorIndices = majorIndices.length;
  const first = majorIndices[0];
  const last = majorIndices[numMajorIndices - 1];
  const newTicks = [];
  if (numMajorIndices > ticksLimit) {
    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
    return newTicks;
  }
  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
  if (numMajorIndices > 0) {
    let i, ilen;
    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
    skip(ticks, newTicks, spacing, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
    }
    skip(ticks, newTicks, spacing, last, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    return newTicks;
  }
  skip(ticks, newTicks, spacing);
  return newTicks;
}
function determineMaxTicks(scale) {
  const offset = scale.options.offset;
  const tickLength = scale._tickSize();
  const maxScale = scale._length / tickLength + (offset ? 0 : 1);
  const maxChart = scale._maxLength / tickLength;
  return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
  const evenMajorSpacing = getEvenSpacing(majorIndices);
  const spacing = ticks.length / ticksLimit;
  if (!evenMajorSpacing) {
    return Math.max(spacing, 1);
  }
  const factors = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.K)(evenMajorSpacing);
  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {
    const factor = factors[i];
    if (factor > spacing) {
      return factor;
    }
  }
  return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
  const result = [];
  let i, ilen;
  for (i = 0, ilen = ticks.length; i < ilen; i++) {
    if (ticks[i].major) {
      result.push(i);
    }
  }
  return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
  let count = 0;
  let next = majorIndices[0];
  let i;
  spacing = Math.ceil(spacing);
  for (i = 0; i < ticks.length; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = majorIndices[count * spacing];
    }
  }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
  const start = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(majorStart, 0);
  const end = Math.min((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(majorEnd, ticks.length), ticks.length);
  let count = 0;
  let length, i, next;
  spacing = Math.ceil(spacing);
  if (majorEnd) {
    length = majorEnd - majorStart;
    spacing = length / Math.floor(length / spacing);
  }
  next = start;
  while (next < 0) {
    count++;
    next = Math.round(start + count * spacing);
  }
  for (i = Math.max(start, 0); i < end; i++) {
    if (i === next) {
      newTicks.push(ticks[i]);
      count++;
      next = Math.round(start + count * spacing);
    }
  }
}
function getEvenSpacing(arr) {
  const len = arr.length;
  let i, diff;
  if (len < 2) {
    return false;
  }
  for (diff = arr[0], i = 1; i < len; ++i) {
    if (arr[i] - arr[i - 1] !== diff) {
      return false;
    }
  }
  return diff;
}

const reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;
const offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;
function sample(arr, numItems) {
  const result = [];
  const increment = arr.length / numItems;
  const len = arr.length;
  let i = 0;
  for (; i < len; i += increment) {
    result.push(arr[Math.floor(i)]);
  }
  return result;
}
function getPixelForGridLine(scale, index, offsetGridLines) {
  const length = scale.ticks.length;
  const validIndex = Math.min(index, length - 1);
  const start = scale._startPixel;
  const end = scale._endPixel;
  const epsilon = 1e-6;
  let lineValue = scale.getPixelForTick(validIndex);
  let offset;
  if (offsetGridLines) {
    if (length === 1) {
      offset = Math.max(lineValue - start, end - lineValue);
    } else if (index === 0) {
      offset = (scale.getPixelForTick(1) - lineValue) / 2;
    } else {
      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
    }
    lineValue += validIndex < index ? offset : -offset;
    if (lineValue < start - epsilon || lineValue > end + epsilon) {
      return;
    }
  }
  return lineValue;
}
function garbageCollect(caches, length) {
  (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(caches, (cache) => {
    const gc = cache.gc;
    const gcLen = gc.length / 2;
    let i;
    if (gcLen > length) {
      for (i = 0; i < gcLen; ++i) {
        delete cache.data[gc[i]];
      }
      gc.splice(0, gcLen);
    }
  });
}
function getTickMarkLength(options) {
  return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
  if (!options.display) {
    return 0;
  }
  const font = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(options.font, fallback);
  const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(options.padding);
  const lines = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(options.text) ? options.text.length : 1;
  return (lines * font.lineHeight) + padding.height;
}
function createScaleContext(parent, scale) {
  return Object.assign(Object.create(parent), {
    scale,
    type: 'scale'
  });
}
function createTickContext(parent, index, tick) {
  return Object.assign(Object.create(parent), {
    tick,
    index,
    type: 'tick'
  });
}
function titleAlign(align, position, reverse) {
  let ret = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Y)(align);
  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {
    ret = reverseAlign(ret);
  }
  return ret;
}
function titleArgs(scale, offset, position, align) {
  const {top, left, bottom, right, chart} = scale;
  const {chartArea, scales} = chart;
  let rotation = 0;
  let maxWidth, titleX, titleY;
  const height = bottom - top;
  const width = right - left;
  if (scale.isHorizontal()) {
    titleX = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, left, right);
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
    } else if (position === 'center') {
      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
    } else {
      titleY = offsetFromEdge(scale, position, offset);
    }
    maxWidth = right - left;
  } else {
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
      const positionAxisID = Object.keys(position)[0];
      const value = position[positionAxisID];
      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
    } else if (position === 'center') {
      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
    } else {
      titleX = offsetFromEdge(scale, position, offset);
    }
    titleY = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, bottom, top);
    rotation = position === 'left' ? -_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H : _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H;
  }
  return {titleX, titleY, maxWidth, rotation};
}
class Scale extends Element {
  constructor(cfg) {
    super();
    this.id = cfg.id;
    this.type = cfg.type;
    this.options = undefined;
    this.ctx = cfg.ctx;
    this.chart = cfg.chart;
    this.top = undefined;
    this.bottom = undefined;
    this.left = undefined;
    this.right = undefined;
    this.width = undefined;
    this.height = undefined;
    this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    };
    this.maxWidth = undefined;
    this.maxHeight = undefined;
    this.paddingTop = undefined;
    this.paddingBottom = undefined;
    this.paddingLeft = undefined;
    this.paddingRight = undefined;
    this.axis = undefined;
    this.labelRotation = undefined;
    this.min = undefined;
    this.max = undefined;
    this._range = undefined;
    this.ticks = [];
    this._gridLineItems = null;
    this._labelItems = null;
    this._labelSizes = null;
    this._length = 0;
    this._maxLength = 0;
    this._longestTextCache = {};
    this._startPixel = undefined;
    this._endPixel = undefined;
    this._reversePixels = false;
    this._userMax = undefined;
    this._userMin = undefined;
    this._suggestedMax = undefined;
    this._suggestedMin = undefined;
    this._ticksLength = 0;
    this._borderValue = 0;
    this._cache = {};
    this._dataLimitsCached = false;
    this.$context = undefined;
  }
  init(options) {
    const me = this;
    me.options = options.setContext(me.getContext());
    me.axis = options.axis;
    me._userMin = me.parse(options.min);
    me._userMax = me.parse(options.max);
    me._suggestedMin = me.parse(options.suggestedMin);
    me._suggestedMax = me.parse(options.suggestedMax);
  }
  parse(raw, index) {
    return raw;
  }
  getUserBounds() {
    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;
    _userMin = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(_userMin, Number.POSITIVE_INFINITY);
    _userMax = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(_userMax, Number.NEGATIVE_INFINITY);
    _suggestedMin = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(_suggestedMin, Number.POSITIVE_INFINITY);
    _suggestedMax = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(_suggestedMax, Number.NEGATIVE_INFINITY);
    return {
      min: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(_userMin, _suggestedMin),
      max: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(_userMax, _suggestedMax),
      minDefined: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(_userMin),
      maxDefined: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(_userMax)
    };
  }
  getMinMax(canStack) {
    const me = this;
    let {min, max, minDefined, maxDefined} = me.getUserBounds();
    let range;
    if (minDefined && maxDefined) {
      return {min, max};
    }
    const metas = me.getMatchingVisibleMetas();
    for (let i = 0, ilen = metas.length; i < ilen; ++i) {
      range = metas[i].controller.getMinMax(me, canStack);
      if (!minDefined) {
        min = Math.min(min, range.min);
      }
      if (!maxDefined) {
        max = Math.max(max, range.max);
      }
    }
    return {
      min: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(min, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(max, min)),
      max: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(max, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(min, max))
    };
  }
  getPadding() {
    const me = this;
    return {
      left: me.paddingLeft || 0,
      top: me.paddingTop || 0,
      right: me.paddingRight || 0,
      bottom: me.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const data = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  }
  beforeLayout() {
    this._cache = {};
    this._dataLimitsCached = false;
  }
  beforeUpdate() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.beforeUpdate, [this]);
  }
  update(maxWidth, maxHeight, margins) {
    const me = this;
    const tickOpts = me.options.ticks;
    const sampleSize = tickOpts.sampleSize;
    me.beforeUpdate();
    me.maxWidth = maxWidth;
    me.maxHeight = maxHeight;
    me._margins = margins = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, margins);
    me.ticks = null;
    me._labelSizes = null;
    me._gridLineItems = null;
    me._labelItems = null;
    me.beforeSetDimensions();
    me.setDimensions();
    me.afterSetDimensions();
    me._maxLength = me.isHorizontal()
      ? me.width + margins.left + margins.right
      : me.height + margins.top + margins.bottom;
    if (!me._dataLimitsCached) {
      me.beforeDataLimits();
      me.determineDataLimits();
      me.afterDataLimits();
      me._range = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.N)(me, me.options.grace);
      me._dataLimitsCached = true;
    }
    me.beforeBuildTicks();
    me.ticks = me.buildTicks() || [];
    me.afterBuildTicks();
    const samplingEnabled = sampleSize < me.ticks.length;
    me._convertTicksToLabels(samplingEnabled ? sample(me.ticks, sampleSize) : me.ticks);
    me.configure();
    me.beforeCalculateLabelRotation();
    me.calculateLabelRotation();
    me.afterCalculateLabelRotation();
    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {
      me.ticks = autoSkip(me, me.ticks);
      me._labelSizes = null;
    }
    if (samplingEnabled) {
      me._convertTicksToLabels(me.ticks);
    }
    me.beforeFit();
    me.fit();
    me.afterFit();
    me.afterUpdate();
  }
  configure() {
    const me = this;
    let reversePixels = me.options.reverse;
    let startPixel, endPixel;
    if (me.isHorizontal()) {
      startPixel = me.left;
      endPixel = me.right;
    } else {
      startPixel = me.top;
      endPixel = me.bottom;
      reversePixels = !reversePixels;
    }
    me._startPixel = startPixel;
    me._endPixel = endPixel;
    me._reversePixels = reversePixels;
    me._length = endPixel - startPixel;
    me._alignToPixels = me.options.alignToPixels;
  }
  afterUpdate() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.afterUpdate, [this]);
  }
  beforeSetDimensions() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.beforeSetDimensions, [this]);
  }
  setDimensions() {
    const me = this;
    if (me.isHorizontal()) {
      me.width = me.maxWidth;
      me.left = 0;
      me.right = me.width;
    } else {
      me.height = me.maxHeight;
      me.top = 0;
      me.bottom = me.height;
    }
    me.paddingLeft = 0;
    me.paddingTop = 0;
    me.paddingRight = 0;
    me.paddingBottom = 0;
  }
  afterSetDimensions() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.afterSetDimensions, [this]);
  }
  _callHooks(name) {
    const me = this;
    me.chart.notifyPlugins(name, me.getContext());
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(me.options[name], [me]);
  }
  beforeDataLimits() {
    this._callHooks('beforeDataLimits');
  }
  determineDataLimits() {}
  afterDataLimits() {
    this._callHooks('afterDataLimits');
  }
  beforeBuildTicks() {
    this._callHooks('beforeBuildTicks');
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks('afterBuildTicks');
  }
  beforeTickToLabelConversion() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.beforeTickToLabelConversion, [this]);
  }
  generateTickLabels(ticks) {
    const me = this;
    const tickOpts = me.options.ticks;
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      tick = ticks[i];
      tick.label = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(tickOpts.callback, [tick.value, i, ticks], me);
    }
  }
  afterTickToLabelConversion() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.afterTickToLabelConversion, [this]);
  }
  beforeCalculateLabelRotation() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.beforeCalculateLabelRotation, [this]);
  }
  calculateLabelRotation() {
    const me = this;
    const options = me.options;
    const tickOpts = options.ticks;
    const numTicks = me.ticks.length;
    const minRotation = tickOpts.minRotation || 0;
    const maxRotation = tickOpts.maxRotation;
    let labelRotation = minRotation;
    let tickWidth, maxHeight, maxLabelDiagonal;
    if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
      me.labelRotation = minRotation;
      return;
    }
    const labelSizes = me._getLabelSizes();
    const maxLabelWidth = labelSizes.widest.width;
    const maxLabelHeight = labelSizes.highest.height;
    const maxWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(me.chart.width - maxLabelWidth, 0, me.maxWidth);
    tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);
    if (maxLabelWidth + 6 > tickWidth) {
      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
      maxHeight = me.maxHeight - getTickMarkLength(options.grid)
				- tickOpts.padding - getTitleHeight(options.title, me.chart.options.font);
      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
      labelRotation = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(Math.min(
        Math.asin((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)((labelSizes.highest.height + 6) / tickWidth, -1, 1)),
        Math.asin((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(maxLabelHeight / maxLabelDiagonal, -1, 1))
      ));
      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    }
    me.labelRotation = labelRotation;
  }
  afterCalculateLabelRotation() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.afterCalculateLabelRotation, [this]);
  }
  beforeFit() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.beforeFit, [this]);
  }
  fit() {
    const me = this;
    const minSize = {
      width: 0,
      height: 0
    };
    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = me;
    const display = me._isVisible();
    const isHorizontal = me.isHorizontal();
    if (display) {
      const titleHeight = getTitleHeight(titleOpts, chart.options.font);
      if (isHorizontal) {
        minSize.width = me.maxWidth;
        minSize.height = getTickMarkLength(gridOpts) + titleHeight;
      } else {
        minSize.height = me.maxHeight;
        minSize.width = getTickMarkLength(gridOpts) + titleHeight;
      }
      if (tickOpts.display && me.ticks.length) {
        const {first, last, widest, highest} = me._getLabelSizes();
        const tickPadding = tickOpts.padding * 2;
        const angleRadians = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(me.labelRotation);
        const cos = Math.cos(angleRadians);
        const sin = Math.sin(angleRadians);
        if (isHorizontal) {
          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
        } else {
          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
          minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth + tickPadding);
        }
        me._calculatePadding(first, last, sin, cos);
      }
    }
    me._handleMargins();
    if (isHorizontal) {
      me.width = me._length = chart.width - me._margins.left - me._margins.right;
      me.height = minSize.height;
    } else {
      me.width = minSize.width;
      me.height = me._length = chart.height - me._margins.top - me._margins.bottom;
    }
  }
  _calculatePadding(first, last, sin, cos) {
    const me = this;
    const {ticks: {align, padding}, position} = me.options;
    const isRotated = me.labelRotation !== 0;
    const labelsBelowTicks = position !== 'top' && me.axis === 'x';
    if (me.isHorizontal()) {
      const offsetLeft = me.getPixelForTick(0) - me.left;
      const offsetRight = me.right - me.getPixelForTick(me.ticks.length - 1);
      let paddingLeft = 0;
      let paddingRight = 0;
      if (isRotated) {
        if (labelsBelowTicks) {
          paddingLeft = cos * first.width;
          paddingRight = sin * last.height;
        } else {
          paddingLeft = sin * first.height;
          paddingRight = cos * last.width;
        }
      } else if (align === 'start') {
        paddingRight = last.width;
      } else if (align === 'end') {
        paddingLeft = first.width;
      } else {
        paddingLeft = first.width / 2;
        paddingRight = last.width / 2;
      }
      me.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * me.width / (me.width - offsetLeft), 0);
      me.paddingRight = Math.max((paddingRight - offsetRight + padding) * me.width / (me.width - offsetRight), 0);
    } else {
      let paddingTop = last.height / 2;
      let paddingBottom = first.height / 2;
      if (align === 'start') {
        paddingTop = 0;
        paddingBottom = first.height;
      } else if (align === 'end') {
        paddingTop = last.height;
        paddingBottom = 0;
      }
      me.paddingTop = paddingTop + padding;
      me.paddingBottom = paddingBottom + padding;
    }
  }
  _handleMargins() {
    const me = this;
    if (me._margins) {
      me._margins.left = Math.max(me.paddingLeft, me._margins.left);
      me._margins.top = Math.max(me.paddingTop, me._margins.top);
      me._margins.right = Math.max(me.paddingRight, me._margins.right);
      me._margins.bottom = Math.max(me.paddingBottom, me._margins.bottom);
    }
  }
  afterFit() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(this.options.afterFit, [this]);
  }
  isHorizontal() {
    const {axis, position} = this.options;
    return position === 'top' || position === 'bottom' || axis === 'x';
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(ticks) {
    const me = this;
    me.beforeTickToLabelConversion();
    me.generateTickLabels(ticks);
    let i, ilen;
    for (i = 0, ilen = ticks.length; i < ilen; i++) {
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(ticks[i].label)) {
        ticks.splice(i, 1);
        ilen--;
        i--;
      }
    }
    me.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    const me = this;
    let labelSizes = me._labelSizes;
    if (!labelSizes) {
      const sampleSize = me.options.ticks.sampleSize;
      let ticks = me.ticks;
      if (sampleSize < ticks.length) {
        ticks = sample(ticks, sampleSize);
      }
      me._labelSizes = labelSizes = me._computeLabelSizes(ticks, ticks.length);
    }
    return labelSizes;
  }
  _computeLabelSizes(ticks, length) {
    const {ctx, _longestTextCache: caches} = this;
    const widths = [];
    const heights = [];
    let widestLabelSize = 0;
    let highestLabelSize = 0;
    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
    for (i = 0; i < length; ++i) {
      label = ticks[i].label;
      tickFont = this._resolveTickFontOptions(i);
      ctx.font = fontString = tickFont.string;
      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
      lineHeight = tickFont.lineHeight;
      width = height = 0;
      if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(label) && !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(label)) {
        width = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(ctx, cache.data, cache.gc, width, label);
        height = lineHeight;
      } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(label)) {
        for (j = 0, jlen = label.length; j < jlen; ++j) {
          nestedLabel = label[j];
          if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(nestedLabel) && !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(nestedLabel)) {
            width = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Q)(ctx, cache.data, cache.gc, width, nestedLabel);
            height += lineHeight;
          }
        }
      }
      widths.push(width);
      heights.push(height);
      widestLabelSize = Math.max(width, widestLabelSize);
      highestLabelSize = Math.max(height, highestLabelSize);
    }
    garbageCollect(caches, length);
    const widest = widths.indexOf(widestLabelSize);
    const highest = heights.indexOf(highestLabelSize);
    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});
    return {
      first: valueAt(0),
      last: valueAt(length - 1),
      widest: valueAt(widest),
      highest: valueAt(highest),
      widths,
      heights,
    };
  }
  getLabelForValue(value) {
    return value;
  }
  getPixelForValue(value, index) {
    return NaN;
  }
  getValueForPixel(pixel) {}
  getPixelForTick(index) {
    const ticks = this.ticks;
    if (index < 0 || index > ticks.length - 1) {
      return null;
    }
    return this.getPixelForValue(ticks[index].value);
  }
  getPixelForDecimal(decimal) {
    const me = this;
    if (me._reversePixels) {
      decimal = 1 - decimal;
    }
    const pixel = me._startPixel + decimal * me._length;
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.R)(me._alignToPixels ? (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(me.chart, pixel, 0) : pixel);
  }
  getDecimalForPixel(pixel) {
    const decimal = (pixel - this._startPixel) / this._length;
    return this._reversePixels ? 1 - decimal : decimal;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const {min, max} = this;
    return min < 0 && max < 0 ? max :
      min > 0 && max > 0 ? min :
      0;
  }
  getContext(index) {
    const me = this;
    const ticks = me.ticks || [];
    if (index >= 0 && index < ticks.length) {
      const tick = ticks[index];
      return tick.$context ||
				(tick.$context = createTickContext(me.getContext(), index, tick));
    }
    return me.$context ||
			(me.$context = createScaleContext(me.chart.getContext(), me));
  }
  _tickSize() {
    const me = this;
    const optionTicks = me.options.ticks;
    const rot = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(me.labelRotation);
    const cos = Math.abs(Math.cos(rot));
    const sin = Math.abs(Math.sin(rot));
    const labelSizes = me._getLabelSizes();
    const padding = optionTicks.autoSkipPadding || 0;
    const w = labelSizes ? labelSizes.widest.width + padding : 0;
    const h = labelSizes ? labelSizes.highest.height + padding : 0;
    return me.isHorizontal()
      ? h * cos > w * sin ? w / cos : h / sin
      : h * sin < w * cos ? h / cos : w / sin;
  }
  _isVisible() {
    const display = this.options.display;
    if (display !== 'auto') {
      return !!display;
    }
    return this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(chartArea) {
    const me = this;
    const axis = me.axis;
    const chart = me.chart;
    const options = me.options;
    const {grid, position} = options;
    const offset = grid.offset;
    const isHorizontal = me.isHorizontal();
    const ticks = me.ticks;
    const ticksLength = ticks.length + (offset ? 1 : 0);
    const tl = getTickMarkLength(grid);
    const items = [];
    const borderOpts = grid.setContext(me.getContext());
    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;
    const axisHalfWidth = axisWidth / 2;
    const alignBorderValue = function(pixel) {
      return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(chart, pixel, axisWidth);
    };
    let borderValue, i, lineValue, alignedLineValue;
    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
    if (position === 'top') {
      borderValue = alignBorderValue(me.bottom);
      ty1 = me.bottom - tl;
      ty2 = borderValue - axisHalfWidth;
      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
      y2 = chartArea.bottom;
    } else if (position === 'bottom') {
      borderValue = alignBorderValue(me.top);
      y1 = chartArea.top;
      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
      ty1 = borderValue + axisHalfWidth;
      ty2 = me.top + tl;
    } else if (position === 'left') {
      borderValue = alignBorderValue(me.right);
      tx1 = me.right - tl;
      tx2 = borderValue - axisHalfWidth;
      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
      x2 = chartArea.right;
    } else if (position === 'right') {
      borderValue = alignBorderValue(me.left);
      x1 = chartArea.left;
      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
      tx1 = borderValue + axisHalfWidth;
      tx2 = me.left + tl;
    } else if (axis === 'x') {
      if (position === 'center') {
        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
      } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));
      }
      y1 = chartArea.top;
      y2 = chartArea.bottom;
      ty1 = borderValue + axisHalfWidth;
      ty2 = ty1 + tl;
    } else if (axis === 'y') {
      if (position === 'center') {
        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
      } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));
      }
      tx1 = borderValue - axisHalfWidth;
      tx2 = tx1 - tl;
      x1 = chartArea.left;
      x2 = chartArea.right;
    }
    const limit = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(options.ticks.maxTicksLimit, ticksLength);
    const step = Math.max(1, Math.ceil(ticksLength / limit));
    for (i = 0; i < ticksLength; i += step) {
      const optsAtIndex = grid.setContext(me.getContext(i));
      const lineWidth = optsAtIndex.lineWidth;
      const lineColor = optsAtIndex.color;
      const borderDash = grid.borderDash || [];
      const borderDashOffset = optsAtIndex.borderDashOffset;
      const tickWidth = optsAtIndex.tickWidth;
      const tickColor = optsAtIndex.tickColor;
      const tickBorderDash = optsAtIndex.tickBorderDash || [];
      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
      lineValue = getPixelForGridLine(me, i, offset);
      if (lineValue === undefined) {
        continue;
      }
      alignedLineValue = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(chart, lineValue, lineWidth);
      if (isHorizontal) {
        tx1 = tx2 = x1 = x2 = alignedLineValue;
      } else {
        ty1 = ty2 = y1 = y2 = alignedLineValue;
      }
      items.push({
        tx1,
        ty1,
        tx2,
        ty2,
        x1,
        y1,
        x2,
        y2,
        width: lineWidth,
        color: lineColor,
        borderDash,
        borderDashOffset,
        tickWidth,
        tickColor,
        tickBorderDash,
        tickBorderDashOffset,
      });
    }
    me._ticksLength = ticksLength;
    me._borderValue = borderValue;
    return items;
  }
  _computeLabelItems(chartArea) {
    const me = this;
    const axis = me.axis;
    const options = me.options;
    const {position, ticks: optionTicks} = options;
    const isHorizontal = me.isHorizontal();
    const ticks = me.ticks;
    const {align, crossAlign, padding, mirror} = optionTicks;
    const tl = getTickMarkLength(options.grid);
    const tickAndPadding = tl + padding;
    const hTickAndPadding = mirror ? -padding : tickAndPadding;
    const rotation = -(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(me.labelRotation);
    const items = [];
    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
    let textBaseline = 'middle';
    if (position === 'top') {
      y = me.bottom - hTickAndPadding;
      textAlign = me._getXAxisLabelAlignment();
    } else if (position === 'bottom') {
      y = me.top + hTickAndPadding;
      textAlign = me._getXAxisLabelAlignment();
    } else if (position === 'left') {
      const ret = me._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x = ret.x;
    } else if (position === 'right') {
      const ret = me._getYAxisLabelAlignment(tl);
      textAlign = ret.textAlign;
      x = ret.x;
    } else if (axis === 'x') {
      if (position === 'center') {
        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;
      } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        y = me.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
      }
      textAlign = me._getXAxisLabelAlignment();
    } else if (axis === 'y') {
      if (position === 'center') {
        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;
      } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
        const positionAxisID = Object.keys(position)[0];
        const value = position[positionAxisID];
        x = me.chart.scales[positionAxisID].getPixelForValue(value);
      }
      textAlign = me._getYAxisLabelAlignment(tl).textAlign;
    }
    if (axis === 'y') {
      if (align === 'start') {
        textBaseline = 'top';
      } else if (align === 'end') {
        textBaseline = 'bottom';
      }
    }
    const labelSizes = me._getLabelSizes();
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      label = tick.label;
      const optsAtIndex = optionTicks.setContext(me.getContext(i));
      pixel = me.getPixelForTick(i) + optionTicks.labelOffset;
      font = me._resolveTickFontOptions(i);
      lineHeight = font.lineHeight;
      lineCount = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(label) ? label.length : 1;
      const halfCount = lineCount / 2;
      const color = optsAtIndex.color;
      const strokeColor = optsAtIndex.textStrokeColor;
      const strokeWidth = optsAtIndex.textStrokeWidth;
      if (isHorizontal) {
        x = pixel;
        if (position === 'top') {
          if (crossAlign === 'near' || rotation !== 0) {
            textOffset = -lineCount * lineHeight + lineHeight / 2;
          } else if (crossAlign === 'center') {
            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
          } else {
            textOffset = -labelSizes.highest.height + lineHeight / 2;
          }
        } else {
          if (crossAlign === 'near' || rotation !== 0) {
            textOffset = lineHeight / 2;
          } else if (crossAlign === 'center') {
            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
          } else {
            textOffset = labelSizes.highest.height - lineCount * lineHeight;
          }
        }
        if (mirror) {
          textOffset *= -1;
        }
      } else {
        y = pixel;
        textOffset = (1 - lineCount) * lineHeight / 2;
      }
      let backdrop;
      if (optsAtIndex.showLabelBackdrop) {
        const labelPadding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(optsAtIndex.backdropPadding);
        const height = labelSizes.heights[i];
        const width = labelSizes.widths[i];
        let top = y + textOffset - labelPadding.top;
        let left = x - labelPadding.left;
        switch (textBaseline) {
        case 'middle':
          top -= height / 2;
          break;
        case 'bottom':
          top -= height;
          break;
        }
        switch (textAlign) {
        case 'center':
          left -= width / 2;
          break;
        case 'right':
          left -= width;
          break;
        }
        backdrop = {
          left,
          top,
          width: width + labelPadding.width,
          height: height + labelPadding.height,
          color: optsAtIndex.backdropColor,
        };
      }
      items.push({
        rotation,
        label,
        font,
        color,
        strokeColor,
        strokeWidth,
        textOffset,
        textAlign,
        textBaseline,
        translation: [x, y],
        backdrop,
      });
    }
    return items;
  }
  _getXAxisLabelAlignment() {
    const me = this;
    const {position, ticks} = me.options;
    const rotation = -(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(me.labelRotation);
    if (rotation) {
      return position === 'top' ? 'left' : 'right';
    }
    let align = 'center';
    if (ticks.align === 'start') {
      align = 'left';
    } else if (ticks.align === 'end') {
      align = 'right';
    }
    return align;
  }
  _getYAxisLabelAlignment(tl) {
    const me = this;
    const {position, ticks: {crossAlign, mirror, padding}} = me.options;
    const labelSizes = me._getLabelSizes();
    const tickAndPadding = tl + padding;
    const widest = labelSizes.widest.width;
    let textAlign;
    let x;
    if (position === 'left') {
      if (mirror) {
        x = me.right + padding;
        if (crossAlign === 'near') {
          textAlign = 'left';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x += (widest / 2);
        } else {
          textAlign = 'right';
          x += widest;
        }
      } else {
        x = me.right - tickAndPadding;
        if (crossAlign === 'near') {
          textAlign = 'right';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x -= (widest / 2);
        } else {
          textAlign = 'left';
          x = me.left;
        }
      }
    } else if (position === 'right') {
      if (mirror) {
        x = me.left + padding;
        if (crossAlign === 'near') {
          textAlign = 'right';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x -= (widest / 2);
        } else {
          textAlign = 'left';
          x -= widest;
        }
      } else {
        x = me.left + tickAndPadding;
        if (crossAlign === 'near') {
          textAlign = 'left';
        } else if (crossAlign === 'center') {
          textAlign = 'center';
          x += widest / 2;
        } else {
          textAlign = 'right';
          x = me.right;
        }
      }
    } else {
      textAlign = 'right';
    }
    return {textAlign, x};
  }
  _computeLabelArea() {
    const me = this;
    if (me.options.ticks.mirror) {
      return;
    }
    const chart = me.chart;
    const position = me.options.position;
    if (position === 'left' || position === 'right') {
      return {top: 0, left: me.left, bottom: chart.height, right: me.right};
    } if (position === 'top' || position === 'bottom') {
      return {top: me.top, left: 0, bottom: me.bottom, right: chart.width};
    }
  }
  drawBackground() {
    const {ctx, options: {backgroundColor}, left, top, width, height} = this;
    if (backgroundColor) {
      ctx.save();
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(left, top, width, height);
      ctx.restore();
    }
  }
  getLineWidthForValue(value) {
    const me = this;
    const grid = me.options.grid;
    if (!me._isVisible() || !grid.display) {
      return 0;
    }
    const ticks = me.ticks;
    const index = ticks.findIndex(t => t.value === value);
    if (index >= 0) {
      const opts = grid.setContext(me.getContext(index));
      return opts.lineWidth;
    }
    return 0;
  }
  drawGrid(chartArea) {
    const me = this;
    const grid = me.options.grid;
    const ctx = me.ctx;
    const items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
    let i, ilen;
    const drawLine = (p1, p2, style) => {
      if (!style.width || !style.color) {
        return;
      }
      ctx.save();
      ctx.lineWidth = style.width;
      ctx.strokeStyle = style.color;
      ctx.setLineDash(style.borderDash || []);
      ctx.lineDashOffset = style.borderDashOffset;
      ctx.beginPath();
      ctx.moveTo(p1.x, p1.y);
      ctx.lineTo(p2.x, p2.y);
      ctx.stroke();
      ctx.restore();
    };
    if (grid.display) {
      for (i = 0, ilen = items.length; i < ilen; ++i) {
        const item = items[i];
        if (grid.drawOnChartArea) {
          drawLine(
            {x: item.x1, y: item.y1},
            {x: item.x2, y: item.y2},
            item
          );
        }
        if (grid.drawTicks) {
          drawLine(
            {x: item.tx1, y: item.ty1},
            {x: item.tx2, y: item.ty2},
            {
              color: item.tickColor,
              width: item.tickWidth,
              borderDash: item.tickBorderDash,
              borderDashOffset: item.tickBorderDashOffset
            }
          );
        }
      }
    }
  }
  drawBorder() {
    const me = this;
    const {chart, ctx, options: {grid}} = me;
    const borderOpts = grid.setContext(me.getContext());
    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;
    if (!axisWidth) {
      return;
    }
    const lastLineWidth = grid.setContext(me.getContext(0)).lineWidth;
    const borderValue = me._borderValue;
    let x1, x2, y1, y2;
    if (me.isHorizontal()) {
      x1 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(chart, me.left, axisWidth) - axisWidth / 2;
      x2 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(chart, me.right, lastLineWidth) + lastLineWidth / 2;
      y1 = y2 = borderValue;
    } else {
      y1 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(chart, me.top, axisWidth) - axisWidth / 2;
      y2 = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.S)(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
      x1 = x2 = borderValue;
    }
    ctx.save();
    ctx.lineWidth = borderOpts.borderWidth;
    ctx.strokeStyle = borderOpts.borderColor;
    ctx.beginPath();
    ctx.moveTo(x1, y1);
    ctx.lineTo(x2, y2);
    ctx.stroke();
    ctx.restore();
  }
  drawLabels(chartArea) {
    const me = this;
    const optionTicks = me.options.ticks;
    if (!optionTicks.display) {
      return;
    }
    const ctx = me.ctx;
    const area = me._computeLabelArea();
    if (area) {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.U)(ctx, area);
    }
    const items = me._labelItems || (me._labelItems = me._computeLabelItems(chartArea));
    let i, ilen;
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      const item = items[i];
      const tickFont = item.font;
      const label = item.label;
      if (item.backdrop) {
        ctx.fillStyle = item.backdrop.color;
        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);
      }
      let y = item.textOffset;
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V)(ctx, label, 0, y, tickFont, item);
    }
    if (area) {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.W)(ctx);
    }
  }
  drawTitle() {
    const {ctx, options: {position, title, reverse}} = this;
    if (!title.display) {
      return;
    }
    const font = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(title.font);
    const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(title.padding);
    const align = title.align;
    let offset = font.lineHeight / 2;
    if (position === 'bottom' || position === 'center' || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(position)) {
      offset += padding.bottom;
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(title.text)) {
        offset += font.lineHeight * (title.text.length - 1);
      }
    } else {
      offset += padding.top;
    }
    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V)(ctx, title.text, 0, 0, font, {
      color: title.color,
      maxWidth,
      rotation,
      textAlign: titleAlign(align, position, reverse),
      textBaseline: 'middle',
      translation: [titleX, titleY],
    });
  }
  draw(chartArea) {
    const me = this;
    if (!me._isVisible()) {
      return;
    }
    me.drawBackground();
    me.drawGrid(chartArea);
    me.drawBorder();
    me.drawTitle();
    me.drawLabels(chartArea);
  }
  _layers() {
    const me = this;
    const opts = me.options;
    const tz = opts.ticks && opts.ticks.z || 0;
    const gz = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(opts.grid && opts.grid.z, -1);
    if (!me._isVisible() || me.draw !== Scale.prototype.draw) {
      return [{
        z: tz,
        draw(chartArea) {
          me.draw(chartArea);
        }
      }];
    }
    return [{
      z: gz,
      draw(chartArea) {
        me.drawBackground();
        me.drawGrid(chartArea);
        me.drawTitle();
      }
    }, {
      z: gz + 1,
      draw() {
        me.drawBorder();
      }
    }, {
      z: tz,
      draw(chartArea) {
        me.drawLabels(chartArea);
      }
    }];
  }
  getMatchingVisibleMetas(type) {
    const me = this;
    const metas = me.chart.getSortedVisibleDatasetMetas();
    const axisID = me.axis + 'AxisID';
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      const meta = metas[i];
      if (meta[axisID] === me.id && (!type || meta.type === type)) {
        result.push(meta);
      }
    }
    return result;
  }
  _resolveTickFontOptions(index) {
    const opts = this.options.ticks.setContext(this.getContext(index));
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(opts.font);
  }
  _maxDigits() {
    const me = this;
    const fontSize = me._resolveTickFontOptions(0).lineHeight;
    return (me.isHorizontal() ? me.width : me.height) / fontSize;
  }
}

class TypedRegistry {
  constructor(type, scope, override) {
    this.type = type;
    this.scope = scope;
    this.override = override;
    this.items = Object.create(null);
  }
  isForType(type) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
  }
  register(item) {
    const me = this;
    const proto = Object.getPrototypeOf(item);
    let parentScope;
    if (isIChartComponent(proto)) {
      parentScope = me.register(proto);
    }
    const items = me.items;
    const id = item.id;
    const scope = me.scope + '.' + id;
    if (!id) {
      throw new Error('class does not have id: ' + item);
    }
    if (id in items) {
      return scope;
    }
    items[id] = item;
    registerDefaults(item, scope, parentScope);
    if (me.override) {
      _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.override(item.id, item.overrides);
    }
    return scope;
  }
  get(id) {
    return this.items[id];
  }
  unregister(item) {
    const items = this.items;
    const id = item.id;
    const scope = this.scope;
    if (id in items) {
      delete items[id];
    }
    if (scope && id in _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d[scope]) {
      delete _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d[scope][id];
      if (this.override) {
        delete _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$[id];
      }
    }
  }
}
function registerDefaults(item, scope, parentScope) {
  const itemDefaults = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a0)(Object.create(null), [
    parentScope ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.get(parentScope) : {},
    _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.get(scope),
    item.defaults
  ]);
  _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.set(scope, itemDefaults);
  if (item.defaultRoutes) {
    routeDefaults(scope, item.defaultRoutes);
  }
  if (item.descriptors) {
    _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.describe(scope, item.descriptors);
  }
}
function routeDefaults(scope, routes) {
  Object.keys(routes).forEach(property => {
    const propertyParts = property.split('.');
    const sourceName = propertyParts.pop();
    const sourceScope = [scope].concat(propertyParts).join('.');
    const parts = routes[property].split('.');
    const targetName = parts.pop();
    const targetScope = parts.join('.');
    _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.route(sourceScope, sourceName, targetScope, targetName);
  });
}
function isIChartComponent(proto) {
  return 'id' in proto && 'defaults' in proto;
}

class Registry {
  constructor() {
    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);
    this.elements = new TypedRegistry(Element, 'elements');
    this.plugins = new TypedRegistry(Object, 'plugins');
    this.scales = new TypedRegistry(Scale, 'scales');
    this._typedRegistries = [this.controllers, this.scales, this.elements];
  }
  add(...args) {
    this._each('register', args);
  }
  remove(...args) {
    this._each('unregister', args);
  }
  addControllers(...args) {
    this._each('register', args, this.controllers);
  }
  addElements(...args) {
    this._each('register', args, this.elements);
  }
  addPlugins(...args) {
    this._each('register', args, this.plugins);
  }
  addScales(...args) {
    this._each('register', args, this.scales);
  }
  getController(id) {
    return this._get(id, this.controllers, 'controller');
  }
  getElement(id) {
    return this._get(id, this.elements, 'element');
  }
  getPlugin(id) {
    return this._get(id, this.plugins, 'plugin');
  }
  getScale(id) {
    return this._get(id, this.scales, 'scale');
  }
  removeControllers(...args) {
    this._each('unregister', args, this.controllers);
  }
  removeElements(...args) {
    this._each('unregister', args, this.elements);
  }
  removePlugins(...args) {
    this._each('unregister', args, this.plugins);
  }
  removeScales(...args) {
    this._each('unregister', args, this.scales);
  }
  _each(method, args, typedRegistry) {
    const me = this;
    [...args].forEach(arg => {
      const reg = typedRegistry || me._getRegistryForType(arg);
      if (typedRegistry || reg.isForType(arg) || (reg === me.plugins && arg.id)) {
        me._exec(method, reg, arg);
      } else {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(arg, item => {
          const itemReg = typedRegistry || me._getRegistryForType(item);
          me._exec(method, itemReg, item);
        });
      }
    });
  }
  _exec(method, registry, component) {
    const camelMethod = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a1)(method);
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(component['before' + camelMethod], [], component);
    registry[method](component);
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(component['after' + camelMethod], [], component);
  }
  _getRegistryForType(type) {
    for (let i = 0; i < this._typedRegistries.length; i++) {
      const reg = this._typedRegistries[i];
      if (reg.isForType(type)) {
        return reg;
      }
    }
    return this.plugins;
  }
  _get(id, typedRegistry, type) {
    const item = typedRegistry.get(id);
    if (item === undefined) {
      throw new Error('"' + id + '" is not a registered ' + type + '.');
    }
    return item;
  }
}
var registry = new Registry();

class PluginService {
  constructor() {
    this._init = [];
  }
  notify(chart, hook, args, filter) {
    const me = this;
    if (hook === 'beforeInit') {
      me._init = me._createDescriptors(chart, true);
      me._notify(me._init, chart, 'install');
    }
    const descriptors = filter ? me._descriptors(chart).filter(filter) : me._descriptors(chart);
    const result = me._notify(descriptors, chart, hook, args);
    if (hook === 'destroy') {
      me._notify(descriptors, chart, 'stop');
      me._notify(me._init, chart, 'uninstall');
    }
    return result;
  }
  _notify(descriptors, chart, hook, args) {
    args = args || {};
    for (const descriptor of descriptors) {
      const plugin = descriptor.plugin;
      const method = plugin[hook];
      const params = [chart, args, descriptor.options];
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(method, params, plugin) === false && args.cancelable) {
        return false;
      }
    }
    return true;
  }
  invalidate() {
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(this._cache)) {
      this._oldCache = this._cache;
      this._cache = undefined;
    }
  }
  _descriptors(chart) {
    if (this._cache) {
      return this._cache;
    }
    const descriptors = this._cache = this._createDescriptors(chart);
    this._notifyStateChanges(chart);
    return descriptors;
  }
  _createDescriptors(chart, all) {
    const config = chart && chart.config;
    const options = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(config.options && config.options.plugins, {});
    const plugins = allPlugins(config);
    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
  }
  _notifyStateChanges(chart) {
    const previousDescriptors = this._oldCache || [];
    const descriptors = this._cache;
    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));
    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');
    this._notify(diff(descriptors, previousDescriptors), chart, 'start');
  }
}
function allPlugins(config) {
  const plugins = [];
  const keys = Object.keys(registry.plugins.items);
  for (let i = 0; i < keys.length; i++) {
    plugins.push(registry.getPlugin(keys[i]));
  }
  const local = config.plugins || [];
  for (let i = 0; i < local.length; i++) {
    const plugin = local[i];
    if (plugins.indexOf(plugin) === -1) {
      plugins.push(plugin);
    }
  }
  return plugins;
}
function getOpts(options, all) {
  if (!all && options === false) {
    return null;
  }
  if (options === true) {
    return {};
  }
  return options;
}
function createDescriptors(chart, plugins, options, all) {
  const result = [];
  const context = chart.getContext();
  for (let i = 0; i < plugins.length; i++) {
    const plugin = plugins[i];
    const id = plugin.id;
    const opts = getOpts(options[id], all);
    if (opts === null) {
      continue;
    }
    result.push({
      plugin,
      options: pluginOpts(chart.config, plugin, opts, context)
    });
  }
  return result;
}
function pluginOpts(config, plugin, opts, context) {
  const keys = config.pluginScopeKeys(plugin);
  const scopes = config.getOptionScopes(opts, keys);
  return config.createResolver(scopes, context, [''], {scriptable: false, indexable: false, allKeys: true});
}

function getIndexAxis(type, options) {
  const datasetDefaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type] || {};
  const datasetOptions = (options.datasets || {})[type] || {};
  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';
}
function getAxisFromDefaultScaleID(id, indexAxis) {
  let axis = id;
  if (id === '_index_') {
    axis = indexAxis;
  } else if (id === '_value_') {
    axis = indexAxis === 'x' ? 'y' : 'x';
  }
  return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
  return axis === indexAxis ? '_index_' : '_value_';
}
function axisFromPosition(position) {
  if (position === 'top' || position === 'bottom') {
    return 'x';
  }
  if (position === 'left' || position === 'right') {
    return 'y';
  }
}
function determineAxis(id, scaleOptions) {
  if (id === 'x' || id === 'y') {
    return id;
  }
  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();
}
function mergeScaleConfig(config, options) {
  const chartDefaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$[config.type] || {scales: {}};
  const configScales = options.scales || {};
  const chartIndexAxis = getIndexAxis(config.type, options);
  const firstIDs = Object.create(null);
  const scales = Object.create(null);
  Object.keys(configScales).forEach(id => {
    const scaleConf = configScales[id];
    const axis = determineAxis(id, scaleConf);
    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
    const defaultScaleOptions = chartDefaults.scales || {};
    firstIDs[axis] = firstIDs[axis] || id;
    scales[id] = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a7)(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);
  });
  config.data.datasets.forEach(dataset => {
    const type = dataset.type || config.type;
    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
    const datasetDefaults = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$[type] || {};
    const defaultScaleOptions = datasetDefaults.scales || {};
    Object.keys(defaultScaleOptions).forEach(defaultID => {
      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;
      scales[id] = scales[id] || Object.create(null);
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a7)(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);
    });
  });
  Object.keys(scales).forEach(key => {
    const scale = scales[key];
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a7)(scale, [_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.scales[scale.type], _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.scale]);
  });
  return scales;
}
function initOptions(config) {
  const options = config.options || (config.options = {});
  options.plugins = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(options.plugins, {});
  options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
  data = data || {};
  data.datasets = data.datasets || [];
  data.labels = data.labels || [];
  return data;
}
function initConfig(config) {
  config = config || {};
  config.data = initData(config.data);
  initOptions(config);
  return config;
}
const keyCache = new Map();
const keysCached = new Set();
function cachedKeys(cacheKey, generate) {
  let keys = keyCache.get(cacheKey);
  if (!keys) {
    keys = generate();
    keyCache.set(cacheKey, keys);
    keysCached.add(keys);
  }
  return keys;
}
const addIfFound = (set, obj, key) => {
  const opts = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.f)(obj, key);
  if (opts !== undefined) {
    set.add(opts);
  }
};
class Config {
  constructor(config) {
    this._config = initConfig(config);
    this._scopeCache = new Map();
    this._resolverCache = new Map();
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(type) {
    this._config.type = type;
  }
  get data() {
    return this._config.data;
  }
  set data(data) {
    this._config.data = initData(data);
  }
  get options() {
    return this._config.options;
  }
  set options(options) {
    this._config.options = options;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const config = this._config;
    this.clearCache();
    initOptions(config);
  }
  clearCache() {
    this._scopeCache.clear();
    this._resolverCache.clear();
  }
  datasetScopeKeys(datasetType) {
    return cachedKeys(datasetType,
      () => [[
        `datasets.${datasetType}`,
        ''
      ]]);
  }
  datasetAnimationScopeKeys(datasetType, transition) {
    return cachedKeys(`${datasetType}.transition.${transition}`,
      () => [
        [
          `datasets.${datasetType}.transitions.${transition}`,
          `transitions.${transition}`,
        ],
        [
          `datasets.${datasetType}`,
          ''
        ]
      ]);
  }
  datasetElementScopeKeys(datasetType, elementType) {
    return cachedKeys(`${datasetType}-${elementType}`,
      () => [[
        `datasets.${datasetType}.elements.${elementType}`,
        `datasets.${datasetType}`,
        `elements.${elementType}`,
        ''
      ]]);
  }
  pluginScopeKeys(plugin) {
    const id = plugin.id;
    const type = this.type;
    return cachedKeys(`${type}-plugin-${id}`,
      () => [[
        `plugins.${id}`,
        ...plugin.additionalOptionScopes || [],
      ]]);
  }
  _cachedScopes(mainScope, resetCache) {
    const _scopeCache = this._scopeCache;
    let cache = _scopeCache.get(mainScope);
    if (!cache || resetCache) {
      cache = new Map();
      _scopeCache.set(mainScope, cache);
    }
    return cache;
  }
  getOptionScopes(mainScope, keyLists, resetCache) {
    const {options, type} = this;
    const cache = this._cachedScopes(mainScope, resetCache);
    const cached = cache.get(keyLists);
    if (cached) {
      return cached;
    }
    const scopes = new Set();
    keyLists.forEach(keys => {
      if (mainScope) {
        scopes.add(mainScope);
        keys.forEach(key => addIfFound(scopes, mainScope, key));
      }
      keys.forEach(key => addIfFound(scopes, options, key));
      keys.forEach(key => addIfFound(scopes, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$[type] || {}, key));
      keys.forEach(key => addIfFound(scopes, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d, key));
      keys.forEach(key => addIfFound(scopes, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2, key));
    });
    const array = Array.from(scopes);
    if (array.length === 0) {
      array.push(Object.create(null));
    }
    if (keysCached.has(keyLists)) {
      cache.set(keyLists, array);
    }
    return array;
  }
  chartOptionScopes() {
    const {options, type} = this;
    return [
      options,
      _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$[type] || {},
      _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type] || {},
      {type},
      _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d,
      _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a2
    ];
  }
  resolveNamedOptions(scopes, names, context, prefixes = ['']) {
    const result = {$shared: true};
    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);
    let options = resolver;
    if (needContext(resolver, names)) {
      result.$shared = false;
      context = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a3)(context) ? context() : context;
      const subResolver = this.createResolver(scopes, context, subPrefixes);
      options = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a4)(resolver, context, subResolver);
    }
    for (const prop of names) {
      result[prop] = options[prop];
    }
    return result;
  }
  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {
    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(context)
      ? (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a4)(resolver, context, undefined, descriptorDefaults)
      : resolver;
  }
}
function getResolver(resolverCache, scopes, prefixes) {
  let cache = resolverCache.get(scopes);
  if (!cache) {
    cache = new Map();
    resolverCache.set(scopes, cache);
  }
  const cacheKey = prefixes.join();
  let cached = cache.get(cacheKey);
  if (!cached) {
    const resolver = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a5)(scopes, prefixes);
    cached = {
      resolver,
      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))
    };
    cache.set(cacheKey, cached);
  }
  return cached;
}
function needContext(proxy, names) {
  const {isScriptable, isIndexable} = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a6)(proxy);
  for (const prop of names) {
    if ((isScriptable(prop) && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a3)(proxy[prop]))
      || (isIndexable(prop) && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(proxy[prop]))) {
      return true;
    }
  }
  return false;
}

var version = "3.5.1";

const KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];
function positionIsHorizontal(position, axis) {
  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');
}
function compare2Level(l1, l2) {
  return function(a, b) {
    return a[l1] === b[l1]
      ? a[l2] - b[l2]
      : a[l1] - b[l1];
  };
}
function onAnimationsComplete(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  chart.notifyPlugins('afterRender');
  (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(animationOptions && animationOptions.onComplete, [context], chart);
}
function onAnimationProgress(context) {
  const chart = context.chart;
  const animationOptions = chart.options.animation;
  (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(animationOptions && animationOptions.onProgress, [context], chart);
}
function getCanvas(item) {
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.I)() && typeof item === 'string') {
    item = document.getElementById(item);
  } else if (item && item.length) {
    item = item[0];
  }
  if (item && item.canvas) {
    item = item.canvas;
  }
  return item;
}
const instances = {};
const getChart = (key) => {
  const canvas = getCanvas(key);
  return Object.values(instances).filter((c) => c.canvas === canvas).pop();
};
class Chart {
  constructor(item, userConfig) {
    const me = this;
    const config = this.config = new Config(userConfig);
    const initialCanvas = getCanvas(item);
    const existingChart = getChart(initialCanvas);
    if (existingChart) {
      throw new Error(
        'Canvas is already in use. Chart with ID \'' + existingChart.id + '\'' +
				' must be destroyed before the canvas can be reused.'
      );
    }
    const options = config.createResolver(config.chartOptionScopes(), me.getContext());
    this.platform = new (config.platform || _detectPlatform(initialCanvas))();
    const context = me.platform.acquireContext(initialCanvas, options.aspectRatio);
    const canvas = context && context.canvas;
    const height = canvas && canvas.height;
    const width = canvas && canvas.width;
    this.id = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a8)();
    this.ctx = context;
    this.canvas = canvas;
    this.width = width;
    this.height = height;
    this._options = options;
    this._aspectRatio = this.aspectRatio;
    this._layers = [];
    this._metasets = [];
    this._stacks = undefined;
    this.boxes = [];
    this.currentDevicePixelRatio = undefined;
    this.chartArea = undefined;
    this._active = [];
    this._lastEvent = undefined;
    this._listeners = {};
    this._responsiveListeners = undefined;
    this._sortedMetasets = [];
    this.scales = {};
    this._plugins = new PluginService();
    this.$proxies = {};
    this._hiddenIndices = {};
    this.attached = false;
    this._animationsDisabled = undefined;
    this.$context = undefined;
    this._doResize = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a9)(() => this.update('resize'), options.resizeDelay || 0);
    instances[me.id] = me;
    if (!context || !canvas) {
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
    animator.listen(me, 'complete', onAnimationsComplete);
    animator.listen(me, 'progress', onAnimationProgress);
    me._initialize();
    if (me.attached) {
      me.update();
    }
  }
  get aspectRatio() {
    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(aspectRatio)) {
      return aspectRatio;
    }
    if (maintainAspectRatio && _aspectRatio) {
      return _aspectRatio;
    }
    return height ? width / height : null;
  }
  get data() {
    return this.config.data;
  }
  set data(data) {
    this.config.data = data;
  }
  get options() {
    return this._options;
  }
  set options(options) {
    this.config.options = options;
  }
  _initialize() {
    const me = this;
    me.notifyPlugins('beforeInit');
    if (me.options.responsive) {
      me.resize();
    } else {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aa)(me, me.options.devicePixelRatio);
    }
    me.bindEvents();
    me.notifyPlugins('afterInit');
    return me;
  }
  clear() {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ab)(this.canvas, this.ctx);
    return this;
  }
  stop() {
    animator.stop(this);
    return this;
  }
  resize(width, height) {
    if (!animator.running(this)) {
      this._resize(width, height);
    } else {
      this._resizeBeforeDraw = {width, height};
    }
  }
  _resize(width, height) {
    const me = this;
    const options = me.options;
    const canvas = me.canvas;
    const aspectRatio = options.maintainAspectRatio && me.aspectRatio;
    const newSize = me.platform.getMaximumSize(canvas, width, height, aspectRatio);
    const newRatio = options.devicePixelRatio || me.platform.getDevicePixelRatio();
    me.width = newSize.width;
    me.height = newSize.height;
    me._aspectRatio = me.aspectRatio;
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aa)(me, newRatio, true)) {
      return;
    }
    me.notifyPlugins('resize', {size: newSize});
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(options.onResize, [me, newSize], me);
    if (me.attached) {
      if (me._doResize()) {
        me.render();
      }
    }
  }
  ensureScalesHaveIDs() {
    const options = this.options;
    const scalesOptions = options.scales || {};
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(scalesOptions, (axisOptions, axisID) => {
      axisOptions.id = axisID;
    });
  }
  buildOrUpdateScales() {
    const me = this;
    const options = me.options;
    const scaleOpts = options.scales;
    const scales = me.scales;
    const updated = Object.keys(scales).reduce((obj, id) => {
      obj[id] = false;
      return obj;
    }, {});
    let items = [];
    if (scaleOpts) {
      items = items.concat(
        Object.keys(scaleOpts).map((id) => {
          const scaleOptions = scaleOpts[id];
          const axis = determineAxis(id, scaleOptions);
          const isRadial = axis === 'r';
          const isHorizontal = axis === 'x';
          return {
            options: scaleOptions,
            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',
            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'
          };
        })
      );
    }
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(items, (item) => {
      const scaleOptions = item.options;
      const id = scaleOptions.id;
      const axis = determineAxis(id, scaleOptions);
      const scaleType = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(scaleOptions.type, item.dtype);
      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {
        scaleOptions.position = item.dposition;
      }
      updated[id] = true;
      let scale = null;
      if (id in scales && scales[id].type === scaleType) {
        scale = scales[id];
      } else {
        const scaleClass = registry.getScale(scaleType);
        scale = new scaleClass({
          id,
          type: scaleType,
          ctx: me.ctx,
          chart: me
        });
        scales[scale.id] = scale;
      }
      scale.init(scaleOptions, options);
    });
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(updated, (hasUpdated, id) => {
      if (!hasUpdated) {
        delete scales[id];
      }
    });
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(scales, (scale) => {
      layouts.configure(me, scale, scale.options);
      layouts.addBox(me, scale);
    });
  }
  _updateMetasets() {
    const me = this;
    const metasets = me._metasets;
    const numData = me.data.datasets.length;
    const numMeta = metasets.length;
    metasets.sort((a, b) => a.index - b.index);
    if (numMeta > numData) {
      for (let i = numData; i < numMeta; ++i) {
        me._destroyDatasetMeta(i);
      }
      metasets.splice(numData, numMeta - numData);
    }
    me._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));
  }
  _removeUnreferencedMetasets() {
    const me = this;
    const {_metasets: metasets, data: {datasets}} = me;
    if (metasets.length > datasets.length) {
      delete me._stacks;
    }
    metasets.forEach((meta, index) => {
      if (datasets.filter(x => x === meta._dataset).length === 0) {
        me._destroyDatasetMeta(index);
      }
    });
  }
  buildOrUpdateControllers() {
    const me = this;
    const newControllers = [];
    const datasets = me.data.datasets;
    let i, ilen;
    me._removeUnreferencedMetasets();
    for (i = 0, ilen = datasets.length; i < ilen; i++) {
      const dataset = datasets[i];
      let meta = me.getDatasetMeta(i);
      const type = dataset.type || me.config.type;
      if (meta.type && meta.type !== type) {
        me._destroyDatasetMeta(i);
        meta = me.getDatasetMeta(i);
      }
      meta.type = type;
      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, me.options);
      meta.order = dataset.order || 0;
      meta.index = i;
      meta.label = '' + dataset.label;
      meta.visible = me.isDatasetVisible(i);
      if (meta.controller) {
        meta.controller.updateIndex(i);
        meta.controller.linkScales();
      } else {
        const ControllerClass = registry.getController(type);
        const {datasetElementType, dataElementType} = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.datasets[type];
        Object.assign(ControllerClass.prototype, {
          dataElementType: registry.getElement(dataElementType),
          datasetElementType: datasetElementType && registry.getElement(datasetElementType)
        });
        meta.controller = new ControllerClass(me, i);
        newControllers.push(meta.controller);
      }
    }
    me._updateMetasets();
    return newControllers;
  }
  _resetElements() {
    const me = this;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(me.data.datasets, (dataset, datasetIndex) => {
      me.getDatasetMeta(datasetIndex).controller.reset();
    }, me);
  }
  reset() {
    this._resetElements();
    this.notifyPlugins('reset');
  }
  update(mode) {
    const me = this;
    const config = me.config;
    config.update();
    me._options = config.createResolver(config.chartOptionScopes(), me.getContext());
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(me.scales, (scale) => {
      layouts.removeBox(me, scale);
    });
    const animsDisabled = me._animationsDisabled = !me.options.animation;
    me.ensureScalesHaveIDs();
    me.buildOrUpdateScales();
    const existingEvents = new Set(Object.keys(me._listeners));
    const newEvents = new Set(me.options.events);
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ac)(existingEvents, newEvents) || !!this._responsiveListeners !== me.options.responsive) {
      me.unbindEvents();
      me.bindEvents();
    }
    me._plugins.invalidate();
    if (me.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {
      return;
    }
    const newControllers = me.buildOrUpdateControllers();
    me.notifyPlugins('beforeElementsUpdate');
    let minPadding = 0;
    for (let i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
      const {controller} = me.getDatasetMeta(i);
      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
      controller.buildOrUpdateElements(reset);
      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
    }
    me._minPadding = minPadding;
    me._updateLayout(minPadding);
    if (!animsDisabled) {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(newControllers, (controller) => {
        controller.reset();
      });
    }
    me._updateDatasets(mode);
    me.notifyPlugins('afterUpdate', {mode});
    me._layers.sort(compare2Level('z', '_idx'));
    if (me._lastEvent) {
      me._eventHandler(me._lastEvent, true);
    }
    me.render();
  }
  _updateLayout(minPadding) {
    const me = this;
    if (me.notifyPlugins('beforeLayout', {cancelable: true}) === false) {
      return;
    }
    layouts.update(me, me.width, me.height, minPadding);
    const area = me.chartArea;
    const noArea = area.width <= 0 || area.height <= 0;
    me._layers = [];
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(me.boxes, (box) => {
      if (noArea && box.position === 'chartArea') {
        return;
      }
      if (box.configure) {
        box.configure();
      }
      me._layers.push(...box._layers());
    }, me);
    me._layers.forEach((item, index) => {
      item._idx = index;
    });
    me.notifyPlugins('afterLayout');
  }
  _updateDatasets(mode) {
    const me = this;
    const isFunction = typeof mode === 'function';
    if (me.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {
      return;
    }
    for (let i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
      me._updateDataset(i, isFunction ? mode({datasetIndex: i}) : mode);
    }
    me.notifyPlugins('afterDatasetsUpdate', {mode});
  }
  _updateDataset(index, mode) {
    const me = this;
    const meta = me.getDatasetMeta(index);
    const args = {meta, index, mode, cancelable: true};
    if (me.notifyPlugins('beforeDatasetUpdate', args) === false) {
      return;
    }
    meta.controller._update(mode);
    args.cancelable = false;
    me.notifyPlugins('afterDatasetUpdate', args);
  }
  render() {
    const me = this;
    if (me.notifyPlugins('beforeRender', {cancelable: true}) === false) {
      return;
    }
    if (animator.has(me)) {
      if (me.attached && !animator.running(me)) {
        animator.start(me);
      }
    } else {
      me.draw();
      onAnimationsComplete({chart: me});
    }
  }
  draw() {
    const me = this;
    let i;
    if (me._resizeBeforeDraw) {
      const {width, height} = me._resizeBeforeDraw;
      me._resize(width, height);
      me._resizeBeforeDraw = null;
    }
    me.clear();
    if (me.width <= 0 || me.height <= 0) {
      return;
    }
    if (me.notifyPlugins('beforeDraw', {cancelable: true}) === false) {
      return;
    }
    const layers = me._layers;
    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
      layers[i].draw(me.chartArea);
    }
    me._drawDatasets();
    for (; i < layers.length; ++i) {
      layers[i].draw(me.chartArea);
    }
    me.notifyPlugins('afterDraw');
  }
  _getSortedDatasetMetas(filterVisible) {
    const me = this;
    const metasets = me._sortedMetasets;
    const result = [];
    let i, ilen;
    for (i = 0, ilen = metasets.length; i < ilen; ++i) {
      const meta = metasets[i];
      if (!filterVisible || meta.visible) {
        result.push(meta);
      }
    }
    return result;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(true);
  }
  _drawDatasets() {
    const me = this;
    if (me.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {
      return;
    }
    const metasets = me.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      me._drawDataset(metasets[i]);
    }
    me.notifyPlugins('afterDatasetsDraw');
  }
  _drawDataset(meta) {
    const me = this;
    const ctx = me.ctx;
    const clip = meta._clip;
    const useClip = !clip.disabled;
    const area = me.chartArea;
    const args = {
      meta,
      index: meta.index,
      cancelable: true
    };
    if (me.notifyPlugins('beforeDatasetDraw', args) === false) {
      return;
    }
    if (useClip) {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.U)(ctx, {
        left: clip.left === false ? 0 : area.left - clip.left,
        right: clip.right === false ? me.width : area.right + clip.right,
        top: clip.top === false ? 0 : area.top - clip.top,
        bottom: clip.bottom === false ? me.height : area.bottom + clip.bottom
      });
    }
    meta.controller.draw();
    if (useClip) {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.W)(ctx);
    }
    args.cancelable = false;
    me.notifyPlugins('afterDatasetDraw', args);
  }
  getElementsAtEventForMode(e, mode, options, useFinalPosition) {
    const method = Interaction.modes[mode];
    if (typeof method === 'function') {
      return method(this, e, options, useFinalPosition);
    }
    return [];
  }
  getDatasetMeta(datasetIndex) {
    const me = this;
    const dataset = me.data.datasets[datasetIndex];
    const metasets = me._metasets;
    let meta = metasets.filter(x => x && x._dataset === dataset).pop();
    if (!meta) {
      meta = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null,
        order: dataset && dataset.order || 0,
        index: datasetIndex,
        _dataset: dataset,
        _parsed: [],
        _sorted: false
      };
      metasets.push(meta);
    }
    return meta;
  }
  getContext() {
    return this.$context || (this.$context = {chart: this, type: 'chart'});
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(datasetIndex) {
    const dataset = this.data.datasets[datasetIndex];
    if (!dataset) {
      return false;
    }
    const meta = this.getDatasetMeta(datasetIndex);
    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;
  }
  setDatasetVisibility(datasetIndex, visible) {
    const meta = this.getDatasetMeta(datasetIndex);
    meta.hidden = !visible;
  }
  toggleDataVisibility(index) {
    this._hiddenIndices[index] = !this._hiddenIndices[index];
  }
  getDataVisibility(index) {
    return !this._hiddenIndices[index];
  }
  _updateVisibility(datasetIndex, dataIndex, visible) {
    const me = this;
    const mode = visible ? 'show' : 'hide';
    const meta = me.getDatasetMeta(datasetIndex);
    const anims = meta.controller._resolveAnimations(undefined, mode);
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.h)(dataIndex)) {
      meta.data[dataIndex].hidden = !visible;
      me.update();
    } else {
      me.setDatasetVisibility(datasetIndex, visible);
      anims.update(meta, {visible});
      me.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);
    }
  }
  hide(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, false);
  }
  show(datasetIndex, dataIndex) {
    this._updateVisibility(datasetIndex, dataIndex, true);
  }
  _destroyDatasetMeta(datasetIndex) {
    const me = this;
    const meta = me._metasets && me._metasets[datasetIndex];
    if (meta && meta.controller) {
      meta.controller._destroy();
      delete me._metasets[datasetIndex];
    }
  }
  destroy() {
    const me = this;
    const {canvas, ctx} = me;
    let i, ilen;
    me.stop();
    animator.remove(me);
    for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
      me._destroyDatasetMeta(i);
    }
    me.config.clearCache();
    if (canvas) {
      me.unbindEvents();
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ab)(canvas, ctx);
      me.platform.releaseContext(ctx);
      me.canvas = null;
      me.ctx = null;
    }
    me.notifyPlugins('destroy');
    delete instances[me.id];
  }
  toBase64Image(...args) {
    return this.canvas.toDataURL(...args);
  }
  bindEvents() {
    this.bindUserEvents();
    if (this.options.responsive) {
      this.bindResponsiveEvents();
    } else {
      this.attached = true;
    }
  }
  bindUserEvents() {
    const me = this;
    const listeners = me._listeners;
    const platform = me.platform;
    const _add = (type, listener) => {
      platform.addEventListener(me, type, listener);
      listeners[type] = listener;
    };
    const listener = function(e, x, y) {
      e.offsetX = x;
      e.offsetY = y;
      me._eventHandler(e);
    };
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(me.options.events, (type) => _add(type, listener));
  }
  bindResponsiveEvents() {
    const me = this;
    if (!me._responsiveListeners) {
      me._responsiveListeners = {};
    }
    const listeners = me._responsiveListeners;
    const platform = me.platform;
    const _add = (type, listener) => {
      platform.addEventListener(me, type, listener);
      listeners[type] = listener;
    };
    const _remove = (type, listener) => {
      if (listeners[type]) {
        platform.removeEventListener(me, type, listener);
        delete listeners[type];
      }
    };
    const listener = (width, height) => {
      if (me.canvas) {
        me.resize(width, height);
      }
    };
    let detached;
    const attached = () => {
      _remove('attach', attached);
      me.attached = true;
      me.resize();
      _add('resize', listener);
      _add('detach', detached);
    };
    detached = () => {
      me.attached = false;
      _remove('resize', listener);
      _add('attach', attached);
    };
    if (platform.isAttached(me.canvas)) {
      attached();
    } else {
      detached();
    }
  }
  unbindEvents() {
    const me = this;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(me._listeners, (listener, type) => {
      me.platform.removeEventListener(me, type, listener);
    });
    me._listeners = {};
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(me._responsiveListeners, (listener, type) => {
      me.platform.removeEventListener(me, type, listener);
    });
    me._responsiveListeners = undefined;
  }
  updateHoverStyle(items, mode, enabled) {
    const prefix = enabled ? 'set' : 'remove';
    let meta, item, i, ilen;
    if (mode === 'dataset') {
      meta = this.getDatasetMeta(items[0].datasetIndex);
      meta.controller['_' + prefix + 'DatasetHoverStyle']();
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      item = items[i];
      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
      if (controller) {
        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);
      }
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements) {
    const me = this;
    const lastActive = me._active || [];
    const active = activeElements.map(({datasetIndex, index}) => {
      const meta = me.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error('No dataset found at index ' + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index],
        index,
      };
    });
    const changed = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ad)(active, lastActive);
    if (changed) {
      me._active = active;
      me._updateHoverStyles(active, lastActive);
    }
  }
  notifyPlugins(hook, args, filter) {
    return this._plugins.notify(this, hook, args, filter);
  }
  _updateHoverStyles(active, lastActive, replay) {
    const me = this;
    const hoverOptions = me.options.hover;
    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));
    const deactivated = diff(lastActive, active);
    const activated = replay ? active : diff(active, lastActive);
    if (deactivated.length) {
      me.updateHoverStyle(deactivated, hoverOptions.mode, false);
    }
    if (activated.length && hoverOptions.mode) {
      me.updateHoverStyle(activated, hoverOptions.mode, true);
    }
  }
  _eventHandler(e, replay) {
    const me = this;
    const args = {event: e, replay, cancelable: true};
    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.type);
    if (me.notifyPlugins('beforeEvent', args, eventFilter) === false) {
      return;
    }
    const changed = me._handleEvent(e, replay);
    args.cancelable = false;
    me.notifyPlugins('afterEvent', args, eventFilter);
    if (changed || args.changed) {
      me.render();
    }
    return me;
  }
  _handleEvent(e, replay) {
    const me = this;
    const {_active: lastActive = [], options} = me;
    const hoverOptions = options.hover;
    const useFinalPosition = replay;
    let active = [];
    let changed = false;
    let lastEvent = null;
    if (e.type !== 'mouseout') {
      active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
      lastEvent = e.type === 'click' ? me._lastEvent : e;
    }
    me._lastEvent = null;
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.y)(e, me.chartArea, me._minPadding)) {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(options.onHover, [e, active, me], me);
      if (e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu') {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(options.onClick, [e, active, me], me);
      }
    }
    changed = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ad)(active, lastActive);
    if (changed || replay) {
      me._active = active;
      me._updateHoverStyles(active, lastActive, replay);
    }
    me._lastEvent = lastEvent;
    return changed;
  }
}
const invalidatePlugins = () => (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(Chart.instances, (chart) => chart._plugins.invalidate());
const enumerable = true;
Object.defineProperties(Chart, {
  defaults: {
    enumerable,
    value: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d
  },
  instances: {
    enumerable,
    value: instances
  },
  overrides: {
    enumerable,
    value: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.$
  },
  registry: {
    enumerable,
    value: registry
  },
  version: {
    enumerable,
    value: version
  },
  getChart: {
    enumerable,
    value: getChart
  },
  register: {
    enumerable,
    value: (...items) => {
      registry.add(...items);
      invalidatePlugins();
    }
  },
  unregister: {
    enumerable,
    value: (...items) => {
      registry.remove(...items);
      invalidatePlugins();
    }
  }
});

function clipArc(ctx, element, endAngle) {
  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;
  let angleMargin = pixelMargin / outerRadius;
  ctx.beginPath();
  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  if (innerRadius > pixelMargin) {
    angleMargin = pixelMargin / innerRadius;
    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
  } else {
    ctx.arc(x, y, pixelMargin, endAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, startAngle - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H);
  }
  ctx.closePath();
  ctx.clip();
}
function toRadiusCorners(value) {
  return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.af)(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);
}
function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
  const o = toRadiusCorners(arc.options.borderRadius);
  const halfThickness = (outerRadius - innerRadius) / 2;
  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
  const computeOuterLimit = (val) => {
    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(val, 0, Math.min(halfThickness, outerArcLimit));
  };
  return {
    outerStart: computeOuterLimit(o.outerStart),
    outerEnd: computeOuterLimit(o.outerEnd),
    innerStart: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(o.innerStart, 0, innerLimit),
    innerEnd: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(o.innerEnd, 0, innerLimit),
  };
}
function rThetaToXY(r, theta, x, y) {
  return {
    x: x + r * Math.cos(theta),
    y: y + r * Math.sin(theta),
  };
}
function pathArc(ctx, element, offset, spacing, end) {
  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;
  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
  let spacingOffset = 0;
  const alpha = end - start;
  if (spacing) {
    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;
    spacingOffset = (alpha - adjustedAngle) / 2;
  }
  const beta = Math.max(0.001, alpha * outerRadius - offset / _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P) / outerRadius;
  const angleOffset = (alpha - beta) / 2;
  const startAngle = start + angleOffset + spacingOffset;
  const endAngle = end - angleOffset - spacingOffset;
  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
  const outerStartAdjustedRadius = outerRadius - outerStart;
  const outerEndAdjustedRadius = outerRadius - outerEnd;
  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
  const innerStartAdjustedRadius = innerRadius + innerStart;
  const innerEndAdjustedRadius = innerRadius + innerEnd;
  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
  ctx.beginPath();
  ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);
  if (outerEnd > 0) {
    const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
    ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H);
  }
  const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
  ctx.lineTo(p4.x, p4.y);
  if (innerEnd > 0) {
    const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
    ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, innerEndAdjustedAngle + Math.PI);
  }
  ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);
  if (innerStart > 0) {
    const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
    ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H);
  }
  const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
  ctx.lineTo(p8.x, p8.y);
  if (outerStart > 0) {
    const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
    ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H, outerStartAdjustedAngle);
  }
  ctx.closePath();
}
function drawArc(ctx, element, offset, spacing) {
  const {fullCircles, startAngle, circumference} = element;
  let endAngle = element.endAngle;
  if (fullCircles) {
    pathArc(ctx, element, offset, spacing, startAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T);
    for (let i = 0; i < fullCircles; ++i) {
      ctx.fill();
    }
    if (!isNaN(circumference)) {
      endAngle = startAngle + circumference % _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T;
      if (circumference % _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T === 0) {
        endAngle += _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T;
      }
    }
  }
  pathArc(ctx, element, offset, spacing, endAngle);
  ctx.fill();
  return endAngle;
}
function drawFullCircleBorders(ctx, element, inner) {
  const {x, y, startAngle, pixelMargin, fullCircles} = element;
  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);
  const innerRadius = element.innerRadius + pixelMargin;
  let i;
  if (inner) {
    clipArc(ctx, element, startAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T);
  }
  ctx.beginPath();
  ctx.arc(x, y, innerRadius, startAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T, startAngle, true);
  for (i = 0; i < fullCircles; ++i) {
    ctx.stroke();
  }
  ctx.beginPath();
  ctx.arc(x, y, outerRadius, startAngle, startAngle + _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T);
  for (i = 0; i < fullCircles; ++i) {
    ctx.stroke();
  }
}
function drawBorder(ctx, element, offset, spacing, endAngle) {
  const {options} = element;
  const inner = options.borderAlign === 'inner';
  if (!options.borderWidth) {
    return;
  }
  if (inner) {
    ctx.lineWidth = options.borderWidth * 2;
    ctx.lineJoin = 'round';
  } else {
    ctx.lineWidth = options.borderWidth;
    ctx.lineJoin = 'bevel';
  }
  if (element.fullCircles) {
    drawFullCircleBorders(ctx, element, inner);
  }
  if (inner) {
    clipArc(ctx, element, endAngle);
  }
  pathArc(ctx, element, offset, spacing, endAngle);
  ctx.stroke();
}
class ArcElement extends Element {
  constructor(cfg) {
    super();
    this.options = undefined;
    this.circumference = undefined;
    this.startAngle = undefined;
    this.endAngle = undefined;
    this.innerRadius = undefined;
    this.outerRadius = undefined;
    this.pixelMargin = 0;
    this.fullCircles = 0;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(chartX, chartY, useFinalPosition) {
    const point = this.getProps(['x', 'y'], useFinalPosition);
    const {angle, distance} = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ae)(point, {x: chartX, y: chartY});
    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([
      'startAngle',
      'endAngle',
      'innerRadius',
      'outerRadius',
      'circumference'
    ], useFinalPosition);
    const rAdjust = this.options.spacing / 2;
    const betweenAngles = circumference >= _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.o)(angle, startAngle, endAngle);
    const withinRadius = (distance >= innerRadius + rAdjust && distance <= outerRadius + rAdjust);
    return (betweenAngles && withinRadius);
  }
  getCenterPoint(useFinalPosition) {
    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([
      'x',
      'y',
      'startAngle',
      'endAngle',
      'innerRadius',
      'outerRadius',
      'circumference',
    ], useFinalPosition);
    const {offset, spacing} = this.options;
    const halfAngle = (startAngle + endAngle) / 2;
    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
    return {
      x: x + Math.cos(halfAngle) * halfRadius,
      y: y + Math.sin(halfAngle) * halfRadius
    };
  }
  tooltipPosition(useFinalPosition) {
    return this.getCenterPoint(useFinalPosition);
  }
  draw(ctx) {
    const me = this;
    const {options, circumference} = me;
    const offset = (options.offset || 0) / 2;
    const spacing = (options.spacing || 0) / 2;
    me.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;
    me.fullCircles = circumference > _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T ? Math.floor(circumference / _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T) : 0;
    if (circumference === 0 || me.innerRadius < 0 || me.outerRadius < 0) {
      return;
    }
    ctx.save();
    let radiusOffset = 0;
    if (offset) {
      radiusOffset = offset / 2;
      const halfAngle = (me.startAngle + me.endAngle) / 2;
      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);
      if (me.circumference >= _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P) {
        radiusOffset = offset;
      }
    }
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    const endAngle = drawArc(ctx, me, radiusOffset, spacing);
    drawBorder(ctx, me, radiusOffset, spacing, endAngle);
    ctx.restore();
  }
}
ArcElement.id = 'arc';
ArcElement.defaults = {
  borderAlign: 'center',
  borderColor: '#fff',
  borderRadius: 0,
  borderWidth: 2,
  offset: 0,
  spacing: 0,
  angle: undefined,
};
ArcElement.defaultRoutes = {
  backgroundColor: 'backgroundColor'
};

function setStyle(ctx, options, style = options) {
  ctx.lineCap = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderCapStyle, options.borderCapStyle);
  ctx.setLineDash((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderDash, options.borderDash));
  ctx.lineDashOffset = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderDashOffset, options.borderDashOffset);
  ctx.lineJoin = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderJoinStyle, options.borderJoinStyle);
  ctx.lineWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderWidth, options.borderWidth);
  ctx.strokeStyle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
  ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
  if (options.stepped) {
    return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.am;
  }
  if (options.tension || options.cubicInterpolationMode === 'monotone') {
    return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.an;
  }
  return lineTo;
}
function pathVars(points, segment, params = {}) {
  const count = points.length;
  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;
  const {start: segmentStart, end: segmentEnd} = segment;
  const start = Math.max(paramsStart, segmentStart);
  const end = Math.min(paramsEnd, segmentEnd);
  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
  return {
    count,
    start,
    loop: segment.loop,
    ilen: end < start && !outside ? count + end - start : end - start
  };
}
function pathSegment(ctx, line, segment, params) {
  const {points, options} = line;
  const {count, start, loop, ilen} = pathVars(points, segment, params);
  const lineMethod = getLineMethod(options);
  let {move = true, reverse} = params || {};
  let i, point, prev;
  for (i = 0; i <= ilen; ++i) {
    point = points[(start + (reverse ? ilen - i : i)) % count];
    if (point.skip) {
      continue;
    } else if (move) {
      ctx.moveTo(point.x, point.y);
      move = false;
    } else {
      lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    prev = point;
  }
  if (loop) {
    point = points[(start + (reverse ? ilen : 0)) % count];
    lineMethod(ctx, prev, point, reverse, options.stepped);
  }
  return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
  const points = line.points;
  const {count, start, ilen} = pathVars(points, segment, params);
  const {move = true, reverse} = params || {};
  let avgX = 0;
  let countX = 0;
  let i, point, prevX, minY, maxY, lastY;
  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;
  const drawX = () => {
    if (minY !== maxY) {
      ctx.lineTo(avgX, maxY);
      ctx.lineTo(avgX, minY);
      ctx.lineTo(avgX, lastY);
    }
  };
  if (move) {
    point = points[pointIndex(0)];
    ctx.moveTo(point.x, point.y);
  }
  for (i = 0; i <= ilen; ++i) {
    point = points[pointIndex(i)];
    if (point.skip) {
      continue;
    }
    const x = point.x;
    const y = point.y;
    const truncX = x | 0;
    if (truncX === prevX) {
      if (y < minY) {
        minY = y;
      } else if (y > maxY) {
        maxY = y;
      }
      avgX = (countX * avgX + x) / ++countX;
    } else {
      drawX();
      ctx.lineTo(x, y);
      prevX = truncX;
      countX = 0;
      minY = maxY = y;
    }
    lastY = y;
  }
  drawX();
}
function _getSegmentMethod(line) {
  const opts = line.options;
  const borderDash = opts.borderDash && opts.borderDash.length;
  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;
  return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
  if (options.stepped) {
    return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aj;
  }
  if (options.tension || options.cubicInterpolationMode === 'monotone') {
    return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ak;
  }
  return _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.al;
}
function strokePathWithCache(ctx, line, start, count) {
  let path = line._path;
  if (!path) {
    path = line._path = new Path2D();
    if (line.path(path, start, count)) {
      path.closePath();
    }
  }
  setStyle(ctx, line.options);
  ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
  const {segments, options} = line;
  const segmentMethod = _getSegmentMethod(line);
  for (const segment of segments) {
    setStyle(ctx, options, segment.style);
    ctx.beginPath();
    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {
      ctx.closePath();
    }
    ctx.stroke();
  }
}
const usePath2D = typeof Path2D === 'function';
function draw(ctx, line, start, count) {
  if (usePath2D && line.segments.length === 1) {
    strokePathWithCache(ctx, line, start, count);
  } else {
    strokePathDirect(ctx, line, start, count);
  }
}
class LineElement extends Element {
  constructor(cfg) {
    super();
    this.animated = true;
    this.options = undefined;
    this._loop = undefined;
    this._fullLoop = undefined;
    this._path = undefined;
    this._points = undefined;
    this._segments = undefined;
    this._decimated = false;
    this._pointsUpdated = false;
    this._datasetIndex = undefined;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  updateControlPoints(chartArea, indexAxis) {
    const me = this;
    const options = me.options;
    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !me._pointsUpdated) {
      const loop = options.spanGaps ? me._loop : me._fullLoop;
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ag)(me._points, options, chartArea, loop, indexAxis);
      me._pointsUpdated = true;
    }
  }
  set points(points) {
    const me = this;
    me._points = points;
    delete me._segments;
    delete me._path;
    me._pointsUpdated = false;
  }
  get points() {
    return this._points;
  }
  get segments() {
    return this._segments || (this._segments = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ah)(this, this.options.segment));
  }
  first() {
    const segments = this.segments;
    const points = this.points;
    return segments.length && points[segments[0].start];
  }
  last() {
    const segments = this.segments;
    const points = this.points;
    const count = segments.length;
    return count && points[segments[count - 1].end];
  }
  interpolate(point, property) {
    const me = this;
    const options = me.options;
    const value = point[property];
    const points = me.points;
    const segments = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ai)(me, {property, start: value, end: value});
    if (!segments.length) {
      return;
    }
    const result = [];
    const _interpolate = _getInterpolationMethod(options);
    let i, ilen;
    for (i = 0, ilen = segments.length; i < ilen; ++i) {
      const {start, end} = segments[i];
      const p1 = points[start];
      const p2 = points[end];
      if (p1 === p2) {
        result.push(p1);
        continue;
      }
      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
      const interpolated = _interpolate(p1, p2, t, options.stepped);
      interpolated[property] = point[property];
      result.push(interpolated);
    }
    return result.length === 1 ? result[0] : result;
  }
  pathSegment(ctx, segment, params) {
    const segmentMethod = _getSegmentMethod(this);
    return segmentMethod(ctx, this, segment, params);
  }
  path(ctx, start, count) {
    const me = this;
    const segments = me.segments;
    const segmentMethod = _getSegmentMethod(me);
    let loop = me._loop;
    start = start || 0;
    count = count || (me.points.length - start);
    for (const segment of segments) {
      loop &= segmentMethod(ctx, me, segment, {start, end: start + count - 1});
    }
    return !!loop;
  }
  draw(ctx, chartArea, start, count) {
    const me = this;
    const options = me.options || {};
    const points = me.points || [];
    if (!points.length || !options.borderWidth) {
      return;
    }
    ctx.save();
    draw(ctx, me, start, count);
    ctx.restore();
    if (me.animated) {
      me._pointsUpdated = false;
      me._path = undefined;
    }
  }
}
LineElement.id = 'line';
LineElement.defaults = {
  borderCapStyle: 'butt',
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: 'miter',
  borderWidth: 3,
  capBezierPoints: true,
  cubicInterpolationMode: 'default',
  fill: false,
  spanGaps: false,
  stepped: false,
  tension: 0,
};
LineElement.defaultRoutes = {
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};
LineElement.descriptors = {
  _scriptable: true,
  _indexable: (name) => name !== 'borderDash' && name !== 'fill',
};

function inRange$1(el, pos, axis, useFinalPosition) {
  const options = el.options;
  const {[axis]: value} = el.getProps([axis], useFinalPosition);
  return (Math.abs(pos - value) < options.radius + options.hitRadius);
}
class PointElement extends Element {
  constructor(cfg) {
    super();
    this.options = undefined;
    this.parsed = undefined;
    this.skip = undefined;
    this.stop = undefined;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    const options = this.options;
    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange$1(this, mouseX, 'x', useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange$1(this, mouseY, 'y', useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);
    return {x, y};
  }
  size(options) {
    options = options || this.options || {};
    let radius = options.radius || 0;
    radius = Math.max(radius, radius && options.hoverRadius || 0);
    const borderWidth = radius && options.borderWidth || 0;
    return (radius + borderWidth) * 2;
  }
  draw(ctx, area) {
    const me = this;
    const options = me.options;
    if (me.skip || options.radius < 0.1 || !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.y)(me, area, me.size(options) / 2)) {
      return;
    }
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.fillStyle = options.backgroundColor;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ao)(ctx, options, me.x, me.y);
  }
  getRange() {
    const options = this.options || {};
    return options.radius + options.hitRadius;
  }
}
PointElement.id = 'point';
PointElement.defaults = {
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: 'circle',
  radius: 3,
  rotation: 0
};
PointElement.defaultRoutes = {
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};

function getBarBounds(bar, useFinalPosition) {
  const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);
  let left, right, top, bottom, half;
  if (bar.horizontal) {
    half = height / 2;
    left = Math.min(x, base);
    right = Math.max(x, base);
    top = y - half;
    bottom = y + half;
  } else {
    half = width / 2;
    left = x - half;
    right = x + half;
    top = Math.min(y, base);
    bottom = Math.max(y, base);
  }
  return {left, top, right, bottom};
}
function skipOrLimit(skip, value, min, max) {
  return skip ? 0 : (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
  const value = bar.options.borderWidth;
  const skip = bar.borderSkipped;
  const o = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aq)(value);
  return {
    t: skipOrLimit(skip.top, o.top, 0, maxH),
    r: skipOrLimit(skip.right, o.right, 0, maxW),
    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
    l: skipOrLimit(skip.left, o.left, 0, maxW)
  };
}
function parseBorderRadius(bar, maxW, maxH) {
  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);
  const value = bar.options.borderRadius;
  const o = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ar)(value);
  const maxR = Math.min(maxW, maxH);
  const skip = bar.borderSkipped;
  const enableBorder = enableBorderRadius || (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(value);
  return {
    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
  };
}
function boundingRects(bar) {
  const bounds = getBarBounds(bar);
  const width = bounds.right - bounds.left;
  const height = bounds.bottom - bounds.top;
  const border = parseBorderWidth(bar, width / 2, height / 2);
  const radius = parseBorderRadius(bar, width / 2, height / 2);
  return {
    outer: {
      x: bounds.left,
      y: bounds.top,
      w: width,
      h: height,
      radius
    },
    inner: {
      x: bounds.left + border.l,
      y: bounds.top + border.t,
      w: width - border.l - border.r,
      h: height - border.t - border.b,
      radius: {
        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),
      }
    }
  };
}
function inRange(bar, x, y, useFinalPosition) {
  const skipX = x === null;
  const skipY = y === null;
  const skipBoth = skipX && skipY;
  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
  return bounds
		&& (skipX || x >= bounds.left && x <= bounds.right)
		&& (skipY || y >= bounds.top && y <= bounds.bottom);
}
function hasRadius(radius) {
  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
  ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
  const x = rect.x !== refRect.x ? -amount : 0;
  const y = rect.y !== refRect.y ? -amount : 0;
  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
  return {
    x: rect.x + x,
    y: rect.y + y,
    w: rect.w + w,
    h: rect.h + h,
    radius: rect.radius
  };
}
class BarElement extends Element {
  constructor(cfg) {
    super();
    this.options = undefined;
    this.horizontal = undefined;
    this.base = undefined;
    this.width = undefined;
    this.height = undefined;
    if (cfg) {
      Object.assign(this, cfg);
    }
  }
  draw(ctx) {
    const options = this.options;
    const {inner, outer} = boundingRects(this);
    const addRectPath = hasRadius(outer.radius) ? _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ap : addNormalRectPath;
    const inflateAmount = 0.33;
    ctx.save();
    if (outer.w !== inner.w || outer.h !== inner.h) {
      ctx.beginPath();
      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
      ctx.clip();
      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
      ctx.fillStyle = options.borderColor;
      ctx.fill('evenodd');
    }
    ctx.beginPath();
    addRectPath(ctx, inflateRect(inner, inflateAmount, outer));
    ctx.fillStyle = options.backgroundColor;
    ctx.fill();
    ctx.restore();
  }
  inRange(mouseX, mouseY, useFinalPosition) {
    return inRange(this, mouseX, mouseY, useFinalPosition);
  }
  inXRange(mouseX, useFinalPosition) {
    return inRange(this, mouseX, null, useFinalPosition);
  }
  inYRange(mouseY, useFinalPosition) {
    return inRange(this, null, mouseY, useFinalPosition);
  }
  getCenterPoint(useFinalPosition) {
    const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);
    return {
      x: horizontal ? (x + base) / 2 : x,
      y: horizontal ? y : (y + base) / 2
    };
  }
  getRange(axis) {
    return axis === 'x' ? this.width / 2 : this.height / 2;
  }
}
BarElement.id = 'bar';
BarElement.defaults = {
  borderSkipped: 'start',
  borderWidth: 0,
  borderRadius: 0,
  enableBorderRadius: true,
  pointStyle: undefined
};
BarElement.defaultRoutes = {
  backgroundColor: 'backgroundColor',
  borderColor: 'borderColor'
};

var elements = /*#__PURE__*/Object.freeze({
__proto__: null,
ArcElement: ArcElement,
LineElement: LineElement,
PointElement: PointElement,
BarElement: BarElement
});

function lttbDecimation(data, start, count, availableWidth, options) {
  const samples = options.samples || availableWidth;
  if (samples >= count) {
    return data.slice(start, start + count);
  }
  const decimated = [];
  const bucketWidth = (count - 2) / (samples - 2);
  let sampledIndex = 0;
  const endIndex = start + count - 1;
  let a = start;
  let i, maxAreaPoint, maxArea, area, nextA;
  decimated[sampledIndex++] = data[a];
  for (i = 0; i < samples - 2; i++) {
    let avgX = 0;
    let avgY = 0;
    let j;
    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
    const avgRangeLength = avgRangeEnd - avgRangeStart;
    for (j = avgRangeStart; j < avgRangeEnd; j++) {
      avgX += data[j].x;
      avgY += data[j].y;
    }
    avgX /= avgRangeLength;
    avgY /= avgRangeLength;
    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
    const {x: pointAx, y: pointAy} = data[a];
    maxArea = area = -1;
    for (j = rangeOffs; j < rangeTo; j++) {
      area = 0.5 * Math.abs(
        (pointAx - avgX) * (data[j].y - pointAy) -
        (pointAx - data[j].x) * (avgY - pointAy)
      );
      if (area > maxArea) {
        maxArea = area;
        maxAreaPoint = data[j];
        nextA = j;
      }
    }
    decimated[sampledIndex++] = maxAreaPoint;
    a = nextA;
  }
  decimated[sampledIndex++] = data[endIndex];
  return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
  let avgX = 0;
  let countX = 0;
  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
  const decimated = [];
  const endIndex = start + count - 1;
  const xMin = data[start].x;
  const xMax = data[endIndex].x;
  const dx = xMax - xMin;
  for (i = start; i < start + count; ++i) {
    point = data[i];
    x = (point.x - xMin) / dx * availableWidth;
    y = point.y;
    const truncX = x | 0;
    if (truncX === prevX) {
      if (y < minY) {
        minY = y;
        minIndex = i;
      } else if (y > maxY) {
        maxY = y;
        maxIndex = i;
      }
      avgX = (countX * avgX + point.x) / ++countX;
    } else {
      const lastIndex = i - 1;
      if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(minIndex) && !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(maxIndex)) {
        const intermediateIndex1 = Math.min(minIndex, maxIndex);
        const intermediateIndex2 = Math.max(minIndex, maxIndex);
        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex1],
            x: avgX,
          });
        }
        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {
          decimated.push({
            ...data[intermediateIndex2],
            x: avgX
          });
        }
      }
      if (i > 0 && lastIndex !== startIndex) {
        decimated.push(data[lastIndex]);
      }
      decimated.push(point);
      prevX = truncX;
      countX = 0;
      minY = maxY = y;
      minIndex = maxIndex = startIndex = i;
    }
  }
  return decimated;
}
function cleanDecimatedDataset(dataset) {
  if (dataset._decimated) {
    const data = dataset._data;
    delete dataset._decimated;
    delete dataset._data;
    Object.defineProperty(dataset, 'data', {value: data});
  }
}
function cleanDecimatedData(chart) {
  chart.data.datasets.forEach((dataset) => {
    cleanDecimatedDataset(dataset);
  });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
  const pointCount = points.length;
  let start = 0;
  let count;
  const {iScale} = meta;
  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();
  if (minDefined) {
    start = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(points, iScale.axis, min).lo, 0, pointCount - 1);
  }
  if (maxDefined) {
    count = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(points, iScale.axis, max).hi + 1, start, pointCount) - start;
  } else {
    count = pointCount - start;
  }
  return {start, count};
}
var plugin_decimation = {
  id: 'decimation',
  defaults: {
    algorithm: 'min-max',
    enabled: false,
  },
  beforeElementsUpdate: (chart, args, options) => {
    if (!options.enabled) {
      cleanDecimatedData(chart);
      return;
    }
    const availableWidth = chart.width;
    chart.data.datasets.forEach((dataset, datasetIndex) => {
      const {_data, indexAxis} = dataset;
      const meta = chart.getDatasetMeta(datasetIndex);
      const data = _data || dataset.data;
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a)([indexAxis, chart.options.indexAxis]) === 'y') {
        return;
      }
      if (meta.type !== 'line') {
        return;
      }
      const xAxis = chart.scales[meta.xAxisID];
      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {
        return;
      }
      if (chart.options.parsing) {
        return;
      }
      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);
      const threshold = options.threshold || 4 * availableWidth;
      if (count <= threshold) {
        cleanDecimatedDataset(dataset);
        return;
      }
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(_data)) {
        dataset._data = data;
        delete dataset.data;
        Object.defineProperty(dataset, 'data', {
          configurable: true,
          enumerable: true,
          get: function() {
            return this._decimated;
          },
          set: function(d) {
            this._data = d;
          }
        });
      }
      let decimated;
      switch (options.algorithm) {
      case 'lttb':
        decimated = lttbDecimation(data, start, count, availableWidth, options);
        break;
      case 'min-max':
        decimated = minMaxDecimation(data, start, count, availableWidth);
        break;
      default:
        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
      }
      dataset._decimated = decimated;
    });
  },
  destroy(chart) {
    cleanDecimatedData(chart);
  }
};

function getLineByIndex(chart, index) {
  const meta = chart.getDatasetMeta(index);
  const visible = meta && chart.isDatasetVisible(index);
  return visible ? meta.dataset : null;
}
function parseFillOption(line) {
  const options = line.options;
  const fillOption = options.fill;
  let fill = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(fillOption && fillOption.target, fillOption);
  if (fill === undefined) {
    fill = !!options.backgroundColor;
  }
  if (fill === false || fill === null) {
    return false;
  }
  if (fill === true) {
    return 'origin';
  }
  return fill;
}
function decodeFill(line, index, count) {
  const fill = parseFillOption(line);
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {
    return isNaN(fill.value) ? false : fill;
  }
  let target = parseFloat(fill);
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(target) && Math.floor(target) === target) {
    if (fill[0] === '-' || fill[0] === '+') {
      target = index + target;
    }
    if (target === index || target < 0 || target >= count) {
      return false;
    }
    return target;
  }
  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;
}
function computeLinearBoundary(source) {
  const {scale = {}, fill} = source;
  let target = null;
  let horizontal;
  if (fill === 'start') {
    target = scale.bottom;
  } else if (fill === 'end') {
    target = scale.top;
  } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {
    target = scale.getPixelForValue(fill.value);
  } else if (scale.getBasePixel) {
    target = scale.getBasePixel();
  }
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(target)) {
    horizontal = scale.isHorizontal();
    return {
      x: horizontal ? target : null,
      y: horizontal ? null : target
    };
  }
  return null;
}
class simpleArc {
  constructor(opts) {
    this.x = opts.x;
    this.y = opts.y;
    this.radius = opts.radius;
  }
  pathSegment(ctx, bounds, opts) {
    const {x, y, radius} = this;
    bounds = bounds || {start: 0, end: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T};
    ctx.arc(x, y, radius, bounds.end, bounds.start, true);
    return !opts.bounds;
  }
  interpolate(point) {
    const {x, y, radius} = this;
    const angle = point.angle;
    return {
      x: x + Math.cos(angle) * radius,
      y: y + Math.sin(angle) * radius,
      angle
    };
  }
}
function computeCircularBoundary(source) {
  const {scale, fill} = source;
  const options = scale.options;
  const length = scale.getLabels().length;
  const target = [];
  const start = options.reverse ? scale.max : scale.min;
  const end = options.reverse ? scale.min : scale.max;
  let i, center, value;
  if (fill === 'start') {
    value = start;
  } else if (fill === 'end') {
    value = end;
  } else if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.i)(fill)) {
    value = fill.value;
  } else {
    value = scale.getBaseValue();
  }
  if (options.grid.circular) {
    center = scale.getPointPositionForValue(0, start);
    return new simpleArc({
      x: center.x,
      y: center.y,
      radius: scale.getDistanceFromCenterForValue(value)
    });
  }
  for (i = 0; i < length; ++i) {
    target.push(scale.getPointPositionForValue(i, value));
  }
  return target;
}
function computeBoundary(source) {
  const scale = source.scale || {};
  if (scale.getPointPositionForValue) {
    return computeCircularBoundary(source);
  }
  return computeLinearBoundary(source);
}
function findSegmentEnd(start, end, points) {
  for (;end > start; end--) {
    const point = points[end];
    if (!isNaN(point.x) && !isNaN(point.y)) {
      break;
    }
  }
  return end;
}
function pointsFromSegments(boundary, line) {
  const {x = null, y = null} = boundary || {};
  const linePoints = line.points;
  const points = [];
  line.segments.forEach(({start, end}) => {
    end = findSegmentEnd(start, end, linePoints);
    const first = linePoints[start];
    const last = linePoints[end];
    if (y !== null) {
      points.push({x: first.x, y});
      points.push({x: last.x, y});
    } else if (x !== null) {
      points.push({x, y: first.y});
      points.push({x, y: last.y});
    }
  });
  return points;
}
function buildStackLine(source) {
  const {chart, scale, index, line} = source;
  const points = [];
  const segments = line.segments;
  const sourcePoints = line.points;
  const linesBelow = getLinesBelow(chart, index);
  linesBelow.push(createBoundaryLine({x: null, y: scale.bottom}, line));
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    for (let j = segment.start; j <= segment.end; j++) {
      addPointsBelow(points, sourcePoints[j], linesBelow);
    }
  }
  return new LineElement({points, options: {}});
}
const isLineAndNotInHideAnimation = (meta) => meta.type === 'line' && !meta.hidden;
function getLinesBelow(chart, index) {
  const below = [];
  const metas = chart.getSortedVisibleDatasetMetas();
  for (let i = 0; i < metas.length; i++) {
    const meta = metas[i];
    if (meta.index === index) {
      break;
    }
    if (isLineAndNotInHideAnimation(meta)) {
      below.unshift(meta.dataset);
    }
  }
  return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
  const postponed = [];
  for (let j = 0; j < linesBelow.length; j++) {
    const line = linesBelow[j];
    const {first, last, point} = findPoint(line, sourcePoint, 'x');
    if (!point || (first && last)) {
      continue;
    }
    if (first) {
      postponed.unshift(point);
    } else {
      points.push(point);
      if (!last) {
        break;
      }
    }
  }
  points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
  const point = line.interpolate(sourcePoint, property);
  if (!point) {
    return {};
  }
  const pointValue = point[property];
  const segments = line.segments;
  const linePoints = line.points;
  let first = false;
  let last = false;
  for (let i = 0; i < segments.length; i++) {
    const segment = segments[i];
    const firstValue = linePoints[segment.start][property];
    const lastValue = linePoints[segment.end][property];
    if (pointValue >= firstValue && pointValue <= lastValue) {
      first = pointValue === firstValue;
      last = pointValue === lastValue;
      break;
    }
  }
  return {first, last, point};
}
function getTarget(source) {
  const {chart, fill, line} = source;
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(fill)) {
    return getLineByIndex(chart, fill);
  }
  if (fill === 'stack') {
    return buildStackLine(source);
  }
  if (fill === 'shape') {
    return true;
  }
  const boundary = computeBoundary(source);
  if (boundary instanceof simpleArc) {
    return boundary;
  }
  return createBoundaryLine(boundary, line);
}
function createBoundaryLine(boundary, line) {
  let points = [];
  let _loop = false;
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(boundary)) {
    _loop = true;
    points = boundary;
  } else {
    points = pointsFromSegments(boundary, line);
  }
  return points.length ? new LineElement({
    points,
    options: {tension: 0},
    _loop,
    _fullLoop: _loop
  }) : null;
}
function resolveTarget(sources, index, propagate) {
  const source = sources[index];
  let fill = source.fill;
  const visited = [index];
  let target;
  if (!propagate) {
    return fill;
  }
  while (fill !== false && visited.indexOf(fill) === -1) {
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(fill)) {
      return fill;
    }
    target = sources[fill];
    if (!target) {
      return false;
    }
    if (target.visible) {
      return fill;
    }
    visited.push(fill);
    fill = target.fill;
  }
  return false;
}
function _clip(ctx, target, clipY) {
  ctx.beginPath();
  target.path(ctx);
  ctx.lineTo(target.last().x, clipY);
  ctx.lineTo(target.first().x, clipY);
  ctx.closePath();
  ctx.clip();
}
function getBounds(property, first, last, loop) {
  if (loop) {
    return;
  }
  let start = first[property];
  let end = last[property];
  if (property === 'angle') {
    start = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.at)(start);
    end = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.at)(end);
  }
  return {property, start, end};
}
function _getEdge(a, b, prop, fn) {
  if (a && b) {
    return fn(a[prop], b[prop]);
  }
  return a ? a[prop] : b ? b[prop] : 0;
}
function _segments(line, target, property) {
  const segments = line.segments;
  const points = line.points;
  const tpoints = target.points;
  const parts = [];
  for (const segment of segments) {
    let {start, end} = segment;
    end = findSegmentEnd(start, end, points);
    const bounds = getBounds(property, points[start], points[end], segment.loop);
    if (!target.segments) {
      parts.push({
        source: segment,
        target: bounds,
        start: points[start],
        end: points[end]
      });
      continue;
    }
    const targetSegments = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ai)(target, bounds);
    for (const tgt of targetSegments) {
      const subBounds = getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
      const fillSources = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.as)(segment, points, subBounds);
      for (const fillSource of fillSources) {
        parts.push({
          source: fillSource,
          target: tgt,
          start: {
            [property]: _getEdge(bounds, subBounds, 'start', Math.max)
          },
          end: {
            [property]: _getEdge(bounds, subBounds, 'end', Math.min)
          }
        });
      }
    }
  }
  return parts;
}
function clipBounds(ctx, scale, bounds) {
  const {top, bottom} = scale.chart.chartArea;
  const {property, start, end} = bounds || {};
  if (property === 'x') {
    ctx.beginPath();
    ctx.rect(start, top, end - start, bottom - top);
    ctx.clip();
  }
}
function interpolatedLineTo(ctx, target, point, property) {
  const interpolatedPoint = target.interpolate(point, property);
  if (interpolatedPoint) {
    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
  }
}
function _fill(ctx, cfg) {
  const {line, target, property, color, scale} = cfg;
  const segments = _segments(line, target, property);
  for (const {source: src, target: tgt, start, end} of segments) {
    const {style: {backgroundColor = color} = {}} = src;
    const notShape = target !== true;
    ctx.save();
    ctx.fillStyle = backgroundColor;
    clipBounds(ctx, scale, notShape && getBounds(property, start, end));
    ctx.beginPath();
    const lineLoop = !!line.pathSegment(ctx, src);
    let loop;
    if (notShape) {
      if (lineLoop) {
        ctx.closePath();
      } else {
        interpolatedLineTo(ctx, target, end, property);
      }
      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});
      loop = lineLoop && targetLoop;
      if (!loop) {
        interpolatedLineTo(ctx, target, start, property);
      }
    }
    ctx.closePath();
    ctx.fill(loop ? 'evenodd' : 'nonzero');
    ctx.restore();
  }
}
function doFill(ctx, cfg) {
  const {line, target, above, below, area, scale} = cfg;
  const property = line._loop ? 'angle' : cfg.axis;
  ctx.save();
  if (property === 'x' && below !== above) {
    _clip(ctx, target, area.top);
    _fill(ctx, {line, target, color: above, scale, property});
    ctx.restore();
    ctx.save();
    _clip(ctx, target, area.bottom);
  }
  _fill(ctx, {line, target, color: below, scale, property});
  ctx.restore();
}
function drawfill(ctx, source, area) {
  const target = getTarget(source);
  const {line, scale, axis} = source;
  const lineOpts = line.options;
  const fillOption = lineOpts.fill;
  const color = lineOpts.backgroundColor;
  const {above = color, below = color} = fillOption || {};
  if (target && line.points.length) {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.U)(ctx, area);
    doFill(ctx, {line, target, above, below, area, scale, axis});
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.W)(ctx);
  }
}
var plugin_filler = {
  id: 'filler',
  afterDatasetsUpdate(chart, _args, options) {
    const count = (chart.data.datasets || []).length;
    const sources = [];
    let meta, i, line, source;
    for (i = 0; i < count; ++i) {
      meta = chart.getDatasetMeta(i);
      line = meta.dataset;
      source = null;
      if (line && line.options && line instanceof LineElement) {
        source = {
          visible: chart.isDatasetVisible(i),
          index: i,
          fill: decodeFill(line, i, count),
          chart,
          axis: meta.controller.options.indexAxis,
          scale: meta.vScale,
          line,
        };
      }
      meta.$filler = source;
      sources.push(source);
    }
    for (i = 0; i < count; ++i) {
      source = sources[i];
      if (!source || source.fill === false) {
        continue;
      }
      source.fill = resolveTarget(sources, i, options.propagate);
    }
  },
  beforeDraw(chart, _args, options) {
    const draw = options.drawTime === 'beforeDraw';
    const metasets = chart.getSortedVisibleDatasetMetas();
    const area = chart.chartArea;
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (!source) {
        continue;
      }
      source.line.updateControlPoints(area, source.axis);
      if (draw) {
        drawfill(chart.ctx, source, area);
      }
    }
  },
  beforeDatasetsDraw(chart, _args, options) {
    if (options.drawTime !== 'beforeDatasetsDraw') {
      return;
    }
    const metasets = chart.getSortedVisibleDatasetMetas();
    for (let i = metasets.length - 1; i >= 0; --i) {
      const source = metasets[i].$filler;
      if (source) {
        drawfill(chart.ctx, source, chart.chartArea);
      }
    }
  },
  beforeDatasetDraw(chart, args, options) {
    const source = args.meta.$filler;
    if (!source || source.fill === false || options.drawTime !== 'beforeDatasetDraw') {
      return;
    }
    drawfill(chart.ctx, source, chart.chartArea);
  },
  defaults: {
    propagate: true,
    drawTime: 'beforeDatasetDraw'
  }
};

const getBoxSize = (labelOpts, fontSize) => {
  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;
  if (labelOpts.usePointStyle) {
    boxHeight = Math.min(boxHeight, fontSize);
    boxWidth = Math.min(boxWidth, fontSize);
  }
  return {
    boxWidth,
    boxHeight,
    itemHeight: Math.max(fontSize, boxHeight)
  };
};
const itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
class Legend extends Element {
  constructor(config) {
    super();
    this._added = false;
    this.legendHitBoxes = [];
    this._hoveredItem = null;
    this.doughnutMode = false;
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this.legendItems = undefined;
    this.columnSizes = undefined;
    this.lineWidths = undefined;
    this.maxHeight = undefined;
    this.maxWidth = undefined;
    this.top = undefined;
    this.bottom = undefined;
    this.left = undefined;
    this.right = undefined;
    this.height = undefined;
    this.width = undefined;
    this._margins = undefined;
    this.position = undefined;
    this.weight = undefined;
    this.fullSize = undefined;
  }
  update(maxWidth, maxHeight, margins) {
    const me = this;
    me.maxWidth = maxWidth;
    me.maxHeight = maxHeight;
    me._margins = margins;
    me.setDimensions();
    me.buildLabels();
    me.fit();
  }
  setDimensions() {
    const me = this;
    if (me.isHorizontal()) {
      me.width = me.maxWidth;
      me.left = me._margins.left;
      me.right = me.width;
    } else {
      me.height = me.maxHeight;
      me.top = me._margins.top;
      me.bottom = me.height;
    }
  }
  buildLabels() {
    const me = this;
    const labelOpts = me.options.labels || {};
    let legendItems = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(labelOpts.generateLabels, [me.chart], me) || [];
    if (labelOpts.filter) {
      legendItems = legendItems.filter((item) => labelOpts.filter(item, me.chart.data));
    }
    if (labelOpts.sort) {
      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, me.chart.data));
    }
    if (me.options.reverse) {
      legendItems.reverse();
    }
    me.legendItems = legendItems;
  }
  fit() {
    const me = this;
    const {options, ctx} = me;
    if (!options.display) {
      me.width = me.height = 0;
      return;
    }
    const labelOpts = options.labels;
    const labelFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(labelOpts.font);
    const fontSize = labelFont.size;
    const titleHeight = me._computeTitleHeight();
    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);
    let width, height;
    ctx.font = labelFont.string;
    if (me.isHorizontal()) {
      width = me.maxWidth;
      height = me._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    } else {
      height = me.maxHeight;
      width = me._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;
    }
    me.width = Math.min(width, options.maxWidth || me.maxWidth);
    me.height = Math.min(height, options.maxHeight || me.maxHeight);
  }
  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
    const me = this;
    const {ctx, maxWidth, options: {labels: {padding}}} = me;
    const hitboxes = me.legendHitBoxes = [];
    const lineWidths = me.lineWidths = [0];
    const lineHeight = itemHeight + padding;
    let totalHeight = titleHeight;
    ctx.textAlign = 'left';
    ctx.textBaseline = 'middle';
    let row = -1;
    let top = -lineHeight;
    me.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
        totalHeight += lineHeight;
        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
        top += lineHeight;
        row++;
      }
      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};
      lineWidths[lineWidths.length - 1] += itemWidth + padding;
    });
    return totalHeight;
  }
  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {
    const me = this;
    const {ctx, maxHeight, options: {labels: {padding}}} = me;
    const hitboxes = me.legendHitBoxes = [];
    const columnSizes = me.columnSizes = [];
    const heightLimit = maxHeight - titleHeight;
    let totalWidth = padding;
    let currentColWidth = 0;
    let currentColHeight = 0;
    let left = 0;
    let col = 0;
    me.legendItems.forEach((legendItem, i) => {
      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;
      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
        totalWidth += currentColWidth + padding;
        columnSizes.push({width: currentColWidth, height: currentColHeight});
        left += currentColWidth + padding;
        col++;
        currentColWidth = currentColHeight = 0;
      }
      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};
      currentColWidth = Math.max(currentColWidth, itemWidth);
      currentColHeight += itemHeight + padding;
    });
    totalWidth += currentColWidth;
    columnSizes.push({width: currentColWidth, height: currentColHeight});
    return totalWidth;
  }
  adjustHitBoxes() {
    const me = this;
    if (!me.options.display) {
      return;
    }
    const titleHeight = me._computeTitleHeight();
    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = me;
    const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(rtl, me.left, me.width);
    if (this.isHorizontal()) {
      let row = 0;
      let left = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, me.left + padding, me.right - me.lineWidths[row]);
      for (const hitbox of hitboxes) {
        if (row !== hitbox.row) {
          row = hitbox.row;
          left = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, me.left + padding, me.right - me.lineWidths[row]);
        }
        hitbox.top += me.top + titleHeight + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
        left += hitbox.width + padding;
      }
    } else {
      let col = 0;
      let top = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);
      for (const hitbox of hitboxes) {
        if (hitbox.col !== col) {
          col = hitbox.col;
          top = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);
        }
        hitbox.top = top;
        hitbox.left += me.left + padding;
        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
        top += hitbox.height + padding;
      }
    }
  }
  isHorizontal() {
    return this.options.position === 'top' || this.options.position === 'bottom';
  }
  draw() {
    const me = this;
    if (me.options.display) {
      const ctx = me.ctx;
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.U)(ctx, me);
      me._draw();
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.W)(ctx);
    }
  }
  _draw() {
    const me = this;
    const {options: opts, columnSizes, lineWidths, ctx} = me;
    const {align, labels: labelOpts} = opts;
    const defaultColor = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.color;
    const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(opts.rtl, me.left, me.width);
    const labelFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(labelOpts.font);
    const {color: fontColor, padding} = labelOpts;
    const fontSize = labelFont.size;
    const halfFontSize = fontSize / 2;
    let cursor;
    me.drawTitle();
    ctx.textAlign = rtlHelper.textAlign('left');
    ctx.textBaseline = 'middle';
    ctx.lineWidth = 0.5;
    ctx.font = labelFont.string;
    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);
    const drawLegendBox = function(x, y, legendItem) {
      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {
        return;
      }
      ctx.save();
      const lineWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineWidth, 1);
      ctx.fillStyle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.fillStyle, defaultColor);
      ctx.lineCap = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineCap, 'butt');
      ctx.lineDashOffset = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineDashOffset, 0);
      ctx.lineJoin = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineJoin, 'miter');
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.strokeStyle, defaultColor);
      ctx.setLineDash((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(legendItem.lineDash, []));
      if (labelOpts.usePointStyle) {
        const drawOptions = {
          radius: boxWidth * Math.SQRT2 / 2,
          pointStyle: legendItem.pointStyle,
          rotation: legendItem.rotation,
          borderWidth: lineWidth
        };
        const centerX = rtlHelper.xPlus(x, boxWidth / 2);
        const centerY = y + halfFontSize;
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ao)(ctx, drawOptions, centerX, centerY);
      } else {
        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
        const borderRadius = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ar)(legendItem.borderRadius);
        ctx.beginPath();
        if (Object.values(borderRadius).some(v => v !== 0)) {
          (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ap)(ctx, {
            x: xBoxLeft,
            y: yBoxTop,
            w: boxWidth,
            h: boxHeight,
            radius: borderRadius,
          });
        } else {
          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
        }
        ctx.fill();
        if (lineWidth !== 0) {
          ctx.stroke();
        }
      }
      ctx.restore();
    };
    const fillText = function(x, y, legendItem) {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V)(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {
        strikethrough: legendItem.hidden,
        textAlign: rtlHelper.textAlign(legendItem.textAlign)
      });
    };
    const isHorizontal = me.isHorizontal();
    const titleHeight = this._computeTitleHeight();
    if (isHorizontal) {
      cursor = {
        x: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, me.left + padding, me.right - lineWidths[0]),
        y: me.top + padding + titleHeight,
        line: 0
      };
    } else {
      cursor = {
        x: me.left + padding,
        y: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, me.top + titleHeight + padding, me.bottom - columnSizes[0].height),
        line: 0
      };
    }
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.av)(me.ctx, opts.textDirection);
    const lineHeight = itemHeight + padding;
    me.legendItems.forEach((legendItem, i) => {
      ctx.strokeStyle = legendItem.fontColor || fontColor;
      ctx.fillStyle = legendItem.fontColor || fontColor;
      const textWidth = ctx.measureText(legendItem.text).width;
      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
      const width = boxWidth + halfFontSize + textWidth;
      let x = cursor.x;
      let y = cursor.y;
      rtlHelper.setWidth(me.width);
      if (isHorizontal) {
        if (i > 0 && x + width + padding > me.right) {
          y = cursor.y += lineHeight;
          cursor.line++;
          x = cursor.x = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, me.left + padding, me.right - lineWidths[cursor.line]);
        }
      } else if (i > 0 && y + lineHeight > me.bottom) {
        x = cursor.x = x + columnSizes[cursor.line].width + padding;
        cursor.line++;
        y = cursor.y = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, me.top + titleHeight + padding, me.bottom - columnSizes[cursor.line].height);
      }
      const realX = rtlHelper.x(x);
      drawLegendBox(realX, y, legendItem);
      x = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aw)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : me.right, opts.rtl);
      fillText(rtlHelper.x(x), y, legendItem);
      if (isHorizontal) {
        cursor.x += width + padding;
      } else {
        cursor.y += lineHeight;
      }
    });
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ax)(me.ctx, opts.textDirection);
  }
  drawTitle() {
    const me = this;
    const opts = me.options;
    const titleOpts = opts.title;
    const titleFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(titleOpts.font);
    const titlePadding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(titleOpts.padding);
    if (!titleOpts.display) {
      return;
    }
    const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(opts.rtl, me.left, me.width);
    const ctx = me.ctx;
    const position = titleOpts.position;
    const halfFontSize = titleFont.size / 2;
    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
    let y;
    let left = me.left;
    let maxWidth = me.width;
    if (this.isHorizontal()) {
      maxWidth = Math.max(...me.lineWidths);
      y = me.top + topPaddingPlusHalfFontSize;
      left = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(opts.align, left, me.right - maxWidth);
    } else {
      const maxHeight = me.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);
      y = topPaddingPlusHalfFontSize + (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(opts.align, me.top, me.bottom - maxHeight - opts.labels.padding - me._computeTitleHeight());
    }
    const x = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(position, left, left + maxWidth);
    ctx.textAlign = rtlHelper.textAlign((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Y)(position));
    ctx.textBaseline = 'middle';
    ctx.strokeStyle = titleOpts.color;
    ctx.fillStyle = titleOpts.color;
    ctx.font = titleFont.string;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V)(ctx, titleOpts.text, x, y, titleFont);
  }
  _computeTitleHeight() {
    const titleOpts = this.options.title;
    const titleFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(titleOpts.font);
    const titlePadding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(titleOpts.padding);
    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
  }
  _getLegendItemAt(x, y) {
    const me = this;
    let i, hitBox, lh;
    if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
      lh = me.legendHitBoxes;
      for (i = 0; i < lh.length; ++i) {
        hitBox = lh[i];
        if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
          return me.legendItems[i];
        }
      }
    }
    return null;
  }
  handleEvent(e) {
    const me = this;
    const opts = me.options;
    if (!isListened(e.type, opts)) {
      return;
    }
    const hoveredItem = me._getLegendItemAt(e.x, e.y);
    if (e.type === 'mousemove') {
      const previous = me._hoveredItem;
      const sameItem = itemsEqual(previous, hoveredItem);
      if (previous && !sameItem) {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(opts.onLeave, [e, previous, me], me);
      }
      me._hoveredItem = hoveredItem;
      if (hoveredItem && !sameItem) {
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(opts.onHover, [e, hoveredItem, me], me);
      }
    } else if (hoveredItem) {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(opts.onClick, [e, hoveredItem, me], me);
    }
  }
}
function isListened(type, opts) {
  if (type === 'mousemove' && (opts.onHover || opts.onLeave)) {
    return true;
  }
  if (opts.onClick && (type === 'click' || type === 'mouseup')) {
    return true;
  }
  return false;
}
var plugin_legend = {
  id: 'legend',
  _element: Legend,
  start(chart, _args, options) {
    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});
    layouts.configure(chart, legend, options);
    layouts.addBox(chart, legend);
  },
  stop(chart) {
    layouts.removeBox(chart, chart.legend);
    delete chart.legend;
  },
  beforeUpdate(chart, _args, options) {
    const legend = chart.legend;
    layouts.configure(chart, legend, options);
    legend.options = options;
  },
  afterUpdate(chart) {
    const legend = chart.legend;
    legend.buildLabels();
    legend.adjustHitBoxes();
  },
  afterEvent(chart, args) {
    if (!args.replay) {
      chart.legend.handleEvent(args.event);
    }
  },
  defaults: {
    display: true,
    position: 'top',
    align: 'center',
    fullSize: true,
    reverse: false,
    weight: 1000,
    onClick(e, legendItem, legend) {
      const index = legendItem.datasetIndex;
      const ci = legend.chart;
      if (ci.isDatasetVisible(index)) {
        ci.hide(index);
        legendItem.hidden = true;
      } else {
        ci.show(index);
        legendItem.hidden = false;
      }
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (ctx) => ctx.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(chart) {
        const datasets = chart.data.datasets;
        const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;
        return chart._getSortedDatasetMetas().map((meta) => {
          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
          const borderWidth = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(style.borderWidth);
          return {
            text: datasets[meta.index].label,
            fillStyle: style.backgroundColor,
            fontColor: color,
            hidden: !meta.visible,
            lineCap: style.borderCapStyle,
            lineDash: style.borderDash,
            lineDashOffset: style.borderDashOffset,
            lineJoin: style.borderJoinStyle,
            lineWidth: (borderWidth.width + borderWidth.height) / 4,
            strokeStyle: style.borderColor,
            pointStyle: pointStyle || style.pointStyle,
            rotation: style.rotation,
            textAlign: textAlign || style.textAlign,
            borderRadius: 0,
            datasetIndex: meta.index
          };
        }, this);
      }
    },
    title: {
      color: (ctx) => ctx.chart.options.color,
      display: false,
      position: 'center',
      text: '',
    }
  },
  descriptors: {
    _scriptable: (name) => !name.startsWith('on'),
    labels: {
      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),
    }
  },
};

class Title extends Element {
  constructor(config) {
    super();
    this.chart = config.chart;
    this.options = config.options;
    this.ctx = config.ctx;
    this._padding = undefined;
    this.top = undefined;
    this.bottom = undefined;
    this.left = undefined;
    this.right = undefined;
    this.width = undefined;
    this.height = undefined;
    this.position = undefined;
    this.weight = undefined;
    this.fullSize = undefined;
  }
  update(maxWidth, maxHeight) {
    const me = this;
    const opts = me.options;
    me.left = 0;
    me.top = 0;
    if (!opts.display) {
      me.width = me.height = me.right = me.bottom = 0;
      return;
    }
    me.width = me.right = maxWidth;
    me.height = me.bottom = maxHeight;
    const lineCount = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(opts.text) ? opts.text.length : 1;
    me._padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(opts.padding);
    const textSize = lineCount * (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(opts.font).lineHeight + me._padding.height;
    if (me.isHorizontal()) {
      me.height = textSize;
    } else {
      me.width = textSize;
    }
  }
  isHorizontal() {
    const pos = this.options.position;
    return pos === 'top' || pos === 'bottom';
  }
  _drawArgs(offset) {
    const {top, left, bottom, right, options} = this;
    const align = options.align;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    if (this.isHorizontal()) {
      titleX = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, left, right);
      titleY = top + offset;
      maxWidth = right - left;
    } else {
      if (options.position === 'left') {
        titleX = left + offset;
        titleY = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, bottom, top);
        rotation = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P * -0.5;
      } else {
        titleX = right - offset;
        titleY = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Z)(align, top, bottom);
        rotation = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.P * 0.5;
      }
      maxWidth = bottom - top;
    }
    return {titleX, titleY, maxWidth, rotation};
  }
  draw() {
    const me = this;
    const ctx = me.ctx;
    const opts = me.options;
    if (!opts.display) {
      return;
    }
    const fontOpts = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(opts.font);
    const lineHeight = fontOpts.lineHeight;
    const offset = lineHeight / 2 + me._padding.top;
    const {titleX, titleY, maxWidth, rotation} = me._drawArgs(offset);
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V)(ctx, opts.text, 0, 0, fontOpts, {
      color: opts.color,
      maxWidth,
      rotation,
      textAlign: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.Y)(opts.align),
      textBaseline: 'middle',
      translation: [titleX, titleY],
    });
  }
}
function createTitle(chart, titleOpts) {
  const title = new Title({
    ctx: chart.ctx,
    options: titleOpts,
    chart
  });
  layouts.configure(chart, title, titleOpts);
  layouts.addBox(chart, title);
  chart.titleBlock = title;
}
var plugin_title = {
  id: 'title',
  _element: Title,
  start(chart, _args, options) {
    createTitle(chart, options);
  },
  stop(chart) {
    const titleBlock = chart.titleBlock;
    layouts.removeBox(chart, titleBlock);
    delete chart.titleBlock;
  },
  beforeUpdate(chart, _args, options) {
    const title = chart.titleBlock;
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: 'center',
    display: false,
    font: {
      weight: 'bold',
    },
    fullSize: true,
    padding: 10,
    position: 'top',
    text: '',
    weight: 2000
  },
  defaultRoutes: {
    color: 'color'
  },
  descriptors: {
    _scriptable: true,
    _indexable: false,
  },
};

const map = new WeakMap();
var plugin_subtitle = {
  id: 'subtitle',
  start(chart, _args, options) {
    const title = new Title({
      ctx: chart.ctx,
      options,
      chart
    });
    layouts.configure(chart, title, options);
    layouts.addBox(chart, title);
    map.set(chart, title);
  },
  stop(chart) {
    layouts.removeBox(chart, map.get(chart));
    map.delete(chart);
  },
  beforeUpdate(chart, _args, options) {
    const title = map.get(chart);
    layouts.configure(chart, title, options);
    title.options = options;
  },
  defaults: {
    align: 'center',
    display: false,
    font: {
      weight: 'normal',
    },
    fullSize: true,
    padding: 0,
    position: 'top',
    text: '',
    weight: 1500
  },
  defaultRoutes: {
    color: 'color'
  },
  descriptors: {
    _scriptable: true,
    _indexable: false,
  },
};

const positioners = {
  average(items) {
    if (!items.length) {
      return false;
    }
    let i, len;
    let x = 0;
    let y = 0;
    let count = 0;
    for (i = 0, len = items.length; i < len; ++i) {
      const el = items[i].element;
      if (el && el.hasValue()) {
        const pos = el.tooltipPosition();
        x += pos.x;
        y += pos.y;
        ++count;
      }
    }
    return {
      x: x / count,
      y: y / count
    };
  },
  nearest(items, eventPosition) {
    if (!items.length) {
      return false;
    }
    let x = eventPosition.x;
    let y = eventPosition.y;
    let minDistance = Number.POSITIVE_INFINITY;
    let i, len, nearestElement;
    for (i = 0, len = items.length; i < len; ++i) {
      const el = items[i].element;
      if (el && el.hasValue()) {
        const center = el.getCenterPoint();
        const d = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.az)(eventPosition, center);
        if (d < minDistance) {
          minDistance = d;
          nearestElement = el;
        }
      }
    }
    if (nearestElement) {
      const tp = nearestElement.tooltipPosition();
      x = tp.x;
      y = tp.y;
    }
    return {
      x,
      y
    };
  }
};
function pushOrConcat(base, toPush) {
  if (toPush) {
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(toPush)) {
      Array.prototype.push.apply(base, toPush);
    } else {
      base.push(toPush);
    }
  }
  return base;
}
function splitNewlines(str) {
  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
    return str.split('\n');
  }
  return str;
}
function createTooltipItem(chart, item) {
  const {element, datasetIndex, index} = item;
  const controller = chart.getDatasetMeta(datasetIndex).controller;
  const {label, value} = controller.getLabelAndValue(index);
  return {
    chart,
    label,
    parsed: controller.getParsed(index),
    raw: chart.data.datasets[datasetIndex].data[index],
    formattedValue: value,
    dataset: controller.getDataset(),
    dataIndex: index,
    datasetIndex,
    element
  };
}
function getTooltipSize(tooltip, options) {
  const ctx = tooltip._chart.ctx;
  const {body, footer, title} = tooltip;
  const {boxWidth, boxHeight} = options;
  const bodyFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(options.bodyFont);
  const titleFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(options.titleFont);
  const footerFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(options.footerFont);
  const titleLineCount = title.length;
  const footerLineCount = footer.length;
  const bodyLineItemCount = body.length;
  const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(options.padding);
  let height = padding.height;
  let width = 0;
  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
  if (titleLineCount) {
    height += titleLineCount * titleFont.lineHeight
			+ (titleLineCount - 1) * options.titleSpacing
			+ options.titleMarginBottom;
  }
  if (combinedBodyLength) {
    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
    height += bodyLineItemCount * bodyLineHeight
			+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight
			+ (combinedBodyLength - 1) * options.bodySpacing;
  }
  if (footerLineCount) {
    height += options.footerMarginTop
			+ footerLineCount * footerFont.lineHeight
			+ (footerLineCount - 1) * options.footerSpacing;
  }
  let widthPadding = 0;
  const maxLineWidth = function(line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
  };
  ctx.save();
  ctx.font = titleFont.string;
  (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(tooltip.title, maxLineWidth);
  ctx.font = bodyFont.string;
  (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
  widthPadding = options.displayColors ? (boxWidth + 2) : 0;
  (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(body, (bodyItem) => {
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(bodyItem.before, maxLineWidth);
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(bodyItem.lines, maxLineWidth);
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(bodyItem.after, maxLineWidth);
  });
  widthPadding = 0;
  ctx.font = footerFont.string;
  (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(tooltip.footer, maxLineWidth);
  ctx.restore();
  width += padding.width;
  return {width, height};
}
function determineYAlign(chart, size) {
  const {y, height} = size;
  if (y < height / 2) {
    return 'top';
  } else if (y > (chart.height - height / 2)) {
    return 'bottom';
  }
  return 'center';
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
  const {x, width} = size;
  const caret = options.caretSize + options.caretPadding;
  if (xAlign === 'left' && x + width + caret > chart.width) {
    return true;
  }
  if (xAlign === 'right' && x - width - caret < 0) {
    return true;
  }
}
function determineXAlign(chart, options, size, yAlign) {
  const {x, width} = size;
  const {width: chartWidth, chartArea: {left, right}} = chart;
  let xAlign = 'center';
  if (yAlign === 'center') {
    xAlign = x <= (left + right) / 2 ? 'left' : 'right';
  } else if (x <= width / 2) {
    xAlign = 'left';
  } else if (x >= chartWidth - width / 2) {
    xAlign = 'right';
  }
  if (doesNotFitWithAlign(xAlign, chart, options, size)) {
    xAlign = 'center';
  }
  return xAlign;
}
function determineAlignment(chart, options, size) {
  const yAlign = options.yAlign || determineYAlign(chart, size);
  return {
    xAlign: options.xAlign || determineXAlign(chart, options, size, yAlign),
    yAlign
  };
}
function alignX(size, xAlign) {
  let {x, width} = size;
  if (xAlign === 'right') {
    x -= width;
  } else if (xAlign === 'center') {
    x -= (width / 2);
  }
  return x;
}
function alignY(size, yAlign, paddingAndSize) {
  let {y, height} = size;
  if (yAlign === 'top') {
    y += paddingAndSize;
  } else if (yAlign === 'bottom') {
    y -= height + paddingAndSize;
  } else {
    y -= (height / 2);
  }
  return y;
}
function getBackgroundPoint(options, size, alignment, chart) {
  const {caretSize, caretPadding, cornerRadius} = options;
  const {xAlign, yAlign} = alignment;
  const paddingAndSize = caretSize + caretPadding;
  const radiusAndPadding = cornerRadius + caretPadding;
  let x = alignX(size, xAlign);
  const y = alignY(size, yAlign, paddingAndSize);
  if (yAlign === 'center') {
    if (xAlign === 'left') {
      x += paddingAndSize;
    } else if (xAlign === 'right') {
      x -= paddingAndSize;
    }
  } else if (xAlign === 'left') {
    x -= radiusAndPadding;
  } else if (xAlign === 'right') {
    x += radiusAndPadding;
  }
  return {
    x: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(x, 0, chart.width - size.width),
    y: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(y, 0, chart.height - size.height)
  };
}
function getAlignedX(tooltip, align, options) {
  const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(options.padding);
  return align === 'center'
    ? tooltip.x + tooltip.width / 2
    : align === 'right'
      ? tooltip.x + tooltip.width - padding.right
      : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback) {
  return pushOrConcat([], splitNewlines(callback));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
  return Object.assign(Object.create(parent), {
    tooltip,
    tooltipItems,
    type: 'tooltip'
  });
}
function overrideCallbacks(callbacks, context) {
  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
  return override ? callbacks.override(override) : callbacks;
}
class Tooltip extends Element {
  constructor(config) {
    super();
    this.opacity = 0;
    this._active = [];
    this._chart = config._chart;
    this._eventPosition = undefined;
    this._size = undefined;
    this._cachedAnimations = undefined;
    this._tooltipItems = [];
    this.$animations = undefined;
    this.$context = undefined;
    this.options = config.options;
    this.dataPoints = undefined;
    this.title = undefined;
    this.beforeBody = undefined;
    this.body = undefined;
    this.afterBody = undefined;
    this.footer = undefined;
    this.xAlign = undefined;
    this.yAlign = undefined;
    this.x = undefined;
    this.y = undefined;
    this.height = undefined;
    this.width = undefined;
    this.caretX = undefined;
    this.caretY = undefined;
    this.labelColors = undefined;
    this.labelPointStyles = undefined;
    this.labelTextColors = undefined;
  }
  initialize(options) {
    this.options = options;
    this._cachedAnimations = undefined;
    this.$context = undefined;
  }
  _resolveAnimations() {
    const me = this;
    const cached = me._cachedAnimations;
    if (cached) {
      return cached;
    }
    const chart = me._chart;
    const options = me.options.setContext(me.getContext());
    const opts = options.enabled && chart.options.animation && options.animations;
    const animations = new Animations(me._chart, opts);
    if (opts._cacheable) {
      me._cachedAnimations = Object.freeze(animations);
    }
    return animations;
  }
  getContext() {
    const me = this;
    return me.$context ||
			(me.$context = createTooltipContext(me._chart.getContext(), me, me._tooltipItems));
  }
  getTitle(context, options) {
    const me = this;
    const {callbacks} = options;
    const beforeTitle = callbacks.beforeTitle.apply(me, [context]);
    const title = callbacks.title.apply(me, [context]);
    const afterTitle = callbacks.afterTitle.apply(me, [context]);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    lines = pushOrConcat(lines, splitNewlines(title));
    lines = pushOrConcat(lines, splitNewlines(afterTitle));
    return lines;
  }
  getBeforeBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));
  }
  getBody(tooltipItems, options) {
    const me = this;
    const {callbacks} = options;
    const bodyItems = [];
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(tooltipItems, (context) => {
      const bodyItem = {
        before: [],
        lines: [],
        after: []
      };
      const scoped = overrideCallbacks(callbacks, context);
      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(me, context)));
      pushOrConcat(bodyItem.lines, scoped.label.call(me, context));
      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(me, context)));
      bodyItems.push(bodyItem);
    });
    return bodyItems;
  }
  getAfterBody(tooltipItems, options) {
    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));
  }
  getFooter(tooltipItems, options) {
    const me = this;
    const {callbacks} = options;
    const beforeFooter = callbacks.beforeFooter.apply(me, [tooltipItems]);
    const footer = callbacks.footer.apply(me, [tooltipItems]);
    const afterFooter = callbacks.afterFooter.apply(me, [tooltipItems]);
    let lines = [];
    lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    lines = pushOrConcat(lines, splitNewlines(footer));
    lines = pushOrConcat(lines, splitNewlines(afterFooter));
    return lines;
  }
  _createItems(options) {
    const me = this;
    const active = me._active;
    const data = me._chart.data;
    const labelColors = [];
    const labelPointStyles = [];
    const labelTextColors = [];
    let tooltipItems = [];
    let i, len;
    for (i = 0, len = active.length; i < len; ++i) {
      tooltipItems.push(createTooltipItem(me._chart, active[i]));
    }
    if (options.filter) {
      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));
    }
    if (options.itemSort) {
      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));
    }
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(tooltipItems, (context) => {
      const scoped = overrideCallbacks(options.callbacks, context);
      labelColors.push(scoped.labelColor.call(me, context));
      labelPointStyles.push(scoped.labelPointStyle.call(me, context));
      labelTextColors.push(scoped.labelTextColor.call(me, context));
    });
    me.labelColors = labelColors;
    me.labelPointStyles = labelPointStyles;
    me.labelTextColors = labelTextColors;
    me.dataPoints = tooltipItems;
    return tooltipItems;
  }
  update(changed, replay) {
    const me = this;
    const options = me.options.setContext(me.getContext());
    const active = me._active;
    let properties;
    let tooltipItems = [];
    if (!active.length) {
      if (me.opacity !== 0) {
        properties = {
          opacity: 0
        };
      }
    } else {
      const position = positioners[options.position].call(me, active, me._eventPosition);
      tooltipItems = me._createItems(options);
      me.title = me.getTitle(tooltipItems, options);
      me.beforeBody = me.getBeforeBody(tooltipItems, options);
      me.body = me.getBody(tooltipItems, options);
      me.afterBody = me.getAfterBody(tooltipItems, options);
      me.footer = me.getFooter(tooltipItems, options);
      const size = me._size = getTooltipSize(me, options);
      const positionAndSize = Object.assign({}, position, size);
      const alignment = determineAlignment(me._chart, options, positionAndSize);
      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, me._chart);
      me.xAlign = alignment.xAlign;
      me.yAlign = alignment.yAlign;
      properties = {
        opacity: 1,
        x: backgroundPoint.x,
        y: backgroundPoint.y,
        width: size.width,
        height: size.height,
        caretX: position.x,
        caretY: position.y
      };
    }
    me._tooltipItems = tooltipItems;
    me.$context = undefined;
    if (properties) {
      me._resolveAnimations().update(me, properties);
    }
    if (changed && options.external) {
      options.external.call(me, {chart: me._chart, tooltip: me, replay});
    }
  }
  drawCaret(tooltipPoint, ctx, size, options) {
    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
    ctx.lineTo(caretPosition.x1, caretPosition.y1);
    ctx.lineTo(caretPosition.x2, caretPosition.y2);
    ctx.lineTo(caretPosition.x3, caretPosition.y3);
  }
  getCaretPosition(tooltipPoint, size, options) {
    const {xAlign, yAlign} = this;
    const {cornerRadius, caretSize} = options;
    const {x: ptX, y: ptY} = tooltipPoint;
    const {width, height} = size;
    let x1, x2, x3, y1, y2, y3;
    if (yAlign === 'center') {
      y2 = ptY + (height / 2);
      if (xAlign === 'left') {
        x1 = ptX;
        x2 = x1 - caretSize;
        y1 = y2 + caretSize;
        y3 = y2 - caretSize;
      } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        y1 = y2 - caretSize;
        y3 = y2 + caretSize;
      }
      x3 = x1;
    } else {
      if (xAlign === 'left') {
        x2 = ptX + cornerRadius + (caretSize);
      } else if (xAlign === 'right') {
        x2 = ptX + width - cornerRadius - caretSize;
      } else {
        x2 = this.caretX;
      }
      if (yAlign === 'top') {
        y1 = ptY;
        y2 = y1 - caretSize;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
      } else {
        y1 = ptY + height;
        y2 = y1 + caretSize;
        x1 = x2 + caretSize;
        x3 = x2 - caretSize;
      }
      y3 = y1;
    }
    return {x1, x2, x3, y1, y2, y3};
  }
  drawTitle(pt, ctx, options) {
    const me = this;
    const title = me.title;
    const length = title.length;
    let titleFont, titleSpacing, i;
    if (length) {
      const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(options.rtl, me.x, me.width);
      pt.x = getAlignedX(me, options.titleAlign, options);
      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
      ctx.textBaseline = 'middle';
      titleFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(options.titleFont);
      titleSpacing = options.titleSpacing;
      ctx.fillStyle = options.titleColor;
      ctx.font = titleFont.string;
      for (i = 0; i < length; ++i) {
        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
        pt.y += titleFont.lineHeight + titleSpacing;
        if (i + 1 === length) {
          pt.y += options.titleMarginBottom - titleSpacing;
        }
      }
    }
  }
  _drawColorBox(ctx, pt, i, rtlHelper, options) {
    const me = this;
    const labelColors = me.labelColors[i];
    const labelPointStyle = me.labelPointStyles[i];
    const {boxHeight, boxWidth} = options;
    const bodyFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(options.bodyFont);
    const colorX = getAlignedX(me, 'left', options);
    const rtlColorX = rtlHelper.x(colorX);
    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
    const colorY = pt.y + yOffSet;
    if (options.usePointStyle) {
      const drawOptions = {
        radius: Math.min(boxWidth, boxHeight) / 2,
        pointStyle: labelPointStyle.pointStyle,
        rotation: labelPointStyle.rotation,
        borderWidth: 1
      };
      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
      const centerY = colorY + boxHeight / 2;
      ctx.strokeStyle = options.multiKeyBackground;
      ctx.fillStyle = options.multiKeyBackground;
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ao)(ctx, drawOptions, centerX, centerY);
      ctx.strokeStyle = labelColors.borderColor;
      ctx.fillStyle = labelColors.backgroundColor;
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ao)(ctx, drawOptions, centerX, centerY);
    } else {
      ctx.lineWidth = labelColors.borderWidth || 1;
      ctx.strokeStyle = labelColors.borderColor;
      ctx.setLineDash(labelColors.borderDash || []);
      ctx.lineDashOffset = labelColors.borderDashOffset || 0;
      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
      const borderRadius = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ar)(labelColors.borderRadius);
      if (Object.values(borderRadius).some(v => v !== 0)) {
        ctx.beginPath();
        ctx.fillStyle = options.multiKeyBackground;
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ap)(ctx, {
          x: outerX,
          y: colorY,
          w: boxWidth,
          h: boxHeight,
          radius: borderRadius,
        });
        ctx.fill();
        ctx.stroke();
        ctx.fillStyle = labelColors.backgroundColor;
        ctx.beginPath();
        (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ap)(ctx, {
          x: innerX,
          y: colorY + 1,
          w: boxWidth - 2,
          h: boxHeight - 2,
          radius: borderRadius,
        });
        ctx.fill();
      } else {
        ctx.fillStyle = options.multiKeyBackground;
        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
        ctx.fillStyle = labelColors.backgroundColor;
        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
      }
    }
    ctx.fillStyle = me.labelTextColors[i];
  }
  drawBody(pt, ctx, options) {
    const me = this;
    const {body} = me;
    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth} = options;
    const bodyFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(options.bodyFont);
    let bodyLineHeight = bodyFont.lineHeight;
    let xLinePadding = 0;
    const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(options.rtl, me.x, me.width);
    const fillLineOfText = function(line) {
      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
      pt.y += bodyLineHeight + bodySpacing;
    };
    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
    let bodyItem, textColor, lines, i, j, ilen, jlen;
    ctx.textAlign = bodyAlign;
    ctx.textBaseline = 'middle';
    ctx.font = bodyFont.string;
    pt.x = getAlignedX(me, bodyAlignForCalculation, options);
    ctx.fillStyle = options.bodyColor;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(me.beforeBody, fillLineOfText);
    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'
      ? bodyAlign === 'center' ? (boxWidth / 2 + 1) : (boxWidth + 2)
      : 0;
    for (i = 0, ilen = body.length; i < ilen; ++i) {
      bodyItem = body[i];
      textColor = me.labelTextColors[i];
      ctx.fillStyle = textColor;
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(bodyItem.before, fillLineOfText);
      lines = bodyItem.lines;
      if (displayColors && lines.length) {
        me._drawColorBox(ctx, pt, i, rtlHelper, options);
        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
      }
      for (j = 0, jlen = lines.length; j < jlen; ++j) {
        fillLineOfText(lines[j]);
        bodyLineHeight = bodyFont.lineHeight;
      }
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(bodyItem.after, fillLineOfText);
    }
    xLinePadding = 0;
    bodyLineHeight = bodyFont.lineHeight;
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.B)(me.afterBody, fillLineOfText);
    pt.y -= bodySpacing;
  }
  drawFooter(pt, ctx, options) {
    const me = this;
    const footer = me.footer;
    const length = footer.length;
    let footerFont, i;
    if (length) {
      const rtlHelper = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.au)(options.rtl, me.x, me.width);
      pt.x = getAlignedX(me, options.footerAlign, options);
      pt.y += options.footerMarginTop;
      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
      ctx.textBaseline = 'middle';
      footerFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(options.footerFont);
      ctx.fillStyle = options.footerColor;
      ctx.font = footerFont.string;
      for (i = 0; i < length; ++i) {
        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
        pt.y += footerFont.lineHeight + options.footerSpacing;
      }
    }
  }
  drawBackground(pt, ctx, tooltipSize, options) {
    const {xAlign, yAlign} = this;
    const {x, y} = pt;
    const {width, height} = tooltipSize;
    const radius = options.cornerRadius;
    ctx.fillStyle = options.backgroundColor;
    ctx.strokeStyle = options.borderColor;
    ctx.lineWidth = options.borderWidth;
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    if (yAlign === 'top') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    if (yAlign === 'center' && xAlign === 'right') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    if (yAlign === 'bottom') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    if (yAlign === 'center' && xAlign === 'left') {
      this.drawCaret(pt, ctx, tooltipSize, options);
    }
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
    ctx.fill();
    if (options.borderWidth > 0) {
      ctx.stroke();
    }
  }
  _updateAnimationTarget(options) {
    const me = this;
    const chart = me._chart;
    const anims = me.$animations;
    const animX = anims && anims.x;
    const animY = anims && anims.y;
    if (animX || animY) {
      const position = positioners[options.position].call(me, me._active, me._eventPosition);
      if (!position) {
        return;
      }
      const size = me._size = getTooltipSize(me, options);
      const positionAndSize = Object.assign({}, position, me._size);
      const alignment = determineAlignment(chart, options, positionAndSize);
      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
      if (animX._to !== point.x || animY._to !== point.y) {
        me.xAlign = alignment.xAlign;
        me.yAlign = alignment.yAlign;
        me.width = size.width;
        me.height = size.height;
        me.caretX = position.x;
        me.caretY = position.y;
        me._resolveAnimations().update(me, point);
      }
    }
  }
  draw(ctx) {
    const me = this;
    const options = me.options.setContext(me.getContext());
    let opacity = me.opacity;
    if (!opacity) {
      return;
    }
    me._updateAnimationTarget(options);
    const tooltipSize = {
      width: me.width,
      height: me.height
    };
    const pt = {
      x: me.x,
      y: me.y
    };
    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
    const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(options.padding);
    const hasTooltipContent = me.title.length || me.beforeBody.length || me.body.length || me.afterBody.length || me.footer.length;
    if (options.enabled && hasTooltipContent) {
      ctx.save();
      ctx.globalAlpha = opacity;
      me.drawBackground(pt, ctx, tooltipSize, options);
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.av)(ctx, options.textDirection);
      pt.y += padding.top;
      me.drawTitle(pt, ctx, options);
      me.drawBody(pt, ctx, options);
      me.drawFooter(pt, ctx, options);
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ax)(ctx, options.textDirection);
      ctx.restore();
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(activeElements, eventPosition) {
    const me = this;
    const lastActive = me._active;
    const active = activeElements.map(({datasetIndex, index}) => {
      const meta = me._chart.getDatasetMeta(datasetIndex);
      if (!meta) {
        throw new Error('Cannot find a dataset at index ' + datasetIndex);
      }
      return {
        datasetIndex,
        element: meta.data[index],
        index,
      };
    });
    const changed = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ad)(lastActive, active);
    const positionChanged = me._positionChanged(active, eventPosition);
    if (changed || positionChanged) {
      me._active = active;
      me._eventPosition = eventPosition;
      me.update(true);
    }
  }
  handleEvent(e, replay) {
    const me = this;
    const options = me.options;
    const lastActive = me._active || [];
    let changed = false;
    let active = [];
    if (e.type !== 'mouseout') {
      active = me._chart.getElementsAtEventForMode(e, options.mode, options, replay);
      if (options.reverse) {
        active.reverse();
      }
    }
    const positionChanged = me._positionChanged(active, e);
    changed = replay || !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ad)(active, lastActive) || positionChanged;
    if (changed) {
      me._active = active;
      if (options.enabled || options.external) {
        me._eventPosition = {
          x: e.x,
          y: e.y
        };
        me.update(true, replay);
      }
    }
    return changed;
  }
  _positionChanged(active, e) {
    const {caretX, caretY, options} = this;
    const position = positioners[options.position].call(this, active, e);
    return position !== false && (caretX !== position.x || caretY !== position.y);
  }
}
Tooltip.positioners = positioners;
var plugin_tooltip = {
  id: 'tooltip',
  _element: Tooltip,
  positioners,
  afterInit(chart, _args, options) {
    if (options) {
      chart.tooltip = new Tooltip({_chart: chart, options});
    }
  },
  beforeUpdate(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  reset(chart, _args, options) {
    if (chart.tooltip) {
      chart.tooltip.initialize(options);
    }
  },
  afterDraw(chart) {
    const tooltip = chart.tooltip;
    const args = {
      tooltip
    };
    if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {
      return;
    }
    if (tooltip) {
      tooltip.draw(chart.ctx);
    }
    chart.notifyPlugins('afterTooltipDraw', args);
  },
  afterEvent(chart, args) {
    if (chart.tooltip) {
      const useFinalPosition = args.replay;
      if (chart.tooltip.handleEvent(args.event, useFinalPosition)) {
        args.changed = true;
      }
    }
  },
  defaults: {
    enabled: true,
    external: null,
    position: 'average',
    backgroundColor: 'rgba(0,0,0,0.8)',
    titleColor: '#fff',
    titleFont: {
      weight: 'bold',
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: 'left',
    bodyColor: '#fff',
    bodySpacing: 2,
    bodyFont: {
    },
    bodyAlign: 'left',
    footerColor: '#fff',
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: 'bold',
    },
    footerAlign: 'left',
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (ctx, opts) => opts.bodyFont.size,
    boxWidth: (ctx, opts) => opts.bodyFont.size,
    multiKeyBackground: '#fff',
    displayColors: true,
    borderColor: 'rgba(0,0,0,0)',
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: 'easeOutQuart',
    },
    animations: {
      numbers: {
        type: 'number',
        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],
      },
      opacity: {
        easing: 'linear',
        duration: 200
      }
    },
    callbacks: {
      beforeTitle: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay,
      title(tooltipItems) {
        if (tooltipItems.length > 0) {
          const item = tooltipItems[0];
          const labels = item.chart.data.labels;
          const labelCount = labels ? labels.length : 0;
          if (this && this.options && this.options.mode === 'dataset') {
            return item.dataset.label || '';
          } else if (item.label) {
            return item.label;
          } else if (labelCount > 0 && item.dataIndex < labelCount) {
            return labels[item.dataIndex];
          }
        }
        return '';
      },
      afterTitle: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay,
      beforeBody: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay,
      beforeLabel: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay,
      label(tooltipItem) {
        if (this && this.options && this.options.mode === 'dataset') {
          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;
        }
        let label = tooltipItem.dataset.label || '';
        if (label) {
          label += ': ';
        }
        const value = tooltipItem.formattedValue;
        if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(value)) {
          label += value;
        }
        return label;
      },
      labelColor(tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
          borderColor: options.borderColor,
          backgroundColor: options.backgroundColor,
          borderWidth: options.borderWidth,
          borderDash: options.borderDash,
          borderDashOffset: options.borderDashOffset,
          borderRadius: 0,
        };
      },
      labelTextColor() {
        return this.options.bodyColor;
      },
      labelPointStyle(tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
          pointStyle: options.pointStyle,
          rotation: options.rotation,
        };
      },
      afterLabel: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay,
      afterBody: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay,
      beforeFooter: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay,
      footer: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay,
      afterFooter: _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.ay
    }
  },
  defaultRoutes: {
    bodyFont: 'font',
    footerFont: 'font',
    titleFont: 'font'
  },
  descriptors: {
    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',
    _indexable: false,
    callbacks: {
      _scriptable: false,
      _indexable: false,
    },
    animation: {
      _fallback: false
    },
    animations: {
      _fallback: 'animation'
    }
  },
  additionalOptionScopes: ['interaction']
};

var plugins = /*#__PURE__*/Object.freeze({
__proto__: null,
Decimation: plugin_decimation,
Filler: plugin_filler,
Legend: plugin_legend,
SubTitle: plugin_subtitle,
Title: plugin_title,
Tooltip: plugin_tooltip
});

const addIfString = (labels, raw, index) => typeof raw === 'string'
  ? labels.push(raw) - 1
  : isNaN(raw) ? null : index;
function findOrAddLabel(labels, raw, index) {
  const first = labels.indexOf(raw);
  if (first === -1) {
    return addIfString(labels, raw, index);
  }
  const last = labels.lastIndexOf(raw);
  return first !== last ? index : first;
}
const validIndex = (index, max) => index === null ? null : (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(Math.round(index), 0, max);
class CategoryScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this._startValue = undefined;
    this._valueRange = 0;
  }
  parse(raw, index) {
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(raw)) {
      return null;
    }
    const labels = this.getLabels();
    index = isFinite(index) && labels[index] === raw ? index
      : findOrAddLabel(labels, raw, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(index, raw));
    return validIndex(index, labels.length - 1);
  }
  determineDataLimits() {
    const me = this;
    const {minDefined, maxDefined} = me.getUserBounds();
    let {min, max} = me.getMinMax(true);
    if (me.options.bounds === 'ticks') {
      if (!minDefined) {
        min = 0;
      }
      if (!maxDefined) {
        max = me.getLabels().length - 1;
      }
    }
    me.min = min;
    me.max = max;
  }
  buildTicks() {
    const me = this;
    const min = me.min;
    const max = me.max;
    const offset = me.options.offset;
    const ticks = [];
    let labels = me.getLabels();
    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);
    me._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
    me._startValue = me.min - (offset ? 0.5 : 0);
    for (let value = min; value <= max; value++) {
      ticks.push({value});
    }
    return ticks;
  }
  getLabelForValue(value) {
    const me = this;
    const labels = me.getLabels();
    if (value >= 0 && value < labels.length) {
      return labels[value];
    }
    return value;
  }
  configure() {
    const me = this;
    super.configure();
    if (!me.isHorizontal()) {
      me._reversePixels = !me._reversePixels;
    }
  }
  getPixelForValue(value) {
    const me = this;
    if (typeof value !== 'number') {
      value = me.parse(value);
    }
    return value === null ? NaN : me.getPixelForDecimal((value - me._startValue) / me._valueRange);
  }
  getPixelForTick(index) {
    const me = this;
    const ticks = me.ticks;
    if (index < 0 || index > ticks.length - 1) {
      return null;
    }
    return me.getPixelForValue(ticks[index].value);
  }
  getValueForPixel(pixel) {
    const me = this;
    return Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
CategoryScale.id = 'category';
CategoryScale.defaults = {
  ticks: {
    callback: CategoryScale.prototype.getLabelForValue
  }
};

function generateTicks$1(generationOptions, dataRange) {
  const ticks = [];
  const MIN_SPACING = 1e-14;
  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;
  const unit = step || 1;
  const maxSpaces = maxTicks - 1;
  const {min: rmin, max: rmax} = dataRange;
  const minDefined = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(min);
  const maxDefined = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(max);
  const countDefined = !(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(count);
  const minSpacing = (rmax - rmin) / (maxDigits + 1);
  let spacing = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aB)((rmax - rmin) / maxSpaces / unit) * unit;
  let factor, niceMin, niceMax, numSpaces;
  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {
    return [{value: rmin}, {value: rmax}];
  }
  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  if (numSpaces > maxSpaces) {
    spacing = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aB)(numSpaces * spacing / maxSpaces / unit) * unit;
  }
  if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(precision)) {
    factor = Math.pow(10, precision);
    spacing = Math.ceil(spacing * factor) / factor;
  }
  if (bounds === 'ticks') {
    niceMin = Math.floor(rmin / spacing) * spacing;
    niceMax = Math.ceil(rmax / spacing) * spacing;
  } else {
    niceMin = rmin;
    niceMax = rmax;
  }
  if (minDefined && maxDefined && step && (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aC)((max - min) / step, spacing / 1000)) {
    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
    spacing = (max - min) / numSpaces;
    niceMin = min;
    niceMax = max;
  } else if (countDefined) {
    niceMin = minDefined ? min : niceMin;
    niceMax = maxDefined ? max : niceMax;
    numSpaces = count - 1;
    spacing = (niceMax - niceMin) / numSpaces;
  } else {
    numSpaces = (niceMax - niceMin) / spacing;
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aD)(numSpaces, Math.round(numSpaces), spacing / 1000)) {
      numSpaces = Math.round(numSpaces);
    } else {
      numSpaces = Math.ceil(numSpaces);
    }
  }
  const decimalPlaces = Math.max(
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aE)(spacing),
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aE)(niceMin)
  );
  factor = Math.pow(10, (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(precision) ? decimalPlaces : precision);
  niceMin = Math.round(niceMin * factor) / factor;
  niceMax = Math.round(niceMax * factor) / factor;
  let j = 0;
  if (minDefined) {
    if (includeBounds && niceMin !== min) {
      ticks.push({value: min});
      if (niceMin < min) {
        j++;
      }
      if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aD)(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {
        j++;
      }
    } else if (niceMin < min) {
      j++;
    }
  }
  for (; j < numSpaces; ++j) {
    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});
  }
  if (maxDefined && includeBounds && niceMax !== max) {
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aD)(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {
      ticks[ticks.length - 1].value = max;
    } else {
      ticks.push({value: max});
    }
  } else if (!maxDefined || niceMax === max) {
    ticks.push({value: niceMax});
  }
  return ticks;
}
function relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {
  const rad = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(minRotation);
  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
  const length = 0.75 * minSpacing * ('' + value).length;
  return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = undefined;
    this.end = undefined;
    this._startValue = undefined;
    this._endValue = undefined;
    this._valueRange = 0;
  }
  parse(raw, index) {
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(raw)) {
      return null;
    }
    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {
      return null;
    }
    return +raw;
  }
  handleTickRangeOptions() {
    const me = this;
    const {beginAtZero} = me.options;
    const {minDefined, maxDefined} = me.getUserBounds();
    let {min, max} = me;
    const setMin = v => (min = minDefined ? min : v);
    const setMax = v => (max = maxDefined ? max : v);
    if (beginAtZero) {
      const minSign = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(min);
      const maxSign = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.s)(max);
      if (minSign < 0 && maxSign < 0) {
        setMax(0);
      } else if (minSign > 0 && maxSign > 0) {
        setMin(0);
      }
    }
    if (min === max) {
      let offset = 1;
      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {
        offset = Math.abs(max * 0.05);
      }
      setMax(max + offset);
      if (!beginAtZero) {
        setMin(min - offset);
      }
    }
    me.min = min;
    me.max = max;
  }
  getTickLimit() {
    const me = this;
    const tickOpts = me.options.ticks;
    let {maxTicksLimit, stepSize} = tickOpts;
    let maxTicks;
    if (stepSize) {
      maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
    } else {
      maxTicks = me.computeTickLimit();
      maxTicksLimit = maxTicksLimit || 11;
    }
    if (maxTicksLimit) {
      maxTicks = Math.min(maxTicksLimit, maxTicks);
    }
    return maxTicks;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const me = this;
    const opts = me.options;
    const tickOpts = opts.ticks;
    let maxTicks = me.getTickLimit();
    maxTicks = Math.max(2, maxTicks);
    const numericGeneratorOptions = {
      maxTicks,
      bounds: opts.bounds,
      min: opts.min,
      max: opts.max,
      precision: tickOpts.precision,
      step: tickOpts.stepSize,
      count: tickOpts.count,
      maxDigits: me._maxDigits(),
      horizontal: me.isHorizontal(),
      minRotation: tickOpts.minRotation || 0,
      includeBounds: tickOpts.includeBounds !== false
    };
    const dataRange = me._range || me;
    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
    if (opts.bounds === 'ticks') {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aA)(ticks, me, 'value');
    }
    if (opts.reverse) {
      ticks.reverse();
      me.start = me.max;
      me.end = me.min;
    } else {
      me.start = me.min;
      me.end = me.max;
    }
    return ticks;
  }
  configure() {
    const me = this;
    const ticks = me.ticks;
    let start = me.min;
    let end = me.max;
    super.configure();
    if (me.options.offset && ticks.length) {
      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
      start -= offset;
      end += offset;
    }
    me._startValue = start;
    me._endValue = end;
    me._valueRange = end - start;
  }
  getLabelForValue(value) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.n)(value, this.chart.options.locale);
  }
}

class LinearScale extends LinearScaleBase {
  determineDataLimits() {
    const me = this;
    const {min, max} = me.getMinMax(true);
    me.min = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(min) ? min : 0;
    me.max = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(max) ? max : 1;
    me.handleTickRangeOptions();
  }
  computeTickLimit() {
    const me = this;
    const horizontal = me.isHorizontal();
    const length = horizontal ? me.width : me.height;
    const minRotation = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(me.options.ticks.minRotation);
    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
    const tickFont = me._resolveTickFontOptions(0);
    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
  }
  getPixelForValue(value) {
    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
  }
  getValueForPixel(pixel) {
    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  }
}
LinearScale.id = 'linear';
LinearScale.defaults = {
  ticks: {
    callback: Ticks.formatters.numeric
  }
};

function isMajor(tickVal) {
  const remain = tickVal / (Math.pow(10, Math.floor((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(tickVal))));
  return remain === 1;
}
function generateTicks(generationOptions, dataRange) {
  const endExp = Math.floor((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(dataRange.max));
  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
  const ticks = [];
  let tickVal = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(generationOptions.min, Math.pow(10, Math.floor((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(dataRange.min))));
  let exp = Math.floor((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(tickVal));
  let significand = Math.floor(tickVal / Math.pow(10, exp));
  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
  do {
    ticks.push({value: tickVal, major: isMajor(tickVal)});
    ++significand;
    if (significand === 10) {
      significand = 1;
      ++exp;
      precision = exp >= 0 ? 1 : precision;
    }
    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
  } while (exp < endExp || (exp === endExp && significand < endSignificand));
  const lastTick = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.L)(generationOptions.max, tickVal);
  ticks.push({value: lastTick, major: isMajor(tickVal)});
  return ticks;
}
class LogarithmicScale extends Scale {
  constructor(cfg) {
    super(cfg);
    this.start = undefined;
    this.end = undefined;
    this._startValue = undefined;
    this._valueRange = 0;
  }
  parse(raw, index) {
    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);
    if (value === 0) {
      this._zero = true;
      return undefined;
    }
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(value) && value > 0 ? value : null;
  }
  determineDataLimits() {
    const me = this;
    const {min, max} = me.getMinMax(true);
    me.min = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(min) ? Math.max(0, min) : null;
    me.max = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(max) ? Math.max(0, max) : null;
    if (me.options.beginAtZero) {
      me._zero = true;
    }
    me.handleTickRangeOptions();
  }
  handleTickRangeOptions() {
    const me = this;
    const {minDefined, maxDefined} = me.getUserBounds();
    let min = me.min;
    let max = me.max;
    const setMin = v => (min = minDefined ? min : v);
    const setMax = v => (max = maxDefined ? max : v);
    const exp = (v, m) => Math.pow(10, Math.floor((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(v)) + m);
    if (min === max) {
      if (min <= 0) {
        setMin(1);
        setMax(10);
      } else {
        setMin(exp(min, -1));
        setMax(exp(max, +1));
      }
    }
    if (min <= 0) {
      setMin(exp(max, -1));
    }
    if (max <= 0) {
      setMax(exp(min, +1));
    }
    if (me._zero && me.min !== me._suggestedMin && min === exp(me.min, 0)) {
      setMin(exp(min, -1));
    }
    me.min = min;
    me.max = max;
  }
  buildTicks() {
    const me = this;
    const opts = me.options;
    const generationOptions = {
      min: me._userMin,
      max: me._userMax
    };
    const ticks = generateTicks(generationOptions, me);
    if (opts.bounds === 'ticks') {
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aA)(ticks, me, 'value');
    }
    if (opts.reverse) {
      ticks.reverse();
      me.start = me.max;
      me.end = me.min;
    } else {
      me.start = me.min;
      me.end = me.max;
    }
    return ticks;
  }
  getLabelForValue(value) {
    return value === undefined ? '0' : (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.n)(value, this.chart.options.locale);
  }
  configure() {
    const me = this;
    const start = me.min;
    super.configure();
    me._startValue = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(start);
    me._valueRange = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(me.max) - (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(start);
  }
  getPixelForValue(value) {
    const me = this;
    if (value === undefined || value === 0) {
      value = me.min;
    }
    if (value === null || isNaN(value)) {
      return NaN;
    }
    return me.getPixelForDecimal(value === me.min
      ? 0
      : ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.J)(value) - me._startValue) / me._valueRange);
  }
  getValueForPixel(pixel) {
    const me = this;
    const decimal = me.getDecimalForPixel(pixel);
    return Math.pow(10, me._startValue + decimal * me._valueRange);
  }
}
LogarithmicScale.id = 'logarithmic';
LogarithmicScale.defaults = {
  ticks: {
    callback: Ticks.formatters.logarithmic,
    major: {
      enabled: true
    }
  }
};

function getTickBackdropHeight(opts) {
  const tickOpts = opts.ticks;
  if (tickOpts.display && opts.display) {
    const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(tickOpts.backdropPadding);
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(tickOpts.font && tickOpts.font.size, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.d.font.size) + padding.height;
  }
  return 0;
}
function measureLabelSize(ctx, font, label) {
  label = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.b)(label) ? label : [label];
  return {
    w: (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aF)(ctx, font.string, label),
    h: label.length * font.lineHeight
  };
}
function determineLimits(angle, pos, size, min, max) {
  if (angle === min || angle === max) {
    return {
      start: pos - (size / 2),
      end: pos + (size / 2)
    };
  } else if (angle < min || angle > max) {
    return {
      start: pos - size,
      end: pos
    };
  }
  return {
    start: pos,
    end: pos + size
  };
}
function fitWithPointLabels(scale) {
  const furthestLimits = {
    l: 0,
    r: scale.width,
    t: 0,
    b: scale.height - scale.paddingTop
  };
  const furthestAngles = {};
  const labelSizes = [];
  const padding = [];
  const valueCount = scale.getLabels().length;
  for (let i = 0; i < valueCount; i++) {
    const opts = scale.options.pointLabels.setContext(scale.getPointLabelContext(i));
    padding[i] = opts.padding;
    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i]);
    const plFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(opts.font);
    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
    labelSizes[i] = textSize;
    const angleRadians = scale.getIndexAngle(i);
    const angle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(angleRadians);
    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    if (hLimits.start < furthestLimits.l) {
      furthestLimits.l = hLimits.start;
      furthestAngles.l = angleRadians;
    }
    if (hLimits.end > furthestLimits.r) {
      furthestLimits.r = hLimits.end;
      furthestAngles.r = angleRadians;
    }
    if (vLimits.start < furthestLimits.t) {
      furthestLimits.t = vLimits.start;
      furthestAngles.t = angleRadians;
    }
    if (vLimits.end > furthestLimits.b) {
      furthestLimits.b = vLimits.end;
      furthestAngles.b = angleRadians;
    }
  }
  scale._setReductions(scale.drawingArea, furthestLimits, furthestAngles);
  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function buildPointLabelItems(scale, labelSizes, padding) {
  const items = [];
  const valueCount = scale.getLabels().length;
  const opts = scale.options;
  const tickBackdropHeight = getTickBackdropHeight(opts);
  const outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
  for (let i = 0; i < valueCount; i++) {
    const extra = (i === 0 ? tickBackdropHeight / 2 : 0);
    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i]);
    const angle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.O)(scale.getIndexAngle(i));
    const size = labelSizes[i];
    const y = yForAngle(pointLabelPosition.y, size.h, angle);
    const textAlign = getTextAlignForAngle(angle);
    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
    items.push({
      x: pointLabelPosition.x,
      y,
      textAlign,
      left,
      top: y,
      right: left + size.w,
      bottom: y + size.h
    });
  }
  return items;
}
function getTextAlignForAngle(angle) {
  if (angle === 0 || angle === 180) {
    return 'center';
  } else if (angle < 180) {
    return 'left';
  }
  return 'right';
}
function leftForTextAlign(x, w, align) {
  if (align === 'right') {
    x -= w;
  } else if (align === 'center') {
    x -= (w / 2);
  }
  return x;
}
function yForAngle(y, h, angle) {
  if (angle === 90 || angle === 270) {
    y -= (h / 2);
  } else if (angle > 270 || angle < 90) {
    y -= h;
  }
  return y;
}
function drawPointLabels(scale, labelCount) {
  const {ctx, options: {pointLabels}} = scale;
  for (let i = labelCount - 1; i >= 0; i--) {
    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
    const plFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(optsAtIndex.font);
    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];
    const {backdropColor} = optsAtIndex;
    if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(backdropColor)) {
      const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(optsAtIndex.backdropPadding);
      ctx.fillStyle = backdropColor;
      ctx.fillRect(left - padding.left, top - padding.top, right - left + padding.width, bottom - top + padding.height);
    }
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V)(
      ctx,
      scale._pointLabels[i],
      x,
      y + (plFont.lineHeight / 2),
      plFont,
      {
        color: optsAtIndex.color,
        textAlign: textAlign,
        textBaseline: 'middle'
      }
    );
  }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
  const {ctx} = scale;
  if (circular) {
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T);
  } else {
    let pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (let i = 1; i < labelCount; i++) {
      pointPosition = scale.getPointPosition(i, radius);
      ctx.lineTo(pointPosition.x, pointPosition.y);
    }
  }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount) {
  const ctx = scale.ctx;
  const circular = gridLineOpts.circular;
  const {color, lineWidth} = gridLineOpts;
  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {
    return;
  }
  ctx.save();
  ctx.strokeStyle = color;
  ctx.lineWidth = lineWidth;
  ctx.setLineDash(gridLineOpts.borderDash);
  ctx.lineDashOffset = gridLineOpts.borderDashOffset;
  ctx.beginPath();
  pathRadiusLine(scale, radius, circular, labelCount);
  ctx.closePath();
  ctx.stroke();
  ctx.restore();
}
function numberOrZero(param) {
  return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(param) ? param : 0;
}
function createPointLabelContext(parent, index, label) {
  return Object.assign(Object.create(parent), {
    label,
    index,
    type: 'pointLabel'
  });
}
class RadialLinearScale extends LinearScaleBase {
  constructor(cfg) {
    super(cfg);
    this.xCenter = undefined;
    this.yCenter = undefined;
    this.drawingArea = undefined;
    this._pointLabels = [];
    this._pointLabelItems = [];
  }
  setDimensions() {
    const me = this;
    me.width = me.maxWidth;
    me.height = me.maxHeight;
    me.paddingTop = getTickBackdropHeight(me.options) / 2;
    me.xCenter = Math.floor(me.width / 2);
    me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
    me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
  }
  determineDataLimits() {
    const me = this;
    const {min, max} = me.getMinMax(false);
    me.min = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(min) && !isNaN(min) ? min : 0;
    me.max = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(max) && !isNaN(max) ? max : 0;
    me.handleTickRangeOptions();
  }
  computeTickLimit() {
    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  }
  generateTickLabels(ticks) {
    const me = this;
    LinearScaleBase.prototype.generateTickLabels.call(me, ticks);
    me._pointLabels = me.getLabels().map((value, index) => {
      const label = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(me.options.pointLabels.callback, [value, index], me);
      return label || label === 0 ? label : '';
    });
  }
  fit() {
    const me = this;
    const opts = me.options;
    if (opts.display && opts.pointLabels.display) {
      fitWithPointLabels(me);
    } else {
      me.setCenterPoint(0, 0, 0, 0);
    }
  }
  _setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {
    const me = this;
    let radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
    let radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
    let radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
    let radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);
    radiusReductionLeft = numberOrZero(radiusReductionLeft);
    radiusReductionRight = numberOrZero(radiusReductionRight);
    radiusReductionTop = numberOrZero(radiusReductionTop);
    radiusReductionBottom = numberOrZero(radiusReductionBottom);
    me.drawingArea = Math.max(largestPossibleRadius / 2, Math.min(
      Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
      Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)));
    me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
  }
  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
    const me = this;
    const maxRight = me.width - rightMovement - me.drawingArea;
    const maxLeft = leftMovement + me.drawingArea;
    const maxTop = topMovement + me.drawingArea;
    const maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;
    me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
    me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
  }
  getIndexAngle(index) {
    const angleMultiplier = _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.T / this.getLabels().length;
    const startAngle = this.options.startAngle || 0;
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.at)(index * angleMultiplier + (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(startAngle));
  }
  getDistanceFromCenterForValue(value) {
    const me = this;
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(value)) {
      return NaN;
    }
    const scalingFactor = me.drawingArea / (me.max - me.min);
    if (me.options.reverse) {
      return (me.max - value) * scalingFactor;
    }
    return (value - me.min) * scalingFactor;
  }
  getValueForDistanceFromCenter(distance) {
    if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(distance)) {
      return NaN;
    }
    const me = this;
    const scaledDistance = distance / (me.drawingArea / (me.max - me.min));
    return me.options.reverse ? me.max - scaledDistance : me.min + scaledDistance;
  }
  getPointLabelContext(index) {
    const me = this;
    const pointLabels = me._pointLabels || [];
    if (index >= 0 && index < pointLabels.length) {
      const pointLabel = pointLabels[index];
      return createPointLabelContext(me.getContext(), index, pointLabel);
    }
  }
  getPointPosition(index, distanceFromCenter) {
    const me = this;
    const angle = me.getIndexAngle(index) - _chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.H;
    return {
      x: Math.cos(angle) * distanceFromCenter + me.xCenter,
      y: Math.sin(angle) * distanceFromCenter + me.yCenter,
      angle
    };
  }
  getPointPositionForValue(index, value) {
    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
  }
  getBasePosition(index) {
    return this.getPointPositionForValue(index || 0, this.getBaseValue());
  }
  getPointLabelPosition(index) {
    const {left, top, right, bottom} = this._pointLabelItems[index];
    return {
      left,
      top,
      right,
      bottom,
    };
  }
  drawBackground() {
    const me = this;
    const {backgroundColor, grid: {circular}} = me.options;
    if (backgroundColor) {
      const ctx = me.ctx;
      ctx.save();
      ctx.beginPath();
      pathRadiusLine(me, me.getDistanceFromCenterForValue(me._endValue), circular, me.getLabels().length);
      ctx.closePath();
      ctx.fillStyle = backgroundColor;
      ctx.fill();
      ctx.restore();
    }
  }
  drawGrid() {
    const me = this;
    const ctx = me.ctx;
    const opts = me.options;
    const {angleLines, grid} = opts;
    const labelCount = me.getLabels().length;
    let i, offset, position;
    if (opts.pointLabels.display) {
      drawPointLabels(me, labelCount);
    }
    if (grid.display) {
      me.ticks.forEach((tick, index) => {
        if (index !== 0) {
          offset = me.getDistanceFromCenterForValue(tick.value);
          const optsAtIndex = grid.setContext(me.getContext(index - 1));
          drawRadiusLine(me, optsAtIndex, offset, labelCount);
        }
      });
    }
    if (angleLines.display) {
      ctx.save();
      for (i = me.getLabels().length - 1; i >= 0; i--) {
        const optsAtIndex = angleLines.setContext(me.getPointLabelContext(i));
        const {color, lineWidth} = optsAtIndex;
        if (!lineWidth || !color) {
          continue;
        }
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = color;
        ctx.setLineDash(optsAtIndex.borderDash);
        ctx.lineDashOffset = optsAtIndex.borderDashOffset;
        offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
        position = me.getPointPosition(i, offset);
        ctx.beginPath();
        ctx.moveTo(me.xCenter, me.yCenter);
        ctx.lineTo(position.x, position.y);
        ctx.stroke();
      }
      ctx.restore();
    }
  }
  drawBorder() {}
  drawLabels() {
    const me = this;
    const ctx = me.ctx;
    const opts = me.options;
    const tickOpts = opts.ticks;
    if (!tickOpts.display) {
      return;
    }
    const startAngle = me.getIndexAngle(0);
    let offset, width;
    ctx.save();
    ctx.translate(me.xCenter, me.yCenter);
    ctx.rotate(startAngle);
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    me.ticks.forEach((tick, index) => {
      if (index === 0 && !opts.reverse) {
        return;
      }
      const optsAtIndex = tickOpts.setContext(me.getContext(index));
      const tickFont = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.X)(optsAtIndex.font);
      offset = me.getDistanceFromCenterForValue(me.ticks[index].value);
      if (optsAtIndex.showLabelBackdrop) {
        ctx.font = tickFont.string;
        width = ctx.measureText(tick.label).width;
        ctx.fillStyle = optsAtIndex.backdropColor;
        const padding = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.A)(optsAtIndex.backdropPadding);
        ctx.fillRect(
          -width / 2 - padding.left,
          -offset - tickFont.size / 2 - padding.top,
          width + padding.width,
          tickFont.size + padding.height
        );
      }
      (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.V)(ctx, tick.label, 0, -offset, tickFont, {
        color: optsAtIndex.color,
      });
    });
    ctx.restore();
  }
  drawTitle() {}
}
RadialLinearScale.id = 'radialLinear';
RadialLinearScale.defaults = {
  display: true,
  animate: true,
  position: 'chartArea',
  angleLines: {
    display: true,
    lineWidth: 1,
    borderDash: [],
    borderDashOffset: 0.0
  },
  grid: {
    circular: false
  },
  startAngle: 0,
  ticks: {
    showLabelBackdrop: true,
    callback: Ticks.formatters.numeric
  },
  pointLabels: {
    backdropColor: undefined,
    backdropPadding: 2,
    display: true,
    font: {
      size: 10
    },
    callback(label) {
      return label;
    },
    padding: 5
  }
};
RadialLinearScale.defaultRoutes = {
  'angleLines.color': 'borderColor',
  'pointLabels.color': 'color',
  'ticks.color': 'color'
};
RadialLinearScale.descriptors = {
  angleLines: {
    _fallback: 'grid'
  }
};

const INTERVALS = {
  millisecond: {common: true, size: 1, steps: 1000},
  second: {common: true, size: 1000, steps: 60},
  minute: {common: true, size: 60000, steps: 60},
  hour: {common: true, size: 3600000, steps: 24},
  day: {common: true, size: 86400000, steps: 30},
  week: {common: false, size: 604800000, steps: 4},
  month: {common: true, size: 2.628e9, steps: 12},
  quarter: {common: false, size: 7.884e9, steps: 4},
  year: {common: true, size: 3.154e10}
};
const UNITS = (Object.keys(INTERVALS));
function sorter(a, b) {
  return a - b;
}
function parse(scale, input) {
  if ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.j)(input)) {
    return null;
  }
  const adapter = scale._adapter;
  const {parser, round, isoWeekday} = scale._parseOpts;
  let value = input;
  if (typeof parser === 'function') {
    value = parser(value);
  }
  if (!(0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(value)) {
    value = typeof parser === 'string'
      ? adapter.parse(value, parser)
      : adapter.parse(value);
  }
  if (value === null) {
    return null;
  }
  if (round) {
    value = round === 'week' && ((0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(isoWeekday) || isoWeekday === true)
      ? adapter.startOf(value, 'isoWeek', isoWeekday)
      : adapter.startOf(value, round);
  }
  return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  const ilen = UNITS.length;
  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    const interval = INTERVALS[UNITS[i]];
    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
      return UNITS[i];
    }
  }
  return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    const unit = UNITS[i];
    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
      return unit;
    }
  }
  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    if (INTERVALS[UNITS[i]].common) {
      return UNITS[i];
    }
  }
}
function addTick(ticks, time, timestamps) {
  if (!timestamps) {
    ticks[time] = true;
  } else if (timestamps.length) {
    const {lo, hi} = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aH)(timestamps, time);
    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
    ticks[timestamp] = true;
  }
}
function setMajorTicks(scale, ticks, map, majorUnit) {
  const adapter = scale._adapter;
  const first = +adapter.startOf(ticks[0].value, majorUnit);
  const last = ticks[ticks.length - 1].value;
  let major, index;
  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    index = map[major];
    if (index >= 0) {
      ticks[index].major = true;
    }
  }
  return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
  const ticks = [];
  const map = {};
  const ilen = values.length;
  let i, value;
  for (i = 0; i < ilen; ++i) {
    value = values[i];
    map[value] = i;
    ticks.push({
      value,
      major: false
    });
  }
  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}
class TimeScale extends Scale {
  constructor(props) {
    super(props);
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
    this._unit = 'day';
    this._majorUnit = undefined;
    this._offsets = {};
    this._normalized = false;
    this._parseOpts = undefined;
  }
  init(scaleOpts, opts) {
    const time = scaleOpts.time || (scaleOpts.time = {});
    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
    (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.a7)(time.displayFormats, adapter.formats());
    this._parseOpts = {
      parser: time.parser,
      round: time.round,
      isoWeekday: time.isoWeekday
    };
    super.init(scaleOpts);
    this._normalized = opts.normalized;
  }
  parse(raw, index) {
    if (raw === undefined) {
      return null;
    }
    return parse(this, raw);
  }
  beforeLayout() {
    super.beforeLayout();
    this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const me = this;
    const options = me.options;
    const adapter = me._adapter;
    const unit = options.time.unit || 'day';
    let {min, max, minDefined, maxDefined} = me.getUserBounds();
    function _applyBounds(bounds) {
      if (!minDefined && !isNaN(bounds.min)) {
        min = Math.min(min, bounds.min);
      }
      if (!maxDefined && !isNaN(bounds.max)) {
        max = Math.max(max, bounds.max);
      }
    }
    if (!minDefined || !maxDefined) {
      _applyBounds(me._getLabelBounds());
      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {
        _applyBounds(me.getMinMax(false));
      }
    }
    min = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
    max = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
    me.min = Math.min(min, max - 1);
    me.max = Math.max(min + 1, max);
  }
  _getLabelBounds() {
    const arr = this.getLabelTimestamps();
    let min = Number.POSITIVE_INFINITY;
    let max = Number.NEGATIVE_INFINITY;
    if (arr.length) {
      min = arr[0];
      max = arr[arr.length - 1];
    }
    return {min, max};
  }
  buildTicks() {
    const me = this;
    const options = me.options;
    const timeOpts = options.time;
    const tickOpts = options.ticks;
    const timestamps = tickOpts.source === 'labels' ? me.getLabelTimestamps() : me._generate();
    if (options.bounds === 'ticks' && timestamps.length) {
      me.min = me._userMin || timestamps[0];
      me.max = me._userMax || timestamps[timestamps.length - 1];
    }
    const min = me.min;
    const max = me.max;
    const ticks = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.aG)(timestamps, min, max);
    me._unit = timeOpts.unit || (tickOpts.autoSkip
      ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, me._getLabelCapacity(min))
      : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
    me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
      : determineMajorUnit(me._unit);
    me.initOffsets(timestamps);
    if (options.reverse) {
      ticks.reverse();
    }
    return ticksFromTimestamps(me, ticks, me._majorUnit);
  }
  initOffsets(timestamps) {
    const me = this;
    let start = 0;
    let end = 0;
    let first, last;
    if (me.options.offset && timestamps.length) {
      first = me.getDecimalForValue(timestamps[0]);
      if (timestamps.length === 1) {
        start = 1 - first;
      } else {
        start = (me.getDecimalForValue(timestamps[1]) - first) / 2;
      }
      last = me.getDecimalForValue(timestamps[timestamps.length - 1]);
      if (timestamps.length === 1) {
        end = last;
      } else {
        end = (last - me.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
      }
    }
    const limit = timestamps.length < 3 ? 0.5 : 0.25;
    start = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(start, 0, limit);
    end = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.q)(end, 0, limit);
    me._offsets = {start, end, factor: 1 / (start + 1 + end)};
  }
  _generate() {
    const me = this;
    const adapter = me._adapter;
    const min = me.min;
    const max = me.max;
    const options = me.options;
    const timeOpts = options.time;
    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, me._getLabelCapacity(min));
    const stepSize = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.v)(timeOpts.stepSize, 1);
    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;
    const hasWeekday = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.p)(weekday) || weekday === true;
    const ticks = {};
    let first = min;
    let time, count;
    if (hasWeekday) {
      first = +adapter.startOf(first, 'isoWeek', weekday);
    }
    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);
    if (adapter.diff(max, min, minor) > 100000 * stepSize) {
      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);
    }
    const timestamps = options.ticks.source === 'data' && me.getDataTimestamps();
    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {
      addTick(ticks, time, timestamps);
    }
    if (time === max || options.bounds === 'ticks' || count === 1) {
      addTick(ticks, time, timestamps);
    }
    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);
  }
  getLabelForValue(value) {
    const me = this;
    const adapter = me._adapter;
    const timeOpts = me.options.time;
    if (timeOpts.tooltipFormat) {
      return adapter.format(value, timeOpts.tooltipFormat);
    }
    return adapter.format(value, timeOpts.displayFormats.datetime);
  }
  _tickFormatFunction(time, index, ticks, format) {
    const me = this;
    const options = me.options;
    const formats = options.time.displayFormats;
    const unit = me._unit;
    const majorUnit = me._majorUnit;
    const minorFormat = unit && formats[unit];
    const majorFormat = majorUnit && formats[majorUnit];
    const tick = ticks[index];
    const major = majorUnit && majorFormat && tick && tick.major;
    const label = me._adapter.format(time, format || (major ? majorFormat : minorFormat));
    const formatter = options.ticks.callback;
    return formatter ? (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.M)(formatter, [label, index, ticks], me) : label;
  }
  generateTickLabels(ticks) {
    let i, ilen, tick;
    for (i = 0, ilen = ticks.length; i < ilen; ++i) {
      tick = ticks[i];
      tick.label = this._tickFormatFunction(tick.value, i, ticks);
    }
  }
  getDecimalForValue(value) {
    const me = this;
    return value === null ? NaN : (value - me.min) / (me.max - me.min);
  }
  getPixelForValue(value) {
    const me = this;
    const offsets = me._offsets;
    const pos = me.getDecimalForValue(value);
    return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  }
  getValueForPixel(pixel) {
    const me = this;
    const offsets = me._offsets;
    const pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return me.min + pos * (me.max - me.min);
  }
  _getLabelSize(label) {
    const me = this;
    const ticksOpts = me.options.ticks;
    const tickLabelWidth = me.ctx.measureText(label).width;
    const angle = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.t)(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    const cosRotation = Math.cos(angle);
    const sinRotation = Math.sin(angle);
    const tickFontSize = me._resolveTickFontOptions(0).size;
    return {
      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
    };
  }
  _getLabelCapacity(exampleTime) {
    const me = this;
    const timeOpts = me.options.time;
    const displayFormats = timeOpts.displayFormats;
    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    const exampleLabel = me._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
    const size = me._getLabelSize(exampleLabel);
    const capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h) - 1;
    return capacity > 0 ? capacity : 1;
  }
  getDataTimestamps() {
    const me = this;
    let timestamps = me._cache.data || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const metas = me.getMatchingVisibleMetas();
    if (me._normalized && metas.length) {
      return (me._cache.data = metas[0].controller.getAllParsedValues(me));
    }
    for (i = 0, ilen = metas.length; i < ilen; ++i) {
      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(me));
    }
    return (me._cache.data = me.normalize(timestamps));
  }
  getLabelTimestamps() {
    const me = this;
    const timestamps = me._cache.labels || [];
    let i, ilen;
    if (timestamps.length) {
      return timestamps;
    }
    const labels = me.getLabels();
    for (i = 0, ilen = labels.length; i < ilen; ++i) {
      timestamps.push(parse(me, labels[i]));
    }
    return (me._cache.labels = me._normalized ? timestamps : me.normalize(timestamps));
  }
  normalize(values) {
    return (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__._)(values.sort(sorter));
  }
}
TimeScale.id = 'time';
TimeScale.defaults = {
  bounds: 'data',
  adapters: {},
  time: {
    parser: false,
    unit: false,
    round: false,
    isoWeekday: false,
    minUnit: 'millisecond',
    displayFormats: {}
  },
  ticks: {
    source: 'auto',
    major: {
      enabled: false
    }
  }
};

function interpolate(table, val, reverse) {
  let lo = 0;
  let hi = table.length - 1;
  let prevSource, nextSource, prevTarget, nextTarget;
  if (reverse) {
    if (val >= table[lo].pos && val <= table[hi].pos) {
      ({lo, hi} = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(table, 'pos', val));
    }
    ({pos: prevSource, time: prevTarget} = table[lo]);
    ({pos: nextSource, time: nextTarget} = table[hi]);
  } else {
    if (val >= table[lo].time && val <= table[hi].time) {
      ({lo, hi} = (0,_chunks_helpers_segment_js__WEBPACK_IMPORTED_MODULE_0__.w)(table, 'time', val));
    }
    ({time: prevSource, pos: prevTarget} = table[lo]);
    ({time: nextSource, pos: nextTarget} = table[hi]);
  }
  const span = nextSource - prevSource;
  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
  constructor(props) {
    super(props);
    this._table = [];
    this._minPos = undefined;
    this._tableRange = undefined;
  }
  initOffsets() {
    const me = this;
    const timestamps = me._getTimestampsForTable();
    const table = me._table = me.buildLookupTable(timestamps);
    me._minPos = interpolate(table, me.min);
    me._tableRange = interpolate(table, me.max) - me._minPos;
    super.initOffsets(timestamps);
  }
  buildLookupTable(timestamps) {
    const {min, max} = this;
    const items = [];
    const table = [];
    let i, ilen, prev, curr, next;
    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
      curr = timestamps[i];
      if (curr >= min && curr <= max) {
        items.push(curr);
      }
    }
    if (items.length < 2) {
      return [
        {time: min, pos: 0},
        {time: max, pos: 1}
      ];
    }
    for (i = 0, ilen = items.length; i < ilen; ++i) {
      next = items[i + 1];
      prev = items[i - 1];
      curr = items[i];
      if (Math.round((next + prev) / 2) !== curr) {
        table.push({time: curr, pos: i / (ilen - 1)});
      }
    }
    return table;
  }
  _getTimestampsForTable() {
    const me = this;
    let timestamps = me._cache.all || [];
    if (timestamps.length) {
      return timestamps;
    }
    const data = me.getDataTimestamps();
    const label = me.getLabelTimestamps();
    if (data.length && label.length) {
      timestamps = me.normalize(data.concat(label));
    } else {
      timestamps = data.length ? data : label;
    }
    timestamps = me._cache.all = timestamps;
    return timestamps;
  }
  getDecimalForValue(value) {
    return (interpolate(this._table, value) - this._minPos) / this._tableRange;
  }
  getValueForPixel(pixel) {
    const me = this;
    const offsets = me._offsets;
    const decimal = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    return interpolate(me._table, decimal * me._tableRange + me._minPos, true);
  }
}
TimeSeriesScale.id = 'timeseries';
TimeSeriesScale.defaults = TimeScale.defaults;

var scales = /*#__PURE__*/Object.freeze({
__proto__: null,
CategoryScale: CategoryScale,
LinearScale: LinearScale,
LogarithmicScale: LogarithmicScale,
RadialLinearScale: RadialLinearScale,
TimeScale: TimeScale,
TimeSeriesScale: TimeSeriesScale
});

const registerables = [
  controllers,
  elements,
  plugins,
  scales,
];




/***/ }),

/***/ "./node_modules/chart.js/dist/chunks/helpers.segment.js":
/*!**************************************************************!*\
  !*** ./node_modules/chart.js/dist/chunks/helpers.segment.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ overrides),
/* harmony export */   "A": () => (/* binding */ toPadding),
/* harmony export */   "B": () => (/* binding */ each),
/* harmony export */   "C": () => (/* binding */ getMaximumSize),
/* harmony export */   "D": () => (/* binding */ _getParentNode),
/* harmony export */   "E": () => (/* binding */ readUsedSize),
/* harmony export */   "F": () => (/* binding */ throttled),
/* harmony export */   "G": () => (/* binding */ supportsEventListenerOptions),
/* harmony export */   "H": () => (/* binding */ HALF_PI),
/* harmony export */   "I": () => (/* binding */ _isDomSupported),
/* harmony export */   "J": () => (/* binding */ log10),
/* harmony export */   "K": () => (/* binding */ _factorize),
/* harmony export */   "L": () => (/* binding */ finiteOrDefault),
/* harmony export */   "M": () => (/* binding */ callback),
/* harmony export */   "N": () => (/* binding */ _addGrace),
/* harmony export */   "O": () => (/* binding */ toDegrees),
/* harmony export */   "P": () => (/* binding */ PI),
/* harmony export */   "Q": () => (/* binding */ _measureText),
/* harmony export */   "R": () => (/* binding */ _int16Range),
/* harmony export */   "S": () => (/* binding */ _alignPixel),
/* harmony export */   "T": () => (/* binding */ TAU),
/* harmony export */   "U": () => (/* binding */ clipArea),
/* harmony export */   "V": () => (/* binding */ renderText),
/* harmony export */   "W": () => (/* binding */ unclipArea),
/* harmony export */   "X": () => (/* binding */ toFont),
/* harmony export */   "Y": () => (/* binding */ _toLeftRightCenter),
/* harmony export */   "Z": () => (/* binding */ _alignStartEnd),
/* harmony export */   "_": () => (/* binding */ _arrayUnique),
/* harmony export */   "a": () => (/* binding */ resolve),
/* harmony export */   "a0": () => (/* binding */ merge),
/* harmony export */   "a1": () => (/* binding */ _capitalize),
/* harmony export */   "a2": () => (/* binding */ descriptors),
/* harmony export */   "a3": () => (/* binding */ isFunction),
/* harmony export */   "a4": () => (/* binding */ _attachContext),
/* harmony export */   "a5": () => (/* binding */ _createResolver),
/* harmony export */   "a6": () => (/* binding */ _descriptors),
/* harmony export */   "a7": () => (/* binding */ mergeIf),
/* harmony export */   "a8": () => (/* binding */ uid),
/* harmony export */   "a9": () => (/* binding */ debounce),
/* harmony export */   "aA": () => (/* binding */ _setMinAndMaxByKey),
/* harmony export */   "aB": () => (/* binding */ niceNum),
/* harmony export */   "aC": () => (/* binding */ almostWhole),
/* harmony export */   "aD": () => (/* binding */ almostEquals),
/* harmony export */   "aE": () => (/* binding */ _decimalPlaces),
/* harmony export */   "aF": () => (/* binding */ _longestText),
/* harmony export */   "aG": () => (/* binding */ _filterBetween),
/* harmony export */   "aH": () => (/* binding */ _lookup),
/* harmony export */   "aI": () => (/* binding */ getHoverColor),
/* harmony export */   "aJ": () => (/* binding */ clone$1),
/* harmony export */   "aK": () => (/* binding */ _merger),
/* harmony export */   "aL": () => (/* binding */ _mergerIf),
/* harmony export */   "aM": () => (/* binding */ _deprecated),
/* harmony export */   "aN": () => (/* binding */ toFontString),
/* harmony export */   "aO": () => (/* binding */ splineCurve),
/* harmony export */   "aP": () => (/* binding */ splineCurveMonotone),
/* harmony export */   "aQ": () => (/* binding */ getStyle),
/* harmony export */   "aR": () => (/* binding */ fontString),
/* harmony export */   "aS": () => (/* binding */ toLineHeight),
/* harmony export */   "aT": () => (/* binding */ PITAU),
/* harmony export */   "aU": () => (/* binding */ INFINITY),
/* harmony export */   "aV": () => (/* binding */ RAD_PER_DEG),
/* harmony export */   "aW": () => (/* binding */ QUARTER_PI),
/* harmony export */   "aX": () => (/* binding */ TWO_THIRDS_PI),
/* harmony export */   "aY": () => (/* binding */ _angleDiff),
/* harmony export */   "aa": () => (/* binding */ retinaScale),
/* harmony export */   "ab": () => (/* binding */ clearCanvas),
/* harmony export */   "ac": () => (/* binding */ setsEqual),
/* harmony export */   "ad": () => (/* binding */ _elementsEqual),
/* harmony export */   "ae": () => (/* binding */ getAngleFromPoint),
/* harmony export */   "af": () => (/* binding */ _readValueToProps),
/* harmony export */   "ag": () => (/* binding */ _updateBezierControlPoints),
/* harmony export */   "ah": () => (/* binding */ _computeSegments),
/* harmony export */   "ai": () => (/* binding */ _boundSegments),
/* harmony export */   "aj": () => (/* binding */ _steppedInterpolation),
/* harmony export */   "ak": () => (/* binding */ _bezierInterpolation),
/* harmony export */   "al": () => (/* binding */ _pointInLine),
/* harmony export */   "am": () => (/* binding */ _steppedLineTo),
/* harmony export */   "an": () => (/* binding */ _bezierCurveTo),
/* harmony export */   "ao": () => (/* binding */ drawPoint),
/* harmony export */   "ap": () => (/* binding */ addRoundedRectPath),
/* harmony export */   "aq": () => (/* binding */ toTRBL),
/* harmony export */   "ar": () => (/* binding */ toTRBLCorners),
/* harmony export */   "as": () => (/* binding */ _boundSegment),
/* harmony export */   "at": () => (/* binding */ _normalizeAngle),
/* harmony export */   "au": () => (/* binding */ getRtlAdapter),
/* harmony export */   "av": () => (/* binding */ overrideTextDirection),
/* harmony export */   "aw": () => (/* binding */ _textX),
/* harmony export */   "ax": () => (/* binding */ restoreTextDirection),
/* harmony export */   "ay": () => (/* binding */ noop),
/* harmony export */   "az": () => (/* binding */ distanceBetweenPoints),
/* harmony export */   "b": () => (/* binding */ isArray),
/* harmony export */   "c": () => (/* binding */ color),
/* harmony export */   "d": () => (/* binding */ defaults),
/* harmony export */   "e": () => (/* binding */ effects),
/* harmony export */   "f": () => (/* binding */ resolveObjectKey),
/* harmony export */   "g": () => (/* binding */ isNumberFinite),
/* harmony export */   "h": () => (/* binding */ defined),
/* harmony export */   "i": () => (/* binding */ isObject),
/* harmony export */   "j": () => (/* binding */ isNullOrUndef),
/* harmony export */   "k": () => (/* binding */ toPercentage),
/* harmony export */   "l": () => (/* binding */ listenArrayEvents),
/* harmony export */   "m": () => (/* binding */ toDimension),
/* harmony export */   "n": () => (/* binding */ formatNumber),
/* harmony export */   "o": () => (/* binding */ _angleBetween),
/* harmony export */   "p": () => (/* binding */ isNumber),
/* harmony export */   "q": () => (/* binding */ _limitValue),
/* harmony export */   "r": () => (/* binding */ requestAnimFrame),
/* harmony export */   "s": () => (/* binding */ sign),
/* harmony export */   "t": () => (/* binding */ toRadians),
/* harmony export */   "u": () => (/* binding */ unlistenArrayEvents),
/* harmony export */   "v": () => (/* binding */ valueOrDefault),
/* harmony export */   "w": () => (/* binding */ _lookupByKey),
/* harmony export */   "x": () => (/* binding */ getRelativePosition),
/* harmony export */   "y": () => (/* binding */ _isPointInArea),
/* harmony export */   "z": () => (/* binding */ _rlookupByKey)
/* harmony export */ });
/*!
 * Chart.js v3.5.1
 * https://www.chartjs.org
 * (c) 2021 Chart.js Contributors
 * Released under the MIT License
 */
function fontString(pixelSize, fontStyle, fontFamily) {
  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
}
const requestAnimFrame = (function() {
  if (typeof window === 'undefined') {
    return function(callback) {
      return callback();
    };
  }
  return window.requestAnimationFrame;
}());
function throttled(fn, thisArg, updateFn) {
  const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));
  let ticking = false;
  let args = [];
  return function(...rest) {
    args = updateArgs(rest);
    if (!ticking) {
      ticking = true;
      requestAnimFrame.call(window, () => {
        ticking = false;
        fn.apply(thisArg, args);
      });
    }
  };
}
function debounce(fn, delay) {
  let timeout;
  return function() {
    if (delay) {
      clearTimeout(timeout);
      timeout = setTimeout(fn, delay);
    } else {
      fn();
    }
    return delay;
  };
}
const _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';
const _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;
const _textX = (align, left, right, rtl) => {
  const check = rtl ? 'left' : 'right';
  return align === check ? right : align === 'center' ? (left + right) / 2 : left;
};

function noop() {}
const uid = (function() {
  let id = 0;
  return function() {
    return id++;
  };
}());
function isNullOrUndef(value) {
  return value === null || typeof value === 'undefined';
}
function isArray(value) {
  if (Array.isArray && Array.isArray(value)) {
    return true;
  }
  const type = Object.prototype.toString.call(value);
  if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
    return true;
  }
  return false;
}
function isObject(value) {
  return value !== null && Object.prototype.toString.call(value) === '[object Object]';
}
const isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);
function finiteOrDefault(value, defaultValue) {
  return isNumberFinite(value) ? value : defaultValue;
}
function valueOrDefault(value, defaultValue) {
  return typeof value === 'undefined' ? defaultValue : value;
}
const toPercentage = (value, dimension) =>
  typeof value === 'string' && value.endsWith('%') ?
    parseFloat(value) / 100
    : value / dimension;
const toDimension = (value, dimension) =>
  typeof value === 'string' && value.endsWith('%') ?
    parseFloat(value) / 100 * dimension
    : +value;
function callback(fn, args, thisArg) {
  if (fn && typeof fn.call === 'function') {
    return fn.apply(thisArg, args);
  }
}
function each(loopable, fn, thisArg, reverse) {
  let i, len, keys;
  if (isArray(loopable)) {
    len = loopable.length;
    if (reverse) {
      for (i = len - 1; i >= 0; i--) {
        fn.call(thisArg, loopable[i], i);
      }
    } else {
      for (i = 0; i < len; i++) {
        fn.call(thisArg, loopable[i], i);
      }
    }
  } else if (isObject(loopable)) {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i = 0; i < len; i++) {
      fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
  }
}
function _elementsEqual(a0, a1) {
  let i, ilen, v0, v1;
  if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
  }
  for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];
    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {
      return false;
    }
  }
  return true;
}
function clone$1(source) {
  if (isArray(source)) {
    return source.map(clone$1);
  }
  if (isObject(source)) {
    const target = Object.create(null);
    const keys = Object.keys(source);
    const klen = keys.length;
    let k = 0;
    for (; k < klen; ++k) {
      target[keys[k]] = clone$1(source[keys[k]]);
    }
    return target;
  }
  return source;
}
function isValidKey(key) {
  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
}
function _merger(key, target, source, options) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    merge(tval, sval, options);
  } else {
    target[key] = clone$1(sval);
  }
}
function merge(target, source, options) {
  const sources = isArray(source) ? source : [source];
  const ilen = sources.length;
  if (!isObject(target)) {
    return target;
  }
  options = options || {};
  const merger = options.merger || _merger;
  for (let i = 0; i < ilen; ++i) {
    source = sources[i];
    if (!isObject(source)) {
      continue;
    }
    const keys = Object.keys(source);
    for (let k = 0, klen = keys.length; k < klen; ++k) {
      merger(keys[k], target, source, options);
    }
  }
  return target;
}
function mergeIf(target, source) {
  return merge(target, source, {merger: _mergerIf});
}
function _mergerIf(key, target, source) {
  if (!isValidKey(key)) {
    return;
  }
  const tval = target[key];
  const sval = source[key];
  if (isObject(tval) && isObject(sval)) {
    mergeIf(tval, sval);
  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {
    target[key] = clone$1(sval);
  }
}
function _deprecated(scope, value, previous, current) {
  if (value !== undefined) {
    console.warn(scope + ': "' + previous +
			'" is deprecated. Please use "' + current + '" instead');
  }
}
const emptyString = '';
const dot = '.';
function indexOfDotOrLength(key, start) {
  const idx = key.indexOf(dot, start);
  return idx === -1 ? key.length : idx;
}
function resolveObjectKey(obj, key) {
  if (key === emptyString) {
    return obj;
  }
  let pos = 0;
  let idx = indexOfDotOrLength(key, pos);
  while (obj && idx > pos) {
    obj = obj[key.substr(pos, idx - pos)];
    pos = idx + 1;
    idx = indexOfDotOrLength(key, pos);
  }
  return obj;
}
function _capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value) => typeof value !== 'undefined';
const isFunction = (value) => typeof value === 'function';
const setsEqual = (a, b) => {
  if (a.size !== b.size) {
    return false;
  }
  for (const item of a) {
    if (!b.has(item)) {
      return false;
    }
  }
  return true;
};

const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function niceNum(range) {
  const roundedRange = Math.round(range);
  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
  const niceRange = Math.pow(10, Math.floor(log10(range)));
  const fraction = range / niceRange;
  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
  return niceFraction * niceRange;
}
function _factorize(value) {
  const result = [];
  const sqrt = Math.sqrt(value);
  let i;
  for (i = 1; i < sqrt; i++) {
    if (value % i === 0) {
      result.push(i);
      result.push(value / i);
    }
  }
  if (sqrt === (sqrt | 0)) {
    result.push(sqrt);
  }
  result.sort((a, b) => a - b).pop();
  return result;
}
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostEquals(x, y, epsilon) {
  return Math.abs(x - y) < epsilon;
}
function almostWhole(x, epsilon) {
  const rounded = Math.round(x);
  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
}
function _setMinAndMaxByKey(array, target, property) {
  let i, ilen, value;
  for (i = 0, ilen = array.length; i < ilen; i++) {
    value = array[i][property];
    if (!isNaN(value)) {
      target.min = Math.min(target.min, value);
      target.max = Math.max(target.max, value);
    }
  }
}
function toRadians(degrees) {
  return degrees * (PI / 180);
}
function toDegrees(radians) {
  return radians * (180 / PI);
}
function _decimalPlaces(x) {
  if (!isNumberFinite(x)) {
    return;
  }
  let e = 1;
  let p = 0;
  while (Math.round(x * e) / e !== x) {
    e *= 10;
    p++;
  }
  return p;
}
function getAngleFromPoint(centrePoint, anglePoint) {
  const distanceFromXCenter = anglePoint.x - centrePoint.x;
  const distanceFromYCenter = anglePoint.y - centrePoint.y;
  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
  if (angle < (-0.5 * PI)) {
    angle += TAU;
  }
  return {
    angle,
    distance: radialDistanceFromCenter
  };
}
function distanceBetweenPoints(pt1, pt2) {
  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
function _angleDiff(a, b) {
  return (a - b + PITAU) % TAU - PI;
}
function _normalizeAngle(a) {
  return (a % TAU + TAU) % TAU;
}
function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
  const a = _normalizeAngle(angle);
  const s = _normalizeAngle(start);
  const e = _normalizeAngle(end);
  const angleToStart = _normalizeAngle(s - a);
  const angleToEnd = _normalizeAngle(e - a);
  const startToAngle = _normalizeAngle(a - s);
  const endToAngle = _normalizeAngle(a - e);
  return a === s || a === e || (sameAngleIsFullCircle && s === e)
    || (angleToStart > angleToEnd && startToAngle < endToAngle);
}
function _limitValue(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function _int16Range(value) {
  return _limitValue(value, -32768, 32767);
}

const atEdge = (t) => t === 0 || t === 1;
const elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
const elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
const effects = {
  linear: t => t,
  easeInQuad: t => t * t,
  easeOutQuad: t => -t * (t - 2),
  easeInOutQuad: t => ((t /= 0.5) < 1)
    ? 0.5 * t * t
    : -0.5 * ((--t) * (t - 2) - 1),
  easeInCubic: t => t * t * t,
  easeOutCubic: t => (t -= 1) * t * t + 1,
  easeInOutCubic: t => ((t /= 0.5) < 1)
    ? 0.5 * t * t * t
    : 0.5 * ((t -= 2) * t * t + 2),
  easeInQuart: t => t * t * t * t,
  easeOutQuart: t => -((t -= 1) * t * t * t - 1),
  easeInOutQuart: t => ((t /= 0.5) < 1)
    ? 0.5 * t * t * t * t
    : -0.5 * ((t -= 2) * t * t * t - 2),
  easeInQuint: t => t * t * t * t * t,
  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,
  easeInOutQuint: t => ((t /= 0.5) < 1)
    ? 0.5 * t * t * t * t * t
    : 0.5 * ((t -= 2) * t * t * t * t + 2),
  easeInSine: t => -Math.cos(t * HALF_PI) + 1,
  easeOutSine: t => Math.sin(t * HALF_PI),
  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),
  easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),
  easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,
  easeInOutExpo: t => atEdge(t) ? t : t < 0.5
    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))
    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
  easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),
  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),
  easeInOutCirc: t => ((t /= 0.5) < 1)
    ? -0.5 * (Math.sqrt(1 - t * t) - 1)
    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
  easeInOutElastic(t) {
    const s = 0.1125;
    const p = 0.45;
    return atEdge(t) ? t :
      t < 0.5
        ? 0.5 * elasticIn(t * 2, s, p)
        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
  },
  easeInBack(t) {
    const s = 1.70158;
    return t * t * ((s + 1) * t - s);
  },
  easeOutBack(t) {
    const s = 1.70158;
    return (t -= 1) * t * ((s + 1) * t + s) + 1;
  },
  easeInOutBack(t) {
    let s = 1.70158;
    if ((t /= 0.5) < 1) {
      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
    }
    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
  },
  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),
  easeOutBounce(t) {
    const m = 7.5625;
    const d = 2.75;
    if (t < (1 / d)) {
      return m * t * t;
    }
    if (t < (2 / d)) {
      return m * (t -= (1.5 / d)) * t + 0.75;
    }
    if (t < (2.5 / d)) {
      return m * (t -= (2.25 / d)) * t + 0.9375;
    }
    return m * (t -= (2.625 / d)) * t + 0.984375;
  },
  easeInOutBounce: t => (t < 0.5)
    ? effects.easeInBounce(t * 2) * 0.5
    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,
};

/*!
 * @kurkle/color v0.1.9
 * https://github.com/kurkle/color#readme
 * (c) 2020 Jukka Kurkela
 * Released under the MIT License
 */
const map = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};
const hex = '0123456789ABCDEF';
const h1 = (b) => hex[b & 0xF];
const h2 = (b) => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
const eq = (b) => (((b & 0xF0) >> 4) === (b & 0xF));
function isShort(v) {
	return eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
}
function hexParse(str) {
	var len = str.length;
	var ret;
	if (str[0] === '#') {
		if (len === 4 || len === 5) {
			ret = {
				r: 255 & map[str[1]] * 17,
				g: 255 & map[str[2]] * 17,
				b: 255 & map[str[3]] * 17,
				a: len === 5 ? map[str[4]] * 17 : 255
			};
		} else if (len === 7 || len === 9) {
			ret = {
				r: map[str[1]] << 4 | map[str[2]],
				g: map[str[3]] << 4 | map[str[4]],
				b: map[str[5]] << 4 | map[str[6]],
				a: len === 9 ? (map[str[7]] << 4 | map[str[8]]) : 255
			};
		}
	}
	return ret;
}
function hexString(v) {
	var f = isShort(v) ? h1 : h2;
	return v
		? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '')
		: v;
}
function round(v) {
	return v + 0.5 | 0;
}
const lim = (v, l, h) => Math.max(Math.min(v, h), l);
function p2b(v) {
	return lim(round(v * 2.55), 0, 255);
}
function n2b(v) {
	return lim(round(v * 255), 0, 255);
}
function b2n(v) {
	return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
	return lim(round(v * 100), 0, 100);
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
	const m = RGB_RE.exec(str);
	let a = 255;
	let r, g, b;
	if (!m) {
		return;
	}
	if (m[7] !== r) {
		const v = +m[7];
		a = 255 & (m[8] ? p2b(v) : v * 255);
	}
	r = +m[1];
	g = +m[3];
	b = +m[5];
	r = 255 & (m[2] ? p2b(r) : r);
	g = 255 & (m[4] ? p2b(g) : g);
	b = 255 & (m[6] ? p2b(b) : b);
	return {
		r: r,
		g: g,
		b: b,
		a: a
	};
}
function rgbString(v) {
	return v && (
		v.a < 255
			? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`
			: `rgb(${v.r}, ${v.g}, ${v.b})`
	);
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h, s, l) {
	const a = s * Math.min(l, 1 - l);
	const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
	return [f(0), f(8), f(4)];
}
function hsv2rgbn(h, s, v) {
	const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
	return [f(5), f(3), f(1)];
}
function hwb2rgbn(h, w, b) {
	const rgb = hsl2rgbn(h, 1, 0.5);
	let i;
	if (w + b > 1) {
		i = 1 / (w + b);
		w *= i;
		b *= i;
	}
	for (i = 0; i < 3; i++) {
		rgb[i] *= 1 - w - b;
		rgb[i] += w;
	}
	return rgb;
}
function rgb2hsl(v) {
	const range = 255;
	const r = v.r / range;
	const g = v.g / range;
	const b = v.b / range;
	const max = Math.max(r, g, b);
	const min = Math.min(r, g, b);
	const l = (max + min) / 2;
	let h, s, d;
	if (max !== min) {
		d = max - min;
		s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
		h = max === r
			? ((g - b) / d) + (g < b ? 6 : 0)
			: max === g
				? (b - r) / d + 2
				: (r - g) / d + 4;
		h = h * 60 + 0.5;
	}
	return [h | 0, s || 0, l];
}
function calln(f, a, b, c) {
	return (
		Array.isArray(a)
			? f(a[0], a[1], a[2])
			: f(a, b, c)
	).map(n2b);
}
function hsl2rgb(h, s, l) {
	return calln(hsl2rgbn, h, s, l);
}
function hwb2rgb(h, w, b) {
	return calln(hwb2rgbn, h, w, b);
}
function hsv2rgb(h, s, v) {
	return calln(hsv2rgbn, h, s, v);
}
function hue(h) {
	return (h % 360 + 360) % 360;
}
function hueParse(str) {
	const m = HUE_RE.exec(str);
	let a = 255;
	let v;
	if (!m) {
		return;
	}
	if (m[5] !== v) {
		a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
	}
	const h = hue(+m[2]);
	const p1 = +m[3] / 100;
	const p2 = +m[4] / 100;
	if (m[1] === 'hwb') {
		v = hwb2rgb(h, p1, p2);
	} else if (m[1] === 'hsv') {
		v = hsv2rgb(h, p1, p2);
	} else {
		v = hsl2rgb(h, p1, p2);
	}
	return {
		r: v[0],
		g: v[1],
		b: v[2],
		a: a
	};
}
function rotate(v, deg) {
	var h = rgb2hsl(v);
	h[0] = hue(h[0] + deg);
	h = hsl2rgb(h);
	v.r = h[0];
	v.g = h[1];
	v.b = h[2];
}
function hslString(v) {
	if (!v) {
		return;
	}
	const a = rgb2hsl(v);
	const h = a[0];
	const s = n2p(a[1]);
	const l = n2p(a[2]);
	return v.a < 255
		? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`
		: `hsl(${h}, ${s}%, ${l}%)`;
}
const map$1 = {
	x: 'dark',
	Z: 'light',
	Y: 're',
	X: 'blu',
	W: 'gr',
	V: 'medium',
	U: 'slate',
	A: 'ee',
	T: 'ol',
	S: 'or',
	B: 'ra',
	C: 'lateg',
	D: 'ights',
	R: 'in',
	Q: 'turquois',
	E: 'hi',
	P: 'ro',
	O: 'al',
	N: 'le',
	M: 'de',
	L: 'yello',
	F: 'en',
	K: 'ch',
	G: 'arks',
	H: 'ea',
	I: 'ightg',
	J: 'wh'
};
const names = {
	OiceXe: 'f0f8ff',
	antiquewEte: 'faebd7',
	aqua: 'ffff',
	aquamarRe: '7fffd4',
	azuY: 'f0ffff',
	beige: 'f5f5dc',
	bisque: 'ffe4c4',
	black: '0',
	blanKedOmond: 'ffebcd',
	Xe: 'ff',
	XeviTet: '8a2be2',
	bPwn: 'a52a2a',
	burlywood: 'deb887',
	caMtXe: '5f9ea0',
	KartYuse: '7fff00',
	KocTate: 'd2691e',
	cSO: 'ff7f50',
	cSnflowerXe: '6495ed',
	cSnsilk: 'fff8dc',
	crimson: 'dc143c',
	cyan: 'ffff',
	xXe: '8b',
	xcyan: '8b8b',
	xgTMnPd: 'b8860b',
	xWay: 'a9a9a9',
	xgYF: '6400',
	xgYy: 'a9a9a9',
	xkhaki: 'bdb76b',
	xmagFta: '8b008b',
	xTivegYF: '556b2f',
	xSange: 'ff8c00',
	xScEd: '9932cc',
	xYd: '8b0000',
	xsOmon: 'e9967a',
	xsHgYF: '8fbc8f',
	xUXe: '483d8b',
	xUWay: '2f4f4f',
	xUgYy: '2f4f4f',
	xQe: 'ced1',
	xviTet: '9400d3',
	dAppRk: 'ff1493',
	dApskyXe: 'bfff',
	dimWay: '696969',
	dimgYy: '696969',
	dodgerXe: '1e90ff',
	fiYbrick: 'b22222',
	flSOwEte: 'fffaf0',
	foYstWAn: '228b22',
	fuKsia: 'ff00ff',
	gaRsbSo: 'dcdcdc',
	ghostwEte: 'f8f8ff',
	gTd: 'ffd700',
	gTMnPd: 'daa520',
	Way: '808080',
	gYF: '8000',
	gYFLw: 'adff2f',
	gYy: '808080',
	honeyMw: 'f0fff0',
	hotpRk: 'ff69b4',
	RdianYd: 'cd5c5c',
	Rdigo: '4b0082',
	ivSy: 'fffff0',
	khaki: 'f0e68c',
	lavFMr: 'e6e6fa',
	lavFMrXsh: 'fff0f5',
	lawngYF: '7cfc00',
	NmoncEffon: 'fffacd',
	ZXe: 'add8e6',
	ZcSO: 'f08080',
	Zcyan: 'e0ffff',
	ZgTMnPdLw: 'fafad2',
	ZWay: 'd3d3d3',
	ZgYF: '90ee90',
	ZgYy: 'd3d3d3',
	ZpRk: 'ffb6c1',
	ZsOmon: 'ffa07a',
	ZsHgYF: '20b2aa',
	ZskyXe: '87cefa',
	ZUWay: '778899',
	ZUgYy: '778899',
	ZstAlXe: 'b0c4de',
	ZLw: 'ffffe0',
	lime: 'ff00',
	limegYF: '32cd32',
	lRF: 'faf0e6',
	magFta: 'ff00ff',
	maPon: '800000',
	VaquamarRe: '66cdaa',
	VXe: 'cd',
	VScEd: 'ba55d3',
	VpurpN: '9370db',
	VsHgYF: '3cb371',
	VUXe: '7b68ee',
	VsprRggYF: 'fa9a',
	VQe: '48d1cc',
	VviTetYd: 'c71585',
	midnightXe: '191970',
	mRtcYam: 'f5fffa',
	mistyPse: 'ffe4e1',
	moccasR: 'ffe4b5',
	navajowEte: 'ffdead',
	navy: '80',
	Tdlace: 'fdf5e6',
	Tive: '808000',
	TivedBb: '6b8e23',
	Sange: 'ffa500',
	SangeYd: 'ff4500',
	ScEd: 'da70d6',
	pOegTMnPd: 'eee8aa',
	pOegYF: '98fb98',
	pOeQe: 'afeeee',
	pOeviTetYd: 'db7093',
	papayawEp: 'ffefd5',
	pHKpuff: 'ffdab9',
	peru: 'cd853f',
	pRk: 'ffc0cb',
	plum: 'dda0dd',
	powMrXe: 'b0e0e6',
	purpN: '800080',
	YbeccapurpN: '663399',
	Yd: 'ff0000',
	Psybrown: 'bc8f8f',
	PyOXe: '4169e1',
	saddNbPwn: '8b4513',
	sOmon: 'fa8072',
	sandybPwn: 'f4a460',
	sHgYF: '2e8b57',
	sHshell: 'fff5ee',
	siFna: 'a0522d',
	silver: 'c0c0c0',
	skyXe: '87ceeb',
	UXe: '6a5acd',
	UWay: '708090',
	UgYy: '708090',
	snow: 'fffafa',
	sprRggYF: 'ff7f',
	stAlXe: '4682b4',
	tan: 'd2b48c',
	teO: '8080',
	tEstN: 'd8bfd8',
	tomato: 'ff6347',
	Qe: '40e0d0',
	viTet: 'ee82ee',
	JHt: 'f5deb3',
	wEte: 'ffffff',
	wEtesmoke: 'f5f5f5',
	Lw: 'ffff00',
	LwgYF: '9acd32'
};
function unpack() {
	const unpacked = {};
	const keys = Object.keys(names);
	const tkeys = Object.keys(map$1);
	let i, j, k, ok, nk;
	for (i = 0; i < keys.length; i++) {
		ok = nk = keys[i];
		for (j = 0; j < tkeys.length; j++) {
			k = tkeys[j];
			nk = nk.replace(k, map$1[k]);
		}
		k = parseInt(names[ok], 16);
		unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
	}
	return unpacked;
}
let names$1;
function nameParse(str) {
	if (!names$1) {
		names$1 = unpack();
		names$1.transparent = [0, 0, 0, 0];
	}
	const a = names$1[str.toLowerCase()];
	return a && {
		r: a[0],
		g: a[1],
		b: a[2],
		a: a.length === 4 ? a[3] : 255
	};
}
function modHSL(v, i, ratio) {
	if (v) {
		let tmp = rgb2hsl(v);
		tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
		tmp = hsl2rgb(tmp);
		v.r = tmp[0];
		v.g = tmp[1];
		v.b = tmp[2];
	}
}
function clone(v, proto) {
	return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
	var v = {r: 0, g: 0, b: 0, a: 255};
	if (Array.isArray(input)) {
		if (input.length >= 3) {
			v = {r: input[0], g: input[1], b: input[2], a: 255};
			if (input.length > 3) {
				v.a = n2b(input[3]);
			}
		}
	} else {
		v = clone(input, {r: 0, g: 0, b: 0, a: 1});
		v.a = n2b(v.a);
	}
	return v;
}
function functionParse(str) {
	if (str.charAt(0) === 'r') {
		return rgbParse(str);
	}
	return hueParse(str);
}
class Color {
	constructor(input) {
		if (input instanceof Color) {
			return input;
		}
		const type = typeof input;
		let v;
		if (type === 'object') {
			v = fromObject(input);
		} else if (type === 'string') {
			v = hexParse(input) || nameParse(input) || functionParse(input);
		}
		this._rgb = v;
		this._valid = !!v;
	}
	get valid() {
		return this._valid;
	}
	get rgb() {
		var v = clone(this._rgb);
		if (v) {
			v.a = b2n(v.a);
		}
		return v;
	}
	set rgb(obj) {
		this._rgb = fromObject(obj);
	}
	rgbString() {
		return this._valid ? rgbString(this._rgb) : this._rgb;
	}
	hexString() {
		return this._valid ? hexString(this._rgb) : this._rgb;
	}
	hslString() {
		return this._valid ? hslString(this._rgb) : this._rgb;
	}
	mix(color, weight) {
		const me = this;
		if (color) {
			const c1 = me.rgb;
			const c2 = color.rgb;
			let w2;
			const p = weight === w2 ? 0.5 : weight;
			const w = 2 * p - 1;
			const a = c1.a - c2.a;
			const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
			w2 = 1 - w1;
			c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
			c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
			c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
			c1.a = p * c1.a + (1 - p) * c2.a;
			me.rgb = c1;
		}
		return me;
	}
	clone() {
		return new Color(this.rgb);
	}
	alpha(a) {
		this._rgb.a = n2b(a);
		return this;
	}
	clearer(ratio) {
		const rgb = this._rgb;
		rgb.a *= 1 - ratio;
		return this;
	}
	greyscale() {
		const rgb = this._rgb;
		const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
		rgb.r = rgb.g = rgb.b = val;
		return this;
	}
	opaquer(ratio) {
		const rgb = this._rgb;
		rgb.a *= 1 + ratio;
		return this;
	}
	negate() {
		const v = this._rgb;
		v.r = 255 - v.r;
		v.g = 255 - v.g;
		v.b = 255 - v.b;
		return this;
	}
	lighten(ratio) {
		modHSL(this._rgb, 2, ratio);
		return this;
	}
	darken(ratio) {
		modHSL(this._rgb, 2, -ratio);
		return this;
	}
	saturate(ratio) {
		modHSL(this._rgb, 1, ratio);
		return this;
	}
	desaturate(ratio) {
		modHSL(this._rgb, 1, -ratio);
		return this;
	}
	rotate(deg) {
		rotate(this._rgb, deg);
		return this;
	}
}
function index_esm(input) {
	return new Color(input);
}

const isPatternOrGradient = (value) => value instanceof CanvasGradient || value instanceof CanvasPattern;
function color(value) {
  return isPatternOrGradient(value) ? value : index_esm(value);
}
function getHoverColor(value) {
  return isPatternOrGradient(value)
    ? value
    : index_esm(value).saturate(0.5).darken(0.1).hexString();
}

const overrides = Object.create(null);
const descriptors = Object.create(null);
function getScope$1(node, key) {
  if (!key) {
    return node;
  }
  const keys = key.split('.');
  for (let i = 0, n = keys.length; i < n; ++i) {
    const k = keys[i];
    node = node[k] || (node[k] = Object.create(null));
  }
  return node;
}
function set(root, scope, values) {
  if (typeof scope === 'string') {
    return merge(getScope$1(root, scope), values);
  }
  return merge(getScope$1(root, ''), scope);
}
class Defaults {
  constructor(_descriptors) {
    this.animation = undefined;
    this.backgroundColor = 'rgba(0,0,0,0.1)';
    this.borderColor = 'rgba(0,0,0,0.1)';
    this.color = '#666';
    this.datasets = {};
    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();
    this.elements = {};
    this.events = [
      'mousemove',
      'mouseout',
      'click',
      'touchstart',
      'touchmove'
    ];
    this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: 'normal',
      lineHeight: 1.2,
      weight: null
    };
    this.hover = {};
    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);
    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);
    this.hoverColor = (ctx, options) => getHoverColor(options.color);
    this.indexAxis = 'x';
    this.interaction = {
      mode: 'nearest',
      intersect: true
    };
    this.maintainAspectRatio = true;
    this.onHover = null;
    this.onClick = null;
    this.parsing = true;
    this.plugins = {};
    this.responsive = true;
    this.scale = undefined;
    this.scales = {};
    this.showLine = true;
    this.describe(_descriptors);
  }
  set(scope, values) {
    return set(this, scope, values);
  }
  get(scope) {
    return getScope$1(this, scope);
  }
  describe(scope, values) {
    return set(descriptors, scope, values);
  }
  override(scope, values) {
    return set(overrides, scope, values);
  }
  route(scope, name, targetScope, targetName) {
    const scopeObject = getScope$1(this, scope);
    const targetScopeObject = getScope$1(this, targetScope);
    const privateName = '_' + name;
    Object.defineProperties(scopeObject, {
      [privateName]: {
        value: scopeObject[name],
        writable: true
      },
      [name]: {
        enumerable: true,
        get() {
          const local = this[privateName];
          const target = targetScopeObject[targetName];
          if (isObject(local)) {
            return Object.assign({}, target, local);
          }
          return valueOrDefault(local, target);
        },
        set(value) {
          this[privateName] = value;
        }
      }
    });
  }
}
var defaults = new Defaults({
  _scriptable: (name) => !name.startsWith('on'),
  _indexable: (name) => name !== 'events',
  hover: {
    _fallback: 'interaction'
  },
  interaction: {
    _scriptable: false,
    _indexable: false,
  }
});

function toFontString(font) {
  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
    return null;
  }
  return (font.style ? font.style + ' ' : '')
		+ (font.weight ? font.weight + ' ' : '')
		+ font.size + 'px '
		+ font.family;
}
function _measureText(ctx, data, gc, longest, string) {
  let textWidth = data[string];
  if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
  }
  if (textWidth > longest) {
    longest = textWidth;
  }
  return longest;
}
function _longestText(ctx, font, arrayOfThings, cache) {
  cache = cache || {};
  let data = cache.data = cache.data || {};
  let gc = cache.garbageCollect = cache.garbageCollect || [];
  if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
  }
  ctx.save();
  ctx.font = font;
  let longest = 0;
  const ilen = arrayOfThings.length;
  let i, j, jlen, thing, nestedThing;
  for (i = 0; i < ilen; i++) {
    thing = arrayOfThings[i];
    if (thing !== undefined && thing !== null && isArray(thing) !== true) {
      longest = _measureText(ctx, data, gc, longest, thing);
    } else if (isArray(thing)) {
      for (j = 0, jlen = thing.length; j < jlen; j++) {
        nestedThing = thing[j];
        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {
          longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
      }
    }
  }
  ctx.restore();
  const gcLen = gc.length / 2;
  if (gcLen > arrayOfThings.length) {
    for (i = 0; i < gcLen; i++) {
      delete data[gc[i]];
    }
    gc.splice(0, gcLen);
  }
  return longest;
}
function _alignPixel(chart, pixel, width) {
  const devicePixelRatio = chart.currentDevicePixelRatio;
  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
function clearCanvas(canvas, ctx) {
  ctx = ctx || canvas.getContext('2d');
  ctx.save();
  ctx.resetTransform();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.restore();
}
function drawPoint(ctx, options, x, y) {
  let type, xOffset, yOffset, size, cornerRadius;
  const style = options.pointStyle;
  const rotation = options.rotation;
  const radius = options.radius;
  let rad = (rotation || 0) * RAD_PER_DEG;
  if (style && typeof style === 'object') {
    type = style.toString();
    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(rad);
      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
      ctx.restore();
      return;
    }
  }
  if (isNaN(radius) || radius <= 0) {
    return;
  }
  ctx.beginPath();
  switch (style) {
  default:
    ctx.arc(x, y, radius, 0, TAU);
    ctx.closePath();
    break;
  case 'triangle':
    ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    rad += TWO_THIRDS_PI;
    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    rad += TWO_THIRDS_PI;
    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    ctx.closePath();
    break;
  case 'rectRounded':
    cornerRadius = radius * 0.516;
    size = radius - cornerRadius;
    xOffset = Math.cos(rad + QUARTER_PI) * size;
    yOffset = Math.sin(rad + QUARTER_PI) * size;
    ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
    ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
    ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
    ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
    ctx.closePath();
    break;
  case 'rect':
    if (!rotation) {
      size = Math.SQRT1_2 * radius;
      ctx.rect(x - size, y - size, 2 * size, 2 * size);
      break;
    }
    rad += QUARTER_PI;
  case 'rectRot':
    xOffset = Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + yOffset, y - xOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.lineTo(x - yOffset, y + xOffset);
    ctx.closePath();
    break;
  case 'crossRot':
    rad += QUARTER_PI;
  case 'cross':
    xOffset = Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.moveTo(x + yOffset, y - xOffset);
    ctx.lineTo(x - yOffset, y + xOffset);
    break;
  case 'star':
    xOffset = Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.moveTo(x + yOffset, y - xOffset);
    ctx.lineTo(x - yOffset, y + xOffset);
    rad += QUARTER_PI;
    xOffset = Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.moveTo(x + yOffset, y - xOffset);
    ctx.lineTo(x - yOffset, y + xOffset);
    break;
  case 'line':
    xOffset = Math.cos(rad) * radius;
    yOffset = Math.sin(rad) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    break;
  case 'dash':
    ctx.moveTo(x, y);
    ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
    break;
  }
  ctx.fill();
  if (options.borderWidth > 0) {
    ctx.stroke();
  }
}
function _isPointInArea(point, area, margin) {
  margin = margin || 0.5;
  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&
		point.y > area.top - margin && point.y < area.bottom + margin);
}
function clipArea(ctx, area) {
  ctx.save();
  ctx.beginPath();
  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  ctx.clip();
}
function unclipArea(ctx) {
  ctx.restore();
}
function _steppedLineTo(ctx, previous, target, flip, mode) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  if (mode === 'middle') {
    const midpoint = (previous.x + target.x) / 2.0;
    ctx.lineTo(midpoint, previous.y);
    ctx.lineTo(midpoint, target.y);
  } else if (mode === 'after' !== !!flip) {
    ctx.lineTo(previous.x, target.y);
  } else {
    ctx.lineTo(target.x, previous.y);
  }
  ctx.lineTo(target.x, target.y);
}
function _bezierCurveTo(ctx, previous, target, flip) {
  if (!previous) {
    return ctx.lineTo(target.x, target.y);
  }
  ctx.bezierCurveTo(
    flip ? previous.cp1x : previous.cp2x,
    flip ? previous.cp1y : previous.cp2y,
    flip ? target.cp2x : target.cp1x,
    flip ? target.cp2y : target.cp1y,
    target.x,
    target.y);
}
function renderText(ctx, text, x, y, font, opts = {}) {
  const lines = isArray(text) ? text : [text];
  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';
  let i, line;
  ctx.save();
  ctx.font = font.string;
  setRenderOpts(ctx, opts);
  for (i = 0; i < lines.length; ++i) {
    line = lines[i];
    if (stroke) {
      if (opts.strokeColor) {
        ctx.strokeStyle = opts.strokeColor;
      }
      if (!isNullOrUndef(opts.strokeWidth)) {
        ctx.lineWidth = opts.strokeWidth;
      }
      ctx.strokeText(line, x, y, opts.maxWidth);
    }
    ctx.fillText(line, x, y, opts.maxWidth);
    decorateText(ctx, x, y, line, opts);
    y += font.lineHeight;
  }
  ctx.restore();
}
function setRenderOpts(ctx, opts) {
  if (opts.translation) {
    ctx.translate(opts.translation[0], opts.translation[1]);
  }
  if (!isNullOrUndef(opts.rotation)) {
    ctx.rotate(opts.rotation);
  }
  if (opts.color) {
    ctx.fillStyle = opts.color;
  }
  if (opts.textAlign) {
    ctx.textAlign = opts.textAlign;
  }
  if (opts.textBaseline) {
    ctx.textBaseline = opts.textBaseline;
  }
}
function decorateText(ctx, x, y, line, opts) {
  if (opts.strikethrough || opts.underline) {
    const metrics = ctx.measureText(line);
    const left = x - metrics.actualBoundingBoxLeft;
    const right = x + metrics.actualBoundingBoxRight;
    const top = y - metrics.actualBoundingBoxAscent;
    const bottom = y + metrics.actualBoundingBoxDescent;
    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
    ctx.strokeStyle = ctx.fillStyle;
    ctx.beginPath();
    ctx.lineWidth = opts.decorationWidth || 2;
    ctx.moveTo(left, yDecoration);
    ctx.lineTo(right, yDecoration);
    ctx.stroke();
  }
}
function addRoundedRectPath(ctx, rect) {
  const {x, y, w, h, radius} = rect;
  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);
  ctx.lineTo(x, y + h - radius.bottomLeft);
  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
  ctx.lineTo(x + w - radius.bottomRight, y + h);
  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
  ctx.lineTo(x + w, y + radius.topRight);
  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
  ctx.lineTo(x + radius.topLeft, y);
}

const LINE_HEIGHT = new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
const FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);
function toLineHeight(value, size) {
  const matches = ('' + value).match(LINE_HEIGHT);
  if (!matches || matches[1] === 'normal') {
    return size * 1.2;
  }
  value = +matches[2];
  switch (matches[3]) {
  case 'px':
    return value;
  case '%':
    value /= 100;
    break;
  }
  return size * value;
}
const numberOrZero = v => +v || 0;
function _readValueToProps(value, props) {
  const ret = {};
  const objProps = isObject(props);
  const keys = objProps ? Object.keys(props) : props;
  const read = isObject(value)
    ? objProps
      ? prop => valueOrDefault(value[prop], value[props[prop]])
      : prop => value[prop]
    : () => value;
  for (const prop of keys) {
    ret[prop] = numberOrZero(read(prop));
  }
  return ret;
}
function toTRBL(value) {
  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});
}
function toTRBLCorners(value) {
  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);
}
function toPadding(value) {
  const obj = toTRBL(value);
  obj.width = obj.left + obj.right;
  obj.height = obj.top + obj.bottom;
  return obj;
}
function toFont(options, fallback) {
  options = options || {};
  fallback = fallback || defaults.font;
  let size = valueOrDefault(options.size, fallback.size);
  if (typeof size === 'string') {
    size = parseInt(size, 10);
  }
  let style = valueOrDefault(options.style, fallback.style);
  if (style && !('' + style).match(FONT_STYLE)) {
    console.warn('Invalid font style specified: "' + style + '"');
    style = '';
  }
  const font = {
    family: valueOrDefault(options.family, fallback.family),
    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
    size,
    style,
    weight: valueOrDefault(options.weight, fallback.weight),
    string: ''
  };
  font.string = toFontString(font);
  return font;
}
function resolve(inputs, context, index, info) {
  let cacheable = true;
  let i, ilen, value;
  for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    value = inputs[i];
    if (value === undefined) {
      continue;
    }
    if (context !== undefined && typeof value === 'function') {
      value = value(context);
      cacheable = false;
    }
    if (index !== undefined && isArray(value)) {
      value = value[index % value.length];
      cacheable = false;
    }
    if (value !== undefined) {
      if (info && !cacheable) {
        info.cacheable = false;
      }
      return value;
    }
  }
}
function _addGrace(minmax, grace) {
  const {min, max} = minmax;
  return {
    min: min - Math.abs(toDimension(grace, min)),
    max: max + toDimension(grace, max)
  };
}

function _lookup(table, value, cmp) {
  cmp = cmp || ((index) => table[index] < value);
  let hi = table.length - 1;
  let lo = 0;
  let mid;
  while (hi - lo > 1) {
    mid = (lo + hi) >> 1;
    if (cmp(mid)) {
      lo = mid;
    } else {
      hi = mid;
    }
  }
  return {lo, hi};
}
const _lookupByKey = (table, key, value) =>
  _lookup(table, value, index => table[index][key] < value);
const _rlookupByKey = (table, key, value) =>
  _lookup(table, value, index => table[index][key] >= value);
function _filterBetween(values, min, max) {
  let start = 0;
  let end = values.length;
  while (start < end && values[start] < min) {
    start++;
  }
  while (end > start && values[end - 1] > max) {
    end--;
  }
  return start > 0 || end < values.length
    ? values.slice(start, end)
    : values;
}
const arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
function listenArrayEvents(array, listener) {
  if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
  }
  Object.defineProperty(array, '_chartjs', {
    configurable: true,
    enumerable: false,
    value: {
      listeners: [listener]
    }
  });
  arrayEvents.forEach((key) => {
    const method = '_onData' + _capitalize(key);
    const base = array[key];
    Object.defineProperty(array, key, {
      configurable: true,
      enumerable: false,
      value(...args) {
        const res = base.apply(this, args);
        array._chartjs.listeners.forEach((object) => {
          if (typeof object[method] === 'function') {
            object[method](...args);
          }
        });
        return res;
      }
    });
  });
}
function unlistenArrayEvents(array, listener) {
  const stub = array._chartjs;
  if (!stub) {
    return;
  }
  const listeners = stub.listeners;
  const index = listeners.indexOf(listener);
  if (index !== -1) {
    listeners.splice(index, 1);
  }
  if (listeners.length > 0) {
    return;
  }
  arrayEvents.forEach((key) => {
    delete array[key];
  });
  delete array._chartjs;
}
function _arrayUnique(items) {
  const set = new Set();
  let i, ilen;
  for (i = 0, ilen = items.length; i < ilen; ++i) {
    set.add(items[i]);
  }
  if (set.size === ilen) {
    return items;
  }
  return Array.from(set);
}

function _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {
  if (!defined(fallback)) {
    fallback = _resolve('_fallback', scopes);
  }
  const cache = {
    [Symbol.toStringTag]: 'Object',
    _cacheable: true,
    _scopes: scopes,
    _rootScopes: rootScopes,
    _fallback: fallback,
    _getTarget: getTarget,
    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),
  };
  return new Proxy(cache, {
    deleteProperty(target, prop) {
      delete target[prop];
      delete target._keys;
      delete scopes[0][prop];
      return true;
    },
    get(target, prop) {
      return _cached(target, prop,
        () => _resolveWithPrefixes(prop, prefixes, scopes, target));
    },
    getOwnPropertyDescriptor(target, prop) {
      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
    },
    getPrototypeOf() {
      return Reflect.getPrototypeOf(scopes[0]);
    },
    has(target, prop) {
      return getKeysFromAllScopes(target).includes(prop);
    },
    ownKeys(target) {
      return getKeysFromAllScopes(target);
    },
    set(target, prop, value) {
      const storage = target._storage || (target._storage = getTarget());
      storage[prop] = value;
      delete target[prop];
      delete target._keys;
      return true;
    }
  });
}
function _attachContext(proxy, context, subProxy, descriptorDefaults) {
  const cache = {
    _cacheable: false,
    _proxy: proxy,
    _context: context,
    _subProxy: subProxy,
    _stack: new Set(),
    _descriptors: _descriptors(proxy, descriptorDefaults),
    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),
    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
  };
  return new Proxy(cache, {
    deleteProperty(target, prop) {
      delete target[prop];
      delete proxy[prop];
      return true;
    },
    get(target, prop, receiver) {
      return _cached(target, prop,
        () => _resolveWithContext(target, prop, receiver));
    },
    getOwnPropertyDescriptor(target, prop) {
      return target._descriptors.allKeys
        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined
        : Reflect.getOwnPropertyDescriptor(proxy, prop);
    },
    getPrototypeOf() {
      return Reflect.getPrototypeOf(proxy);
    },
    has(target, prop) {
      return Reflect.has(proxy, prop);
    },
    ownKeys() {
      return Reflect.ownKeys(proxy);
    },
    set(target, prop, value) {
      proxy[prop] = value;
      delete target[prop];
      return true;
    }
  });
}
function _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {
  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;
  return {
    allKeys: _allKeys,
    scriptable: _scriptable,
    indexable: _indexable,
    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,
    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable
  };
}
const readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters';
function _cached(target, prop, resolve) {
  let value = target[prop];
  if (defined(value)) {
    return value;
  }
  value = resolve();
  if (defined(value)) {
    target[prop] = value;
  }
  return value;
}
function _resolveWithContext(target, prop, receiver) {
  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;
  let value = _proxy[prop];
  if (isFunction(value) && descriptors.isScriptable(prop)) {
    value = _resolveScriptable(prop, value, target, receiver);
  }
  if (isArray(value) && value.length) {
    value = _resolveArray(prop, value, target, descriptors.isIndexable);
  }
  if (needsSubResolver(prop, value)) {
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
  }
  return value;
}
function _resolveScriptable(prop, value, target, receiver) {
  const {_proxy, _context, _subProxy, _stack} = target;
  if (_stack.has(prop)) {
    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);
  }
  _stack.add(prop);
  value = value(_context, _subProxy || receiver);
  _stack.delete(prop);
  if (isObject(value)) {
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
  }
  return value;
}
function _resolveArray(prop, value, target, isIndexable) {
  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;
  if (defined(_context.index) && isIndexable(prop)) {
    value = value[_context.index % value.length];
  } else if (isObject(value[0])) {
    const arr = value;
    const scopes = _proxy._scopes.filter(s => s !== arr);
    value = [];
    for (const item of arr) {
      const resolver = createSubResolver(scopes, _proxy, prop, item);
      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
    }
  }
  return value;
}
function resolveFallback(fallback, prop, value) {
  return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent) => key === true ? parent
  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;
function addScopes(set, parentScopes, key, parentFallback) {
  for (const parent of parentScopes) {
    const scope = getScope(key, parent);
    if (scope) {
      set.add(scope);
      const fallback = resolveFallback(scope._fallback, key, scope);
      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {
        return fallback;
      }
    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {
      return null;
    }
  }
  return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
  const rootScopes = resolver._rootScopes;
  const fallback = resolveFallback(resolver._fallback, prop, value);
  const allScopes = [...parentScopes, ...rootScopes];
  const set = new Set();
  set.add(value);
  let key = addScopesFromKey(set, allScopes, prop, fallback || prop);
  if (key === null) {
    return false;
  }
  if (defined(fallback) && fallback !== prop) {
    key = addScopesFromKey(set, allScopes, fallback, key);
    if (key === null) {
      return false;
    }
  }
  return _createResolver(Array.from(set), [''], rootScopes, fallback,
    () => subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set, allScopes, key, fallback) {
  while (key) {
    key = addScopes(set, allScopes, key, fallback);
  }
  return key;
}
function subGetTarget(resolver, prop, value) {
  const parent = resolver._getTarget();
  if (!(prop in parent)) {
    parent[prop] = {};
  }
  const target = parent[prop];
  if (isArray(target) && isObject(value)) {
    return value;
  }
  return target;
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
  let value;
  for (const prefix of prefixes) {
    value = _resolve(readKey(prefix, prop), scopes);
    if (defined(value)) {
      return needsSubResolver(prop, value)
        ? createSubResolver(scopes, proxy, prop, value)
        : value;
    }
  }
}
function _resolve(key, scopes) {
  for (const scope of scopes) {
    if (!scope) {
      continue;
    }
    const value = scope[key];
    if (defined(value)) {
      return value;
    }
  }
}
function getKeysFromAllScopes(target) {
  let keys = target._keys;
  if (!keys) {
    keys = target._keys = resolveKeysFromAllScopes(target._scopes);
  }
  return keys;
}
function resolveKeysFromAllScopes(scopes) {
  const set = new Set();
  for (const scope of scopes) {
    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {
      set.add(key);
    }
  }
  return Array.from(set);
}

const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i) => i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';
function splineCurve(firstPoint, middlePoint, afterPoint, t) {
  const previous = firstPoint.skip ? middlePoint : firstPoint;
  const current = middlePoint;
  const next = afterPoint.skip ? middlePoint : afterPoint;
  const d01 = distanceBetweenPoints(current, previous);
  const d12 = distanceBetweenPoints(next, current);
  let s01 = d01 / (d01 + d12);
  let s12 = d12 / (d01 + d12);
  s01 = isNaN(s01) ? 0 : s01;
  s12 = isNaN(s12) ? 0 : s12;
  const fa = t * s01;
  const fb = t * s12;
  return {
    previous: {
      x: current.x - fa * (next.x - previous.x),
      y: current.y - fa * (next.y - previous.y)
    },
    next: {
      x: current.x + fb * (next.x - previous.x),
      y: current.y + fb * (next.y - previous.y)
    }
  };
}
function monotoneAdjust(points, deltaK, mK) {
  const pointsLen = points.length;
  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen - 1; ++i) {
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent || !pointAfter) {
      continue;
    }
    if (almostEquals(deltaK[i], 0, EPSILON)) {
      mK[i] = mK[i + 1] = 0;
      continue;
    }
    alphaK = mK[i] / deltaK[i];
    betaK = mK[i + 1] / deltaK[i];
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
      continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    mK[i] = alphaK * tauK * deltaK[i];
    mK[i + 1] = betaK * tauK * deltaK[i];
  }
}
function monotoneCompute(points, mK, indexAxis = 'x') {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  let delta, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (let i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    const iPixel = pointCurrent[indexAxis];
    const vPixel = pointCurrent[valueAxis];
    if (pointBefore) {
      delta = (iPixel - pointBefore[indexAxis]) / 3;
      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
    }
    if (pointAfter) {
      delta = (pointAfter[indexAxis] - iPixel) / 3;
      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
    }
  }
}
function splineCurveMonotone(points, indexAxis = 'x') {
  const valueAxis = getValueAxis(indexAxis);
  const pointsLen = points.length;
  const deltaK = Array(pointsLen).fill(0);
  const mK = Array(pointsLen);
  let i, pointBefore, pointCurrent;
  let pointAfter = getPoint(points, 0);
  for (i = 0; i < pointsLen; ++i) {
    pointBefore = pointCurrent;
    pointCurrent = pointAfter;
    pointAfter = getPoint(points, i + 1);
    if (!pointCurrent) {
      continue;
    }
    if (pointAfter) {
      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
    }
    mK[i] = !pointBefore ? deltaK[i]
      : !pointAfter ? deltaK[i - 1]
      : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0
      : (deltaK[i - 1] + deltaK[i]) / 2;
  }
  monotoneAdjust(points, deltaK, mK);
  monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
  return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
  let i, ilen, point, inArea, inAreaPrev;
  let inAreaNext = _isPointInArea(points[0], area);
  for (i = 0, ilen = points.length; i < ilen; ++i) {
    inAreaPrev = inArea;
    inArea = inAreaNext;
    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
    if (!inArea) {
      continue;
    }
    point = points[i];
    if (inAreaPrev) {
      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
    }
    if (inAreaNext) {
      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
    }
  }
}
function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
  let i, ilen, point, controlPoints;
  if (options.spanGaps) {
    points = points.filter((pt) => !pt.skip);
  }
  if (options.cubicInterpolationMode === 'monotone') {
    splineCurveMonotone(points, indexAxis);
  } else {
    let prev = loop ? points[points.length - 1] : points[0];
    for (i = 0, ilen = points.length; i < ilen; ++i) {
      point = points[i];
      controlPoints = splineCurve(
        prev,
        point,
        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],
        options.tension
      );
      point.cp1x = controlPoints.previous.x;
      point.cp1y = controlPoints.previous.y;
      point.cp2x = controlPoints.next.x;
      point.cp2y = controlPoints.next.y;
      prev = point;
    }
  }
  if (options.capBezierPoints) {
    capBezierPoints(points, area);
  }
}

function _isDomSupported() {
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}
function _getParentNode(domNode) {
  let parent = domNode.parentNode;
  if (parent && parent.toString() === '[object ShadowRoot]') {
    parent = parent.host;
  }
  return parent;
}
function parseMaxStyle(styleValue, node, parentProperty) {
  let valueInPixels;
  if (typeof styleValue === 'string') {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf('%') !== -1) {
      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
  } else {
    valueInPixels = styleValue;
  }
  return valueInPixels;
}
const getComputedStyle = (element) => window.getComputedStyle(element, null);
function getStyle(el, property) {
  return getComputedStyle(el).getPropertyValue(property);
}
const positions = ['top', 'right', 'bottom', 'left'];
function getPositionedStyle(styles, style, suffix) {
  const result = {};
  suffix = suffix ? '-' + suffix : '';
  for (let i = 0; i < 4; i++) {
    const pos = positions[i];
    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;
  }
  result.width = result.left + result.right;
  result.height = result.top + result.bottom;
  return result;
}
const useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);
function getCanvasPosition(evt, canvas) {
  const e = evt.native || evt;
  const touches = e.touches;
  const source = touches && touches.length ? touches[0] : e;
  const {offsetX, offsetY} = source;
  let box = false;
  let x, y;
  if (useOffsetPos(offsetX, offsetY, e.target)) {
    x = offsetX;
    y = offsetY;
  } else {
    const rect = canvas.getBoundingClientRect();
    x = source.clientX - rect.left;
    y = source.clientY - rect.top;
    box = true;
  }
  return {x, y, box};
}
function getRelativePosition(evt, chart) {
  const {canvas, currentDevicePixelRatio} = chart;
  const style = getComputedStyle(canvas);
  const borderBox = style.boxSizing === 'border-box';
  const paddings = getPositionedStyle(style, 'padding');
  const borders = getPositionedStyle(style, 'border', 'width');
  const {x, y, box} = getCanvasPosition(evt, canvas);
  const xOffset = paddings.left + (box && borders.left);
  const yOffset = paddings.top + (box && borders.top);
  let {width, height} = chart;
  if (borderBox) {
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  return {
    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
  };
}
function getContainerSize(canvas, width, height) {
  let maxWidth, maxHeight;
  if (width === undefined || height === undefined) {
    const container = _getParentNode(canvas);
    if (!container) {
      width = canvas.clientWidth;
      height = canvas.clientHeight;
    } else {
      const rect = container.getBoundingClientRect();
      const containerStyle = getComputedStyle(container);
      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');
      const containerPadding = getPositionedStyle(containerStyle, 'padding');
      width = rect.width - containerPadding.width - containerBorder.width;
      height = rect.height - containerPadding.height - containerBorder.height;
      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');
      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');
    }
  }
  return {
    width,
    height,
    maxWidth: maxWidth || INFINITY,
    maxHeight: maxHeight || INFINITY
  };
}
const round1 = v => Math.round(v * 10) / 10;
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
  const style = getComputedStyle(canvas);
  const margins = getPositionedStyle(style, 'margin');
  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;
  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;
  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
  let {width, height} = containerSize;
  if (style.boxSizing === 'content-box') {
    const borders = getPositionedStyle(style, 'border', 'width');
    const paddings = getPositionedStyle(style, 'padding');
    width -= paddings.width + borders.width;
    height -= paddings.height + borders.height;
  }
  width = Math.max(0, width - margins.width);
  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);
  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
  if (width && !height) {
    height = round1(width / 2);
  }
  return {
    width,
    height
  };
}
function retinaScale(chart, forceRatio, forceStyle) {
  const pixelRatio = forceRatio || 1;
  const deviceHeight = Math.floor(chart.height * pixelRatio);
  const deviceWidth = Math.floor(chart.width * pixelRatio);
  chart.height = deviceHeight / pixelRatio;
  chart.width = deviceWidth / pixelRatio;
  const canvas = chart.canvas;
  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {
    canvas.style.height = `${chart.height}px`;
    canvas.style.width = `${chart.width}px`;
  }
  if (chart.currentDevicePixelRatio !== pixelRatio
      || canvas.height !== deviceHeight
      || canvas.width !== deviceWidth) {
    chart.currentDevicePixelRatio = pixelRatio;
    canvas.height = deviceHeight;
    canvas.width = deviceWidth;
    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
    return true;
  }
  return false;
}
const supportsEventListenerOptions = (function() {
  let passiveSupported = false;
  try {
    const options = {
      get passive() {
        passiveSupported = true;
        return false;
      }
    };
    window.addEventListener('test', null, options);
    window.removeEventListener('test', null, options);
  } catch (e) {
  }
  return passiveSupported;
}());
function readUsedSize(element, property) {
  const value = getStyle(element, property);
  const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  return matches ? +matches[1] : undefined;
}

function _pointInLine(p1, p2, t, mode) {
  return {
    x: p1.x + t * (p2.x - p1.x),
    y: p1.y + t * (p2.y - p1.y)
  };
}
function _steppedInterpolation(p1, p2, t, mode) {
  return {
    x: p1.x + t * (p2.x - p1.x),
    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y
    : mode === 'after' ? t < 1 ? p1.y : p2.y
    : t > 0 ? p2.y : p1.y
  };
}
function _bezierInterpolation(p1, p2, t, mode) {
  const cp1 = {x: p1.cp2x, y: p1.cp2y};
  const cp2 = {x: p2.cp1x, y: p2.cp1y};
  const a = _pointInLine(p1, cp1, t);
  const b = _pointInLine(cp1, cp2, t);
  const c = _pointInLine(cp2, p2, t);
  const d = _pointInLine(a, b, t);
  const e = _pointInLine(b, c, t);
  return _pointInLine(d, e, t);
}

const intlCache = new Map();
function getNumberFormat(locale, options) {
  options = options || {};
  const cacheKey = locale + JSON.stringify(options);
  let formatter = intlCache.get(cacheKey);
  if (!formatter) {
    formatter = new Intl.NumberFormat(locale, options);
    intlCache.set(cacheKey, formatter);
  }
  return formatter;
}
function formatNumber(num, locale, options) {
  return getNumberFormat(locale, options).format(num);
}

const getRightToLeftAdapter = function(rectX, width) {
  return {
    x(x) {
      return rectX + rectX + width - x;
    },
    setWidth(w) {
      width = w;
    },
    textAlign(align) {
      if (align === 'center') {
        return align;
      }
      return align === 'right' ? 'left' : 'right';
    },
    xPlus(x, value) {
      return x - value;
    },
    leftForLtr(x, itemWidth) {
      return x - itemWidth;
    },
  };
};
const getLeftToRightAdapter = function() {
  return {
    x(x) {
      return x;
    },
    setWidth(w) {
    },
    textAlign(align) {
      return align;
    },
    xPlus(x, value) {
      return x + value;
    },
    leftForLtr(x, _itemWidth) {
      return x;
    },
  };
};
function getRtlAdapter(rtl, rectX, width) {
  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
  let style, original;
  if (direction === 'ltr' || direction === 'rtl') {
    style = ctx.canvas.style;
    original = [
      style.getPropertyValue('direction'),
      style.getPropertyPriority('direction'),
    ];
    style.setProperty('direction', direction, 'important');
    ctx.prevTextDirection = original;
  }
}
function restoreTextDirection(ctx, original) {
  if (original !== undefined) {
    delete ctx.prevTextDirection;
    ctx.canvas.style.setProperty('direction', original[0], original[1]);
  }
}

function propertyFn(property) {
  if (property === 'angle') {
    return {
      between: _angleBetween,
      compare: _angleDiff,
      normalize: _normalizeAngle,
    };
  }
  return {
    between: (n, s, e) => n >= Math.min(s, e) && n <= Math.max(e, s),
    compare: (a, b) => a - b,
    normalize: x => x
  };
}
function normalizeSegment({start, end, count, loop, style}) {
  return {
    start: start % count,
    end: end % count,
    loop: loop && (end - start + 1) % count === 0,
    style
  };
}
function getSegment(segment, points, bounds) {
  const {property, start: startBound, end: endBound} = bounds;
  const {between, normalize} = propertyFn(property);
  const count = points.length;
  let {start, end, loop} = segment;
  let i, ilen;
  if (loop) {
    start += count;
    end += count;
    for (i = 0, ilen = count; i < ilen; ++i) {
      if (!between(normalize(points[start % count][property]), startBound, endBound)) {
        break;
      }
      start--;
      end--;
    }
    start %= count;
    end %= count;
  }
  if (end < start) {
    end += count;
  }
  return {start, end, loop, style: segment.style};
}
function _boundSegment(segment, points, bounds) {
  if (!bounds) {
    return [segment];
  }
  const {property, start: startBound, end: endBound} = bounds;
  const count = points.length;
  const {compare, between, normalize} = propertyFn(property);
  const {start, end, loop, style} = getSegment(segment, points, bounds);
  const result = [];
  let inside = false;
  let subStart = null;
  let value, point, prevValue;
  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);
  const shouldStart = () => inside || startIsBefore();
  const shouldStop = () => !inside || endIsBefore();
  for (let i = start, prev = start; i <= end; ++i) {
    point = points[i % count];
    if (point.skip) {
      continue;
    }
    value = normalize(point[property]);
    if (value === prevValue) {
      continue;
    }
    inside = between(value, startBound, endBound);
    if (subStart === null && shouldStart()) {
      subStart = compare(value, startBound) === 0 ? i : prev;
    }
    if (subStart !== null && shouldStop()) {
      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));
      subStart = null;
    }
    prev = i;
    prevValue = value;
  }
  if (subStart !== null) {
    result.push(normalizeSegment({start: subStart, end, loop, count, style}));
  }
  return result;
}
function _boundSegments(line, bounds) {
  const result = [];
  const segments = line.segments;
  for (let i = 0; i < segments.length; i++) {
    const sub = _boundSegment(segments[i], line.points, bounds);
    if (sub.length) {
      result.push(...sub);
    }
  }
  return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
  let start = 0;
  let end = count - 1;
  if (loop && !spanGaps) {
    while (start < count && !points[start].skip) {
      start++;
    }
  }
  while (start < count && points[start].skip) {
    start++;
  }
  start %= count;
  if (loop) {
    end += start;
  }
  while (end > start && points[end % count].skip) {
    end--;
  }
  end %= count;
  return {start, end};
}
function solidSegments(points, start, max, loop) {
  const count = points.length;
  const result = [];
  let last = start;
  let prev = points[start];
  let end;
  for (end = start + 1; end <= max; ++end) {
    const cur = points[end % count];
    if (cur.skip || cur.stop) {
      if (!prev.skip) {
        loop = false;
        result.push({start: start % count, end: (end - 1) % count, loop});
        start = last = cur.stop ? end : null;
      }
    } else {
      last = end;
      if (prev.skip) {
        start = end;
      }
    }
    prev = cur;
  }
  if (last !== null) {
    result.push({start: start % count, end: last % count, loop});
  }
  return result;
}
function _computeSegments(line, segmentOptions) {
  const points = line.points;
  const spanGaps = line.options.spanGaps;
  const count = points.length;
  if (!count) {
    return [];
  }
  const loop = !!line._loop;
  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);
  if (spanGaps === true) {
    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);
  }
  const max = end < start ? end + count : end;
  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
  if (!segmentOptions || !segmentOptions.setContext || !points) {
    return segments;
  }
  return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
  const baseStyle = readStyle(line.options);
  const count = points.length;
  const result = [];
  let start = segments[0].start;
  let i = start;
  for (const segment of segments) {
    let prevStyle = baseStyle;
    let prev = points[start % count];
    let style;
    for (i = start + 1; i <= segment.end; i++) {
      const pt = points[i % count];
      style = readStyle(segmentOptions.setContext({
        type: 'segment',
        p0: prev,
        p1: pt,
        p0DataIndex: (i - 1) % count,
        p1DataIndex: i % count,
        datasetIndex: line._datasetIndex
      }));
      if (styleChanged(style, prevStyle)) {
        result.push({start: start, end: i - 1, loop: segment.loop, style: prevStyle});
        prevStyle = style;
        start = i - 1;
      }
      prev = pt;
      prevStyle = style;
    }
    if (start < i - 1) {
      result.push({start, end: i - 1, loop: segment.loop, style});
      start = i - 1;
    }
  }
  return result;
}
function readStyle(options) {
  return {
    backgroundColor: options.backgroundColor,
    borderCapStyle: options.borderCapStyle,
    borderDash: options.borderDash,
    borderDashOffset: options.borderDashOffset,
    borderJoinStyle: options.borderJoinStyle,
    borderWidth: options.borderWidth,
    borderColor: options.borderColor
  };
}
function styleChanged(style, prevStyle) {
  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);
}




/***/ }),

/***/ "./src/adaptivecards-extras.ts":
/*!*************************************!*\
  !*** ./src/adaptivecards-extras.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.registerAllFeatures = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "adaptivecards");
var progress_bar_1 = __webpack_require__(/*! ./progress-bar */ "./src/progress-bar.ts");
var charts_1 = __webpack_require__(/*! ./charts */ "./src/charts.ts");
var list_1 = __webpack_require__(/*! ./list */ "./src/list.ts");
__exportStar(__webpack_require__(/*! ./progress-bar */ "./src/progress-bar.ts"), exports);
__exportStar(__webpack_require__(/*! ./charts */ "./src/charts.ts"), exports);
__exportStar(__webpack_require__(/*! ./list */ "./src/list.ts"), exports);
function registerAllFeatures(elementsRegistry, actionsRegistry) {
    var targetElementRegistry = elementsRegistry ? elementsRegistry : Adaptive.GlobalRegistry.elements;
    targetElementRegistry.register(progress_bar_1.ProgressBar.JsonTypeName, progress_bar_1.ProgressBar, Adaptive.Versions.v1_0);
    targetElementRegistry.register(charts_1.BarChart.JsonTypeName, charts_1.BarChart, Adaptive.Versions.v1_0);
    targetElementRegistry.register(charts_1.PieChart.JsonTypeName, charts_1.PieChart, Adaptive.Versions.v1_0);
    targetElementRegistry.register(list_1.List.JsonTypeName, list_1.List, Adaptive.Versions.v1_0);
}
exports.registerAllFeatures = registerAllFeatures;


/***/ }),

/***/ "./src/charts.ts":
/*!***********************!*\
  !*** ./src/charts.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PieChart = exports.BarChart = exports.ChartBase = exports.Dataset = exports.NumberArrayProperty = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var adaptivecards_1 = __webpack_require__(/*! adaptivecards */ "adaptivecards");
var auto_1 = __webpack_require__(/*! chart.js/auto */ "./node_modules/chart.js/auto/auto.esm.js");
var BackgroundColors = [
    "rgba(255, 99, 132, 0.2)",
    "rgba(54, 162, 235, 0.2)",
    "rgba(255, 206, 86, 0.2)",
    "rgba(75, 192, 192, 0.2)",
    "rgba(153, 102, 255, 0.2)",
    "rgba(255, 159, 64, 0.2)"
];
var BorderColors = [
    "rgba(255, 99, 132, 1)",
    "rgba(54, 162, 235, 1)",
    "rgba(255, 206, 86, 1)",
    "rgba(75, 192, 192, 1)",
    "rgba(153, 102, 255, 1)",
    "rgba(255, 159, 64, 1)"
];
var NumberArrayProperty = /** @class */ (function (_super) {
    __extends(NumberArrayProperty, _super);
    function NumberArrayProperty(targetVersion, name, defaultValue, onGetInitialValue) {
        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;
        _this.targetVersion = targetVersion;
        _this.name = name;
        _this.defaultValue = defaultValue;
        _this.onGetInitialValue = onGetInitialValue;
        return _this;
    }
    NumberArrayProperty.prototype.parse = function (sender, source, context) {
        var sourceValue = source[this.name];
        if (sourceValue === undefined || !Array.isArray(sourceValue)) {
            return this.defaultValue;
        }
        var result = [];
        for (var _i = 0, sourceValue_1 = sourceValue; _i < sourceValue_1.length; _i++) {
            var value = sourceValue_1[_i];
            if (typeof value === "number") {
                result.push(value);
            }
            else {
                context.logParseEvent(sender, adaptivecards_1.ValidationEvent.InvalidPropertyValue, "Invalid array value \"" + value + "\" of type \"" + typeof value + "\" ignored for \"" + this.name + "\".");
            }
        }
        return result;
    };
    NumberArrayProperty.prototype.toJSON = function (sender, target, value, context) {
        context.serializeArray(target, this.name, value);
    };
    return NumberArrayProperty;
}(adaptivecards_1.PropertyDefinition));
exports.NumberArrayProperty = NumberArrayProperty;
var Dataset = /** @class */ (function (_super) {
    __extends(Dataset, _super);
    function Dataset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dataset.prototype.getSchemaKey = function () {
        return "ChartData";
    };
    //#region Schema
    Dataset.labelProperty = new adaptivecards_1.StringProperty(adaptivecards_1.Versions.v1_0, "label");
    Dataset.dataProperty = new NumberArrayProperty(adaptivecards_1.Versions.v1_0, "data");
    __decorate([
        (0, adaptivecards_1.property)(Dataset.labelProperty)
    ], Dataset.prototype, "label", void 0);
    __decorate([
        (0, adaptivecards_1.property)(Dataset.dataProperty)
    ], Dataset.prototype, "data", void 0);
    return Dataset;
}(adaptivecards_1.SerializableObject));
exports.Dataset = Dataset;
var ChartBase = /** @class */ (function (_super) {
    __extends(ChartBase, _super);
    function ChartBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChartBase.prototype.createChartConfiguration = function () {
        if (this.datasets !== undefined) {
            var datasets = [];
            for (var _i = 0, _a = this.datasets; _i < _a.length; _i++) {
                var dataset = _a[_i];
                var datasetConfiguration = dataset.data === undefined ? undefined :
                    {
                        label: dataset.label,
                        data: dataset.data,
                        backgroundColor: BackgroundColors,
                        BorderColors: BorderColors,
                        borderWidth: 1
                    };
                if (datasetConfiguration !== undefined) {
                    datasets.push(datasetConfiguration);
                }
            }
            var result = {
                labels: this.labels,
                datasets: datasets
            };
            console.log("Chart config: " + JSON.stringify(result));
            return result;
        }
        return undefined;
    };
    ChartBase.prototype.internalRender = function () {
        var _this = this;
        var element = document.createElement("div");
        this._resizeObserver = new ResizeObserver(function (entries) {
            if (_this.renderedElement && !_this._chart) {
                var canvas = document.createElement("canvas");
                _this.renderedElement.appendChild(canvas);
                var ctx = canvas.getContext('2d');
                if (ctx !== null) {
                    _this._chart = _this.internalCreateChart(ctx);
                }
            }
        });
        this._resizeObserver.observe(element);
        return element;
    };
    //#region Schema
    ChartBase.labelsProperty = new adaptivecards_1.StringArrayProperty(adaptivecards_1.Versions.v1_0, "labels");
    ChartBase.datasetsProperty = new adaptivecards_1.SerializableObjectCollectionProperty(adaptivecards_1.Versions.v1_0, "datasets", Dataset);
    __decorate([
        (0, adaptivecards_1.property)(ChartBase.labelsProperty)
    ], ChartBase.prototype, "labels", void 0);
    __decorate([
        (0, adaptivecards_1.property)(ChartBase.datasetsProperty)
    ], ChartBase.prototype, "datasets", void 0);
    return ChartBase;
}(adaptivecards_1.CardElement));
exports.ChartBase = ChartBase;
var BarChart = /** @class */ (function (_super) {
    __extends(BarChart, _super);
    function BarChart() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BarChart.prototype.internalCreateChart = function (ctx) {
        var configuration = this.createChartConfiguration();
        console.log("Creating Bar chart with config " + JSON.stringify(configuration));
        return !configuration ? undefined : new auto_1.default(ctx, {
            type: "bar",
            data: configuration
        });
    };
    BarChart.prototype.getJsonTypeName = function () {
        return BarChart.JsonTypeName;
    };
    BarChart.JsonTypeName = "Extras.BarChart";
    return BarChart;
}(ChartBase));
exports.BarChart = BarChart;
var PieChart = /** @class */ (function (_super) {
    __extends(PieChart, _super);
    function PieChart() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PieChart.prototype.internalCreateChart = function (ctx) {
        var configuration = this.createChartConfiguration();
        return !configuration ? undefined : new auto_1.default(ctx, {
            type: "pie",
            data: configuration
        });
    };
    PieChart.prototype.getJsonTypeName = function () {
        return BarChart.JsonTypeName;
    };
    PieChart.JsonTypeName = "Extras.PieChart";
    return PieChart;
}(ChartBase));
exports.PieChart = PieChart;


/***/ }),

/***/ "./src/list.ts":
/*!*********************!*\
  !*** ./src/list.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.List = exports.ItemTemplate = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var adaptivecards_1 = __webpack_require__(/*! adaptivecards */ "adaptivecards");
var adaptivecards_templating_1 = __webpack_require__(/*! adaptivecards-templating */ "./node_modules/adaptivecards-templating/lib/adaptivecards-templating.js");
var ItemTemplate = /** @class */ (function (_super) {
    __extends(ItemTemplate, _super);
    function ItemTemplate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ItemTemplate.prototype.getSchemaKey = function () {
        return "ItemTemplate";
    };
    ItemTemplate.prototype.renderItem = function (parent, item) {
        if (item !== undefined) {
            if (this._preparedTemplate === undefined) {
                this._preparedTemplate = new adaptivecards_templating_1.Template(this.template);
            }
            var expandedTemplate = this._preparedTemplate.expand({ $root: item });
            var serializationContext = new adaptivecards_1.SerializationContext(adaptivecards_1.Versions.latest);
            var parsedElement = serializationContext.parseElement(parent, expandedTemplate, true);
            if (parsedElement !== undefined) {
                return parsedElement.render();
            }
        }
        return undefined;
    };
    //#region Schema
    ItemTemplate.widthThresholdProperty = new adaptivecards_1.NumProperty(adaptivecards_1.Versions.v1_0, "widthThreshold");
    ItemTemplate.templateProperty = new adaptivecards_1.PropertyDefinition(adaptivecards_1.Versions.v1_0, "template");
    __decorate([
        (0, adaptivecards_1.property)(ItemTemplate.widthThresholdProperty)
    ], ItemTemplate.prototype, "widthThreshold", void 0);
    __decorate([
        (0, adaptivecards_1.property)(ItemTemplate.templateProperty)
    ], ItemTemplate.prototype, "template", void 0);
    return ItemTemplate;
}(adaptivecards_1.SerializableObject));
exports.ItemTemplate = ItemTemplate;
var List = /** @class */ (function (_super) {
    __extends(List, _super);
    function List() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    List.prototype.renderItems = function () {
        if (this.renderedElement && this.items !== undefined && this._currentTemplate !== undefined) {
            var itemsArray = Array.isArray(this.items) ? this.items : [this.items];
            this.renderedElement.innerHTML = "";
            var isFirstItem = true;
            for (var _i = 0, itemsArray_1 = itemsArray; _i < itemsArray_1.length; _i++) {
                var item = itemsArray_1[_i];
                var renderedItem = this._currentTemplate.renderItem(this, item);
                if (renderedItem !== undefined) {
                    var itemHost = document.createElement("div");
                    if (!isFirstItem) {
                        itemHost.style.marginTop = "6px";
                    }
                    itemHost.appendChild(renderedItem);
                    this.renderedElement.appendChild(itemHost);
                    isFirstItem = false;
                }
            }
        }
    };
    List.prototype.selectTemplate = function (availableWidth) {
        var result = undefined;
        for (var _i = 0, _a = this.itemTemplates; _i < _a.length; _i++) {
            var itemTemplate = _a[_i];
            if (itemTemplate.widthThreshold === undefined) {
                if (result === undefined || result.widthThreshold === undefined) {
                    result = itemTemplate;
                }
            }
            else if (itemTemplate.widthThreshold >= availableWidth && (result === undefined || result.widthThreshold === undefined || result.widthThreshold > itemTemplate.widthThreshold)) {
                result = itemTemplate;
            }
        }
        return result;
    };
    List.prototype.internalRender = function () {
        var _this = this;
        var element = document.createElement("div");
        element.style.overflowY = "auto";
        if (this.maxHeight !== undefined && this.maxHeight > 0) {
            element.style.maxHeight = this.maxHeight + "px";
        }
        this._resizeObserver = new ResizeObserver(function (entries) {
            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                var entry = entries_1[_i];
                var template = _this.selectTemplate(entry.contentRect.width);
                if (template !== _this._currentTemplate) {
                    _this._currentTemplate = template;
                    _this.renderItems();
                }
            }
        });
        this._resizeObserver.observe(element);
        return element;
    };
    List.prototype.getJsonTypeName = function () {
        return List.JsonTypeName;
    };
    List.JsonTypeName = "Extras.List";
    //#region Schema
    List.itemsProperty = new adaptivecards_1.PropertyDefinition(adaptivecards_1.Versions.v1_0, "items");
    List.itemTemplatesProperty = new adaptivecards_1.SerializableObjectCollectionProperty(adaptivecards_1.Versions.v1_0, "itemTemplates", ItemTemplate);
    List.maxHeightProperty = new adaptivecards_1.NumProperty(adaptivecards_1.Versions.v1_0, "maxHeight");
    __decorate([
        (0, adaptivecards_1.property)(List.itemsProperty)
    ], List.prototype, "items", void 0);
    __decorate([
        (0, adaptivecards_1.property)(List.itemTemplatesProperty)
    ], List.prototype, "itemTemplates", void 0);
    __decorate([
        (0, adaptivecards_1.property)(List.maxHeightProperty)
    ], List.prototype, "maxHeight", void 0);
    return List;
}(adaptivecards_1.CardElement));
exports.List = List;


/***/ }),

/***/ "./src/progress-bar.ts":
/*!*****************************!*\
  !*** ./src/progress-bar.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressBar = void 0;
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "adaptivecards");
var ProgressBar = /** @class */ (function (_super) {
    __extends(ProgressBar, _super);
    function ProgressBar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ProgressBar.prototype, "title", {
        get: function () {
            return this.getValue(ProgressBar.titleProperty);
        },
        set: function (value) {
            if (this.title !== value) {
                this.setValue(ProgressBar.titleProperty, value);
                this.updateLayout();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProgressBar.prototype, "value", {
        get: function () {
            return this.getValue(ProgressBar.valueProperty);
        },
        set: function (value) {
            var adjustedValue = value;
            if (adjustedValue < 0) {
                adjustedValue = 0;
            }
            else if (adjustedValue > 100) {
                adjustedValue = 100;
            }
            if (this.value !== adjustedValue) {
                this.setValue(ProgressBar.valueProperty, adjustedValue);
                this.updateLayout();
            }
        },
        enumerable: false,
        configurable: true
    });
    ProgressBar.prototype.internalRender = function () {
        var element = document.createElement("div");
        var textBlock = new Adaptive.TextBlock();
        textBlock.setParent(this);
        textBlock.text = this.title;
        textBlock.wrap = true;
        this._titleElement = textBlock.render();
        var progressBarElement = document.createElement("div");
        progressBarElement.style.display = "flex";
        this._leftBarElement = document.createElement("div");
        this._leftBarElement.style.height = "6px";
        var emphasisForegroundAccentColor = Adaptive.stringToCssColor(this.hostConfig.containerStyles.emphasis.foregroundColors.accent.default);
        if (emphasisForegroundAccentColor) {
            this._leftBarElement.style.backgroundColor = emphasisForegroundAccentColor;
        }
        this._rightBarElement = document.createElement("div");
        this._rightBarElement.style.height = "6px";
        var emphasisBackgroundColor = Adaptive.stringToCssColor(this.hostConfig.containerStyles.emphasis.backgroundColor);
        if (emphasisBackgroundColor) {
            this._rightBarElement.style.backgroundColor = emphasisBackgroundColor;
        }
        progressBarElement.append(this._leftBarElement, this._rightBarElement);
        if (this._titleElement) {
            this._titleElement.style.marginBottom = "6px";
            element.appendChild(this._titleElement);
        }
        element.appendChild(progressBarElement);
        return element;
    };
    ProgressBar.prototype.getJsonTypeName = function () {
        return ProgressBar.JsonTypeName;
    };
    ProgressBar.prototype.updateLayout = function (processChildren) {
        if (processChildren === void 0) { processChildren = true; }
        _super.prototype.updateLayout.call(this, processChildren);
        if (this.renderedElement) {
            if (this._titleElement) {
                if (!this.title) {
                    this._titleElement.style.display = "none";
                }
                else {
                    this._titleElement.style.removeProperty("display");
                }
            }
            this._leftBarElement.style.flex = "1 1 " + this.value + "%";
            this._rightBarElement.style.flex = "1 1 " + (100 - this.value) + "%";
        }
    };
    ProgressBar.JsonTypeName = "Extras.ProgressBar";
    //#region Schema
    ProgressBar.titleProperty = new Adaptive.StringProperty(Adaptive.Versions.v1_0, "title", true);
    ProgressBar.valueProperty = new Adaptive.NumProperty(Adaptive.Versions.v1_0, "value", 0);
    __decorate([
        Adaptive.property(ProgressBar.titleProperty)
    ], ProgressBar.prototype, "title", null);
    __decorate([
        Adaptive.property(ProgressBar.valueProperty)
    ], ProgressBar.prototype, "value", null);
    return ProgressBar;
}(Adaptive.CardElement));
exports.ProgressBar = ProgressBar;


/***/ }),

/***/ "adaptivecards":
/*!************************************************************************************************!*\
  !*** external {"commonjs2":"adaptivecards","commonjs":"adaptivecards","root":"AdaptiveCards"} ***!
  \************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_adaptivecards__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/adaptivecards-extras.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,